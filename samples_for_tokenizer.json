["def get_even_lists ( VAR ) : NEWLINE STRING NEWLINE return [ VAR for VAR in VAR if all ( VAR % NUMBER == NUMBER for VAR in VAR ) ]", "import itertools as it NEWLINE return sum ( it . imap ( doSomething , originalList ) , [ ] )", "Scanner in = new Scanner ( System . in ) NEWLINE VAR = in . next ( )", "with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( data )", "VAR = { } NEWLINE with open ( STRING , STRING ) as f : NEWLINE header , * descriptions = f . read ( ) . split ( STRING ) NEWLINE for VAR in header . split ( STRING ) : NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE VAR [ VAR . lower ( ) ] = VAR . rstrip ( ) NEWLINE for VAR in descriptions : NEWLINE VAR , VAR = VAR . split ( STRING , NUMBER ) NEWLINE VAR [ VAR [ NUMBER : ] ] = VAR NEWLINE print ( VAR )", "import re NEWLINE VAR = STRING NEWLINE if re . match ( STRING , VAR ) : NEWLINE print STRING NEWLINE else : NEWLINE print STRING", "from functools import wraps NEWLINE import inspect NEWLINE def initializer ( VAR ) : NEWLINE STRING NEWLINE VAR , VAR , VAR , VAR = inspect . getargspec ( VAR ) NEWLINE @ wraps ( VAR ) NEWLINE def wrapper ( VAR , * args , ** kargs ) : NEWLINE for VAR , VAR in list ( zip ( VAR [ NUMBER : ] , args ) ) + list ( kargs . items ( ) ) : NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE for VAR , VAR in zip ( reversed ( VAR ) , reversed ( VAR ) ) : NEWLINE if not hasattr ( VAR , VAR ) : NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE VAR ( VAR , * args , ** kargs ) NEWLINE return wrapper", "VAR = re . sub ( STRING , STRING , VAR )", "{ % for VAR in links % } NEWLINE { { VAR . post_count } } NEWLINE { % endfor % }", "def sequences ( VAR ) : NEWLINE VAR = iter ( VAR ) NEWLINE VAR , VAR = next ( VAR ) , [ ] NEWLINE while VAR is not None : NEWLINE VAR = next ( VAR , None ) NEWLINE if VAR + NUMBER == VAR : NEWLINE VAR . append ( VAR ) NEWLINE elif VAR : NEWLINE yield tuple ( VAR + [ VAR ] ) NEWLINE VAR = [ ] NEWLINE VAR = VAR", "def get_stuff ( ) : NEWLINE return STRING , [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE VAR . extend ( get_stuff ( ) [ NUMBER ] )", ">> > import datetime NEWLINE >> > datetime . datetime . now ( ) NEWLINE datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE >> > import time NEWLINE >> > def mytime ( ) : return NUMBER NEWLINE . . . NEWLINE >> > time . time = mytime NEWLINE >> > datetime . datetime . now ( ) NEWLINE datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "In [ NUMBER ] : Matches NEWLINE Out [ NUMBER ] : [ STRING ] NEWLINE In [ NUMBER ] : int ( * re . findall ( STRING , Matches [ NUMBER ] ) ) NEWLINE Out [ NUMBER ] : NUMBER", "VAR = VAR . lstrip ( STRING )", "In [ NUMBER ] : VAR = np . r_ [ int_colors . ravel ( ) , int_keys ] NEWLINE In [ NUMBER ] : VAR , VAR = np . unique ( VAR , return_inverse = True ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , dtype = uint32 )", "In [ NUMBER ] : a NEWLINE Out [ NUMBER ] : NEWLINE array ( [ ( NUMBER , NUMBER , NUMBER , - NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) ] , dtype = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] ) NEWLINE In [ NUMBER ] : VAR = remove_fields ( a , [ STRING , STRING ] ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , dtype = { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] , STRING : [ NUMBER , NUMBER ] , STRING : NUMBER } )", "def completedefault ( VAR , * ignored ) : NEWLINE readline . set_completer_delims ( STRING ) NEWLINE readline . parse_and_bind ( STRING ) NEWLINE readline . set_completer ( complete )", "[ NUMBER , NUMBER , NUMBER ] NEWLINE Accessed element NUMBER NEWLINE NUMBER NEWLINE Set element NUMBER to NUMBER NEWLINE [ NUMBER , NUMBER , NUMBER ]", "In [ NUMBER ] : VAR = pd . read_clipboard ( sep = STRING , index_col = NUMBER ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE pgtime pgstat age eet g2 grade gleason ploidy NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER diploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NaN NUMBER NUMBER aneuploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER diploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER diploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER tetraploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER diploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN tetraploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NaN NUMBER NUMBER aneuploid NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER diploid", "VAR = [ ] NEWLINE for VAR , VAR in nested_dict . items ( ) : NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE VAR . append ( { STRING : VAR , STRING : VAR , STRING : VAR , STRING : VAR } ) NEWLINE VAR = pd . DataFrame ( VAR )", "In [ NUMBER ] : grouped_dates = df . groupby ( df [ STRING ] . apply ( lambda x : x . date ( ) ) ) NEWLINE In [ NUMBER ] : grouped_dates [ STRING ] . aggregate ( len ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER", "hashlookup : NUMBER s NUMBER % NEWLINE stringcount : NUMBER s NUMBER % NEWLINE log_e : NUMBER s NUMBER % NEWLINE log_2 : NUMBER s NUMBER % NEWLINE olgn : NUMBER s NUMBER % NEWLINE bitcounter : NUMBER s NUMBER %", "< ? xml version = STRING ? > NEWLINE < layers name = STRING meta_type = STRING > NEWLINE < layer name = STRING NEWLINE VAR = STRING / > NEWLINE < / layers >", "import glob NEWLINE VAR = STRING NEWLINE for VAR in glob . glob ( os . VAR . join ( VAR , STRING ) ) : NEWLINE with open ( VAR ) as VAR : NEWLINE print VAR , STRING", ">> > from itertools import product NEWLINE >> > VAR = [ [ STRING , STRING ] , [ STRING , STRING , STRING ] , STRING ] NEWLINE >> > [ STRING . join ( VAR ) for VAR in product ( * VAR ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ]", "class Test2 : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . b ( ) NEWLINE def b ( VAR , VAR ) : NEWLINE print ( STRING ) NEWLINE VAR . VAR . z ( )", "Lead . objects . values ( STRING , STRING , STRING ) . annotate ( Count ( STRING ) )", "while True : NEWLINE VAR = shelve . open ( STRING , writeback = True ) NEWLINE VAR = input ( STRING ) . capitalize ( ) NEWLINE if not VAR or VAR == STRING : NEWLINE break NEWLINE VAR [ STRING ] [ VAR ] = int ( input ( ( STRING ) . format ( VAR ) ) ) NEWLINE VAR [ STRING ] [ VAR ] = float ( input ( ( STRING ) . format ( VAR ) ) ) NEWLINE VAR . sync ( ) NEWLINE VAR . close ( )", "VAR = strftime ( STRING ) NEWLINE print ( STRING % ( VAR ) ) NEWLINE sleep ( NUMBER )", "from msvcrt import getch NEWLINE while True : NEWLINE VAR = ord ( getch ( ) ) NEWLINE if VAR == NUMBER : NEWLINE break NEWLINE elif VAR == NUMBER : NEWLINE select ( ) NEWLINE elif VAR == NUMBER : NEWLINE VAR = ord ( getch ( ) ) NEWLINE if VAR == NUMBER : NEWLINE moveDown ( ) NEWLINE elif VAR == NUMBER : NEWLINE moveUp ( )", "[ STRING , [ [ [ STRING , [ STRING , STRING , NUMBER ] , [ [ STRING ] ] , STRING , [ [ [ STRING ] ] , [ [ STRING ] ] , [ [ STRING ] ] ] ] ] ] ] NEWLINE - section_body : [ [ [ STRING , [ STRING , STRING , NUMBER ] , [ [ STRING ] ] , STRING , [ [ [ STRING ] ] , [ [ STRING ] ] , [ [ STRING ] ] ] ] ] ] NEWLINE - section_name : preview NEWLINE preview NEWLINE IF_ELSE NEWLINE [ STRING , [ STRING , STRING , NUMBER ] , [ [ STRING ] ] , STRING , [ [ [ STRING ] ] , [ [ STRING ] ] , [ [ STRING ] ] ] ] NEWLINE - condition : [ STRING , STRING , NUMBER ] NEWLINE - else : [ [ [ STRING ] ] , [ [ STRING ] ] , [ [ STRING ] ] ] NEWLINE - then : [ [ STRING ] ] NEWLINE - type : DECL NEWLINE [ STRING , [ [ [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] ] ] ] NEWLINE - section_body : [ [ [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] , [ [ STRING , STRING ] ] ] ] NEWLINE - section_name : children NEWLINE children NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : scheme NEWLINE - ref : $ c . d - > scheme NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : host NEWLINE - ref : $ c . d - > host NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : path NEWLINE - ref : $ c . d - > path NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : username NEWLINE - ref : $ c . d - > userName NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : password NEWLINE - ref : $ c . d - > password NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : encodedOriginal NEWLINE - ref : $ c . d - > encodedOriginal NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : query NEWLINE - ref : $ c . d - > query NEWLINE DECL NEWLINE [ STRING , STRING ] NEWLINE - name : fragment NEWLINE - ref : $ c . d - > fragment", "CREATE TABLE questions ( id INTEGER NOT NULL , text VARCHAR NOT NULL , type VARCHAR ( NUMBER ) NOT NULL , PRIMARY KEY ( id ) ) NEWLINE CREATE TABLE answer_options ( id INTEGER NOT NULL , question_id INTEGER NOT NULL , value INTEGER NOT NULL , type VARCHAR ( NUMBER ) NOT NULL , text VARCHAR , input INTEGER , PRIMARY KEY ( id ) , FOREIGN KEY ( question_id ) REFERENCES questions ( id ) ) NEWLINE CREATE TABLE answers ( id INTEGER NOT NULL , type VARCHAR ( NUMBER ) NOT NULL , question_id INTEGER , test_id INTEGER , answer_option_id INTEGER , answer_input INTEGER , PRIMARY KEY ( id ) , FOREIGN KEY ( question_id ) REFERENCES questions ( id ) , FOREIGN KEY ( answer_option_id ) REFERENCES answer_options ( id ) , - - FOREIGN KEY ( test_id ) REFERENCES tests ( id ) )", "Python Programming Language Official Website ( http : // www . python . org / ) NEWLINE Python - Image Results ( http : // images . search . yahoo . com / search / images ? _adv_prop = image & va = python ) NEWLINE Python ( programming language ) - Wikipedia , the free encyclopedia ( http : // en . wikipedia . org / wiki / Python_ ( programming_language ) )", "- - - - - - - - - - - - - - NEWLINE > haystack . exe NEWLINE NUMBER objects found NEWLINE NUMBER objects found", "print df . values . flatten ( ) NEWLINE [ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER ] NEWLINE print df . iloc [ : , NUMBER ] . values . flatten ( ) NEWLINE [ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER ]", "import numpy as np NEWLINE VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE def F ( VAR , VAR ) : NEWLINE VAR = np . array ( VAR ) NEWLINE VAR = np . array ( VAR ) NEWLINE VAR = [ np . sum ( ( VAR - VAR [ VAR ] ) ** NUMBER , axis = NUMBER ) for VAR in range ( len ( VAR ) ) ] NEWLINE VAR = np . argmin ( np . array ( VAR ) , axis = NUMBER ) NEWLINE return list ( np . bincount ( VAR ) ) NEWLINE print ( F ( VAR , VAR ) )", "VAR = [ ( VAR , VAR . weekday ( ) ) for VAR in VAR ]", ">> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > [ STRING . join ( VAR [ VAR : VAR + NUMBER ] ) for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) ] NEWLINE [ STRING , STRING , STRING ] NEWLINE >> > print STRING . join ( STRING . join ( VAR [ VAR : VAR + NUMBER ] ) for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) ) NEWLINE AB NEWLINE CD NEWLINE EF", "int main ( int argc , char * argv [ ] ) NEWLINE { Py_Initialize ( ) ; PyRun_SimpleString ( STRING ) ; // fake module char * source = STRING ; char * filename = STRING ; // perform module load PyObject * builtins = PyEval_GetBuiltins ( ) ; PyObject * compile = PyDict_GetItemString ( builtins , STRING ) ; PyObject * code = PyObject_CallFunction ( compile , STRING , source , filename , STRING ) ; PyObject * module = PyImport_ExecCodeModule ( STRING , code ) ; PyRun_SimpleString ( STRING ) ; Py_Finalize ( ) ; return NUMBER ; }", "In [ NUMBER ] : VAR = np . array ( STRING . split ( ) ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , dtype = STRING )", "ln ( y ) = - x ^ NUMBER / ( NUMBER * sigma ^ NUMBER ) + x * mu / sigma ^ NUMBER - mu ^ NUMBER / sigma ^ NUMBER + ln ( height )", "import random NEWLINE def shaperand ( VAR ) : NEWLINE return [ shaperand ( VAR ) if isinstance ( VAR , list ) else random . random ( ) for VAR in VAR ]", "VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING", "MvT101group . columns = MvT101group . columns . map ( lambda VAR : str ( VAR ) + STRING ) NEWLINE MvT102group . columns = MvT102group . columns . map ( lambda VAR : str ( VAR ) + STRING )", "self . circumference = NUMBER * pi * self . r", "import threading NEWLINE import alice , bob NEWLINE def get_work_data ( ) : NEWLINE return STRING NEWLINE def main ( ) : NEWLINE VAR = [ alice . do_stuff , bob . do_stuff ] NEWLINE VAR = get_work_data ( ) NEWLINE for VAR in VAR : NEWLINE VAR = threading . Thread ( target = VAR , args = ( VAR , ) ) NEWLINE VAR . start ( )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR , VAR = { } , { } NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = VAR [ VAR ] = [ VAR , VAR ] NEWLINE for VAR in VAR : NEWLINE if VAR - NUMBER in VAR and VAR in VAR : NEWLINE VAR , VAR = VAR [ VAR - NUMBER ] , VAR [ VAR ] NEWLINE del VAR [ VAR [ NUMBER ] ] NEWLINE del VAR [ VAR [ NUMBER ] ] NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] NEWLINE VAR [ VAR [ NUMBER ] ] = VAR NEWLINE print ( VAR , VAR ) NEWLINE VAR = { VAR : VAR [ NUMBER ] - VAR [ NUMBER ] + NUMBER for VAR , VAR in VAR . iteritems ( ) } NEWLINE print ( VAR )", "def f ( VAR ) : print ( VAR ) NEWLINE VAR = list ( range ( NUMBER ) ) NEWLINE", "buyer_id item_id order_id date NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER", "np . dot ( X_test , summed_params )", "awk - F $ STRING { print $ ( NF - NUMBER ) } ' file_name", "VAR = [ VAR for VAR in list_ if VAR [ NUMBER ] in c_codes ]", "self . secondFrame = MySecondFrame ( )", ">> > voxel_adjacency ( numpy . array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) ) NEWLINE array ( [ [ True , False , False , False , True , False ] , [ False , True , False , False , False , False ] , [ False , False , True , True , False , False ] , [ False , False , True , True , False , False ] , [ True , False , False , False , True , False ] , [ False , False , False , False , False , True ] ] , dtype = bool )", "VAR = [ STRING . join ( map ( str , VAR ) ) for VAR in VAR ]", "from scipy . interpolate import interpn NEWLINE import numpy as np NEWLINE VAR = np . linspace ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . linspace ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . linspace ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR , VAR , VAR = np . meshgrid ( VAR , VAR , VAR ) NEWLINE VAR = np . add ( VAR , np . add ( VAR , VAR ) ) NEWLINE interpn ( ( VAR , VAR , VAR ) , VAR , [ NUMBER , NUMBER , NUMBER ] )", "from collections import Counter NEWLINE from operator import attrgetter NEWLINE class Record ( object ) : NEWLINE def __init__ ( VAR , ** kwargs ) : NEWLINE for VAR , VAR in kwargs . iteritems ( ) : NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE VAR = [ Record ( uid = STRING , url = STRING , status = NUMBER ) , Record ( uid = STRING , url = STRING , status = NUMBER ) , Record ( uid = STRING , url = STRING , status = NUMBER ) ] NEWLINE def count_attr ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = attrgetter ( VAR ) NEWLINE return Counter ( VAR ( VAR ) for VAR in VAR ) NEWLINE for VAR in ( STRING , STRING ) : NEWLINE print ( STRING . format ( VAR , count_attr ( VAR , VAR ) ) )", "In [ NUMBER ] : % % timeit NEWLINE VAR = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] for VAR in range ( NUMBER ) ] NEWLINE map ( lambda VAR : setitem ( VAR , NUMBER , - NUMBER ) , VAR ) NEWLINE . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : NEWLINE In [ NUMBER ] : % % timeit NEWLINE VAR = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] for VAR in range ( NUMBER ) ] NEWLINE for VAR in VAR : NEWLINE VAR [ NUMBER ] = - NUMBER NEWLINE . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per", "VAR = set ( L2 ) NEWLINE VAR . update ( L3 ) NEWLINE VAR = [ VAR for VAR in L1 if VAR not in VAR ]", "def sum_of_squares_of_digits ( VAR ) : NEWLINE return sum ( int ( VAR ) ** NUMBER for VAR in str ( VAR ) )", "sum ( NUMBER for VAR , VAR in itertools . izip ( s1 , s2 ) if VAR == VAR )", "{ % for VAR in entry . files . all % }", "// download . js v3 NUMBER , by dandavis ; NUMBER - NUMBER [ CCBY2 ] see http : // danml . com / download . html for tests / usage NEWLINE // v1 landed VAR FF + Chrome compat way of downloading strings to local un - named files , upgraded to use VAR hidden frame and optional mime NEWLINE // v2 added named files via VAR [ download ] , msSaveBlob , IE ( NUMBER + ) support , and window . URL support for larger + faster saves than dataURLs NEWLINE // v3 added dataURL and Blob Input , bind - toggle arity , and legacy dataURL fallback was improved with force - download mime and base64 support NEWLINE // data can be VAR string , Blob , File , or dataURL NEWLINE function download ( data , strFileName , strMimeType ) { var self = window , // this script is only for browsers anyway . . . VAR = STRING , // this default mime also triggers iframe downloads VAR = strMimeType | | VAR , VAR = data , VAR = document , VAR = VAR . createElement ( STRING ) , VAR = function ( VAR ) { return String ( VAR ) ; } , VAR = self . Blob | | self . MozBlob | | self . WebKitBlob | | VAR , VAR = self . MSBlobBuilder | | self . WebKitBlobBuilder | | self . BlobBuilder , VAR = strFileName | | STRING , VAR , VAR , ua , VAR ; // if ( typeof VAR . bind == = STRING ) { VAR = VAR . bind ( self ) ; } if ( String ( this ) == = STRING ) { // reverse arguments , allowing download . bind ( true , STRING , STRING ) to act as VAR callback VAR = [ VAR , VAR ] ; VAR = VAR [ NUMBER ] ; VAR = VAR [ NUMBER ] ; } // go ahead and download dataURLs right away if ( String ( VAR ) . match ( / ^ data \\ : [ \\ w + \\ - ] + \\ / [ \\ w + \\ - ] + [ , ; ] / ) ) { return navigator . msSaveBlob ? // IE10 can ' VAR do VAR [ download ] , only Blobs : navigator . msSaveBlob ( d2b ( VAR ) , VAR ) : saver ( VAR ) ; // everyone else can save dataURLs un - processed } // end if dataURL passed ? try { VAR = VAR instanceof VAR ? VAR : new VAR ( [ VAR ] , { type : VAR } ) ; } catch ( y ) { if ( VAR ) { VAR = new VAR ( ) ; VAR . append ( [ VAR ] ) ; VAR = VAR . getBlob ( VAR ) ; // the VAR } } function d2b ( VAR ) { var p = VAR . split ( / [ : ; , ] / ) , VAR = p [ NUMBER ] , VAR = p [ NUMBER ] == STRING ? atob : decodeURIComponent , VAR = VAR ( p . pop ( ) ) , VAR = VAR . length , VAR = NUMBER , VAR = new Uint8Array ( VAR ) ; for ( VAR ; VAR < VAR ; + + VAR ) VAR [ VAR ] = VAR . charCodeAt ( VAR ) ; return new VAR ( [ VAR ] , { type : VAR } ) ; } function saver ( VAR , winMode ) { if ( STRING in VAR ) { // html5 A [ download ] VAR . href = VAR ; VAR . setAttribute ( STRING , VAR ) ; VAR . innerHTML = STRING ; VAR . body . appendChild ( VAR ) ; setTimeout ( function ( ) { VAR . click ( ) ; VAR . body . removeChild ( VAR ) ; if ( winMode == = true ) { setTimeout ( function ( ) { self . URL . revokeObjectURL ( VAR . href ) ; } , NUMBER ) ; } } , NUMBER ) ; return true ; } // do iframe dataURL download ( old ch + FF ) : var f = VAR . createElement ( STRING ) ; VAR . body . appendChild ( f ) ; if ( ! winMode ) { // force VAR mime that will download : VAR = STRING + VAR . replace ( / ^ data : ( [ \\ w \\ / \\ - \\ + ] + ) / , VAR ) ; } f . src = VAR ; setTimeout ( function ( ) { VAR . body . removeChild ( f ) ; } , NUMBER ) ; } // end saver if ( navigator . msSaveBlob ) { // IE10 + : ( has Blob , but not VAR [ download ] or URL ) return navigator . msSaveBlob ( VAR , VAR ) ; } if ( self . URL ) { // simple fast and modern way using Blob and URL : saver ( self . URL . createObjectURL ( VAR ) , true ) ; } else { // handle non - Blob ( ) + non - URL browsers : if ( typeof VAR == = STRING | | VAR . constructor == = VAR ) { try { return saver ( STRING + VAR + STRING + self . btoa ( VAR ) ) ; } catch ( y ) { return saver ( STRING + VAR + STRING + encodeURIComponent ( VAR ) ) ; } } // Blob but not URL : VAR = new FileReader ( ) ; VAR . onload = function ( e ) { saver ( this . result ) ; } ; VAR . readAsDataURL ( VAR ) ; } return true ; } / * end download ( ) * /", ">> > from string import Template NEWLINE >> > VAR = Template ( STRING ) NEWLINE >> > VAR . substitute ( { STRING : STRING , STRING : STRING } ) NEWLINE STRING", "$ cat BP . mk NEWLINE VAR : = $ ( shell python - c STRING ) NEWLINE all : NEWLINE echo STRING \\ STRING print ( STRING ) STRING ` ' NEWLINE echo STRING include_path_with \\ \\ [ weird \\ \\ ] characters STRING NEWLINE echo DIRECT : = ` python - c STRING ` NEWLINE echo STRING NEWLINE echo STRING NEWLINE echo VAR : = $ ( VAR ) NEWLINE $ make - f BP . mk NEWLINE echo STRING \\ STRING print ( STRING ) STRING ` ' NEWLINE DIRECT : = ` python - c STRING ` NEWLINE echo STRING include_path_with \\ \\ [ weird \\ \\ ] characters STRING NEWLINE DIRECT : = include_path_with \\ [ weird \\ ] characters NEWLINE echo DIRECT : = ` python - c STRING ` NEWLINE DIRECT : = include_path_with \\ [ weird \\ ] characters NEWLINE echo STRING NEWLINE VAR : = include_path_with \\ [ weird \\ ] characters NEWLINE echo STRING NEWLINE VAR : = include_path_with \\ [ weird \\ ] characters NEWLINE echo VAR : = include_path_with \\ [ weird \\ ] characters NEWLINE VAR : = include_path_with [ weird ] characters", "python - mtimeit - s STRING STRING", "from urlparse import urlparse NEWLINE import csv NEWLINE import re NEWLINE VAR = open ( ipath , STRING ) NEWLINE VAR = open ( opath , STRING ) NEWLINE VAR = csv . VAR ( VAR , dialect = STRING ) NEWLINE VAR = [ urlparse ( VAR ) . netloc for VAR in VAR ] NEWLINE VAR = set ( [ re . sub ( STRING , STRING , VAR ) for VAR in VAR ] ) NEWLINE for VAR in VAR : NEWLINE print ( STRING , VAR ) NEWLINE VAR . writerow ( [ VAR ] ) NEWLINE VAR . close ( ) NEWLINE VAR . close ( )", "VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR . append ( [ VAR for VAR in itertools . islice ( e , VAR , None , NUMBER ) ] )", "CPU ( s ) : NUMBER Hexa core Intel Xeon CPU E5 - NUMBER v2s ( - HT - MCP - SMP - ) cache : NUMBER KB flags : ( lm nx sse sse2 sse3 sse4_1 sse4_2 ssse3 vmx ) NEWLINE Clock Speeds : NUMBER : NUMBER MHz", "df [ STRING ] . where ( df [ STRING ] . abs ( ) < df [ STRING ] . abs ( ) , df [ STRING ] )", "count nunique NEWLINE A NUMBER NUMBER NEWLINE B NUMBER NUMBER NEWLINE C NUMBER NUMBER NEWLINE D NUMBER NUMBER", "import xml . etree . ElementTree as xee NEWLINE VAR = STRING NEWLINE VAR = xee . fromstring ( VAR ) NEWLINE print dict ( ( ( VAR . tag , VAR . text ) for VAR in VAR ) )", "VAR = addressComponents [ NUMBER ] . split ( STRING ) NEWLINE print VAR [ NUMBER ] NEWLINE print VAR [ NUMBER ] . strip ( )", "VAR = cPickle . dumps ( VAR ) NEWLINE VAR = QtCore . QMimeData ( ) NEWLINE VAR . setData ( STRING , VAR ) NEWLINE VAR = QtGui . QDrag ( self ) NEWLINE VAR . setMimeData ( VAR ) NEWLINE VAR = QtGui . QPixmap ( STRING ) NEWLINE VAR . setHotSpot ( QtCore . QPoint ( VAR . width ( ) / NUMBER , VAR . height ( ) / NUMBER ) ) NEWLINE VAR . setPixmap ( VAR ) NEWLINE VAR = VAR . start ( QtCore . Qt . MoveAction ) NEWLINE def mouseMoveEvent ( self , event ) : NEWLINE self . startDrag ( event ) NEWLINE class TagLabel ( QtGui . QLabel ) : NEWLINE def __init__ ( self , text , color , parent = None ) : NEWLINE super ( TagLabel , self ) . __init__ ( parent ) NEWLINE self . tagColor = color NEWLINE self . setText ( text ) NEWLINE self . setStyleSheet ( STRING % self . tagColor ) NEWLINE self . defaultStyle = self . styleSheet ( ) NEWLINE self . setAlignment ( QtCore . Qt . AlignHCenter | QtCore . Qt . AlignVCenter ) NEWLINE self . setAcceptDrops ( True ) NEWLINE def dragEnterEvent ( self , event ) : NEWLINE if event . VAR ( ) . hasFormat ( STRING ) : NEWLINE self . set_bg ( True ) NEWLINE event . accept ( ) NEWLINE else : NEWLINE event . reject ( ) NEWLINE def dragLeaveEvent ( self , event ) : NEWLINE self . set_bg ( False ) NEWLINE event . accept ( ) NEWLINE def dropEvent ( self , event ) : NEWLINE self . set_bg ( False ) NEWLINE VAR = event . VAR ( ) NEWLINE VAR = VAR . retrieveData ( STRING , QtCore . QVariant . ByteArray ) NEWLINE VAR = pickle . loads ( VAR . toByteArray ( ) ) NEWLINE event . accept ( ) NEWLINE self . emit ( QtCore . SIGNAL ( STRING ) , ( VAR , str ( self . text ( ) ) , str ( self . tagColor ) ) )", "VAR = set ( cycles ( a ) ) NEWLINE b in VAR", "VAR = None NEWLINE VAR = None NEWLINE VAR = { } NEWLINE for VAR in text . splitlines ( ) : NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR = VAR . split ( STRING ) [ NUMBER ] . strip ( ) NEWLINE VAR = None NEWLINE continue NEWLINE if VAR is not None and VAR is None : NEWLINE VAR = VAR . split ( STRING ) NEWLINE continue NEWLINE if VAR is not None and VAR is not None and VAR : NEWLINE if not VAR in VAR : NEWLINE VAR [ VAR ] = [ ] NEWLINE VAR = dict ( zip ( VAR , VAR . split ( STRING ) ) ) NEWLINE VAR [ VAR ] . append ( VAR )", "import urlib . parse , json NEWLINE VAR = urllib . parse . quote ( json . dumps ( mydict ) )", "import csv NEWLINE import re NEWLINE from itertools import islice NEWLINE VAR = re . compile ( STRING ) NEWLINE with open ( someinputfile , STRING ) as VAR , open ( outputfile , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR , delimiter = STRING ) NEWLINE next ( islice ( VAR , NUMBER , NUMBER ) , None ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . split ( VAR ) [ NUMBER : - NUMBER ] NEWLINE if not VAR : continue NEWLINE VAR . writerow ( VAR [ NUMBER : : NUMBER ] )", "my_project NEWLINE + - - api / NEWLINE + - - v1 / NEWLINE + - - __init__ . py NEWLINE + - - routes . py NEWLINE + - - v1_1 / NEWLINE + - - __init__ . py NEWLINE + - - routes . py NEWLINE + - - v2 / NEWLINE + - - __init__ . py NEWLINE + - - routes . py NEWLINE + - - __init__ . py NEWLINE + - - common . py", "CREATE TABLE ` dogs ` ( ` id ` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY , ` name ` VARCHAR ( NUMBER ) , ` age ` INT UNSIGNED , ` sex ` ENUM ( STRING , STRING ) ) ;", "def set_active_border ( VAR , VAR ) : NEWLINE VAR = VAR . colormap . alloc_named_color ( STRING ) . pixel NEWLINE VAR . configure ( border_width = NUMBER ) NEWLINE VAR . change_attributes ( None , border_pixel = VAR ) NEWLINE VAR . dpy . sync ( )", "def pause_wrapper ( VAR , VAR ) : NEWLINE def decorator ( VAR ) : NEWLINE VAR = [ VAR , time . time ( ) + VAR ] NEWLINE def wrapped ( * args , ** kwargs ) : NEWLINE if VAR [ NUMBER ] == NUMBER : NEWLINE time . sleep ( VAR [ NUMBER ] - time . time ( ) ) NEWLINE VAR = [ VAR , time . time ( ) + VAR ] NEWLINE return VAR ( * args , ** kwargs ) NEWLINE return wrapped NEWLINE return decorator", ">> > STRING . encode ( STRING , STRING ) NEWLINE STRING", "from selenium import webdriver NEWLINE import re NEWLINE VAR = webdriver . PhantomJS ( ) NEWLINE VAR . set_window_size ( NUMBER , NUMBER ) NEWLINE VAR . get ( STRING ) NEWLINE VAR = STRING NEWLINE VAR = re . compile ( VAR , re . X ) NEWLINE VAR = VAR . find_element_by_id ( STRING ) NEWLINE VAR = VAR . find_elements_by_tag_name ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . find_elements_by_tag_name ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = re . search ( VAR , text ) NEWLINE if VAR and VAR . group ( NUMBER ) == STRING : NEWLINE VAR = VAR . find_element_by_css_selector ( STRING ) NEWLINE print VAR . get_attribute ( STRING ) NEWLINE VAR . click ( )", "VAR = os . system ( STRING ) NEWLINE print ( VAR )", "def is_subtuple ( VAR , VAR ) : NEWLINE STRING NEWLINE if len ( VAR ) < len ( VAR ) : return False NEWLINE try : NEWLINE VAR = VAR . index ( VAR [ NUMBER ] ) NEWLINE except ValueError : NEWLINE return False NEWLINE return VAR == VAR [ VAR : VAR + len ( VAR ) ]", ">> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > df [ VAR ] > NUMBER NEWLINE a b c NEWLINE NUMBER True True True NEWLINE NUMBER True True True NEWLINE NUMBER True True True NEWLINE NUMBER True False False NEWLINE NUMBER True False False", "In [ NUMBER ] : % timeit testing [ STRING ] = testing . apply ( address_remove , axis = NUMBER ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "import itertools NEWLINE VAR = set ( itertools . chain . from_iterable ( counts_to_display . values ( ) ) )", "VAR = STRING", "foo ( NUMBER ) NEWLINE foo ( NUMBER )", "dic0 b is common to next dic NEWLINE dic1 b is common to next dic NEWLINE dic2 d is common to next dic", "VAR = STRING . format ( STRING , STRING ) NEWLINE if something : NEWLINE do_something ( STRING . format ( NUMBER , NUMBER , NUMBER ) )", "class MyHandler : NEWLINE def GET ( VAR ) : NEWLINE raise MultipleChoices ( [ STRING , STRING ] )", "VAR = [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ]", "from datetime import date , timedelta as td , datetime NEWLINE VAR = datetime . strptime ( STRING , STRING ) NEWLINE VAR = datetime . strptime ( STRING , STRING ) NEWLINE VAR = [ ] NEWLINE while ( VAR <= VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR + td ( days = NUMBER ) NEWLINE VAR = np . random . normal ( NUMBER , NUMBER , size = ( NUMBER , NUMBER ) ) NEWLINE VAR = pd . DataFrame ( VAR . T , index = VAR ) NEWLINE VAR , VAR = plt . subplots ( NUMBER , NUMBER , figsize = ( NUMBER , NUMBER ) ) NEWLINE VAR . plot ( VAR . index , VAR . T . mean ( ) , color = STRING , linewidth = NUMBER )", ">> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > NEWLINE >> > VAR = word2vec ( VAR ) NEWLINE >> > VAR = word2vec ( VAR ) NEWLINE >> > VAR = word2vec ( VAR ) NEWLINE >> > NEWLINE >> > print cosdis ( VAR , VAR ) NEWLINE NUMBER NEWLINE >> > print cosdis ( VAR , VAR ) NEWLINE NUMBER NEWLINE >> > print cosdis ( VAR , VAR ) NEWLINE NUMBER", "VAR = { } NEWLINE VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE for VAR in VAR : NEWLINE VAR , VAR = VAR NEWLINE VAR . setdefault ( VAR , [ ] ) . append ( VAR )", "VAR = { VAR . name : VAR . alpha2 for VAR in pycountry . countries } NEWLINE for VAR in csv_file : NEWLINE print VAR [ STRING ] , VAR . get ( VAR [ STRING ] , STRING )", "VAR = NEWLINE VAR = cv2 . cvtColor ( VAR , cv2 . HSV2GRAY ) NEWLINE VAR = VAR [ : ] NEWLINE VAR = NUMBER NEWLINE", "** NM_134083 ** mmu - miR - NUMBER - NUMBER p ** NM_134083 ** NUMBER - NUMBER NEWLINE ** NM_177305 ** mmu - miR - NUMBER - NUMBER p ** NM_177305 ** NUMBER - NUMBER NEWLINE NM_026184 mmu - miR - NUMBER - NUMBER p NM_026184 NUMBER - NUMBER", "import __main__ NEWLINE from itertools import permutations NEWLINE from time import time NEWLINE def replace1 ( VAR , VAR , VAR ) : NEWLINE return VAR [ : VAR ] + VAR + VAR [ VAR + NUMBER : ] NEWLINE def replace2 ( VAR , VAR , VAR ) : NEWLINE return STRING . format ( VAR [ : VAR ] , VAR , VAR [ VAR + NUMBER : ] ) NEWLINE def replace3 ( VAR , VAR , VAR ) : NEWLINE return STRING . join ( { VAR : VAR } . get ( VAR , VAR ) for VAR , VAR in enumerate ( VAR ) ) NEWLINE def replace4 ( VAR , VAR , VAR ) : NEWLINE VAR = list ( STRING ) NEWLINE VAR [ VAR ] = VAR NEWLINE STRING . join ( VAR ) NEWLINE def replace5 ( VAR , VAR , VAR ) : NEWLINE return STRING % ( VAR [ : VAR ] , VAR , VAR [ VAR + NUMBER : ] ) NEWLINE VAR = [ STRING . join ( VAR ) for VAR in permutations ( STRING ) ] NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR = getattr ( __main__ , STRING . format ( VAR ) ) NEWLINE VAR = time ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR ( VAR , NUMBER , STRING ) NEWLINE print time ( ) - VAR", "( ( < django . db . models . fields . AutoField : id > , None ) , ( < django . db . models . fields . TextField : signature > , None ) etc . . .", "VAR = { } NEWLINE VAR = open ( filename ) NEWLINE VAR = VAR . read ( ) . splitlines ( ) NEWLINE for VAR in VAR : NEWLINE VAR , VAR , VAR = VAR . split ( STRING ) NEWLINE VAR [ VAR ] = ( VAR , VAR ) NEWLINE print VAR", "if ( opts . e_opt and opts . d_opt ) :", "def chunked ( VAR , VAR ) : NEWLINE for VAR in range ( NUMBER , len ( VAR ) , VAR ) : NEWLINE yield VAR [ VAR : VAR + VAR ]", ">> > re . sub ( STRING , STRING , s ) NEWLINE STRING", ">> > get_nth_pow ( STRING , NUMBER ) NEWLINE STRING", "VAR = ( s . find ( VAR ) , VAR ) for VAR in ( s1 , s2 , s3 ) ) NEWLINE VAR = min ( ( VAR , VAR ) for VAR , VAR in VAR if VAR > - NUMBER ) [ NUMBER ]", "$ ls - l / usr / bin / | grep python NEWLINE lrwxr - xr - x NUMBER root wheel NUMBER Feb NUMBER NUMBER pythonw2 NUMBER - > . . / . . / System / Library / Frameworks / Python . framework / Versions / NUMBER / bin / pythonw2 NUMBER NEWLINE lrwxr - xr - x NUMBER root wheel NUMBER Feb NUMBER NUMBER pythonw2 NUMBER - > . . / . . / System / Library / Frameworks / Python . framework / Versions / NUMBER / bin / pythonw2 NUMBER NEWLINE lrwxr - xr - x NUMBER root wheel NUMBER Feb NUMBER NUMBER pythonw2 NUMBER - > . . / . . / System / Library / Frameworks / Python . framework / Versions / NUMBER / bin / pythonw2 NUMBER", "class memoize_by_bar ( key_memoized ) : NEWLINE def key ( VAR , VAR , VAR ) : NEWLINE return VAR . normalize_args ( VAR , VAR ) [ STRING ] NEWLINE @ memoize_by_bar NEWLINE def foo ( VAR , VAR , VAR ) : NEWLINE print STRING % ( VAR , VAR , VAR ) NEWLINE return VAR NEWLINE print foo ( STRING , STRING , STRING ) NEWLINE print foo ( STRING , STRING , STRING )", ">> > VAR , VAR = NUMBER , NUMBER NEWLINE >> > VAR , VAR = np . indices ( [ VAR , VAR ] ) NEWLINE >> > m NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "exec STRING in sandbox . __dict__", "while True : NEWLINE VAR , VAR = sock . recvfrom ( NUMBER ) NEWLINE . . . json decode , etc . . . . NEWLINE q . put ( . . . )", "from operator import itemgetter NEWLINE VAR = max ( my_dict , key = itemgetter ( NUMBER ) )", "def print_board ( VAR ) : NEWLINE STRING NEWLINE print ( STRING ) NEWLINE for VAR in range ( BOARD_ROWS ) : NEWLINE for VAR in range ( BOARD_COLUMNS ) : NEWLINE if VAR . board [ VAR ] [ VAR ] == connect_four . NONE : NEWLINE print ( STRING , end = STRING ) NEWLINE elif VAR . board [ VAR ] [ VAR ] == connect_four . RED : NEWLINE print ( STRING , end = STRING ) NEWLINE elif VAR . board [ VAR ] [ VAR ] == connect_four . YELLOW : NEWLINE print ( STRING , end = STRING ) NEWLINE print ( )", "[ [ VAR + NUMBER for VAR in VAR ] for VAR in x ]", "import json NEWLINE import re NEWLINE from bs4 import BeautifulSoup NEWLINE import requests NEWLINE VAR = re . compile ( STRING , re . MULTILINE ) NEWLINE VAR = requests . get ( STRING ) NEWLINE VAR = BeautifulSoup ( VAR . content ) NEWLINE VAR = VAR . find ( STRING , text = lambda VAR : VAR and STRING in VAR ) . text NEWLINE VAR = json . loads ( re . search ( VAR , VAR ) . group ( NUMBER ) ) NEWLINE print VAR", ">> > help ( nt . Point )", "VAR = driver . find_elements_by_css_selector ( STRING )", "VAR = range ( NUMBER , NUMBER , - NUMBER ) NEWLINE VAR = float ( sum ( VAR ) ) NEWLINE VAR = [ VAR / VAR for VAR in VAR ] NEWLINE >> > [ round ( VAR , NUMBER ) for VAR in VAR ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = [ NUMBER ]", "import pandas as pd NEWLINE VAR = pd . DataFrame . from_csv ( STRING , sep = STRING ) NEWLINE VAR = pd . DataFrame . from_csv ( STRING , sep = STRING ) NEWLINE VAR = VAR . reset_index ( ) . merge ( VAR . reset_index ( ) , how = STRING ) . set_index ( STRING ) NEWLINE VAR . to_csv ( STRING , sep = STRING )", "def logsumexp_csr_row ( VAR ) : NEWLINE VAR = VAR . VAR NEWLINE VAR = max ( np . max ( VAR ) , NUMBER ) NEWLINE VAR = VAR - VAR NEWLINE VAR = np . exp ( VAR , out = VAR ) . sum ( ) NEWLINE VAR = X . shape [ NUMBER ] - len ( VAR ) NEWLINE return VAR + np . log ( VAR + VAR * np . exp ( - VAR ) )", "VAR = [ ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) ] NEWLINE for VAR , VAR in VAR : NEWLINE VAR = STRING . format ( VAR ) NEWLINE if VAR != VAR : NEWLINE print ( STRING . format ( VAR , VAR , VAR ) ) NEWLINE exit ( ) NEWLINE else : NEWLINE print ( STRING . format ( VAR , VAR ) )", "VAR = { } NEWLINE VAR [ STRING ] = Person ( STRING ) NEWLINE def removePerson ( VAR ) : NEWLINE del VAR [ VAR ] NEWLINE removePerson ( STRING )", "import subprocess NEWLINE def create_grid ( * commands ) : NEWLINE VAR = subprocess . Popen ( [ STRING ] , stdout = subprocess . PIPE , stdin = subprocess . PIPE , stderr = subprocess . PIPE ) NEWLINE VAR . communicate ( STRING . join ( commands ) + STRING ) NEWLINE if __name__ == STRING : NEWLINE create_grid ( STRING , STRING , STRING )", "thefile . write ( STRING % name ) NEWLINE for VAR in thelist : NEWLINE thefile . write ( STRING % VAR )", "contourf ( D1 , cmap = STRING ) NEWLINE contourf ( D2 , cmap = STRING , alpha = NUMBER ) NEWLINE contourf ( D2 , cmap = STRING , alpha = NUMBER )", ">> > VAR = [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] NEWLINE >> > sorted ( sorted ( VAR , key = lambda VAR : VAR [ NUMBER ] ) , key = lambda VAR : VAR [ NUMBER ] , reverse = True ) NEWLINE [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ]", "{ Hello there | Hello | Howdy } Dr . Munchauson you { gentleman | fine fellow } ! What { will | shall | should } we { eat | have } for lunch ? Peas by the { thousand | hundred | NUMBER } said Dr . Munchauson ; { that | is } what he said . NEWLINE But there are no { misters | doctors } here good sir ! Help us if there is an emergency . NEWLINE I am the { very last | last } sentence for this { instance | example } .", "import csv NEWLINE from scipy import sparse NEWLINE VAR , VAR = NUMBER , NUMBER NEWLINE VAR = sparse . lil_matrix ( ( VAR , VAR ) ) NEWLINE VAR = csv . reader ( open ( STRING ) ) NEWLINE for VAR in VAR : NEWLINE VAR , VAR = map ( int , VAR ) NEWLINE VAR . data [ VAR ] . append ( VAR ) NEWLINE print VAR . data", "VAR = FileLineWrapper ( open ( STRING , STRING ) ) NEWLINE VAR . readline ( ) NEWLINE print ( VAR . line )", "for VAR in reservations : NEWLINE for VAR in VAR . instances : NEWLINE VAR = VAR . block_device_mapping NEWLINE for VAR in VAR : NEWLINE print ( STRING . format ( VAR ) VAR = VAR [ VAR ] print ( STRING . format ( VAR . volume_id ) ) print ( STRING . format ( bd . volume_status ) )", "public static < In , Out > List < Out > map ( List < In > in , Func < In , Out > f ) { List < Out > out = new ArrayList < Out > ( in . size ( ) ) ; for ( In inObj : in ) { out . add ( f . apply ( inObj ) ) ; } return out ; } NEWLINE // . . . NEWLINE List < String > myList = . . . ; NEWLINE List < String > lowerCased = map ( myList , new Func < String , String > ( ) { public String apply ( String in ) { return in . toLowerCase ( ) ; } } ) ;", "NUMBER NEWLINE NUMBER", "conf . env [ STRING ] = STRING", "VAR = np . array ( zip ( x . flatten ( ) , y . flatten ( ) ) ) NEWLINE VAR = lambda VAR , VAR : [ interp . griddata ( VAR , vx . flatten ( ) , np . array ( [ VAR ] ) ) [ NUMBER ] , interp . griddata ( VAR , vy . flatten ( ) , np . array ( [ VAR ] ) ) [ NUMBER ] ]", "import lxml . etree as ET NEWLINE import textwrap NEWLINE import io NEWLINE def setup_ABC ( ) : NEWLINE VAR = textwrap . dedent ( STRING ) NEWLINE return VAR NEWLINE def study_fast_iter ( ) : NEWLINE def orig_fast_iter ( VAR , VAR , * args , ** kwargs ) : NEWLINE for VAR , VAR in VAR : NEWLINE print ( STRING . format ( e = ET . tostring ( VAR ) ) ) NEWLINE VAR ( VAR , * args , ** kwargs ) NEWLINE print ( STRING . format ( e = ET . tostring ( VAR ) ) ) NEWLINE VAR . clear ( ) NEWLINE while VAR . getprevious ( ) is not None : NEWLINE print ( STRING . format ( p = ( VAR . getparent ( ) [ NUMBER ] ) . tag ) ) NEWLINE del VAR . getparent ( ) [ NUMBER ] NEWLINE del VAR NEWLINE def mod_fast_iter ( VAR , VAR , * args , ** kwargs ) : NEWLINE STRING NEWLINE for VAR , VAR in VAR : NEWLINE print ( STRING . format ( e = ET . tostring ( VAR ) ) ) NEWLINE VAR ( VAR , * args , ** kwargs ) NEWLINE print ( STRING . format ( e = ET . tostring ( VAR ) ) ) NEWLINE VAR . clear ( ) NEWLINE for VAR in VAR . xpath ( STRING ) : NEWLINE print ( STRING . format ( a = VAR . tag ) ) NEWLINE while VAR . getprevious ( ) is not None : NEWLINE print ( STRING . format ( p = ( VAR . getparent ( ) [ NUMBER ] ) . tag ) ) NEWLINE del VAR . getparent ( ) [ NUMBER ] NEWLINE del VAR NEWLINE VAR = setup_ABC ( ) NEWLINE VAR = ET . iterparse ( io . BytesIO ( VAR ) , events = ( STRING , ) , tag = STRING ) NEWLINE orig_fast_iter ( VAR , lambda VAR : None ) NEWLINE print ( STRING * NUMBER ) NEWLINE STRING NEWLINE VAR = setup_ABC ( ) NEWLINE VAR = ET . iterparse ( io . BytesIO ( VAR ) , events = ( STRING , ) , tag = STRING ) NEWLINE mod_fast_iter ( VAR , lambda VAR : None ) NEWLINE study_fast_iter ( )", "def read_in_chunks ( VAR , VAR = NUMBER ) : NEWLINE STRING NEWLINE while True : NEWLINE VAR = VAR . read ( VAR ) NEWLINE if not VAR : NEWLINE break NEWLINE yield VAR NEWLINE VAR = open ( STRING ) NEWLINE for VAR in read_in_chunks ( VAR ) : NEWLINE process_data ( VAR )", "import itertools NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE for VAR , VAR in itertools . product ( VAR , VAR ) : NEWLINE print ( VAR , VAR , VAR * VAR ) NEWLINE print ( STRING ) NEWLINE VAR , VAR = build_synth_measurement ( VAR , VAR ) NEWLINE compare_measurements ( VAR , VAR , STRING , STRING , file_note = STRING % ( VAR , int ( VAR * NUMBER ) ) )", "VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in my_file : NEWLINE VAR . append ( VAR . split ( STRING ) ) NEWLINE for VAR in VAR : NEWLINE VAR = false NEWLINE for VAR in VAR : NEWLINE if matching_line ( VAR , VAR ) : NEWLINE VAR = true NEWLINE if VAR : NEWLINE continue NEWLINE else : NEWLINE VAR . append ( VAR )", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE for VAR in range ( len ( VAR ) - VAR ) : NEWLINE if all ( VAR == STRING for VAR in VAR [ VAR : VAR + VAR ] ) : NEWLINE VAR = VAR + NUMBER NEWLINE break NEWLINE VAR = filter ( lambda VAR : VAR != STRING , VAR [ VAR + NUMBER : ] ) NEWLINE VAR = NUMBER NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR = VAR + VAR NEWLINE if VAR < len ( VAR ) : NEWLINE VAR [ VAR ] = VAR [ VAR ]", ">> > from so . models import * NEWLINE >> > from django . contrib . auth . models import User NEWLINE >> > VAR = User ( ) NEWLINE >> > VAR . username = STRING NEWLINE >> > VAR . save ( ) NEWLINE >> > VAR = User ( ) NEWLINE >> > VAR . username = STRING NEWLINE >> > VAR . save ( ) NEWLINE >> > VAR = User ( ) NEWLINE >> > VAR . username = STRING NEWLINE >> > VAR . save ( ) NEWLINE >> > NEWLINE >> > VAR = Relationship ( ) NEWLINE >> > VAR . from_user = VAR NEWLINE >> > VAR . to_user = VAR NEWLINE >> > VAR . save ( ) NEWLINE >> > VAR = Relationship ( ) NEWLINE >> > VAR . from_user = VAR NEWLINE >> > VAR . to_user = VAR NEWLINE >> > VAR . save ( ) NEWLINE >> > VAR = Relationship ( ) NEWLINE >> > VAR . from_user = VAR NEWLINE >> > VAR . to_user = VAR NEWLINE >> > VAR . save ( ) NEWLINE >> > VAR = Relationship . objects . all ( ) NEWLINE >> > VAR . count ( ) NEWLINE NUMBER NEWLINE >> > NEWLINE >> > VAR = User . objects . annotate ( num_followers = Count ( STRING ) ) . order_by ( STRING ) NEWLINE >> > for VAR in VAR : NEWLINE >> > print VAR . username , VAR . num_followers NEWLINE user3 NUMBER NEWLINE user2 NUMBER NEWLINE user1 NUMBER", "with open ( filename , STRING ) as VAR : NEWLINE while True : NEWLINE VAR = VAR . readline ( ) NEWLINE if not VAR : break NEWLINE if STRING in VAR : NEWLINE VAR . seek ( - len ( VAR ) , NUMBER ) NEWLINE VAR . write ( VAR . split ( STRING ) [ NUMBER ] + STRING ) NEWLINE VAR . flush ( )", "NUMBER / NUMBER / NUMBER NUMBER : NUMBER NUMBER $ NUMBER LOCAL AIRTIME , LONG DISTANCE and INTERNATIONAL CHARGES xxx - xxx - xxxx City Name aaa - aaa - aaaa City Name Mobile NEWLINE NUMBER / NUMBER / NUMBER NUMBER : NUMBER NUMBER $ NUMBER LOCAL AIRTIME , LONG DISTANCE and INTERNATIONAL CHARGES yyy - yyy - yyyy City Name zzz - zzz - zzzz City Name Mobile", "def split_on_parts ( VAR , * parts ) : NEWLINE return [ VAR [ sum ( parts [ : VAR ] ) : sum ( parts [ : VAR + NUMBER ] ) ] for VAR in range ( len ( parts ) ) ]", "VAR = pd . ExcelWriter ( STRING , engine = STRING , options = { STRING : False } )", "def __str__ ( VAR ) : NEWLINE return STRING + VAR . name + STRING + VAR . occupation + STRING + VAR . affiliation + STRING + VAR . species", "category NEWLINE cat1 NUMBER & NUMBER NEWLINE cat2 NUMBER & NUMBER NEWLINE dtype : object", "field1 NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER - NUMBER NEWLINE field2 NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER - NUMBER NEWLINE field3 NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER", ">> > [ VAR for VAR , VAR in rev_multidict . items ( ) if len ( VAR ) > NUMBER ] NEWLINE [ STRING ]", "map ( STRING , plot = TRUE , fill = FALSE , col = palette ( ) )", "In [ NUMBER ] : df [ ( df . close_price < df . short_lower_band ) & . . . . . : ( df . close_price < df . long_lower_band ) ] . index . tolist ( ) NEWLINE Out [ NUMBER ] : [ STRING , STRING , STRING ]", "openerp . MODULENAME = function ( instance ) NEWLINE { var QWEB = instance . web . qweb , _t = instance . web . _t ; instance . web . DataSet . include ( { call_button : function ( method , args ) { var id = args [ NUMBER ] ; if ( String ( method ) == STRING ) { // get_reports should be created in modele_name class new instance . web . Model ( STRING , this . get_context ( ) ) . ca ll ( STRING , [ id ] , { context : this . get_context ( ) } ) . done ( function ( reports ) { for ( var b = NUMBER ; b < reports . length ; b += NUMBER ) download ( STRING + reports [ b ] , reports [ b + NUMBER ] + STRING , STRING ) ; } ) ; } return this . _super ( method , args ) ; } } ) ; } ;", "from StringIO import StringIO NEWLINE import pandas as pd NEWLINE VAR = STRING NEWLINE VAR = pd . read_html ( StringIO ( VAR ) ) NEWLINE print ( VAR )", "import numpy NEWLINE from scipy import signal NEWLINE VAR = numpy . random . randn ( NUMBER , NUMBER ) NEWLINE VAR [ VAR < NUMBER ] = NUMBER NEWLINE VAR [ VAR > NUMBER ] = NUMBER NEWLINE VAR = numpy . random . randn ( NUMBER , NUMBER ) NEWLINE VAR [ VAR < NUMBER ] = NUMBER NEWLINE VAR [ VAR > NUMBER ] = NUMBER NEWLINE VAR [ NUMBER : NUMBER + VAR . shape [ NUMBER ] , NUMBER : NUMBER + VAR . shape [ NUMBER ] ] = VAR NEWLINE VAR [ VAR == NUMBER ] = - NUMBER NEWLINE VAR [ VAR == NUMBER ] = - NUMBER NEWLINE VAR [ VAR == NUMBER ] = NUMBER NEWLINE VAR [ VAR == NUMBER ] = NUMBER NEWLINE VAR = numpy . prod ( VAR . shape ) NEWLINE VAR = signal . correlate ( VAR , VAR , STRING ) NEWLINE VAR = numpy . where ( VAR == VAR ) NEWLINE print VAR", "translate ( bytes ) | NUMBER NEWLINE translate ( bytearray ) | NUMBER NEWLINE List Comprehension | NUMBER NEWLINE Regular expressions | NUMBER NEWLINE Generator exp | NUMBER NEWLINE dict . fromkeys | NUMBER NEWLINE translate ( unicode ) | NUMBER", ">> > import requests NEWLINE >> > VAR = requests . get ( STRING , stream = True ) NEWLINE >> > from xml . etree import ElementTree as ET NEWLINE >> > VAR = ET . parse ( VAR . raw ) NEWLINE >> > VAR = VAR . getroot ( ) NEWLINE >> > VAR = { STRING : STRING } NEWLINE >> > for VAR in VAR . findall ( STRING , VAR = VAR ) : NEWLINE . . . print ( VAR . attrib [ STRING ] , VAR . attrib [ STRING ] ) NEWLINE . . . NEWLINE USD NUMBER NEWLINE JPY NUMBER NEWLINE BGN NUMBER NEWLINE CZK NUMBER NEWLINE DKK NUMBER NEWLINE GBP NUMBER NEWLINE HUF NUMBER NEWLINE LTL NUMBER NEWLINE LVL NUMBER NEWLINE PLN NUMBER NEWLINE RON NUMBER NEWLINE SEK NUMBER NEWLINE CHF NUMBER NEWLINE NOK NUMBER NEWLINE HRK NUMBER NEWLINE RUB NUMBER NEWLINE TRY NUMBER NEWLINE AUD NUMBER NEWLINE BRL NUMBER NEWLINE CAD NUMBER NEWLINE CNY NUMBER NEWLINE HKD NUMBER NEWLINE IDR NUMBER NEWLINE ILS NUMBER NEWLINE INR NUMBER NEWLINE KRW NUMBER NEWLINE MXN NUMBER NEWLINE MYR NUMBER NEWLINE NZD NUMBER NEWLINE PHP NUMBER NEWLINE SGD NUMBER NEWLINE THB NUMBER NEWLINE ZAR NUMBER", "VAR = { VAR : [ elements . pop ( NUMBER ) ] for VAR in one [ : - NUMBER ] } . update ( { one [ - NUMBER ] : [ elements ] } )", "from pylab import cm NEWLINE print cm . datad . keys ( )", "import logging NEWLINE def setup_custom_logger ( VAR ) : NEWLINE VAR = logging . Formatter ( fmt = STRING , datefmt = STRING ) NEWLINE VAR = logging . FileHandler ( STRING , mode = STRING ) NEWLINE VAR . setFormatter ( VAR ) NEWLINE VAR = logging . StreamHandler ( stream = sys . stdout ) NEWLINE VAR . setFormatter ( VAR ) NEWLINE VAR = logging . getLogger ( VAR ) NEWLINE VAR . setLevel ( logging . DEBUG ) NEWLINE VAR . addHandler ( VAR ) NEWLINE VAR . addHandler ( VAR ) NEWLINE return VAR NEWLINE >> > VAR = setup_custom_logger ( STRING ) NEWLINE >> > VAR . info ( STRING ) NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER INFO This is a message ! NEWLINE >> > VAR . error ( STRING ) NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER ERROR Here is another", ">> > from collections import namedtuple NEWLINE >> > VAR = namedtuple ( STRING , STRING ) NEWLINE >> > VAR = namedtuple ( STRING , VAR . _fields + ( STRING , ) ) NEWLINE >> > VAR . _fields NEWLINE ( STRING , STRING , STRING ) NEWLINE >> > VAR ( STRING , STRING , STRING ) NEWLINE VAR ( address = STRING , value = STRING , lookups = STRING )", "VAR = STRING . join ( l )", "self . table . setdefault ( field , NUMBER )", "instance . sets [ STRING ] . elements", ">> > print any . __doc__ NEWLINE any ( iterable ) - > bool NEWLINE Return True if bool ( x ) is True for any x in the iterable . NEWLINE If the iterable is empty , return False .", "import re NEWLINE VAR = STRING NEWLINE for VAR , VAR , VAR in re . findall ( STRING , VAR ) : NEWLINE print ( ascii ( ( VAR , VAR , VAR ) ) )", "self . tab2 = support NEWLINE self . tabs . addTab ( tab1 , STRING ) NEWLINE self . tabs . addTab ( self . tab2 , STRING ) NEWLINE self . tabs . currentChanged . connect ( self . load_on_show )", "self . storage = { STRING : [ ] , STRING : [ ] }", "plot STRING using NUMBER : ( P ( $ NUMBER ) ) NEWLINE set table STRING NEWLINE replot NEWLINE unset table", ">> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > min ( range ( len ( VAR ) ) , key = lambda VAR : abs ( VAR [ VAR ] - NUMBER ) ) NEWLINE NUMBER", "for VAR in data : NEWLINE print STRING % ( STRING . join ( [ str ( VAR ) for VAR in VAR ] ) , clusters [ VAR [ NUMBER ] ] )", "class A : NEWLINE pass NEWLINE class B ( metaclass = OrderedClass ) : NEWLINE VAR = NUMBER NEWLINE class D ( A ) : NEWLINE pass NEWLINE class C ( A ) : NEWLINE pass NEWLINE print ( filter ( lambda VAR : isinstance ( getattr ( B , VAR ) , type ) , b . members ) ) )", ">> > VAR , VAR = [ VAR for VAR in A if VAR < NUMBER ] , [ VAR for VAR in A if VAR > NUMBER ] NEWLINE >> > VAR NEWLINE [ - NUMBER , - NUMBER , - NUMBER , - NUMBER ] NEWLINE >> > VAR NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ]", "import _ALibrary NEWLINE import _BLibrary NEWLINE class CommonLibrary ( _BLibrary . _BLibrary , _ALibrary . _ALibrary ) : NEWLINE def __init__ ( self ) : NEWLINE for VAR in CommonLibrary . __bases__ : NEWLINE VAR . __init__ ( self )", "VAR , VAR , VAR = symbols ( STRING ) NEWLINE VAR = VAR * exp ( - t / VAR ) + Heaviside ( t ) * VAR * ( NUMBER - exp ( - t / VAR ) ) NEWLINE solve ( [ ( eqVc . rhs - VAR ) . subs ( t , VAR ) for VAR in [ NUMBER , NUMBER , NUMBER ] ] , [ VAR , VAR , VAR ] , dict = True )", "def EOQ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR , VAR = Partmaster NEWLINE VAR = math . sqrt ( ( NUMBER * VAR * VAR ) / ( VAR * VAR ) ) NEWLINE return VAR NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE df [ STRING ] = df . apply ( lambda VAR : EOQ ( VAR [ STRING ] , VAR [ STRING ] , VAR , VAR ) , axis = NUMBER ) NEWLINE df", "for VAR , VAR in enumerate ( idx ) : NEWLINE A1d [ VAR ] = VAR NEWLINE print ( A ) NEWLINE", "def func ( VAR ) : NEWLINE VAR = VAR . reset_index ( ) [ STRING ] . idxmax ( ) NEWLINE return VAR [ STRING ] . iloc [ VAR ]", "import os NEWLINE with os . popen ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE print ( VAR . strip ( ) )", "from itertools import dropwhile NEWLINE for VAR in filepath : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = dropwhile ( lambda VAR : STRING not in VAR , VAR ) NEWLINE next ( VAR , STRING ) NEWLINE for VAR in VAR : NEWLINE print ( VAR )", "soup . find_all ( STRING , class_ = STRING )", "In [ NUMBER ] : a NEWLINE Out [ NUMBER ] : NEWLINE array ( [ STRING , STRING , STRING , STRING ] , dtype = STRING ) NEWLINE In [ NUMBER ] : b NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : pd . DataFrame ( list ( product ( a , b ) ) , columns = [ STRING , STRING ] ) NEWLINE Out [ NUMBER ] : NEWLINE col1 col2 NEWLINE NUMBER a NUMBER NEWLINE NUMBER a NUMBER NEWLINE NUMBER a NUMBER NEWLINE NUMBER b NUMBER NEWLINE NUMBER b NUMBER NEWLINE NUMBER b NUMBER NEWLINE NUMBER c NUMBER NEWLINE NUMBER c NUMBER NEWLINE NUMBER c NUMBER NEWLINE NUMBER d NUMBER NEWLINE NUMBER d NUMBER NEWLINE NUMBER d NUMBER", "In [ NUMBER ] : [ VAR for VAR , VAR in frozenset ( ( type ( VAR ) , VAR ) for VAR in l ) ] NEWLINE Out [ NUMBER ] : [ NUMBER , STRING , NUMBER , STRING , STRING ]", "VAR = STRING . join ( calendar . month_name ) [ NUMBER : ] NEWLINE VAR = re . findall ( STRING . format ( VAR ) , text )", "def grabber3 ( VAR ) : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = csv . DictReader ( VAR ) NEWLINE for VAR in VAR : NEWLINE del VAR [ STRING ] NEWLINE yield VAR", "VAR = STRING", ">> > VAR = STRING", "def method1 ( VAR ) : NEWLINE def wrapper ( VAR ) : NEWLINE return VAR + VAR NEWLINE return wrapper NEWLINE def method2 ( VAR , VAR ) : NEWLINE VAR = VAR ( VAR = STRING ) NEWLINE return VAR + STRING + VAR NEWLINE method2 ( method1 ( VAR = STRING ) , STRING )", "VAR = { } NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE for VAR , VAR , VAR in VAR : NEWLINE VAR . setdefault ( VAR , [ ] ) . append ( [ VAR , VAR ] )", ">> > x < - NUMBER NEWLINE array ( [ False , False , False , True , False , False ] , dtype = bool )", "def using_eight_shifts ( VAR ) : NEWLINE VAR , VAR = VAR . shape NEWLINE VAR = np . empty ( ( VAR + NUMBER , VAR + NUMBER ) ) NEWLINE VAR [ ( NUMBER , - NUMBER ) , : ] = np . nan NEWLINE VAR [ : , ( NUMBER , - NUMBER ) ] = np . nan NEWLINE VAR [ NUMBER : NUMBER + VAR , NUMBER : NUMBER + VAR ] = VAR NEWLINE VAR = np . where ( np . logical_and . reduce ( [ ( VAR [ VAR : VAR + VAR , VAR : VAR + VAR ] == VAR ) for VAR in range ( NUMBER ) for VAR in range ( NUMBER ) if not ( VAR == NUMBER and VAR == NUMBER ) ] ) ) NEWLINE return VAR", "VAR = np . vstack ( [ np . random . uniform ( NUMBER , NUMBER , NUMBER ) , np . random . uniform ( NUMBER , NUMBER , NUMBER ) ] ) . T", "try : NEWLINE import foo_gui NEWLINE foo_gui . main ( ) NEWLINE except ImportError : NEWLINE import foo_cli NEWLINE foo_cli . main ( )", "In [ NUMBER ] : VAR = [ x [ VAR : VAR + NUMBER ] for VAR in range ( NUMBER , len ( x ) , NUMBER ) ] NEWLINE In [ NUMBER ] : pd . DataFrame ( VAR [ NUMBER : ] , columns = VAR [ NUMBER ] ) NEWLINE Out [ NUMBER ] : NEWLINE Phase Formula Sat Indx NEWLINE NUMBER Calcite CaCO3 NUMBER NEWLINE NUMBER Aragonite CaCO3 NUMBER NEWLINE NUMBER H2O ( g ) H2O - NUMBER NEWLINE NUMBER CO2 ( g ) CO2 - NUMBER NEWLINE NUMBER Gypsum CaSO4 : NUMBER H2O - NUMBER NEWLINE NUMBER Anhydrite CaSO4 - NUMBER NEWLINE NUMBER Portlandite Ca ( OH ) NUMBER - NUMBER NEWLINE NUMBER H2 ( g ) H2 - NUMBER NEWLINE NUMBER O2 ( g ) O2 - NUMBER NEWLINE NUMBER CH4 ( g ) CH4 - NUMBER", "from collections import defaultdict NEWLINE def add ( VAR , VAR ) : NEWLINE assert isinstance ( VAR , SparseVector ) and isinstance ( VAR , SparseVector ) NEWLINE assert VAR . size == VAR . size NEWLINE VAR = defaultdict ( float ) NEWLINE for VAR in range ( VAR . indices . size ) : NEWLINE VAR [ VAR . indices [ VAR ] ] += VAR . VAR [ VAR ] NEWLINE for VAR in range ( VAR . indices . size ) : NEWLINE VAR [ VAR . indices [ VAR ] ] += VAR . VAR [ VAR ] NEWLINE return Vectors . sparse ( VAR . size , dict ( VAR ) )", "gtk - goto - last NEWLINE gtk - go - back NEWLINE gtk - go - forward NEWLINE gtk - apply NEWLINE gtk - cancel NEWLINE gtk - close", "ax . axhline ( NUMBER , color = STRING , linestyle = STRING )", "threshhold_dist is the size of the bounding box , ie : the geographical area NEWLINE theshhold_location is the number of lat / lng points needed with in NEWLINE the bounding box in order for it to be considered a cluster .", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE def filter_function ( VAR ) : NEWLINE return VAR and STRING in VAR . attrs and STRING in VAR [ STRING ] and STRING not in VAR [ STRING ] NEWLINE for VAR in VAR . find_all ( filter_function ) : NEWLINE print ( VAR . text )", "VAR = STRING", ">> > VAR = sqlContext . sql ( STRING )", ">> > print STRING % ( len ( text ) - NUMBER , text ) NEWLINE < abcd >", "from collections import Counter NEWLINE print sorted ( a , key = Counter ( a ) . get , reverse = True ) NEWLINE", ">> > import numpy as np NEWLINE >> > VAR = np . ones ( ( NUMBER , NUMBER ) , dtype = int ) NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR . put ( VAR , [ NUMBER ] * len ( VAR ) ) NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "from numpy import * NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = ( NUMBER * pi ) / VAR NEWLINE VAR = VAR * ( NUMBER ) NEWLINE VAR = arange ( NUMBER , VAR ) NEWLINE VAR = round_ ( VAR * ( sin ( VAR * VAR ) + NUMBER ) ) NEWLINE VAR = round_ ( VAR * ( sin ( VAR * VAR + VAR ) + NUMBER ) ) NEWLINE VAR = VAR / NUMBER NEWLINE VAR = sin ( VAR * VAR + VAR ) NEWLINE VAR = sin ( VAR * VAR + VAR + VAR ) NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = len ( VAR ) NEWLINE VAR = zeros ( ( VAR , VAR * NUMBER + VAR ) , dtype = STRING ) NEWLINE VAR [ : , : ] = STRING NEWLINE for VAR , ( VAR , VAR , VAR , VAR ) in enumerate ( zip ( VAR , VAR , VAR , VAR ) ) : NEWLINE VAR [ VAR , VAR : VAR + VAR ] = list ( VAR ) NEWLINE VAR [ VAR , VAR : VAR + VAR ] = list ( VAR ) NEWLINE if VAR > VAR : VAR [ VAR , VAR : VAR + VAR ] = list ( VAR ) NEWLINE for VAR in VAR : NEWLINE print STRING . join ( VAR )", "import os NEWLINE os . umask ( NUMBER )", "< html > NEWLINE < head > NEWLINE < / head > NEWLINE < body > NEWLINE a NEWLINE < b > NEWLINE b NEWLINE < b > NEWLINE c NEWLINE < / b > NEWLINE < / b > NEWLINE < / body > NEWLINE < / html >", "interp_checked NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE % timeit doit ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = bytes ( STRING , STRING )", "< a href = STRING > PDF download < / a >", "from sqlalchemy import Column , Integer NEWLINE from sqlalchemy . ext . declarative import declarative_base NEWLINE VAR = declarative_base ( ) NEWLINE class Thing ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( AdvancedNullComparisons ( NUMBER ) ) NEWLINE from sqlalchemy . dialects import postgresql , mysql NEWLINE print ( Thing . VAR != STRING ) . compile ( dialect = postgresql . dialect ( ) ) NEWLINE print ( Thing . VAR != STRING ) . compile ( dialect = mysql . dialect ( ) )", "{ % macro render_class ( VAR ) - % } NEWLINE VAR { { VAR . name } } NEWLINE { { % for VAR in VAR . fields % } int { { VAR } } ; { % endfor % } { % for VAR in VAR . subclasses % } { { render_class ( VAR ) } } { % endfor % } } NEWLINE { % - endmacro % } NEWLINE { % for VAR in classes % } NEWLINE { { render_class ( VAR ) } } NEWLINE { % endfor % }", "import shutil NEWLINE import sys NEWLINE import time NEWLINE print STRING NEWLINE with open ( sys . argv [ NUMBER ] , STRING ) as VAR : NEWLINE shutil . copyfileobj ( VAR , sys . stdout ) NEWLINE sys . stdout . flush ( ) NEWLINE time . sleep ( NUMBER )", ">> > from visual import sphere NEWLINE >> > VAR = sphere ( )", "import pandas as pd NEWLINE def with_pandas_groupby ( VAR , VAR , VAR ) : NEWLINE VAR = pd . Series ( VAR ) . groupby ( VAR ) NEWLINE return VAR . agg ( VAR )", "STRING . join ( [ random . choice ( [ STRING , STRING , STRING ] ) for VAR in range ( random . randint ( NUMBER , NUMBER ) ) ] )", "import httplib , urllib NEWLINE VAR = { STRING : STRING } NEWLINE VAR = STRING NEWLINE VAR = httplib . HTTPConnection ( STRING ) NEWLINE VAR . request ( STRING , STRING , VAR , VAR ) NEWLINE VAR = VAR . getresponse ( ) NEWLINE print VAR", "{ STRING : { STRING : { STRING : { } , STRING : { } } , STRING : { STRING : { } , STRING : { } } } }", "from xml . dom . minidom import parse NEWLINE import csv NEWLINE def writeToCSV ( VAR ) : NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = csv . DictWriter ( VAR , VAR = VAR ) NEWLINE VAR . writeheader ( ) NEWLINE VAR = VAR . getElementsByTagName ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . getElementsByTagName ( STRING ) [ NUMBER ] . childNodes [ NUMBER ] . data NEWLINE for VAR in VAR . getElementsByTagName ( STRING ) : NEWLINE VAR = VAR . childNodes [ NUMBER ] . data NEWLINE VAR . writerow ( { STRING : VAR , STRING : VAR } ) NEWLINE VAR = parse ( STRING ) NEWLINE VAR = VAR . getElementsByTagName ( STRING ) [ NUMBER ] NEWLINE VAR = VAR . getElementsByTagName ( STRING ) NEWLINE writeToCSV ( VAR )", "STRING . split ( STRING )", "import numpy NEWLINE import scipy . linalg NEWLINE VAR = numpy . matrix ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE VAR = numpy . matrix ( [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ] ) NEWLINE print scipy . linalg . solve ( VAR , VAR )", "from communicate import * NEWLINE VAR = NUMBER + NUMBER NEWLINE send_and_exit ( VAR )", "import base64 NEWLINE with open ( img_input , STRING ) as VAR : NEWLINE with open ( img_output_b64 , STRING ) as VAR : NEWLINE VAR . write ( base64 . b64encode ( VAR . read ( ) ) )", "NUMBER", "print df NEWLINE date group number NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER", "def parallel_main ( ) : NEWLINE import multiprocessing NEWLINE VAR = multiprocessing . Pool ( ) NEWLINE VAR , VAR = generate_data ( NUMBER , NUMBER ) NEWLINE VAR = itertools . izip ( itertools . repeat ( VAR ) , VAR . T ) NEWLINE VAR = VAR . imap ( parallel_func , VAR , chunksize = NUMBER ) NEWLINE VAR , VAR , VAR = [ np . array ( VAR ) for VAR in zip ( * VAR ) ] NEWLINE VAR = gaussian ( VAR , VAR , VAR , VAR ) NEWLINE def parallel_func ( VAR ) : NEWLINE return invert ( * VAR )", "for VAR , VAR in enumerate ( lst ) : NEWLINE for VAR in lst [ VAR + NUMBER : ] : NEWLINE", ">> > [ list ( VAR ) for VAR in product ( [ NUMBER , NUMBER ] , repeat = NUMBER ) ] NEWLINE [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ]", "VAR = [ [ NUMBER for VAR in xrange ( NUMBER ) ] for VAR in xrange ( NUMBER ) ] NEWLINE for ( VAR , VAR ) , VAR in Counter ( zip ( a , a [ NUMBER : ] ) ) . iteritems ( ) : NEWLINE VAR [ VAR - NUMBER ] [ VAR - NUMBER ] = VAR NEWLINE print VAR NEWLINE [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]", ">> > class Bar ( Foo ) : NEWLINE . . . pass NEWLINE . . . NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE File STRING , line NUMBER , in __new__ NEWLINE TypeError : type STRING is not an acceptable base type", "VAR = PushbackWrapper ( original_iterator ) NEWLINE VAR = next ( VAR ) NEWLINE if went_too_far ( VAR ) : NEWLINE VAR . pushback ( VAR ) NEWLINE break ;", ">> > VAR = STRING NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING , STRING ]", "def generate_neighbors ( VAR , VAR ) : NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR , VAR = VAR [ : VAR ] , VAR [ VAR + NUMBER : ] NEWLINE for VAR in VAR : NEWLINE if VAR != VAR [ VAR ] : NEWLINE yield VAR + VAR + VAR", "def check_password ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR , VAR , VAR = VAR . split ( STRING ) NEWLINE return VAR == get_hexdigest ( VAR , VAR , VAR )", ">> > VAR = STRING NEWLINE >> > print STRING % ( len ( VAR ) + NUMBER , VAR ) NEWLINE < abcdef > NEWLINE >> > print STRING % ( len ( VAR ) + NUMBER , VAR ) NEWLINE < abcdef > NEWLINE >> >", "In [ NUMBER ] : VAR = STRING NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : STRING NEWLINE In [ NUMBER ] : VAR = bytes ( filter ( lambda VAR : VAR != STRING , VAR ) ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : STRING", "for VAR in itertools . product ( self . data1 , self . data2 , self . data3 , self . data4 ) : NEWLINE", "from collections import defaultdict NEWLINE VAR = ( ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ) NEWLINE VAR = defaultdict ( int ) NEWLINE for VAR , VAR , VAR in VAR : NEWLINE VAR [ ( VAR , VAR ) ] += VAR NEWLINE VAR = tuple ( [ ( * VAR , VAR ) for VAR , VAR in VAR . items ( ) ] ) NEWLINE print ( VAR )", "import numpy as np NEWLINE VAR = np . array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE VAR = np . lib . pad ( VAR , ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ) , STRING , constant_values = ( NUMBER ) )", "NUMBER NUMBER NUMBER newcol NEWLINE NUMBER NUMBER NUMBER NUMBER [ NUMBER , NUMBER , NUMBER ] NEWLINE NUMBER NUMBER NUMBER NUMBER [ NUMBER , NUMBER , NUMBER ] NEWLINE NUMBER NUMBER NUMBER NUMBER [ NUMBER , NUMBER , NUMBER ]", "VAR = getpass ( STRING ) NEWLINE VAR = passwd_encrypt [ : NUMBER ] NEWLINE VAR = hashlib . md5 ( ) NEWLINE VAR . update ( VAR ) NEWLINE VAR . update ( VAR . encode ( ) ) NEWLINE if passwd_encrypt != VAR + VAR . hexdigest ( ) : NEWLINE raise LoginFailed ( )", "Full Example NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE class Teacher ( models . Model ) : NEWLINE STRING NEWLINE VAR = ( ( VAR , _ ( STRING ) ) , ( VAR , _ ( STRING ) ) , ) NEWLINE VAR = models . CharField ( max_length = NUMBER , VAR = _ ( STRING ) , VAR = VAR ) NEWLINE VAR = models . CharField ( max_length = NUMBER , VAR = _ ( STRING ) ) NEWLINE VAR = models . CharField ( max_length = NUMBER , VAR = _ ( STRING ) ) NEWLINE VAR = models . CharField ( max_length = NUMBER , VAR = _ ( STRING ) ) NEWLINE VAR = models . OneToOneField ( to = User , related_name = STRING ) NEWLINE def enable ( self ) : NEWLINE STRING NEWLINE self . VAR . is_active = True NEWLINE self . VAR . save ( ) NEWLINE def disable ( self ) : NEWLINE STRING NEWLINE self . VAR . is_active = False NEWLINE self . VAR . save ( ) NEWLINE def get_absolute_url ( self ) : NEWLINE return reverse ( STRING , args = ( self . pk , ) ) NEWLINE class TeacherCreation ( SuccessMessageMixin , CreateView ) : NEWLINE STRING NEWLINE VAR = STRING NEWLINE VAR = TeacherForm NEWLINE VAR = Teacher NEWLINE VAR = UserCreationForm NEWLINE VAR = STRING NEWLINE def get_context_data ( self , ** kwargs ) : NEWLINE VAR = super ( TeacherCreation , self ) . get_context_data ( ** kwargs ) NEWLINE VAR [ STRING ] = self . VAR NEWLINE return VAR NEWLINE def form_valid ( self , form ) : NEWLINE VAR = UserCreationForm ( self . request . POST ) NEWLINE if VAR . is_valid ( ) : NEWLINE VAR = VAR . save ( ) NEWLINE VAR = form . save ( commit = False ) NEWLINE VAR . user_id = VAR . id NEWLINE VAR . save ( ) NEWLINE return HttpResponseRedirect ( self . get_success_url ( ) ) NEWLINE class TeacherUpdate ( SuccessMessageMixin , UpdateView ) : NEWLINE STRING NEWLINE VAR = Teacher NEWLINE VAR = STRING NEWLINE VAR = TeacherForm NEWLINE VAR = UserChangeForm NEWLINE VAR = STRING NEWLINE def get_context_data ( self , ** kwargs ) : NEWLINE VAR = super ( TeacherUpdate , self ) . get_context_data ( ** kwargs ) NEWLINE VAR [ STRING ] = self . VAR ( self . request . POST or None , instance = self . object . VAR ) NEWLINE return VAR NEWLINE def form_valid ( self , form ) : NEWLINE VAR = UserChangeForm ( self . request . POST , instance = self . object . VAR ) NEWLINE if VAR . is_valid ( ) : NEWLINE VAR . save ( ) NEWLINE return super ( TeacherUpdate , self ) . form_valid ( form ) NEWLINE { % extends STRING % } NEWLINE { % load crispy_forms_tags % } NEWLINE { % block title % } NEWLINE New Teacher Form NEWLINE { % endblock % } NEWLINE { % block container % } NEWLINE < form method = STRING > { % csrf_token % } NEWLINE < div class = STRING > NEWLINE < div class = STRING > NEWLINE < h3 class = STRING > Teacher Information < / h3 > NEWLINE < / div > NEWLINE < div class = STRING > NEWLINE { { VAR | crispy } } NEWLINE { { form | crispy } } NEWLINE < button class = STRING type = STRING > NEWLINE < span class = STRING aria - hidden = STRING > < / span > NEWLINE Save NEWLINE < / button > NEWLINE < / div > NEWLINE < / div > NEWLINE < / form > NEWLINE { % endblock % }", "models . py NEWLINE from django . db import models NEWLINE class CheckList ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . ForeignKey ( STRING ) NEWLINE VAR = models . ManyToManyField ( STRING , blank = True ) NEWLINE def __unicode__ ( VAR ) : NEWLINE return VAR . VAR NEWLINE class CheckListType ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . ManyToManyField ( STRING ) NEWLINE def __unicode__ ( VAR ) : NEWLINE return VAR . VAR NEWLINE class CheckListOption ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE def __unicode__ ( VAR ) : NEWLINE return VAR . VAR", "for VAR in unique_trans : NEWLINE VAR = max ( df . ix [ VAR ] . index . values ) NEWLINE VAR = df . ix [ VAR ] [ STRING ] . copy ( ) NEWLINE df . loc [ VAR , STRING ] = np . array ( df . ix [ VAR ] [ STRING ] ) + NUMBER NEWLINE df . loc [ VAR , STRING ] = np . array ( VAR . shift ( - NUMBER ) - NUMBER ) NEWLINE df . loc [ ( VAR , VAR ) , STRING ] = np . nan NEWLINE print ( df )", "admin . py NEWLINE from django . contrib import admin NEWLINE from . forms import CheckListForm NEWLINE from . models import CheckList , CheckListType , CheckListOption NEWLINE class CheckListAdmin ( admin . ModelAdmin ) : NEWLINE VAR = CheckListForm NEWLINE admin . site . register ( CheckList , CheckListAdmin ) NEWLINE admin . site . register ( CheckListType ) NEWLINE admin . site . register ( CheckListOption )", "array ( [ [ NUMBER , - NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , - NUMBER , NUMBER , NUMBER ] , [ - NUMBER , - NUMBER , - NUMBER , NUMBER ] ] )", "import numpy as np NEWLINE import scipy . ndimage . filters as filters NEWLINE import scipy . ndimage . morphology as morphology NEWLINE def detect_local_minima ( VAR ) : NEWLINE STRING NEWLINE VAR = morphology . generate_binary_structure ( len ( VAR . shape ) , NUMBER ) NEWLINE VAR = ( filters . minimum_filter ( VAR , footprint = VAR ) == VAR ) NEWLINE VAR = ( VAR == NUMBER ) NEWLINE VAR = morphology . binary_erosion ( VAR , structure = VAR , border_value = NUMBER ) NEWLINE VAR = VAR - VAR NEWLINE return np . where ( VAR )", "VAR = yearStart + datetime . timedelta ( NUMBER , index * NUMBER * NUMBER * NUMBER )", "import csv NEWLINE from collections import OrderedDict NEWLINE def parse_csv ( VAR ) : NEWLINE VAR = open ( VAR , mode = STRING ) NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE VAR = OrderedDict ( ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] ] = VAR [ NUMBER : ] NEWLINE return VAR NEWLINE parse_csv ( STRING )", "VAR = db . TVChannel ( ) . get_id ( channel_id ) NEWLINE VAR = ChannelForm ( request . form , obj = VAR ) NEWLINE VAR . CITY1adapt . process_data ( VAR . streams [ STRING ] [ STRING ] ) NEWLINE", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > NEWLINE >> > re . search ( STRING , VAR ) . group ( NUMBER ) NEWLINE STRING NEWLINE >> > re . search ( STRING , VAR ) . group ( NUMBER ) NEWLINE STRING", "def unique_words ( VAR ) : NEWLINE VAR = open ( VAR ) NEWLINE VAR = { } NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR = VAR . split ( ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = VAR NEWLINE VAR . append ( VAR ) NEWLINE for VAR in VAR : NEWLINE if VAR . count ( VAR ) != NUMBER and VAR not in VAR : NEWLINE del ( VAR [ VAR ] ) NEWLINE VAR . append ( VAR ) NEWLINE for VAR in VAR : NEWLINE print STRING + VAR + STRING + str ( VAR [ VAR ] )", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE print sorted ( VAR , key = lambda VAR : int ( VAR . split ( ) [ NUMBER ] ) )", "d . plot ( )", "VAR = __import__ ( STRING , . . . ) . mymod", "In [ NUMBER ] : data = STRING NEWLINE In [ NUMBER ] : df = pandas . read_fwf ( StringIO ( data ) , widths = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "class CubicBSpline ( object ) : NEWLINE [ . . . ] NEWLINE def clamped ( self ) : NEWLINE VAR = [ self . points [ NUMBER ] ] * NUMBER + self . points + [ self . points [ - NUMBER ] ] * NUMBER NEWLINE return CubicBSpline ( VAR )", "from random import randrange , choice NEWLINE VAR = STRING NEWLINE VAR = STRING . join ( STRING . join ( choice ( VAR ) for VAR in xrange ( randrange ( NUMBER , NUMBER ) ) ) for VAR in xrange ( NUMBER ) ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR ) NEWLINE def liner ( VAR , VAR , VAR , VAR = NUMBER ) : NEWLINE VAR = len ( VAR ) NEWLINE VAR = len ( VAR ) if VAR else NUMBER NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = VAR . read ( VAR ) NEWLINE VAR = STRING NEWLINE while VAR : NEWLINE VAR = VAR . rfind ( VAR ) NEWLINE if VAR == - NUMBER : NEWLINE VAR = VAR NEWLINE VAR = STRING NEWLINE else : NEWLINE VAR = VAR [ NUMBER : VAR + VAR ] NEWLINE VAR = VAR [ VAR + VAR : ] NEWLINE VAR = VAR + VAR NEWLINE VAR = VAR NEWLINE VAR = VAR = NUMBER NEWLINE while VAR + NUMBER : NEWLINE VAR = VAR . find ( VAR , VAR ) NEWLINE if VAR + NUMBER : yield VAR [ VAR : VAR + VAR ] NEWLINE else : break NEWLINE VAR = VAR + VAR NEWLINE VAR = VAR . read ( VAR ) NEWLINE yield VAR NEWLINE for VAR in liner ( STRING , STRING ) : NEWLINE print VAR", "def append_values_inside ( VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE VAR . append ( VAR ) NEWLINE return ( VAR , VAR ) NEWLINE for VAR in ratings_and_users . map ( lambda VAR : append_values_inside ( VAR [ NUMBER ] , VAR [ NUMBER ] ) ) . collect ( ) : NEWLINE print ( VAR )", "val1 NEWLINE Location Date gas NEWLINE A NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER no2 NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER o3 NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER so2 NUMBER NEWLINE B NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER no2 NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER o3 NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER so2 NUMBER", "The simple solution NEWLINE import threading NEWLINE def work ( ) : NEWLINE threading . Timer ( NUMBER , work ) . start ( ) NEWLINE print STRING NEWLINE work ( )", "from itertools import combinations NEWLINE for VAR , VAR in combinations ( sys . argv [ NUMBER : ] , NUMBER ) : NEWLINE with open ( VAR ) as VAR , open ( VAR ) as VAR : NEWLINE print set ( VAR . rstrip ( ) for VAR in VAR ) . intersection ( map ( str . rstrip , VAR ) )", "return ( NUMBER , NUMBER , NUMBER , NUMBER , . . . ) NEWLINE return Projection ( NUMBER , NUMBER , NUMBER , NUMBER , . . . ) NEWLINE return Projection ( last_q = last_q , fcast_yr = f_cast_yr , . . . )", "for / D % % d in ( * ) do script . py % % d", "( SELECT t1 . alt_bilesen FROM urunler_seviyeler t1 WHERE t1 . parcano = STRING ) NEWLINE UNION ALL NEWLINE ( SELECT t2 . alt_bilesen FROM urunler_seviyeler t1 JOIN urunler_seviyeler t2 ON t2 . parcano = t1 . alt_bilesen WHERE t1 . parcano = STRING ) NEWLINE UNION ALL NEWLINE ( SELECT t3 . alt_bilesen FROM urunler_seviyeler t1 JOIN urunler_seviyeler t2 ON t2 . parcano = t1 . alt_bilesen JOIN urunler_seviyeler t3 ON t3 . parcano = t2 . alt_bilesen WHERE t1 . parcano = STRING ) NEWLINE UNION ALL NEWLINE ( SELECT t4 . alt_bilesen FROM urunler_seviyeler t1 JOIN urunler_seviyeler t2 ON t2 . parcano = t1 . alt_bilesen JOIN urunler_seviyeler t3 ON t3 . parcano = t2 . alt_bilesen JOIN urunler_seviyeler t4 ON t4 . parcano = t3 . alt_bilesen WHERE t1 . parcano = STRING ) NEWLINE ORDER BY NUMBER", "class userData ( ndb . Model ) : NEWLINE VAR = ndb . StringProperty ( ) NEWLINE VAR = ndb . StringProperty ( ) NEWLINE VAR = ndb . StringProperty ( ) NEWLINE VAR = userData . query ( ) . filter ( ndb . GenericProperty ( STRING ) == STRING ) . fetch ( projection = [ userData . VAR , userData . VAR ] )", "VAR = open ( path , STRING ) NEWLINE VAR = NUMBER NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR > VAR : NEWLINE VAR = VAR . split ( ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR . close ( )", "import itertools NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = NUMBER NEWLINE VAR = None NEWLINE for VAR in itertools . permutations ( map ( str , VAR ) ) : NEWLINE VAR = int ( STRING . join ( VAR ) ) NEWLINE if VAR > VAR : NEWLINE VAR = VAR NEWLINE VAR = VAR NEWLINE print map ( int , VAR ) NEWLINE print VAR", "one NEWLINE two NEWLINE three", "VAR = data . ravel ( ) [ ind . ravel ( ) + np . repeat ( range ( NUMBER , NUMBER * ind . shape [ NUMBER ] , NUMBER ) , ind . shape [ NUMBER ] ) ] . reshape ( ind . shape )", "import sys , tty NEWLINE tty . setraw ( sys . stdin . fileno ( ) ) NEWLINE VAR = sys . stdin . read ( NUMBER )", "import re NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = [ VAR . strip ( ) for VAR in VAR . readlines ( ) if re . match ( STRING , VAR ) ] NEWLINE for VAR in VAR : NEWLINE print VAR NEWLINE >> > NUMBER + BB { MYXV ABC NUMBER SM MYXV YA NUMBER - NUMBER < DO > } | NUMBER / NUMBER NUMBER s NUMBER s NEWLINE >> > NUMBER + BB { MYXV ABC NUMBER NS MYXV YT NUMBER - NUMBER < DO > } | NUMBER NUMBER s NUMBER s NEWLINE >> > NUMBER + BB { NXTW VXA NUMBER SL MYXV YA NUMBER - NUMBER < DO > } | NUMBER wala NUMBER s NUMBER s NEWLINE >> > NUMBER + BB { NXTW VXA NUMBER - NUMBER SP MYXV YA NUMBER - NUMBER < DO > } | NUMBER wala NUMBER s NUMBER s", "NUMBER NEWLINE a NUMBER NEWLINE b NUMBER NEWLINE c NUMBER", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = NUMBER NEWLINE VAR = np . linspace ( NUMBER , NUMBER , VAR ) NEWLINE VAR = np . exp ( VAR ) NEWLINE VAR = NUMBER * np . exp ( NUMBER * VAR ) * np . random . normal ( NUMBER , NUMBER , VAR ) NEWLINE VAR += VAR NEWLINE VAR = np . polyfit ( VAR , VAR , NUMBER ) NEWLINE VAR = np . polyval ( VAR , VAR ) NEWLINE VAR , VAR = plt . subplots ( nrows = NUMBER , sharex = True ) NEWLINE VAR [ NUMBER ] . plot ( VAR , VAR , STRING ) NEWLINE VAR [ NUMBER ] . plot ( VAR , VAR , STRING ) NEWLINE VAR [ NUMBER ] . set ( title = STRING ) NEWLINE VAR [ NUMBER ] . plot ( VAR , VAR - VAR , STRING ) NEWLINE VAR [ NUMBER ] . set ( title = STRING ) NEWLINE plt . show ( )", "VAR = np . where ( ( abs ( arr_a - arr_b ) / arr_b ) > NUMBER , NUMBER , NUMBER )", "def Person_Link ( VAR ) : NEWLINE return STRING % VAR . contactid . contactid NEWLINE Person_Link . allow_tags = True", "Option NUMBER NEWLINE from tkinter import * NEWLINE VAR = Tk ( ) NEWLINE Entry ( VAR , width = STRING ) . pack ( ) NEWLINE VAR = Frame ( VAR , width = NUMBER , height = NUMBER , bg = STRING ) NEWLINE VAR = Frame ( VAR , width = NUMBER , height = NUMBER , bg = STRING ) NEWLINE VAR = Frame ( VAR , width = NUMBER , height = NUMBER , bg = STRING ) NEWLINE VAR . pack ( ) NEWLINE VAR . pack ( ) NEWLINE VAR . pack ( ) NEWLINE VAR . bind ( STRING , lambda VAR : VAR . focus_set ( ) ) NEWLINE VAR . bind ( STRING , lambda VAR : VAR . focus_set ( ) ) NEWLINE VAR . bind ( STRING , lambda VAR : VAR . focus_set ( ) ) NEWLINE VAR . mainloop ( )", "def vig_2 ( VAR , VAR ) : NEWLINE return string . ascii_uppercase [ ( ord ( VAR ) + ord ( VAR ) ) % NUMBER ]", "os . stat ( filepath ) . st_mtime", "VAR = [ STRING , NUMBER , STRING , STRING , NUMBER , STRING ] NEWLINE print STRING . format ( * VAR )", "for VAR in b : NEWLINE if VAR in a : NEWLINE print STRING % ( VAR ) NEWLINE else : NEWLINE print STRING % ( VAR )", "VAR = - ( Y log ( L3 ) + ( NUMBER - Y ) log ( NUMBER - L3 ) )", "df . groupby ( STRING ) . agg ( f ) NEWLINE STRING", "map ( int , your_list )", "VAR = Application ( [ SomeService ] , STRING , in_protocol = Soap11 ( validator = STRING ) , out_protocol = Soap11 ( polymorphic = True ) )", "DBSession . query ( Alert . id ) . join ( Like ) . join ( Post ) . filter ( Post . id == NUMBER ) . all ( )", "for VAR in dict_list : NEWLINE VAR = Label ( text = STRING + VAR [ STRING ] ) . grid ( row = [ i ] , column = NUMBER ) NEWLINE . . .", ">> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > VAR = [ STRING , NUMBER , STRING ] NEWLINE >> > VAR = lambda VAR : STRING . join ( [ STRING % str ( VAR ) for VAR in VAR ] ) NEWLINE >> > print STRING % ( VAR ( VAR ) , VAR ( VAR ) ) NEWLINE INSERT INTO ( STRING , STRING , STRING ) VALUES ( STRING , STRING , STRING )", "In [ NUMBER ] : VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE In [ NUMBER ] : for VAR in VAR : NEWLINE . . . : print ( STRING . format ( VAR , format_float ( VAR , NUMBER ) ) ) NEWLINE Input = NUMBER - - output = NUMBER NEWLINE Input = NUMBER - - output = NUMBER NEWLINE Input = NUMBER - - output = NUMBER NEWLINE Input = NUMBER - - output = NUMBER NEWLINE Input = NUMBER - - output = NUMBER NEWLINE Input = NUMBER - - output = NUMBER", "def split_string ( VAR , VAR ) : NEWLINE return re . split ( STRING . join ( re . escape ( VAR ) for VAR in VAR ) , VAR )", "if condition : NEWLINE import matplotlib as mlib NEWLINE else : NEWLINE import modifiedmatplotlib as mlib", "import re NEWLINE VAR = STRING NEWLINE VAR = re . search ( STRING , VAR ) NEWLINE print VAR . group ( NUMBER ) NEWLINE VAR = STRING NEWLINE VAR = re . search ( STRING , VAR ) NEWLINE print VAR . group ( NUMBER ) NEWLINE", "In [ NUMBER ] : a1 . shape NEWLINE Out [ NUMBER ] : ( NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : a1 . strides NEWLINE Out [ NUMBER ] : ( NUMBER , NUMBER )", "type ( STRING ) == STRING NEWLINE type ( NUMBER ) == STRING NEWLINE type ( true ) == STRING NEWLINE type ( nil ) == STRING NEWLINE type ( print ) == STRING NEWLINE type ( coroutine . create ( function ( ) end ) ) == STRING NEWLINE type ( { } ) == STRING NEWLINE type ( torch . Tensor ( ) ) == STRING", "import random NEWLINE def read_file ( ) : NEWLINE VAR = { } NEWLINE VAR = True NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE for VAR in VAR . readlines ( ) : NEWLINE if VAR : NEWLINE VAR = False NEWLINE continue NEWLINE VAR , VAR = VAR . strip ( ) . split ( STRING ) NEWLINE VAR = int ( VAR ) NEWLINE VAR = map ( int , VAR . split ( STRING ) ) NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR NEWLINE def build_random_match ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE for VAR in VAR [ VAR ] : NEWLINE if already_in_edges ( VAR , VAR ) : NEWLINE continue NEWLINE else : NEWLINE VAR [ VAR ] = VAR NEWLINE break NEWLINE return VAR NEWLINE def already_in_edges ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE if VAR [ VAR ] == VAR : NEWLINE return True NEWLINE else : NEWLINE return False NEWLINE def get_unmatched_women ( VAR , VAR ) : NEWLINE return [ VAR for VAR in VAR . keys ( ) if VAR not in VAR . keys ( ) ] NEWLINE def not_in_match ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE if VAR [ VAR ] == VAR : NEWLINE return False NEWLINE else : NEWLINE return True NEWLINE def find_unmatched_man ( VAR , VAR , VAR ) : NEWLINE VAR = VAR [ VAR ] NEWLINE for VAR in VAR : NEWLINE if not_in_match ( VAR , VAR ) : NEWLINE return VAR NEWLINE else : NEWLINE return False NEWLINE def remove_man_from_match ( VAR , VAR , VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE if VAR [ VAR ] == VAR : NEWLINE VAR = VAR NEWLINE break NEWLINE del VAR [ VAR ] NEWLINE VAR = VAR [ VAR ] NEWLINE VAR . remove ( VAR ) NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR NEWLINE def relax ( VAR , VAR , VAR ) : NEWLINE VAR = find_unmatched_man ( VAR , VAR , VAR ) NEWLINE if VAR : NEWLINE VAR [ VAR ] = VAR NEWLINE elif len ( VAR [ VAR ] ) == NUMBER : NEWLINE return VAR NEWLINE else : NEWLINE VAR = random . randint ( NUMBER , len ( VAR [ VAR ] ) - NUMBER ) NEWLINE VAR = VAR [ VAR ] [ VAR ] NEWLINE VAR = remove_man_from_match ( VAR , VAR , VAR , VAR ) NEWLINE VAR [ VAR ] = VAR NEWLINE VAR = relax ( VAR , VAR , VAR ) NEWLINE return VAR NEWLINE def improve_match ( VAR , VAR ) : NEWLINE if len ( VAR ) == len ( VAR ) : NEWLINE return VAR NEWLINE VAR = get_unmatched_women ( VAR , VAR ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . copy ( ) NEWLINE VAR = relax ( VAR , VAR , VAR ) NEWLINE if len ( VAR ) > len ( VAR ) : NEWLINE return VAR NEWLINE else : NEWLINE VAR = VAR NEWLINE else : NEWLINE return VAR NEWLINE def main ( ) : NEWLINE VAR = read_file ( ) NEWLINE VAR = build_random_match ( VAR ) NEWLINE if len ( VAR ) == len ( VAR ) : NEWLINE print STRING , VAR NEWLINE else : NEWLINE VAR = NUMBER NEWLINE while VAR < len ( VAR ) : NEWLINE VAR = len ( VAR ) NEWLINE VAR = improve_match ( VAR , VAR ) NEWLINE return VAR NEWLINE if __name__ == STRING : NEWLINE VAR = main ( ) NEWLINE print STRING , len ( VAR ) NEWLINE print STRING , VAR", "VAR = { } NEWLINE for VAR , VAR in enumerate ( ascii_lowercase ) : NEWLINE VAR [ VAR ] = VAR + NUMBER", "< div id = STRING > < body > < script src = STRING > < / script > NEWLINE < script src = STRING > < / script > NEWLINE < link href = STRING rel = STRING type = STRING > NEWLINE < / link > < / body > < / div >", "from lxml import html NEWLINE from urlparse import urlparse NEWLINE VAR = html . fromstring ( html_data ) NEWLINE VAR = VAR . cssselect ( STRING ) NEWLINE VAR = set ( [ ] ) NEWLINE for VAR in VAR : NEWLINE try : VAR = VAR . attrib [ STRING ] NEWLINE except KeyError : continue NEWLINE VAR = urlparse ( VAR ) NEWLINE VAR . add ( VAR . netloc ) NEWLINE print VAR", "import re NEWLINE import csv NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE with open ( STRING ) as VAR : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . DictWriter ( VAR , delimiter = STRING , VAR = VAR ) NEWLINE VAR . writerow ( dict ( ( VAR , VAR ) for VAR in VAR ) ) NEWLINE for VAR in VAR : NEWLINE VAR = re . search ( STRING , VAR ) NEWLINE if VAR is not None and VAR . group ( STRING ) in VAR : NEWLINE VAR . writerow ( VAR . groupdict ( ) )", "import logging NEWLINE VAR = logging . getLogger ( ) NEWLINE VAR . debug ( STRING )", "from flask import Flask NEWLINE from flask import render_template , abort , jsonify , request , redirect , json NEWLINE from my_app . machine_learning import analyzer NEWLINE VAR = Flask ( __name__ ) NEWLINE VAR . debug = True NEWLINE @ VAR . route ( STRING ) NEWLINE def index ( ) : NEWLINE return render_template ( STRING ) NEWLINE @ VAR . route ( STRING , methods = [ STRING ] ) NEWLINE def learning ( ) : NEWLINE VAR = json . loads ( request . VAR ) NEWLINE VAR = analyzer ( VAR ) NEWLINE return jsonify ( VAR ) NEWLINE if __name__ == STRING : NEWLINE VAR . run ( )", "with open ( STRING ) as VAR : NEWLINE print ( STRING . join ( replace_line ( VAR , STRING , [ STRING , STRING ] ) ) )", ">> > from itertools import starmap NEWLINE >> > list ( starmap ( STRING . format , zip ( * [ iter ( data ) ] * NUMBER ) ) ) NEWLINE [ STRING , STRING ]", "In [ NUMBER ] : res . reindex ( np . arange ( res . index [ NUMBER ] , res . index [ - NUMBER ] + NUMBER ) ) NEWLINE Out [ NUMBER ] : NEWLINE goods a b c NEWLINE NUMBER NUMBER NUMBER NaN NEWLINE NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NaN NUMBER NaN NEWLINE NUMBER NaN NaN NaN NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NaN NaN", "array ( [ [ True , True , False , False , False , False ] , [ True , True , False , False , False , False ] , [ False , False , True , True , False , False ] , [ False , False , True , True , False , False ] , [ False , False , False , False , True , True ] , [ False , False , False , False , True , True ] ] , dtype = bool )", "gnuplot sample . script", ">> > nums = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > colors = [ STRING , STRING , STRING , STRING ] NEWLINE >> > chunks = NUMBER NEWLINE >> > for VAR , VAR in enumerate ( nums ) : NEWLINE print ( STRING % ( VAR , colors [ VAR * chunks // len ( nums ) % len ( colors ) ] ) ) NEWLINE NUMBER : red NEWLINE NUMBER : red NEWLINE NUMBER : green NEWLINE NUMBER : green NEWLINE NUMBER : orange NEWLINE NUMBER : orange NEWLINE NUMBER : blue NEWLINE NUMBER : blue", "r . sub ( STRING , s )", "class Meta ( type ) : NEWLINE def __new__ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = type . __new__ ( VAR , VAR , VAR , VAR ) NEWLINE for VAR in VAR : NEWLINE if isinstance ( VAR , Meta ) : NEWLINE try : NEWLINE VAR . extending ( VAR ) NEWLINE except AttributeError : NEWLINE pass NEWLINE return VAR", ">> > Write ( STRING , speed = NUMBER ) NEWLINE Hello , World ! NEWLINE >> > Press ( STRING )", "for VAR in range ( len ( results ) ) : NEWLINE VAR = df . iloc [ results [ VAR ] ] NEWLINE print VAR [ STRING ] . mean ( )", "import numpy as np NEWLINE from matplotlib import pyplot as plt NEWLINE from matplotlib import animation NEWLINE VAR = plt . figure ( ) NEWLINE VAR = plt . axes ( xlim = ( NUMBER , NUMBER ) , ylim = ( - NUMBER , NUMBER ) ) NEWLINE VAR , = VAR . plot ( [ ] , [ ] , STRING , lw = NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = [ NUMBER ] NEWLINE VAR = [ VAR , VAR ] NEWLINE def animate ( VAR ) : NEWLINE VAR [ - NUMBER ] = VAR NEWLINE VAR . set_data ( VAR , VAR ) NEWLINE return VAR , NEWLINE def get_y ( ) : NEWLINE for VAR in range ( VAR ) : NEWLINE VAR = VAR / NUMBER NEWLINE VAR = - NUMBER * VAR * VAR ** NUMBER + VAR NEWLINE yield VAR NEWLINE VAR = animation . FuncAnimation ( VAR , animate , frames = get_y , interval = NUMBER ) NEWLINE plt . show ( )", "def gen_user ( ) : NEWLINE return { STRING : STRING , STRING : NUMBER } NEWLINE VAR = { STRING : [ gen_user ( ) for VAR in xrange ( NUMBER , NUMBER ) ] } NEWLINE VAR = { STRING : None } NEWLINE VAR [ STRING ] = [ gen_user ( ) for VAR in xrange ( NUMBER , NUMBER ) ]", "[ [ [ STRING , STRING , STRING ] , STRING , [ STRING , STRING , [ STRING , STRING ] ] ] ]", "import requests NEWLINE VAR = STRING NEWLINE VAR = { STRING : STRING } NEWLINE VAR = { STRING : open ( STRING ) } NEWLINE VAR = requests . post ( VAR , VAR = VAR , VAR = VAR ) NEWLINE print VAR . content", "VAR = { } NEWLINE VAR = df - df . shift ( NUMBER ) NEWLINE for VAR in df . columns : NEWLINE VAR [ VAR ] = VAR [ VAR ] [ VAR [ VAR ] != NUMBER ]", "import networkx as nx NEWLINE VAR = nx . DiGraph ( ) NEWLINE VAR . add_nodes_from ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR . add_edge ( NUMBER , NUMBER ) NEWLINE VAR . add_edge ( NUMBER , NUMBER ) NEWLINE VAR = nx . DiGraph ( ) NEWLINE VAR . add_nodes_from ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR . add_edge ( NUMBER , NUMBER ) NEWLINE def difference ( VAR , VAR ) : NEWLINE VAR = nx . create_empty_copy ( VAR ) NEWLINE VAR . name = STRING % ( VAR . name , VAR . name ) NEWLINE if set ( VAR ) != set ( VAR ) : NEWLINE raise nx . NetworkXError ( STRING ) NEWLINE VAR = set ( VAR . edges_iter ( ) ) NEWLINE VAR = set ( VAR . edges_iter ( ) ) NEWLINE VAR = VAR . symmetric_difference ( VAR ) NEWLINE VAR . add_edges_from ( VAR ) NEWLINE return VAR NEWLINE print ( difference ( VAR , VAR ) . edges ( ) )", ">> > set_sim ( [ STRING , STRING ] , NUMBER ) NEWLINE >> > set_sim ( [ STRING , STRING ] , NUMBER ) NEWLINE >> > set_sim ( [ STRING , STRING ] , NUMBER ) NEWLINE >> > get_sim ( [ STRING , STRING ] ) NEWLINE NUMBER NEWLINE >> > similarities NEWLINE { ( STRING , STRING ) : NUMBER , ( STRING , STRING ) : NUMBER , ( STRING , STRING ) : NUMBER }", "def build_pseudo_header ( VAR , VAR , VAR ) : NEWLINE VAR = bytearray . fromhex ( VAR ) NEWLINE VAR = bytearray . fromhex ( VAR ) NEWLINE VAR = struct . pack ( STRING , NUMBER ) NEWLINE VAR = struct . pack ( STRING , VAR ) NEWLINE return VAR + VAR + VAR + VAR", "[ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ] NEWLINE [ { STRING : STRING , STRING : STRING } ] NEWLINE [ { STRING : STRING , STRING : STRING } ] NEWLINE [ { STRING : STRING , STRING : STRING } ]", "[ program : myprog ] NEWLINE VAR = / opt / myprog / bin / myprog - - opt1 - - opt2 NEWLINE VAR = / opt / myprog NEWLINE VAR = myuser", "import numpy as np NEWLINE from scipy import stats NEWLINE from mayavi import mlab NEWLINE VAR , VAR = NUMBER , NUMBER NEWLINE VAR = NUMBER * np . random . normal ( VAR , VAR , NUMBER ) NEWLINE VAR = NUMBER * np . random . normal ( VAR , VAR , NUMBER ) NEWLINE VAR = NUMBER * np . random . normal ( VAR , VAR , NUMBER ) NEWLINE VAR = np . vstack ( [ VAR , VAR , VAR ] ) NEWLINE VAR = stats . gaussian_kde ( VAR ) NEWLINE VAR = VAR ( VAR ) NEWLINE VAR = mlab . VAR ( STRING ) NEWLINE VAR = mlab . points3d ( VAR , VAR , VAR , VAR , scale_mode = STRING , scale_factor = NUMBER ) NEWLINE mlab . axes ( ) NEWLINE mlab . show ( )", "cdefghijklmnopqrstuvwxyzab", "class Cheese ( ) : NEWLINE def __init__ ( self , num_holes = None ) : NEWLINE if num_holes is None : NEWLINE . . .", "print columns [ NUMBER ] [ NUMBER ]", "$ python3 NUMBER foo . py NEWLINE iteration NEWLINE i is = NEWLINE NUMBER NEWLINE iteration NEWLINE i is = NEWLINE NUMBER NEWLINE NUMBER a - m here NEWLINE NUMBER NEWLINE i is = NEWLINE NUMBER NEWLINE iteration NEWLINE i is = NEWLINE NUMBER NEWLINE NUMBER b - m here NEWLINE NUMBER NEWLINE i is = NEWLINE NUMBER NEWLINE iteration NEWLINE i is = NEWLINE NUMBER NEWLINE NUMBER b - m here NEWLINE NUMBER NEWLINE iteration NEWLINE i is = NEWLINE NUMBER NEWLINE NUMBER b - m herenp . dot ( A [ : , None , : ] * B [ None , : , : ] , C . T )", ">> > import ast NEWLINE >> > ast . literal_eval ( STRING ) NEWLINE [ STRING , STRING , STRING ]", "In [ NUMBER ] : df [ pd . eval ( STRING ) ] NEWLINE Out [ NUMBER ] : NEWLINE label Y88_N diff div fold NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "logging . disable ( logging . NOTSET )", "VAR = x . reshape ( x . shape [ NUMBER ] / NUMBER , NUMBER , x . shape [ NUMBER ] , NUMBER )", "print_table ( NUMBER )", "[ VAR [ STRING ] . python_type for VAR in query . column_descriptions ]", "VAR , VAR , VAR = rv1 . dist . _parse_args ( * rv1 . args , ** rv1 . kwds ) NEWLINE VAR , VAR , VAR = rv2 . dist . _parse_args ( * rv2 . args , ** rv2 . kwds ) NEWLINE print STRING NEWLINE print STRING . format ( VAR , VAR , VAR ) NEWLINE print NEWLINE print STRING NEWLINE print STRING . format ( VAR , VAR , VAR )", "from asterisk import *", "VAR = df1 . select_dtypes ( include = [ STRING , STRING ] ) NEWLINE print ( VAR )", "class Comprehension ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . _iterable = VAR NEWLINE def __iter__ ( VAR ) : NEWLINE return iter ( VAR . _iterable ) NEWLINE def __getattr__ ( VAR , VAR ) : NEWLINE return Comprehension ( getattr ( VAR , VAR ) for VAR in VAR . _iterable ) NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE return Comprehension ( VAR [ VAR ] for VAR in VAR . _iterable ) NEWLINE def __call__ ( VAR , * args , ** kwargs ) : NEWLINE return Comprehension ( VAR ( * args , ** kwargs ) for VAR in VAR . _iterable )", "VAR = re . findall ( STRING , text ) NEWLINE", "VAR = df . unstack ( [ STRING ] ) . values NEWLINE", "sudo apt - get install php5 - odbc php5 - sybase tdsodbc", "$ python test . py NEWLINE Start : NUMBER NUMBER m NUMBER s N , NUMBER NUMBER m NUMBER s E NEWLINE NUMBER km north : NUMBER NUMBER m NUMBER s N , NUMBER NUMBER m NUMBER s E NEWLINE Control distance between both points : NUMBER km .", ">> > VAR = Vector ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR = Vector ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR - VAR NEWLINE [ NUMBER , NUMBER , NUMBER ]", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "if id not in D : NEWLINE D [ id ] = { }", "import re NEWLINE VAR = STRING NEWLINE VAR = re . compile ( STRING ) NEWLINE while True : NEWLINE VAR = VAR . search ( VAR ) NEWLINE if VAR is None : NEWLINE break NEWLINE strings . append ( VAR . group ( NUMBER ) ) NEWLINE VAR = VAR [ VAR . end ( ) : ] NEWLINE print strings", ">> > ( df != df . shift ( ) ) . any ( axis = NUMBER ) NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE dtype : bool", "VAR = [ ( VAR , aud [ tuple ( VAR [ : NUMBER ] ) ] ) for VAR in B if tuple ( VAR [ : NUMBER ] ) in aud ]", "- - - - - - - - - - - - - - - - - - - NEWLINE Name : some filename . mp3 NEWLINE Encoder : Gogo ( after NUMBER ) NEWLINE Bitrate : NUMBER NEWLINE - - - - - - - - - - - - - - - - - - - NEWLINE Name : another filename . mp3 NEWLINE Encoder : iTunes NEWLINE Bitrate : NUMBER NEWLINE an alternate way : NEWLINE Name : another filename . mp3", "VAR = StructType ( [ df1 . schema . fields [ NUMBER ] ] + list ( chain ( * [ VAR . schema . fields [ NUMBER : ] for VAR in dfs ] ) ) )", "In [ NUMBER ] : NEWLINE STRING . join ( df ) NEWLINE Out [ NUMBER ] : NEWLINE STRING", "def make_subtract ( VAR , VAR ) : NEWLINE def wrapper ( VAR ) : NEWLINE return VAR ( VAR ) - VAR NEWLINE return wrapper", "from imread import imread_from_blob NEWLINE VAR = imread_from_blob ( data , STRING ) NEWLINE >> > VAR NEWLINE array ( [ [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , . . . ,", "import subprocess NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = subprocess . check_output ( VAR )", "from BeautifulSoup import BeautifulSoup NEWLINE VAR = BeautifulSoup ( raw ) NEWLINE for VAR in VAR . findAll ( STRING ) : NEWLINE if VAR . string == STRING : NEWLINE VAR = [ VAR . string for VAR in VAR . parent . findAll ( ) if VAR . has_key ( STRING ) ] NEWLINE print VAR", "import sys NEWLINE VAR = declarative_base ( ) NEWLINE if len ( sys . argv ) > NUMBER and sys . argv [ NUMBER ] == STRING : NEWLINE VAR = create_engine ( STRING ) NEWLINE else : NEWLINE VAR = create_engine ( STRING ) NEWLINE VAR = Table ( STRING , VAR . metadata , autoload_with = VAR ) NEWLINE class Something ( VAR ) : NEWLINE VAR = VAR", "class Root ( dict ) : NEWLINE VAR = [ ( Allow , STRING , ALL_PERMISSIONS ) , ] NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR [ STRING ] = FooContainer ( VAR , STRING ) NEWLINE VAR [ STRING ] = BarContainer ( VAR , STRING ) NEWLINE class FooContainer ( object ) : NEWLINE VAR = [ ] NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . __parent__ = VAR NEWLINE VAR . __name__ = VAR NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE VAR = DBSession ( ) NEWLINE VAR = VAR . query ( Foo ) . filter_by ( id = VAR ) . scalar ( ) NEWLINE if VAR is None : NEWLINE raise KeyError NEWLINE VAR . __parent__ = VAR NEWLINE VAR . __name__ = VAR NEWLINE return VAR NEWLINE class Foo ( object ) : NEWLINE @ property NEWLINE def VAR ( VAR ) : NEWLINE VAR = [ ( Allow , STRING % VAR . id , STRING ) for VAR in VAR . VAR ] NEWLINE return VAR NEWLINE VAR = relation ( STRING ) NEWLINE class Bar ( object ) : NEWLINE VAR = [ ( Allow , Authenticated , STRING ) ]", "[ ( np . bincount ( VAR ) > NUMBER ) . sum ( ) for VAR in data ]", "In [ NUMBER ] : dfg . pivot_table ( [ STRING , STRING ] , STRING , STRING ) NEWLINE Out [ NUMBER ] : NEWLINE incoming level NEWLINE goods a b c a b c NEWLINE month NEWLINE NUMBER NUMBER NUMBER NaN NUMBER NUMBER NaN NEWLINE NUMBER NUMBER NaN NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NaN NUMBER NaN NaN NUMBER NaN NEWLINE NUMBER NaN NUMBER NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NaN NaN NUMBER NaN NaN", "for VAR in dicta : NEWLINE for VAR in [ STRING , STRING , STRING , STRING , STRING ] : NEWLINE del VAR [ VAR ]", "def tree ( VAR , VAR ) : NEWLINE for VAR in xrange ( NUMBER , VAR + NUMBER , NUMBER ) : NEWLINE print STRING . format ( STRING * VAR , VAR ) NEWLINE for VAR in xrange ( NUMBER ) : NEWLINE print STRING . format ( STRING * VAR , VAR ) NEWLINE . . . NEWLINE >> > tree ( NUMBER , NUMBER ) NEWLINE * NEWLINE ** * NEWLINE ** ** * NEWLINE ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** * NEWLINE ** * NEWLINE ** * NEWLINE >> > tree ( NUMBER , NUMBER ) NEWLINE * NEWLINE ** * NEWLINE ** ** * NEWLINE * NEWLINE * NEWLINE *", "{ % for VAR , VAR in result . items ( ) % } NEWLINE < span > { { VAR } } < / span > NEWLINE < ul > NEWLINE { % for VAR in VAR % } NEWLINE < li > { { VAR } } < / li > NEWLINE { % endfor % } NEWLINE < / ul > NEWLINE { % endfor % }", "VAR = STRING NEWLINE VAR = [ STRING ]", "VAR = dict ( ) NEWLINE VAR = STRING NEWLINE VAR . update ( { VAR : dict ( ) } )", ">> > [ str ( VAR ) . zfill ( NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "@ register . assignment_tag NEWLINE def get_current_time ( VAR ) : NEWLINE return datetime . datetime . now ( ) . strftime ( VAR )", "VAR = foobar2 . clip_lower ( NUMBER ) NEWLINE VAR [ STRING ] *= - NUMBER NEWLINE VAR [ STRING ] *= - NUMBER NEWLINE VAR = VAR . sum ( axis = NUMBER )", ">> > import timeit NEWLINE >> > VAR = range ( NUMBER ) NEWLINE >> > def foo ( VAR , VAR ) : pass NEWLINE . . . NEWLINE >> > def p ( VAR ) : return foo ( NUMBER , VAR ) NEWLINE . . . NEWLINE >> > timeit . timeit ( STRING , STRING ) NEWLINE NUMBER NEWLINE >> > timeit . timeit ( STRING , STRING ) NEWLINE NUMBER NEWLINE >> > timeit . timeit ( STRING , STRING ) NEWLINE NUMBER", "print STRING % ( count , conv )", ">> > import nltk . data NEWLINE >> > VAR = STRING NEWLINE >> > VAR = nltk . data . load ( STRING ) NEWLINE >> > VAR . tokenize ( VAR . strip ( ) )", "> uwsgi - - ini uwsgi . ini", "< ( ? : [ ^ > < ] | ( ? R ) ) * >", "from __future__ import print_function NEWLINE import sys NEWLINE import ply . lex as lex NEWLINE import ply . yacc as yacc NEWLINE VAR = ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , ) NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE def t_NUMBER ( VAR ) : NEWLINE STRING NEWLINE try : NEWLINE VAR . value = int ( VAR . value ) NEWLINE except ValueError : NEWLINE print ( STRING , VAR . value ) NEWLINE VAR . value = NUMBER NEWLINE return VAR NEWLINE VAR = ( ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ) NEWLINE def p_statement_expr ( VAR ) : NEWLINE STRING NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] NEWLINE print ( VAR [ NUMBER ] ) NEWLINE def p_expression_binop ( VAR ) : NEWLINE STRING NEWLINE if VAR [ NUMBER ] == STRING : VAR [ NUMBER ] = VAR [ NUMBER ] + VAR [ NUMBER ] NEWLINE elif VAR [ NUMBER ] == STRING : VAR [ NUMBER ] = VAR [ NUMBER ] - VAR [ NUMBER ] NEWLINE elif VAR [ NUMBER ] == STRING : VAR [ NUMBER ] = VAR [ NUMBER ] * VAR [ NUMBER ] NEWLINE elif VAR [ NUMBER ] == STRING : VAR [ NUMBER ] = VAR [ NUMBER ] / VAR [ NUMBER ] NEWLINE elif VAR [ NUMBER ] == STRING : VAR [ NUMBER ] = VAR [ NUMBER ] + VAR [ NUMBER ] NEWLINE def p_statement_lit ( VAR ) : NEWLINE STRING NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] NEWLINE def p_txtnumber ( VAR ) : NEWLINE STRING NEWLINE VAR [ NUMBER ] = w2n ( VAR [ NUMBER ] ) NEWLINE def w2n ( VAR ) : NEWLINE if VAR == STRING : return NUMBER NEWLINE elif VAR == STRING : return NUMBER NEWLINE elif VAR == STRING : return NUMBER NEWLINE assert ( False ) NEWLINE def process ( VAR ) : NEWLINE lex . lex ( ) NEWLINE yacc . yacc ( ) NEWLINE yacc . parse ( VAR ) NEWLINE if __name__ == STRING : NEWLINE VAR = open ( sys . argv [ NUMBER ] ) . read ( ) NEWLINE process ( VAR )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = csv . writer ( VAR , delimiter = STRING ) NEWLINE VAR . writerow ( VAR ) NEWLINE VAR . close ( )", "def my_view ( request ) : NEWLINE if request . session . get ( STRING , None ) : NEWLINE else : NEWLINE request . session [ STRING ] = STRING NEWLINE return HttpResponse ( STRING )", "import pandas as pd NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE VAR = pd . DataFrame ( { STRING : VAR . keys ( ) + [ STRING ] } ) NEWLINE VAR = VAR [ VAR [ STRING ] . isin ( VAR . keys ( ) ) ] NEWLINE VAR [ STRING ] . replace ( VAR , inplace = True ) NEWLINE print VAR", ">> > VAR = [ str ( VAR ) for VAR in ptree . productions ( ) ] NEWLINE >> > VAR NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "def mysort ( VAR , VAR , VAR = None ) : NEWLINE VAR = VAR . copy ( ) NEWLINE VAR = [ VAR [ NUMBER ] for VAR in eval ( str ( VAR . dtype ) ) ] NEWLINE if VAR : NEWLINE VAR = np . array ( [ VAR ( VAR ) for VAR in VAR [ VAR ] ] ) . VAR ( ) NEWLINE else : NEWLINE VAR = VAR [ VAR ] . VAR ( ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = VAR [ VAR ] [ VAR ] NEWLINE return VAR", ">> > from bs4 import BeautifulSoup NEWLINE >> > VAR = BeautifulSoup ( STRING ) NEWLINE >> > for VAR in VAR . select ( STRING ) : NEWLINE . . . VAR = VAR . find_next_sibling ( STRING ) NEWLINE . . . print ( VAR . text , VAR . text ) NEWLINE . . . NEWLINE First VAR First div to go with a VAR NEWLINE Second VAR Second div to go with a VAR", "VAR = Many . objects . filter ( one = one ) NEWLINE for VAR in VAR NEWLINE VAR . one = None NEWLINE VAR . save ( ) NEWLINE one . delete ( )", "class Tee ( object ) : NEWLINE def __init__ ( VAR , * files ) : NEWLINE VAR . files = files NEWLINE def write ( VAR , VAR ) : NEWLINE for VAR in VAR . files : NEWLINE VAR . write ( VAR ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = sys . stdout NEWLINE sys . stdout = Tee ( sys . stdout , VAR ) NEWLINE print STRING", "VAR = dict ( map ( reversed , enumerate ( sorted ( dict1 , key = dict1 . get ) ) ) ) NEWLINE VAR = dict ( map ( reversed , enumerate ( sorted ( dict2 , key = dict2 . get ) ) ) ) NEWLINE VAR = dict ( ( VAR , VAR [ VAR ] - VAR [ VAR ] ) for VAR in dict1 )", "casp . start ( ) . then ( function ( ) { var VAR = false ; var cp = require ( STRING ) ; cp . execFile ( STRING , STRING , { } , function ( _ , stdout , stderr ) { console . log ( stdout ) ; console . log ( stderr ) ; VAR = true ; } ) ; this . waitFor ( function check ( ) { return VAR ; } , function then ( ) { // can stay empty } ) ; } ) . run ( ) ;", "scaler . std_ NEWLINE scaler . mean_", "VAR , VAR = np . linalg . lstsq ( A , B ) [ NUMBER ] . reshape ( NUMBER )", "VAR = NUMBER NEWLINE VAR = np . memmap ( STRING , dtype = STRING , mode = STRING , order = STRING , VAR = NUMBER , shape = ( size1 ) ) NEWLINE VAR += size1 * byte_size NEWLINE VAR = np . memmap ( STRING , dtype = STRING , mode = STRING , order = STRING , VAR = VAR , shape = ( size2 ) ) NEWLINE VAR += size1 * byte_size NEWLINE VAR = np . memmap ( STRING , dtype = STRING , mode = STRING , order = STRING , VAR = VAR , shape = ( size3 ) )", "import numpy as np NEWLINE def asvoid ( VAR ) : NEWLINE STRING NEWLINE VAR = np . ascontiguousarray ( VAR ) NEWLINE return VAR . view ( np . dtype ( ( np . void , VAR . dtype . itemsize * VAR . shape [ - NUMBER ] ) ) ) NEWLINE def find_index ( VAR , VAR ) : NEWLINE VAR = asvoid ( VAR ) NEWLINE VAR = asvoid ( VAR ) NEWLINE return np . nonzero ( VAR == VAR ) [ NUMBER ] NEWLINE VAR = np . array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] , dtype = STRING ) NEWLINE VAR = np . tile ( VAR , ( NUMBER , NUMBER ) ) NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , dtype = STRING ) NEWLINE print ( find_index ( VAR , VAR ) )", "import geopy NEWLINE import geopy . distance NEWLINE import scipy . optimize NEWLINE def north ( VAR , VAR ) : NEWLINE STRING NEWLINE def target ( VAR ) : NEWLINE return geopy . distance . distance ( VAR , geopy . Point ( latitude = VAR . latitude + VAR , longitude = VAR . longitude ) ) . km - VAR NEWLINE return target NEWLINE VAR = geopy . Point ( NUMBER , NUMBER ) NEWLINE print STRING % VAR NEWLINE VAR = scipy . optimize . bisect ( north ( VAR , NUMBER ) , NUMBER , NUMBER ) NEWLINE VAR = geopy . Point ( latitude = VAR . latitude + VAR , longitude = VAR . longitude ) NEWLINE print STRING % VAR NEWLINE print STRING % ( geopy . distance . distance ( VAR , VAR ) . km )", "from distutils . core import setup NEWLINE from distutils . extension import Extension NEWLINE from Cython . Distutils import build_ext NEWLINE setup ( cmdclass = { STRING : build_ext } , ext_modules = [ Extension ( STRING , sources = [ STRING , STRING ] , libraries = [ STRING ] , language = STRING , ) ] )", "someseq [ slice ( NUMBER , None ) ]", "NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "VAR = STRING NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR . encode ( STRING ) ) NEWLINE VAR . write ( STRING )", "import collections NEWLINE VAR = collections . defaultdict ( list ) NEWLINE for VAR in a : NEWLINE VAR [ VAR [ NUMBER ] ] . append ( VAR )", ">> > VAR = { } NEWLINE >> > VAR or STRING NEWLINE STRING", "import datetime NEWLINE import collections NEWLINE import threading NEWLINE class ExpireCounter : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR = NUMBER ) : NEWLINE VAR . lock = threading . Lock ( ) NEWLINE VAR . VAR = VAR NEWLINE VAR . events = collections . deque ( ) NEWLINE def add ( VAR , VAR ) : NEWLINE STRING NEWLINE with VAR . lock : NEWLINE VAR . events . append ( VAR ) NEWLINE threading . Timer ( VAR . VAR , VAR . expire ) . start ( ) NEWLINE def __len__ ( VAR ) : NEWLINE STRING NEWLINE with VAR . lock : NEWLINE return len ( VAR . events ) NEWLINE def expire ( VAR ) : NEWLINE STRING NEWLINE with VAR . lock : NEWLINE VAR . events . popleft ( ) NEWLINE def __str__ ( VAR ) : NEWLINE with VAR . lock : NEWLINE return str ( VAR . events )", "VAR = STRING . split ( ) NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE VAR = VAR [ NUMBER : ]", "{ % block breadcrumbs % } { % if not is_popup % } NEWLINE < div class = STRING > NEWLINE < a href = STRING > Home < / a > & rsaquo ; NEWLINE < a href = STRING > Up One Level < / a > & rsaquo ; NEWLINE You Are Here NEWLINE < / div > NEWLINE { % endif % } { % endblock % }", ">> > VAR = ( VAR + dm ) . fillnaplt . subplots ( NUMBER , NUMBER ) NEWLINE coupled ( time , [ NUMBER , NUMBER / NUMBER ] , VAR ) NEWLINE coupled ( time , [ NUMBER , NUMBER / NUMBER ] , VAR ) NEWLINE coupled ( time , [ NUMBER / NUMBER , NUMBER ] , VAR ) NEWLINE coupled ( time , [ NUMBER , NUMBER ] , VAR ) NEWLINE coupled ( time , [ NUMBER , NUMBER ] , VAR ) NEWLINE VAR [ NUMBER ] . legend ( ) NEWLINE VAR [ NUMBER ] . legend ( ) NEWLINE VAR [ NUMBER ] . set_xlabel ( STRING ) NEWLINE VAR [ NUMBER ] . set_ylabel ( STRING ) NEWLINE VAR [ NUMBER ] . set_xlabel ( STRING ) NEWLINE VAR [ NUMBER ] . set_ylabel ( STRING ) NEWLINE VAR [ NUMBER ] . set_title ( STRING ) NEWLINE VAR [ NUMBER ] . set_title ( STRING ) NEWLINE plt . show ( )", "from module import desired_object", "import csv NEWLINE from itertools import zip_longest NEWLINE VAR = NUMBER NEWLINE with open ( STRING , STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR = ( VAR for VAR in VAR for VAR in VAR ) NEWLINE for VAR in zip_longest ( * [ VAR ] * VAR ) : NEWLINE VAR . writerow ( list ( VAR for VAR in VAR if VAR ) )", "autocmd FileType python vnoremap < buffer > < F9 > : < C - U > exec STRING shellescape ( < SID > GetVisualSelection ( ) , NUMBER ) < CR >", "a [ : ] = s", "VAR = sorted ( init_treats )", ">> > from sqlalchemy import create_engine NEWLINE >> > VAR = create_engine ( STRING , echo = True ) NEWLINE >> > from sqlalchemy import Table , Column , Integer , String , MetaData NEWLINE >> > VAR = MetaData ( )", "VAR = [ STRING , STRING ] NEWLINE VAR = { } NEWLINE for VAR in data . keys ( ) : NEWLINE for VAR in data [ VAR ] . keys ( ) : NEWLINE if VAR not in VAR : NEWLINE VAR [ VAR ] = dict . fromkeys ( VAR , NUMBER ) NEWLINE for VAR in data [ VAR ] [ VAR ] . keys ( ) : NEWLINE if VAR in VAR : NEWLINE VAR [ VAR ] [ VAR ] += data [ VAR ] [ VAR ] [ VAR ] NEWLINE print VAR", "import datetime as dt NEWLINE In [ NUMBER ] : week_difference ( dt . datetime ( NUMBER , NUMBER , NUMBER ) , dt . datetime ( NUMBER , NUMBER , NUMBER ) ) NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : week_difference ( dt . datetime ( NUMBER , NUMBER , NUMBER ) , dt . datetime ( NUMBER , NUMBER , NUMBER ) ) NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : week_difference ( dt . datetime ( NUMBER , NUMBER , NUMBER ) , dt . datetime ( NUMBER , NUMBER , NUMBER ) ) NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : week_difference ( dt . datetime ( NUMBER , NUMBER , NUMBER ) , dt . datetime ( NUMBER , NUMBER , NUMBER ) ) NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : week_difference ( dt . datetime ( NUMBER , NUMBER , NUMBER ) , dt . datetime ( NUMBER , NUMBER , NUMBER ) ) NEWLINE Out [ NUMBER ] : NUMBER", "import numpy as np NEWLINE from scipy import signal NEWLINE VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR = np . asarray ( VAR , float ) NEWLINE VAR = np . array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ) NEWLINE VAR = signal . convolve2d ( VAR , VAR , boundary = STRING , mode = STRING ) / VAR . sum ( )", "In [ NUMBER ] : exit", "import sys NEWLINE from PyQt4 import QtCore , QtGui NEWLINE class MainWindow ( QtGui . QWidget ) : NEWLINE def __init__ ( VAR , VAR = None ) : NEWLINE VAR . fileheader_fields = ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) NEWLINE VAR . fileheader = { VAR : STRING + VAR for VAR in VAR . fileheader_fields } NEWLINE super ( MainWindow , VAR ) . __init__ ( VAR ) NEWLINE VAR . table_widget = QtGui . QTableWidget ( ) NEWLINE VAR = QtGui . QVBoxLayout ( ) NEWLINE VAR . addWidget ( VAR . table_widget ) NEWLINE VAR . setLayout ( VAR ) NEWLINE VAR . populate ( ) NEWLINE def populate ( VAR ) : NEWLINE VAR . table_widget . setRowCount ( len ( VAR . fileheader_fields ) ) NEWLINE VAR . table_widget . setColumnCount ( NUMBER ) NEWLINE VAR . table_widget . setHorizontalHeaderLabels ( [ STRING , STRING ] ) NEWLINE for VAR , VAR in enumerate ( VAR . fileheader_fields ) : NEWLINE VAR = QtGui . QTableWidgetItem ( VAR ) NEWLINE VAR = QtGui . QTableWidgetItem ( VAR . fileheader [ VAR ] ) NEWLINE VAR . table_widget . setItem ( VAR , NUMBER , VAR ) NEWLINE VAR . table_widget . setItem ( VAR , NUMBER , VAR ) NEWLINE if __name__ == STRING : NEWLINE VAR = QtGui . QApplication ( sys . argv ) NEWLINE VAR = MainWindow ( ) NEWLINE VAR . resize ( NUMBER , NUMBER ) NEWLINE VAR . show ( ) NEWLINE sys . exit ( VAR . exec_ ( ) )", "Swahili NEWLINE English NEWLINE Russian", ">> > for VAR in generate_paths ( NUMBER ) : NEWLINE . . . printprint ( len ( tuple ( generate_paths{ STRING : STRING }", "VAR = STRING NEWLINE VAR , VAR , VAR = NUMBER , NUMBER , NUMBER NEWLINE VAR = VAR NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE if ( VAR , VAR ) == ( VAR , STRING ) : NEWLINE continue NEWLINE elif ( VAR , VAR ) == ( VAR , STRING ) : NEWLINE VAR += VAR NEWLINE VAR = VAR NEWLINE elif VAR == VAR : NEWLINE VAR += VAR NEWLINE VAR = VAR NEWLINE elif ( VAR , VAR ) == ( VAR , STRING ) : NEWLINE VAR += VAR NEWLINE VAR = VAR NEWLINE elif VAR == VAR : NEWLINE VAR += VAR NEWLINE elif ( VAR , VAR ) == ( VAR , STRING ) : NEWLINE VAR += VAR NEWLINE VAR = VAR NEWLINE elif ( VAR , VAR ) == ( VAR , STRING ) : NEWLINE VAR += VAR NEWLINE VAR = VAR NEWLINE else : NEWLINE VAR += VAR NEWLINE print VAR", ">> > VAR = [ [ NUMBER ] ] * NUMBER NEWLINE >> > VAR NEWLINE [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ] NEWLINE >> > VAR [ NUMBER ] [ NUMBER ] = NUMBER NEWLINE >> > VAR NEWLINE [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ]", "VAR = [ [ VAR * bin_width , ( VAR + NUMBER ) * bin_width , NUMBER ] for VAR in range ( num_bins ) ] NEWLINE for VAR in data_points : NEWLINE VAR = VAR // bin_width NEWLINE VAR [ VAR ] [ NUMBER ] += NUMBER", "def find_index2 ( VAR , VAR ) : NEWLINE return np . where ( ( VAR == VAR ) . all ( axis = NUMBER ) ) [ NUMBER ]", "https : // pypi . python . org / pypi / setuptools", "from functools import partial NEWLINE import rotinas NEWLINE Window . clearcolor = ( NUMBER , NUMBER , NUMBER , NUMBER ) < - - - - - NEWLINE import sqlite3 as sql NEWLINE from datetime import *", "VAR = nltk . corpus . brown . VAR ( ) NEWLINE VAR = NUMBER NEWLINE for VAR in nltk . ngrams ( VAR , NUMBER * VAR + NUMBER , pad_left = True , pad_right = True , pad_symbol = STRING ) : NEWLINE if VAR [ VAR + NUMBER ] . lower ( ) == STRING : NEWLINE print ( STRING . join ( VAR ) )", "VAR = [ [ STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] NEWLINE from itertools import imap , ifilter , compress NEWLINE def f1 ( ) : NEWLINE VAR = { frozenset ( VAR ) for VAR in VAR } NEWLINE VAR = [ ] NEWLINE while VAR : NEWLINE VAR = VAR . pop ( ) NEWLINE if any ( VAR . issubset ( VAR ) for VAR in VAR ) or any ( VAR . issubset ( VAR ) for VAR in VAR ) : NEWLINE continue NEWLINE else : NEWLINE VAR . append ( list ( VAR ) ) NEWLINE return VAR NEWLINE def f2 ( ) : NEWLINE VAR = imap ( lambda VAR : list ( ifilter ( lambda VAR : len ( VAR ) < len ( VAR ) and set ( VAR ) . issubset ( VAR ) , VAR ) ) , VAR ) NEWLINE VAR = list ( compress ( VAR , imap ( lambda VAR : NUMBER if VAR else NUMBER , VAR ) ) ) NEWLINE return VAR NEWLINE def f3 ( ) : NEWLINE return filter ( lambda VAR : not any ( set ( VAR ) < set ( VAR ) for VAR in VAR ) , VAR ) NEWLINE def f4 ( ) : NEWLINE VAR = { frozenset ( VAR ) for VAR in VAR } NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if any ( VAR < VAR for VAR in VAR ) : NEWLINE continue NEWLINE else : NEWLINE VAR . append ( list ( VAR ) ) NEWLINE return VAR NEWLINE if __name__ == STRING : NEWLINE import timeit NEWLINE for VAR in ( f1 , f2 , f3 , f4 ) : NEWLINE print VAR . __name__ , timeit . timeit ( STRING , setup = STRING ) , VAR ( )", "In [ NUMBER ] : pred . apply ( lambda VAR : VAR . loc [ useProb . loc [ VAR . name ] ] , axis = NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE Timestamp NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE dtype : int64", "from collective . documentviewer . settings import Base NEWLINE class CustomSettings ( Base ) : NEWLINE implements ( IEnhancedDocumentViewerSchema ) NEWLINE VAR = IEnhancedDocumentViewerSchema", "VAR = re . compile ( STRING ) NEWLINE VAR = VAR . sub ( STRING , VAR )", "In [ NUMBER ] : from collections import OrderedDict NEWLINE In [ NUMBER ] : [ VAR for VAR , VAR in OrderedDict . fromkeys ( ( type ( VAR ) , VAR ) for VAR in l ) ] NEWLINE Out [ NUMBER ] : [ STRING , STRING , NUMBER , STRING , NUMBER ]", "column_name NEWLINE a NEWLINE b", "class Filter ( QtCore . QObject ) : NEWLINE def eventFilter ( VAR , VAR , VAR ) : NEWLINE if VAR . type ( ) == QtCore . QEvent . FocusOut : NEWLINE print STRING NEWLINE return False NEWLINE else : NEWLINE return False", "a NEWLINE b NEWLINE c NEWLINE d NEWLINE e NEWLINE . . . NEWLINE y NEWLINE z NEWLINE aa NEWLINE ab NEWLINE ac NEWLINE . . . NEWLINE ay NEWLINE az NEWLINE ba NEWLINE bb", "print validateSchema ( schema , tokens )", "< div > { { blogpost . text | truncate ( NUMBER , True ) } } < / div >", "NUMBER , ` Flat NUMBER , Park Street `", "len ( str1 ) == len ( str2 ) and sorted ( str1 ) == sorted ( str2 )", "Something . objects . filter ( data = { STRING : STRING , STRING : STRING } ) NEWLINE Something . objects . filter ( data__a = STRING ) NEWLINE Something . objects . filter ( data__has_keys = [ STRING , STRING ] ) NEWLINE Something . objects . filter ( data__has_key = STRING )", "VAR = [ [ field [ VAR ] [ VAR ] for VAR in field . keys ( ) ] for VAR in xrange ( NUMBER ) ]", "list_name . sort ( key = lambda VAR : ( - VAR [ NUMBER ] , ) + VAR [ : NUMBER ] )", "$ redis - cli - n NUMBER - h localhost - p NUMBER llen celery", ">> > from operator import getitem NEWLINE >> > VAR = [ STRING , STRING , STRING ]", "print STRING NEWLINE for VAR in xrange ( N ) : NEWLINE VAR = tuple ( binassign [ : , VAR ] ) NEWLINE VAR = tuple ( bassign_rev_C [ VAR , : ] ) NEWLINE print VAR == VAR , VAR , VAR NEWLINE print STRING NEWLINE for VAR in xrange ( N ) : NEWLINE VAR = tuple ( binassign [ : , VAR ] ) NEWLINE VAR = tuple ( bassign_rev_F [ VAR , : ] ) NEWLINE print VAR == VAR , VAR , VAR", "VAR = NUMBER NEWLINE VAR = STRING % ( intVal )", "def test_added ( ) : NEWLINE assert added ( NUMBER , NUMBER , NUMBER ) == ( NUMBER , NUMBER , NUMBER )", "VAR = np . array ( [ [ NUMBER , np . nan , np . nan , np . nan ] , [ np . nan , NUMBER , np . nan , NUMBER ] , [ np . nan , np . nan , np . nan , np . nan ] ] ) NEWLINE get_nans_blocks_length ( VAR ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , dtype = int64 )", "def get_or_create ( VAR , VAR , VAR = None , ** kwargs ) : NEWLINE VAR = VAR . query ( VAR ) . filter_by ( ** kwargs ) . first ( ) NEWLINE if VAR : NEWLINE return VAR NEWLINE else : NEWLINE VAR = dict ( ( VAR , VAR ) for VAR , VAR in kwargs . iteritems ( ) if not isinstance ( VAR , ClauseElement ) ) NEWLINE if VAR : NEWLINE VAR . update ( VAR ) NEWLINE VAR = VAR ( ** VAR ) NEWLINE return VAR", "for VAR in ccys : NEWLINE VAR [ NUMBER ] += NUMBER NEWLINE >> > audcad NEWLINE [ STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > audchf NEWLINE [ STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > audjpy NEWLINE [ STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "[ { STRING : STRING , STRING : NUMBER } , . . . , { STRING : STRING , STRING : NUMBER } ]", "$ python2 NUMBER NEWLINE Python NUMBER NUMBER ( r255 : NUMBER , Sep NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) NEWLINE [ GCC NUMBER NUMBER ( Apple Inc . build NUMBER ) ] on darwin NEWLINE Type STRING , STRING , STRING or STRING for VAR information . NEWLINE Module readline not available . NEWLINE >> >", "from datetime import datetime , timedelta NEWLINE VAR = timedelta ( days = NUMBER ) NEWLINE VAR = datetime . VAR ( ) NEWLINE VAR = filter ( lambda VAR : VAR [ NUMBER ] - VAR <= VAR , all_events ) NEWLINE VAR . sort ( )", "python NUMBER NEWLINE altgraph == NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR - loader == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE cx - Freeze == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE MySQL - python == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER b1 NEWLINE opencv - python == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER . post114 NEWLINE VAR == NUMBER NUMBER NEWLINE plyfile == NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE PyInstaller == NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE pypiwin32 == NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE python - dateutil == NUMBER NUMBER NEWLINE pytz == NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER NEWLINE VAR == NUMBER NUMBER", "with open ( STRING ) as VAR : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR == NUMBER : NEWLINE VAR . write ( STRING ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . write ( STRING ) NEWLINE elif VAR == NUMBER : NEWLINE pass NEWLINE else : NEWLINE VAR . write ( VAR )", "In [ NUMBER ] : [ Counter ( VAR ) [ NUMBER ] for VAR in a ] NEWLINE Out [ NUMBER ] : [ NUMBER , NUMBER ]", "if not any ( ( var1 , var2 , var3 , var4 ) ) :", "a1 a15 a3 a4 a5 a8 NEWLINE date NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "NUMBER NEWLINE NUMBER NEWLINE NUMBER", "VAR = re . compile ( STRING , re . I ) NEWLINE VAR = [ VAR . strip ( STRING ) for VAR in VAR . findall ( yourstring ) ]", ">> > VAR = process ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR . PID NEWLINE NUMBER NEWLINE >> > dir ( VAR ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING", "class MyClass : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE @ classmethod NEWLINE def create_default_parser ( VAR ) : NEWLINE VAR = argparse . ArgumentParser ( description = STRING ) NEWLINE VAR . add_argument ( STRING , STRING , dest = STRING , default = STRING ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE return VAR ( VAR )", "def dijkway2 ( VAR , VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE while ( VAR != VAR ) & ( VAR >= NUMBER ) : NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR . item ( VAR , VAR ) NEWLINE return VAR NEWLINE def jumpvec2 ( VAR , VAR ) : NEWLINE VAR = np . zeros ( len ( VAR ) ) NEWLINE VAR [ VAR ] = - NUMBER NEWLINE VAR = set ( ) NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE if VAR != VAR : NEWLINE VAR . add ( VAR ) NEWLINE VAR = np . arange ( len ( VAR ) , NUMBER , - NUMBER ) NEWLINE while VAR : NEWLINE VAR = VAR . pop ( ) NEWLINE VAR = dijkway2 ( VAR , VAR , VAR ) NEWLINE VAR [ VAR ] = VAR [ - len ( VAR ) : ] NEWLINE VAR -= set ( VAR ) NEWLINE return VAR", "VAR = [ [ ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) , ] , [ ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) , ] ] NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] ] = VAR . get ( VAR [ NUMBER ] , NUMBER ) + VAR [ NUMBER ]", ">> > VAR = STRING NEWLINE >> > VAR . decode ( STRING ) NEWLINE STRING NEWLINE >> > print VAR . decode ( STRING ) NEWLINE this is a docstring for NEWLINE the main function . NEWLINE a , NEWLINE b , NEWLINE c NEWLINE >> > STRING . decode ( STRING ) NEWLINE STRING", "def eliminate_consonants ( x ) : NEWLINE for VAR in x : NEWLINE if VAR in STRING : NEWLINE print ( VAR , end = STRING )", "from decorator import decorator NEWLINE def substitute_args ( VAR ) : NEWLINE @ decorator NEWLINE def wrapper ( VAR , VAR ) : NEWLINE VAR = VAR . get ( VAR , VAR ) NEWLINE return VAR ( VAR ) NEWLINE return wrapper", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR , VAR = [ ] , [ ] NEWLINE VAR = set ( ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR not in VAR : NEWLINE VAR . append ( VAR ) NEWLINE VAR . append ( VAR ) NEWLINE VAR . add ( VAR )", "VAR = q . fetch ( NUMBER ) NEWLINE for VAR in VAR : NEWLINE for VAR in vars ( VAR ) . keys ( ) NEWLINE print STRING % ( VAR , str ( getattr ( VAR , VAR ) ) )", "In [ NUMBER ] : % timeit arr [ index ] NEWLINE NUMBER loops , best of NUMBER : NUMBER ns per loop NEWLINE In [ NUMBER ] : % timeit [ dct [ VAR ] for VAR in index ] NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "from SimpleXMLRPCServer import SimpleXMLRPCServer , SimpleXMLRPCRequestHandler NEWLINE VAR = NUMBER NEWLINE def func ( ) : NEWLINE print STRING NEWLINE print x NEWLINE print STRING NEWLINE class Handler ( SimpleXMLRPCRequestHandler ) : NEWLINE def _dispatch ( VAR , VAR , VAR ) : NEWLINE try : NEWLINE return VAR . VAR . funcs [ VAR ] ( * VAR ) NEWLINE except : NEWLINE import traceback NEWLINE traceback . print_exc ( ) NEWLINE raise NEWLINE if __name__ == STRING : NEWLINE VAR = SimpleXMLRPCServer ( ( STRING , VAR ) , Handler ) NEWLINE VAR . register_function ( func ) NEWLINE print STRING % VAR NEWLINE VAR . serve_forever ( )", "def generate_student_dict ( VAR = None , VAR = None , VAR = None , VAR = None ) : NEWLINE VAR = locals ( ) . copy ( ) NEWLINE return VAR NEWLINE generate_student_dict ( )", "/ * Special wrapper to support stable sorting using the decorate - sort - undecorate NEWLINE pattern . Holds a key which is used for comparisons and the original record NEWLINE which is returned during the undecorate phase . By exposing only the key NEWLINE . . . . * /", ">> > VAR = [ STRING , STRING ] NEWLINE >> > [ re . findall ( STRING , VAR ) for VAR in VAR ] NEWLINE [ [ ( STRING , STRING ) ] , [ ( STRING , STRING ) ] ]", "return sorted ( fights , key = ( lambda VAR : VAR [ STRING ] ) )", "Bob GreenWood NEWLINE Bob Pearson NEWLINE Tom GreenWood NEWLINE Tom Pearson", "VAR , VAR = zip ( * sset )", ">> > instance = Something . objects . create ( VAR = STRING , VAR = { STRING : STRING , STRING : STRING } ) NEWLINE >> > instance . VAR [ STRING ] NEWLINE STRING NEWLINE >> > empty = Something . objects . create ( VAR = STRING ) NEWLINE >> > empty . VAR NEWLINE { } NEWLINE >> > empty . VAR [ STRING ] = STRING NEWLINE >> > empty . save ( ) NEWLINE >> > Something . objects . get ( VAR = STRING ) . VAR [ STRING ] NEWLINE STRING", "VAR = m . addVar ( lb = NUMBER , ub = NUMBER , vtype = GRB . CONTINUOUS )", "In [ NUMBER ] : VAR = NUMBER NEWLINE . . . : VAR = NUMBER NEWLINE . . . : VAR = np . random . randint ( NUMBER , NUMBER , ( VAR * VAR , VAR ) ) NEWLINE . . . : NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : VAR = np . zeros ( ( VAR , VAR , VAR ) , dtype = VAR . dtype ) NEWLINE . . . : for VAR in np . arange ( VAR ) : NEWLINE . . . : for VAR in np . arange ( VAR ) : NEWLINE . . . : for VAR in np . arange ( VAR ) : NEWLINE . . . : VAR [ VAR , VAR , VAR ] = VAR [ VAR + VAR * VAR , VAR ] NEWLINE . . . : NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ] ) NEWLINE In [ NUMBER ] : VAR . reshape ( VAR , VAR , VAR ) . transpose ( NUMBER , NUMBER , NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ] )", ">> > for VAR in range ( NUMBER ) : print ( selectpprint ( getNeighbour ( board , NUMBER , NUMBER , NUMBER ) ) NEWLINE [ NUMBER ] NEWLINE [ NUMBER , NUMBER ] ( expected ) NEWLINE >> > pprint ( getNeighbour ( board , NUMBER , NUMBER , NUMBER ) ) NEWLINE [ NUMBER , NUMBER , NUMBER ] NEWLINE [ NUMBER , NUMBER ] NEWLINE [ NUMBER , NUMBER , NUMBER ] ( expected ) NEWLINE >> >", "< Element variable at NUMBER f53fbdf1cb0 > NEWLINE < Element if at NUMBER f53fbdf1cf8 >", "def test_if_ascii ( VAR ) : NEWLINE if isinstance ( test , str ) : NEWLINE raise TypeError ( STRING ) NEWLINE return all ( NUMBER <= ord ( VAR ) <= NUMBER for VAR in VAR )", "VAR = NUMBER VAR = NUMBER VAR = NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "import time NEWLINE def make_ticker ( ) : NEWLINE VAR = time . time ( ) NEWLINE def elapsed ( ) : NEWLINE VAR = time . time ( ) NEWLINE return VAR - VAR NEWLINE return elapsed", ">> > VAR = xrange ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR . __reduce__ ( ) [ NUMBER ] NEWLINE ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > len ( VAR ) NEWLINE NUMBER", "import Tkinter NEWLINE def main ( ) : NEWLINE print STRING NEWLINE VAR . mainloop ( ) NEWLINE print STRING NEWLINE VAR = Tkinter . Tk ( ) NEWLINE VAR = Tkinter . Button ( VAR , command = main ) NEWLINE VAR . pack ( ) NEWLINE VAR . mainloop ( )", ">> > map ( float , s . split ( ) ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "{ % for VAR in teams % } NEWLINE VAR win percentage = { { VAR . team_win_percent } } NEWLINE VAR lose percentage = { { VAR . team_lose_percent } } NEWLINE { % endfor % }", "void setup ( ) { // Initialize serial and wait for port to open : Serial . begin ( NUMBER ) ; while ( ! Serial ) { ; // wait for serial port to connect . Needed for Leonardo only } }", "def focusInEvent ( VAR , VAR ) : NEWLINE VAR . accept ( ) NEWLINE", "import sys NEWLINE print STRING , len ( sys . argv ) NEWLINE for VAR in sys . argv : NEWLINE print VAR NEWLINE print STRING NEWLINE for VAR in range ( len ( sys . argv ) ) : NEWLINE print sys . argv [ VAR ] NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE print VAR", "while True : NEWLINE VAR = input ( ) NEWLINE if VAR == STRING : NEWLINE print ( STRING . format ( len ( basket ) ) ) NEWLINE for VAR , VAR in enumerate ( basket , NUMBER ) : NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE break NEWLINE else : NEWLINE basket . append ( VAR ) NEWLINE print ( STRING )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE for VAR in choice_without_repetition ( VAR ) : NEWLINE print VAR", ". / clickme . py - - name something NEWLINE < click . core . Context object at NUMBER > NEWLINE Name is something", "for VAR in dict_generator : NEWLINE print VAR", "VAR = map ( __import__ , modules )", "class Router ( models . Model ) : NEWLINE VAR = models . FileField ( upload_to = STRING )", "def random_grid ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE for VAR in range ( int ( VAR ) ) : NEWLINE VAR . append ( [ ] ) NEWLINE for VAR in range ( int ( VAR ) ) : NEWLINE VAR [ VAR ] . append ( random . randint ( ( int ( VAR ) ) , ( int ( VAR ) ) ) ) NEWLINE for VAR in VAR : NEWLINE VAR = ( STRING . join ( [ str ( VAR ) for VAR in VAR ] ) ) NEWLINE print VAR NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR ) NEWLINE VAR . write ( STRING )", "src / NEWLINE | - myapp / NEWLINE | - pkg_a / NEWLINE | - __init__ . py NEWLINE | - foo . py NEWLINE | - pkg_b / NEWLINE | - __init__ . py NEWLINE | - bar . py NEWLINE | - myapp . py", ">> > strip_empty_lines ( STRING ) NEWLINE STRING NEWLINE >> > strip_empty_lines ( STRING ) NEWLINE STRING", "{ { lines | linebreaks } }", "from asyncio import PriorityQueue , JoinableQueue NEWLINE import asyncio NEWLINE import random NEWLINE class JoinablePriorityQueue ( JoinableQueue , PriorityQueue ) : NEWLINE pass NEWLINE @ asyncio . coroutine NEWLINE def consume ( VAR ) : NEWLINE while True : NEWLINE VAR = yield from VAR . get ( ) NEWLINE print ( STRING . format ( VAR ) ) NEWLINE if VAR [ NUMBER ] is None : NEWLINE VAR . task_done ( ) NEWLINE return NEWLINE asyncio . sleep ( NUMBER ) NEWLINE VAR . task_done ( ) NEWLINE @ asyncio . coroutine NEWLINE def produce ( VAR ) : NEWLINE for VAR in range ( NUMBER ) : NEWLINE yield from VAR . put ( ( random . randint ( NUMBER , NUMBER ) , VAR ) ) NEWLINE yield from VAR . put ( ( NUMBER , None ) ) NEWLINE asyncio . async ( consume ( VAR ) ) NEWLINE print ( STRING ) NEWLINE yield from VAR . join ( ) NEWLINE print ( STRING ) NEWLINE VAR = asyncio . get_event_loop ( ) NEWLINE VAR = JoinablePriorityQueue ( ) NEWLINE VAR . run_until_complete ( produce ( VAR ) )", "def __getitem__ ( VAR , VAR ) : NEWLINE if isinstance ( VAR , numbers . Integral ) : NEWLINE VAR = ( VAR , slice ( None , None , None ) ) NEWLINE", "print STRING % ( extracted_size * NUMBER / uncompress_size ) ,", "VAR = STRING NEWLINE >> > VAR = NUMBER NEWLINE >> > VAR = NUMBER NEWLINE >> > VAR = len ( VAR ) / VAR NEWLINE >> > [ VAR [ VAR * VAR : ( VAR + NUMBER ) * VAR + VAR ] for VAR in range ( VAR ) ] NEWLINE [ STRING , STRING , STRING , STRING ]", "URLs NEWLINE url ( STRING , profileviews . ProfileUpdateView . as_view ( ) ,", "T1 NEWLINE - - - T1 NUMBER NEWLINE - - - T1 NUMBER NEWLINE T2 NEWLINE T3 NEWLINE - - - T3 NUMBER NEWLINE - - - - - - T3 NUMBER NUMBER", "def total ( VAR ) : NEWLINE return sum ( VAR )", ">> > import random NEWLINE >> > VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE >> > random . choice ( VAR ) NEWLINE ( STRING , STRING )", "VAR = STRING . split ( STRING ) NEWLINE VAR = STRING NEWLINE VAR = [ VAR for VAR , VAR in enumerate ( VAR ) if VAR == VAR ] NEWLINE print ( VAR )", "@ decorate_all_methods ( Http500Resistant ) NEWLINE class A ( object ) : NEWLINE . . .", "sorted ( c , key = sum ) [ : k ]", "import re NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = re . sub ( STRING , STRING % VAR , VAR ) NEWLINE print VAR", "[ { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } , { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } , { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } ] NEWLINE Average age with population NUMBER is NUMBER years old", "class SomeModel ( MyDocument ) : NEWLINE VAR = [ some_callable , another_callable ]", "os . path . join ( ls ( ) , STRING )", "VAR = set ( lista ) NEWLINE for VAR in listb : NEWLINE if VAR [ NUMBER ] in VAR : NEWLINE print VAR", "import numpy as np NEWLINE def rank1 ( VAR ) : NEWLINE VAR = sorted ( range ( len ( VAR ) ) , key = lambda VAR : VAR [ VAR ] ) NEWLINE VAR = { VAR [ VAR [ VAR ] ] : VAR for VAR in xrange ( len ( VAR ) - NUMBER , - NUMBER , - NUMBER ) } NEWLINE VAR = sorted ( VAR . iteritems ( ) , key = lambda VAR : VAR [ NUMBER ] ) NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR [ VAR ] = ( VAR [ VAR ] [ NUMBER ] , VAR ) NEWLINE VAR = { VAR [ NUMBER ] : VAR [ NUMBER ] for VAR in VAR } NEWLINE VAR = np . zeros ( ( len ( VAR ) , ) , dtype = np . int ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR [ VAR ] = VAR [ VAR ] NEWLINE return VAR NEWLINE def rank2 ( VAR ) : NEWLINE VAR = sorted ( VAR ) NEWLINE VAR = list ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR . index ( VAR ) ] = VAR . index ( VAR ) NEWLINE return VAR", "VAR = [ ] NEWLINE for < loop over events from server > : NEWLINE VAR . append ( ( dateutil . parser . parse ( event [ STRING ] [ STRING ] ) , event [ STRING ] ) )", "def add_to_tuple ( VAR , VAR ) : NEWLINE return VAR + ( VAR , ) NEWLINE for VAR , VAR in traverse ( doc , ( ) , add_to_tuple ) : NEWLINE print ( STRING . format ( VAR , VAR ) )", "def f ( VAR ) : NEWLINE return [ VAR for VAR in VAR if VAR [ NUMBER ] == min ( [ VAR for VAR in VAR if VAR [ NUMBER ] > NUMBER ] , VAR = lambda VAR : VAR [ NUMBER ] ) [ NUMBER ] ] NEWLINE def f2 ( VAR ) : NEWLINE VAR = collections . defaultdict ( list ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] ] . append ( VAR ) NEWLINE return VAR [ min ( VAR for VAR in VAR . keys ( ) if VAR != NUMBER ) ] NEWLINE % timeit f ( VAR ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE % timeit f2 ( VAR ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop", "While True : NEWLINE VAR = ser . inWaiting ( ) NEWLINE ser . read ( VAR )", "import numpy as np NEWLINE from numpy . lib . stride_tricks import as_strided NEWLINE def concatenated_ranges ( VAR ) : NEWLINE VAR = np . array ( VAR , copy = False ) NEWLINE VAR = np . arange ( VAR . max ( ) ) NEWLINE VAR = as_strided ( VAR , shape = VAR . shape + VAR . shape , strides = ( NUMBER , ) + VAR . strides ) NEWLINE return VAR [ VAR < VAR [ : , None ] ]", "def am_able_to ( VAR ) : NEWLINE return any ( [ STRING , STRING , STRING , STRING ] == [ VAR [ VAR ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] ] for VAR in xrange ( len ( VAR ) - NUMBER ) )", "{ % - if . . . % } strips before NEWLINE { % if . . . + % } preserves after NEWLINE { % + if . . . - % } preserves before and strips after NEWLINE remember that ` { % endif % } ` is treated separately", "itertools . product ( list1 , list2 , list3 )", "$ python ~ / sandbox / test . py - - group NUMBER NUMBER NUMBER NUMBER - - group NUMBER NUMBER NUMBER NUMBER NEWLINE Namespace ( group = [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] )", "// Mockup classes . NEWLINE struct AgentBase { } ; NEWLINE struct MessageBase { } ; NEWLINE struct QueueBase { } ; NEWLINE struct SpamBase { } ; NEWLINE struct Agent : AgentBase { } ; NEWLINE struct Message : MessageBase { } ; NEWLINE struct Queue : QueueBase { } ; NEWLINE struct Spam : SpamBase { } ; NEWLINE // Class with overloaded operator ( ) . NEWLINE class Queuer NEWLINE { public : void operator ( ) ( const AgentBase & , const MessageBase & ) const { std : : cout << STRING << std : : endl ; } void operator ( ) ( const QueueBase & , const MessageBase & ) const { std : : cout << STRING << std : : endl ; } void operator ( ) ( const SpamBase & , const MessageBase & ) const { std : : cout << STRING << std : : endl ; } } ; NEWLINE // / Depending on the overlaod signatures , helper types may make the NEWLINE // / code slightly more readable by reducing pointer - to - member - function syntax . NEWLINE template < typename A1 > NEWLINE struct queuer_overload NEWLINE { typedef void ( Queuer : : * type ) ( const A1 & , const MessageBase & ) const ; static type get ( type fn ) { return fn ; } } ; NEWLINE BOOST_PYTHON_MODULE ( example ) NEWLINE { namespace python = boost : : python ; // Expose only the base class types . Do not allow the classes to be // directly initialized in Python . python : : class_ < AgentBase > ( STRING , python : : no_init ) ; python : : class_ < MessageBase > ( STRING , python : : no_init ) ; python : : class_ < QueueBase > ( STRING , python : : no_init ) ; python : : class_ < SpamBase > ( STRING , python : : no_init ) ; // Expose the user types . These classes inerit from their respective // base classes . python : : class_ < Agent , python : : bases < AgentBase > > ( STRING ) ; python : : class_ < Message , python : : bases < MessageBase > > ( STRING ) ; python : : class_ < Queue , python : : bases < QueueBase > > ( STRING ) ; python : : class_ < Spam , python : : bases < SpamBase > > ( STRING ) ; // Disambiguate via a varaible . queuer_overload < AgentBase > : : type queuer_op_agent = & Queuer : : operator ( ) ; python : : class_ < Queuer > ( STRING ) // Disambiguate via a variable . . def ( STRING , queuer_op_agent ) // Disambiguate via a helper type . . def ( STRING , queuer_overload < QueueBase > : : get ( & Queuer : : operator ( ) ) ) // Disambiguate via explicit cast . . def ( STRING , static_cast < void ( Queuer : : * ) ( const SpamBase & , const MessageBase & ) const > ( & Queuer : : operator ( ) ) ) ; }", "value1 value2 NEWLINE id NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "from subprocess import check_call , STDOUT , CalledProcessError NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE try : NEWLINE check_call ( [ STRING , STRING ] , stdout = VAR , stderr = STDOUT ) NEWLINE except CalledProcessError as VAR : NEWLINE print ( VAR . message )", "pavdict [ pav ] . append ( subdict )", "$ cat script . py NEWLINE import subprocess NEWLINE subprocess . Popen ( STRING , shell = True )", "import matplotlib . pyplot as plt NEWLINE from scipy . sparse import coo_matrix NEWLINE def plot_coo_matrix ( VAR ) : NEWLINE if not isinstance ( VAR , coo_matrix ) : NEWLINE VAR = coo_matrix ( VAR ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER , axisbg = STRING ) NEWLINE VAR . plot ( VAR . col , VAR . row , STRING , color = STRING , ms = NUMBER ) NEWLINE VAR . set_xlim ( NUMBER , VAR . shape [ NUMBER ] ) NEWLINE VAR . set_ylim ( NUMBER , VAR . shape [ NUMBER ] ) NEWLINE VAR . set_aspect ( STRING ) NEWLINE for VAR in VAR . spines . values ( ) : NEWLINE VAR . set_visible ( False ) NEWLINE VAR . invert_yaxis ( ) NEWLINE VAR . set_aspect ( STRING ) NEWLINE VAR . set_xticks ( [ ] ) NEWLINE VAR . set_yticks ( [ ] ) NEWLINE return VAR", "import pandas as pd NEWLINE import numpy as np NEWLINE import csv NEWLINE import re NEWLINE import itertools as it NEWLINE import pprint NEWLINE import datetime as dt NEWLINE VAR = [ ] NEWLINE VAR = STRING NEWLINE VAR = NUMBER NEWLINE with open ( STRING , encoding = STRING ) as VAR : NEWLINE next ( VAR ) NEWLINE VAR = { } NEWLINE for VAR , VAR , VAR in csv . reader ( VAR ) : NEWLINE VAR = re . finditer ( VAR , VAR , flags = re . X ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR , VAR = VAR . groups ( ) NEWLINE VAR [ VAR ] = VAR NEWLINE if ( VAR + NUMBER ) % VAR == NUMBER : NEWLINE VAR [ STRING ] = dt . datetime . strptime ( VAR , STRING ) NEWLINE VAR [ STRING ] = VAR NEWLINE VAR . append ( VAR ) NEWLINE VAR = { } NEWLINE pprint . pprint ( VAR ) NEWLINE VAR = pd . DataFrame ( sorted ( VAR , VAR = lambda VAR : VAR [ STRING ] ) ) NEWLINE print ( VAR ) NEWLINE VAR . set_index ( STRING , inplace = True ) NEWLINE print ( VAR ) NEWLINE - - output : - - NEWLINE [ { STRING : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] NEWLINE Date First Last School Type NEWLINE NUMBER NUMBER - NUMBER - NUMBER Tom Smith MCAA New NEWLINE NUMBER NUMBER - NUMBER - NUMBER Tammy Smith MCAA New NEWLINE NUMBER NUMBER - NUMBER - NUMBER Jim Jones MCAA Old NEWLINE NUMBER NUMBER - NUMBER - NUMBER Jane Jones MCAA Old NEWLINE First Last School Type NEWLINE Date NEWLINE NUMBER - NUMBER - NUMBER Tom Smith MCAA New NEWLINE NUMBER - NUMBER - NUMBER Tammy Smith MCAA New NEWLINE NUMBER - NUMBER - NUMBER Jim Jones MCAA Old NEWLINE NUMBER - NUMBER - NUMBER Jane Jones MCAA Old", "pygame . time . set_timer ( SHRINKSNAKE , NUMBER * NUMBER )", "TheForm . objects . filter ( id = NUMBER ) . update ( value = NUMBER , value2 = NUMBER )", ">> > df [ STRING ] . diff ( ) . apply ( np . sign ) . fillna ( NUMBER ) NEWLINE time NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE dtype : float64", ">> > VAR = np . array ( v ) NEWLINE >> > VAR . sum ( axis = NUMBER ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > VAR . sum ( axis = NUMBER ) . argsort ( ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > VAR [ VAR . sum ( axis = NUMBER ) . argsort ( ) [ : : - NUMBER ] ] NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", ">> > table [ STRING ] = STRING NEWLINE >> > table [ STRING ] NEWLINE STRING", "from win32com import client NEWLINE import time NEWLINE VAR = client . Dispatch ( STRING ) NEWLINE def printPDFDocument ( filename ) : NEWLINE VAR . Navigate ( filename ) NEWLINE if VAR . Busy : NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . Document . printAll ( ) NEWLINE VAR . Quit ( )", ">> > def fix_xml ( VAR ) : NEWLINE STRING NEWLINE VAR = True NEWLINE while VAR : NEWLINE try : NEWLINE VAR = VAR . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE VAR = etree . fromstring ( VAR ) NEWLINE VAR = False NEWLINE except etree . XMLSyntaxError as exc : NEWLINE VAR = str ( exc ) NEWLINE VAR = STRING NEWLINE VAR = re . match ( VAR , VAR ) NEWLINE if VAR : NEWLINE VAR , VAR , VAR , VAR , VAR = VAR . groups ( ) NEWLINE VAR , VAR , VAR = int ( VAR ) , int ( VAR ) , int ( VAR ) NEWLINE VAR = VAR . split ( STRING ) NEWLINE print STRING . format ( VAR , VAR ) NEWLINE VAR = VAR [ VAR - NUMBER ] NEWLINE VAR [ VAR - NUMBER ] = VAR . replace ( STRING . format ( VAR ) , STRING . format ( VAR , VAR ) ) NEWLINE VAR = STRING . join ( VAR ) NEWLINE else : NEWLINE raise NEWLINE print VAR", "VAR = { } NEWLINE VAR [ STRING ] = [ STRING ] NEWLINE VAR [ STRING ] = [ STRING , STRING ]", "VAR = sc . parallelize ( [ ( NUMBER , [ NUMBER , NUMBER , NUMBER ] ) , ( NUMBER , [ NUMBER , NUMBER , NUMBER , NUMBER ] ) , ( NUMBER , [ NUMBER , NUMBER ] ) , ( NUMBER , [ NUMBER , NUMBER , NUMBER ] ) ] )", "try : NEWLINE assert_frame_equal ( csvdata , csvdata_old ) NEWLINE return True NEWLINE except : NEWLINE return False", "def print_nonrec_depthfirst ( VAR ) : NEWLINE VAR = [ VAR ] NEWLINE while VAR : NEWLINE VAR = VAR . pop ( ) NEWLINE print VAR NEWLINE for VAR in VAR . children : NEWLINE VAR . append ( VAR )", "def save_last ( VAR ) : NEWLINE def w ( * args , ** kwargs ) : NEWLINE w . last = VAR ( * args , ** kwargs ) NEWLINE return w . last NEWLINE return w", "totals [ STRING ] = sum ( [ VAR . quantity for VAR in entries if EntryMatches ( VAR ) ] )", "NUMBER NEWLINE NUMBER NEWLINE NUMBER", "VAR = np . zeros ( ( a . shape [ NUMBER ] , a . max ( ) + NUMBER ) ) NEWLINE VAR [ np . indices ( a . ravel ( ) . shape ) [ NUMBER ] , a . ravel ( ) ] = NUMBER", "def f ( VAR ) : pass NEWLINE % timeit f ( VAR ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ns per loop", "import pandas as pd NEWLINE VAR = pd . read_csv ( STRING ) NEWLINE VAR = pd . read_csv ( STRING ) NEWLINE VAR = pd . merge ( VAR , VAR , on = STRING , how = STRING ) NEWLINE VAR . to_csv ( STRING )", "NUMBER - NUMBER : NUMBER NEWLINE NUMBER - NUMBER : NUMBER NEWLINE NUMBER - NUMBER : NUMBER NEWLINE NUMBER - NUMBER : NUMBER", "VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , } ) NEWLINE VAR [ STRING ] = pd . to_datetime ( VAR [ STRING ] ) NEWLINE VAR = VAR . set_index ( STRING ) NEWLINE VAR [ STRING ] = VAR . index . day NEWLINE VAR [ STRING ] = VAR . groupby ( VAR . index . year ) . cumcount ( NUMBER ) + NUMBER", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER ] NEWLINE VAR = len ( VAR ) / NUMBER NEWLINE VAR = [ VAR [ VAR : VAR + VAR ] for VAR in xrange ( NUMBER , len ( VAR ) , VAR ) ]", ">> > VAR [ np . in1d ( VAR [ : , NUMBER ] , VAR [ : , NUMBER ] ) ] NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > VAR = np . array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE >> > VAR = np . array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE >> > NEWLINE >> > VAR [ np . in1d ( VAR [ : , NUMBER ] , VAR [ : , NUMBER ] ) ] NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] )", "pill . show ( )", "VAR = None NEWLINE def my_func ( ) : NEWLINE global VAR NEWLINE VAR = SomeObject ( )", "from pylab import * NEWLINE from scipy . ndimage import measurements NEWLINE VAR = arrayset ( VAR for VAR in list1 for VAR in VAR ) NEWLINE VAR = set ( VAR for VAR in list2 for VAR in VAR )", "[ STRING , STRING ]", "weasyprint - f png - s styles . css input . html output . png", "The Teacher Model NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE class Teacher ( models . Model ) : NEWLINE VAR = ( ( VAR , _ ( STRING ) ) , ( VAR , _ ( STRING ) ) , ) NEWLINE VAR = models . CharField ( max_length = NUMBER , verbose_name = _ ( STRING ) , choices = VAR ) NEWLINE VAR = models . CharField ( max_length = NUMBER , verbose_name = _ ( STRING ) ) NEWLINE VAR = models . CharField ( max_length = NUMBER , verbose_name = _ ( STRING ) ) NEWLINE VAR = models . CharField ( max_length = NUMBER , verbose_name = _ ( STRING ) ) NEWLINE VAR = models . OneToOneField ( to = User , related_name = STRING ) NEWLINE def enable ( self ) : NEWLINE STRING NEWLINE self . VAR . is_active = True NEWLINE self . VAR . save ( ) NEWLINE def disable ( self ) : NEWLINE STRING NEWLINE self . VAR . is_active = False NEWLINE self . VAR . save ( ) NEWLINE def get_absolute_url ( self ) : NEWLINE return reverse ( STRING , args = ( self . pk , ) )", "Slackware Linux NUMBER [ x86 DVD ISO ] NEWLINE Slackware Linux NUMBER [ x86 DVD ISO ] NEWLINE Slackware Linux NUMBER [ x86 DVD ISO ]", "vinay NUMBER NUMBER NUMBER NUMBER : NUMBER pts / NUMBER NUMBER : NUMBER : NUMBER python . / manage . py runserver - - noreload", "def main ( ) : NEWLINE STRING NEWLINE VAR = input ( STRING ) NEWLINE return sum ( ord ( VAR ) - NUMBER for VAR in VAR . replace ( STRING , STRING ) . lower ( ) )", "from operator import itemgetter NEWLINE VAR = [ VAR for VAR , VAR in sorted ( enumerate ( d [ STRING ] ) , key = itemgetter ( NUMBER ) ) ] NEWLINE VAR = { } NEWLINE for VAR , VAR in d . items ( ) : NEWLINE VAR [ VAR ] = list ( itemgetter ( * VAR ) ( VAR ) ) NEWLINE print ( VAR ) NEWLINE { STRING : [ STRING , STRING , STRING , STRING ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] }", "while True : NEWLINE . . .", ">> > x . groupby ( STRING ) . apply ( filtermax , STRING , [ STRING , STRING , STRING ] , STRING ) NEWLINE B C NEWLINE B A NEWLINE B0 A0 B0 NUMBER NEWLINE B1 A2 B1 NUMBER NEWLINE B2 A4 B2 NUMBER", "VAR = VAR | Transformer ( STRING ) . remove ( )", "john , red , NUMBER NEWLINE andrew , green , NUMBER NEWLINE tonny , black , NUMBER , driver , new york NEWLINE jack , yellow , NUMBER NEWLINE phill , orange , NUMBER , scientist , boston NEWLINE kurt , blue , NUMBER NEWLINE mike , pink , NUMBER", "from pandas import DataFrame NEWLINE VAR = DataFrame ( { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] } ) NEWLINE print VAR NEWLINE VAR = VAR . irow ( NUMBER ) . values . tolist ( ) NEWLINE VAR = VAR . irow ( NUMBER ) . values . tolist ( )", "VAR = multiprocessing . Pool ( ) NEWLINE VAR = VAR . starmap ( get_sub_matrix_C , ( ( VAR , other_args ) for VAR in range ( NUMBER ) ) ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE C [ VAR * NUMBER : ( VAR + NUMBER ) * NUMBER , : NUMBER ] = VAR", "bin ( NUMBER )", ">> > one [ - NUMBER ] NEWLINE NUMBER", "with open ( STRING ) as VAR : NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE VAR . append ( VAR . strip ( ) . split ( ) ) NEWLINE for VAR , VAR in itertools . groupby ( sorted ( VAR , key = lambda VAR : VAR [ NUMBER ] ) , key = lambda VAR : VAR [ NUMBER ] ) : NEWLINE print VAR , len ( list ( VAR ) )", "export PATH = $ PATH : STRING", "import sys NEWLINE def programs_info_comb ( VAR , VAR ) : NEWLINE VAR = open ( VAR , STRING ) NEWLINE VAR = VAR . readlines ( ) NEWLINE VAR . close ( ) NEWLINE VAR = open ( VAR , STRING ) NEWLINE VAR = VAR . readlines ( ) NEWLINE VAR . close ( ) NEWLINE VAR = dict ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . strip ( ) . split ( STRING ) NEWLINE VAR [ VAR [ NUMBER ] ] = VAR [ NUMBER : ] NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE if VAR [ VAR ] . startswith ( STRING ) : NEWLINE VAR = VAR [ VAR ] [ NUMBER : - NUMBER ] NEWLINE if VAR . has_key ( VAR ) : NEWLINE print STRING + VAR NEWLINE for VAR in VAR [ VAR ] : NEWLINE print VAR NEWLINE print VAR [ VAR - NUMBER ] , NEWLINE print VAR [ VAR ] , NEWLINE elif VAR [ VAR ] . startswith ( STRING ) : NEWLINE pass NEWLINE else : NEWLINE print VAR [ VAR ] , NEWLINE if __name__ == STRING : NEWLINE programs_info_comb ( sys . argv [ NUMBER ] , sys . argv [ NUMBER ] )", ">> > arr = np . array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > arr . sum ( axis = NUMBER ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "VAR = np . abs ( table [ : , NUMBER : NUMBER ] - table [ : , - NUMBER : ] ) NEWLINE VAR = VAR . mean ( axis = NUMBER ) NEWLINE VAR = VAR . std ( axis = NUMBER ) NEWLINE VAR = VAR > ( VAR + NUMBER * VAR )", "while not finished_event . wait ( NUMBER ) : NEWLINE pass", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "def read_file ( VAR ) : NEWLINE STRING NEWLINE with open ( VAR ) as VAR : NEWLINE return VAR . read ( ) NEWLINE def write_file ( VAR , VAR ) : NEWLINE STRING NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR . write ( VAR )", "+ - - - - - - + - - - - - + - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - + - - - - - + - - - - - - - - - - + NEWLINE | id | table | user | changeDate | value2 | value | name | NEWLINE + - - - - - - + - - - - - + - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - + - - - - - + - - - - - - - - - - + NEWLINE | NUMBER | TAB2 | user11 | NUMBER - NUMBER - NUMBER NUMBER : NUMBER . . | NUMBER | null | null | NEWLINE | NUMBER | TAB1 | user01 | NUMBER - NUMBER - NUMBER NUMBER : NUMBER . . | null | NUMBER | STRING | NEWLINE + - - - - - - + - - - - - + - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - + - - - - - + - - - - - - - - - - +", "from lxml import etree NEWLINE VAR = STRING NEWLINE VAR = etree . fromstring ( VAR ) NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . find ( STRING ) NEWLINE if VAR . text is None : NEWLINE VAR . text = STRING NEWLINE else : NEWLINE VAR . text += STRING NEWLINE print etree . tostring ( VAR )", "from lib . settings import Values NEWLINE from lib import Helper", "STRING", "for VAR in subpage . cssselect ( STRING ) : NEWLINE VAR . xpath ( STRING , namespaces = { STRING : STRING } )", "for VAR in range ( NUMBER , len ( lst ) , NUMBER ) : NEWLINE lst [ VAR : VAR + NUMBER ] = reversed ( lst [ VAR : VAR + NUMBER ] )", "list ( pairwise ( pleio ) )", ". . . NEWLINE print STRING NEWLINE print nova . servers . get_console_output ( VMID ) NEWLINE print STRING", "from collections import defaultdict NEWLINE VAR = defaultdict ( set ) NEWLINE VAR [ key ] . add ( value )", "[ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING ]", "In [ NUMBER ] : from scipy . stats import t NEWLINE In [ NUMBER ] : t . interval ( NUMBER , NUMBER , loc = NUMBER , scale = NUMBER ) NEWLINE Out [ NUMBER ] : ( - NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : t . interval ( NUMBER , NUMBER , loc = NUMBER , scale = NUMBER ) NEWLINE Out [ NUMBER ] : ( - NUMBER , NUMBER )", "median ( )", "VAR = np . zeros ( ( height , width ) ) NEWLINE VAR = np . zeros ( ( height , width ) ) NEWLINE for VAR in range ( height ) : NEWLINE for VAR in range ( width ) : NEWLINE if not point_is_in_mask ( VAR , ( VAR , VAR ) ) : NEWLINE VAR [ VAR ] [ VAR ] = np . nan", "Add - Type - AssemblyName System . Windows . Forms NEWLINE [ System . Windows . Forms . SystemInformation ] : : TerminalServerSession", "from statistics import mean , stdev NEWLINE from math import sqrt NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ VAR * NUMBER for VAR in VAR ] NEWLINE VAR = ( mean ( VAR ) - mean ( VAR ) ) / ( sqrt ( ( stdev ( VAR ) ** NUMBER + stdev ( VAR ) ** NUMBER ) / NUMBER ) ) NEWLINE print ( VAR )", "$ git clone < url > my - project ; cd my - project NEWLINE $ mkvirtualenv my - env - name NEWLINE $ pip install - r requirements . txt NEWLINE . . . continue your work , commit and push push and win at life : D", ">> > [ [ ( int ( VAR ) , int ( VAR ) , NUMBER ) for VAR , VAR in VAR ] for VAR in l ] NEWLINE [ [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER , NUMBER ) ] ]", "from fuzzywuzzy . fuzz import partial_ratio NEWLINE Df [ STRING ] . apply ( lambda VAR : max ( topics , key = lambda VAR : partial_ratio ( VAR , VAR ) ) )", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE def isprintable ( VAR ) : NEWLINE return not bool ( VAR . search ( VAR ) )", "def test ( ) : NEWLINE VAR = STRING NEWLINE import re NEWLINE print repr ( VAR ) NEWLINE print STRING NEWLINE VAR = re . compile ( STRING , re . M ) NEWLINE print VAR . search ( VAR ) . group ( NUMBER ) NEWLINE print STRING NEWLINE VAR = re . compile ( STRING , re . M | re . DOTALL ) NEWLINE print VAR . search ( VAR ) . group ( NUMBER ) NEWLINE test ( )", "grep - rlf < ( cut - d = - f NUMBER - messages . txt ) dir", "df [ STRING ] = df [ STRING ] . apply ( lambda VAR : NUMBER * VAR )", "def mylog ( VAR ) : NEWLINE logging . info ( VAR ) NEWLINE print STRING + STRING + VAR , NEWLINE sys . stdout . flush ( )", ">> > df [ two_bdays_before : two_bdays_later ] ] NEWLINE A B C D NEWLINE NUMBER - NUMBER - NUMBER NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER - NUMBER - NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER - NUMBER", ">> > is_slice_in_list ( B , A ) NEWLINE True NEWLINE >> > is_slice_in_list ( C , A ) NEWLINE True NEWLINE >> > is_slice_in_list ( D , A ) NEWLINE False", "VAR = OrderItem . objects . filter ( ** all_or_filter_args ( request , STRING ) )", "import pandas as pd NEWLINE VAR = pd . DataFrame ( [ STRING , STRING , STRING , STRING , STRING ] , columns = [ STRING ] )", "VAR = ScreenShot ( ) NEWLINE VAR = VAR . get_screenshot ( ) NEWLINE VAR = BytesIO ( ) NEWLINE VAR . save_to_callback ( VAR . write ) NEWLINE VAR = VAR . getvalue ( )", "VAR = False NEWLINE VAR = [ ] NEWLINE with open ( STRING , STRING ) as file NEWLINE VAR = iter ( file ) NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE if VAR . strip ( ) == STRING : NEWLINE break NEWLINE else : NEWLINE VAR . append ( VAR ) NEWLINE elif VAR . endswith ( STRING ) : NEWLINE for VAR in range ( NUMBER ) : NEWLINE next ( VAR ) NEWLINE VAR = True", "for VAR , VAR in withHandler ( the_list ) : NEWLINE . . .", "In [ NUMBER ] : g . wa . transform ( STRING ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE Name : wa , dtype : float64", "def update_file ( VAR , VAR ) : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = VAR . readlines ( ) NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE ( VAR in VAR and VAR . write ( STRING ) ) NEWLINE VAR . write ( VAR )", "import module NEWLINE print module . __file__", "import string , win32ui , win32con NEWLINE from Tkinter import * NEWLINE VAR = Tk ( ) NEWLINE VAR = win32ui . CreateWindowFromHandle ( string . atoi ( VAR . wm_frame ( ) , NUMBER ) ) NEWLINE VAR . ModifyStyle ( win32con . WS_CAPTION , NUMBER , win32con . SWP_FRAMECHANGED )", "import string , random NEWLINE VAR = open ( STRING , STRING ) NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR = list ( string . ascii_letters ) NEWLINE random . shuffle ( VAR ) NEWLINE VAR = STRING . join ( VAR [ : NUMBER ] ) NEWLINE VAR . write ( STRING % ( len ( VAR ) , VAR ) )", "In [ NUMBER ] : timeit [ ( np . bincount ( VAR ) > NUMBER ) . sum ( ) for VAR in data ] NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % % timeit NEWLINE VAR = np . sort ( data , axis = NUMBER ) NEWLINE ( np . diff ( VAR ) > NUMBER ) . sum ( axis = NUMBER ) + NUMBER NEWLINE . . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", ">> > VAR = set ( Course . query . join ( . . . University ) . filter ( University . name == STRING ) ) NEWLINE >> > [ VAR . name for VAR in Professor . query if set ( . . . VAR . courses_assisted ) . intersection ( VAR ) ]", "import os NEWLINE os . system ( STRING )", "def f ( * args , ** kwargs ) : NEWLINE print STRING , args , STRING , kwargs NEWLINE >> > f ( STRING ) NEWLINE args : ( STRING , ) kwargs : { } NEWLINE >> > f ( ar = STRING ) NEWLINE args : ( ) kwargs : { STRING : STRING } NEWLINE >> > f ( NUMBER , NUMBER , param = NUMBER ) NEWLINE args : ( NUMBER , NUMBER ) kwargs : { STRING : NUMBER }", "In [ NUMBER ] : np . random . seed ( NUMBER ) NEWLINE In [ NUMBER ] : VAR = np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , NUMBER ) ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE arrayn [ NUMBER ] : VAR = VAR . reshape ( VAR . shape [ NUMBER ] / NUMBER , NUMBER , VAR . shape [ NUMBER ] / NUMBER , NUMBER )", "< p class = STRING > NEWLINE Some address and street NEWLINE < br / > NEWLINE City , State , ZIP NEWLINE ( some ) phone - number NEWLINE < / p >", "VAR = cm . ScalarMappable ( cmap = cm . jet ) NEWLINE VAR . set_array ( number ) NEWLINE plt . colorbar ( VAR )", ">> > from sklearn . datasets import fetch_20newsgroups NEWLINE >> > from sklearn . feature_extraction . text import TfidfVectorizer NEWLINE >> > from sklearn . cluster import KMeans NEWLINE >> > from sklearn . decomposition import TruncatedSVD NEWLINE >> > VAR = fetch_20newsgroups ( ) NEWLINE >> > VAR = TfidfVectorizer ( min_df = NUMBER , max_df = NUMBER , stop_words = STRING ) NEWLINE >> > VAR = TruncatedSVD ( n_components = NUMBER ) NEWLINE >> > VAR = KMeans ( n_clusters = NUMBER ) NEWLINE >> > VAR = VAR . fit_transform ( VAR . VAR ) NEWLINE >> > VAR = VAR . fit_transform ( VAR ) NEWLINE >> > VAR . fit ( VAR )", "{ STRING : { STRING : NUMBER } , STRING : { STRING : NUMBER } , STRING : { STRING : NUMBER } , STRING : { STRING : None } , STRING : { STRING : NUMBER } , STRING : { STRING : None } , STRING : { STRING : None } , STRING : { STRING : None } , STRING : { STRING : NUMBER } , STRING : { STRING : None } , STRING : { STRING : None } }", "df [ STRING ] = df . groupby ( [ STRING , STRING ] ) . Week . transform ( lambda VAR : range ( VAR . min ( ) , VAR . min ( ) + VAR . size ) ) NEWLINE df [ df . Week == df . expected_week ]", "VAR = set ( data [ STRING ] ) NEWLINE while True : NEWLINE try : NEWLINE print STRING . join ( [ data [ VAR ] . pop ( NUMBER ) for VAR in header ] ) NEWLINE except IndexError : NEWLINE break NEWLINE print STRING , len ( VAR )", "f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ]", "VAR = Category ( STRING ) NEWLINE VAR . put ( ) NEWLINE VAR = VAR . add_sub_category ( STRING ) NEWLINE VAR = VAR . add_sub_category ( STRING ) NEWLINE VAR = VAR . add_sub_category ( STRING ) NEWLINE VAR = VAR . add_sub_category ( STRING ) NEWLINE VAR = VAR . add_sub_category ( STRING )", ">> > VAR = STRING NEWLINE >> > [ VAR for VAR , VAR in enumerate ( VAR ) if VAR == STRING ] NEWLINE [ NUMBER , NUMBER ]", ">> > data = [ [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING ] ] NEWLINE >> > frmt = STRING + NUMBER * STRING NEWLINE >> > for VAR in data : : NEWLINE print ( frmt . format ( * VAR ) )", "In [ ] : a = arange ( NUMBER ) . reshape ( NUMBER , NUMBER ) NEWLINE In [ ] : a NEWLINE Out [ ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE In [ ] : a [ NUMBER , logical_and ( NUMBER == a [ NUMBER , : ] , NUMBER == a [ NUMBER , : ] ) ] += NUMBER NEWLINE In [ ] : a NEWLINE Out [ ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = text . strip ( )", "original [ NUMBER ] , original [ NUMBER ] = original [ NUMBER ] , original [ NUMBER ]", "VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", ">> > re . sub ( STRING , STRING , words ) . strip ( ) NEWLINE STRING", "VAR = [ ] NEWLINE for VAR in messages : NEWLINE VAR = { STRING : VAR . VAR , STRING : VAR . phone } NEWLINE VAR . append ( VAR )", "VAR = raw_input ( ) NEWLINE try : NEWLINE VAR = float ( VAR ) NEWLINE except ValueError : NEWLINE VAR = VAR NEWLINE try : NEWLINE VAR = data [ VAR ] NEWLINE except KeyError : NEWLINE print STRING + STRING . join ( data . keys ( ) ) NEWLINE elsetemplatetags / my_tags . py NEWLINE . . . NEWLINE @ register . filter NEWLINE def where_id ( VAR , VAR ) : NEWLINE return filter ( lambda VAR : VAR . pk == VAR , VAR ) NEWLINE . . .", "class QuestionHandler ( RequestHandler ) : NEWLINE def get ( self , id ) : NEWLINE def post ( self , id ) : NEWLINE VAR = self . get_argument ( STRING ) NEWLINE VAR = Application ( [ ( STRING , QuestionHandler ) , ] )", "@ app . route ( STRING , methods = [ STRING ] ) NEWLINE def stuff ( ) : NEWLINE VAR = round ( getCpuLoad ( ) ) NEWLINE VAR = round ( getVmem ( ) ) NEWLINE VAR = round ( getDisk ( ) ) NEWLINE return jsonify ( VAR = VAR , VAR = VAR , VAR = VAR )", "[ . . . ] NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE [ . . . ]", ">> > list ( itertools . product ( * [ ( VAR , d . get ( VAR ) ) if d . get ( VAR ) else VAR for VAR in s ] ) ) NEWLINE [ ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) ]", "In [ NUMBER ] : a [ NUMBER ] NEWLINE Out [ NUMBER ] : ( NUMBER , NUMBER , NUMBER , - NUMBER )", ">> > VAR = [ STRING , STRING , NUMBER , NUMBER ] NEWLINE >> > VAR [ NUMBER ] = [ VAR [ NUMBER ] , STRING ] NEWLINE >> > VAR NEWLINE [ [ STRING , STRING ] , STRING , NUMBER , NUMBER ]", "master NEWLINE tempdb NEWLINE model NEWLINE msdb NEWLINE myDb", "Starting at : $ NUMBER NEWLINE Starting at : $ NUMBER", "VAR = OrderItem . objects . all_or_filtered ( STRING , request . POST . get ( STRING ) )", "VAR = np . vstack ( ( a , np . zeros_like ( a ) ) ) NEWLINE VAR = np . vstack ( ( b , np . ones_like ( b ) ) )", "Distance NEWLINE Athlete NEWLINE A . Moyet NUMBER m A NUMBER NUMBER NaN NaN NaN NaN NEWLINE C . Marconi NUMBER m B NUMBER NUMBER NaN NaN NaN NaN NEWLINE M . Smith NUMBER m A NUMBER NUMBER NUMBER m B NUMBER NUMBER", ">> > [ [ VAR or VAR or NUMBER for VAR , VAR in zip ( VAR , VAR ) ] for VAR , VAR in zip ( L1 , L2 ) ] NEWLINE [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]", "VAR , VAR = the_string . split ( STRING ) NEWLINE VAR , VAR , VAR = VAR . split ( STRING ) NEWLINE VAR , VAR , VAR = VAR . split ( STRING )", "[ NUMBER ] SERVICE ALERT : myhostname . com ; DNS : Recursive ; CRITICAL", "( NUMBER , )", "Domain Authority : NUMBER , Page Authority : NUMBER NEWLINE Root Domains : NUMBER", "source . include_exts = py , png , jpg , kv , atlas , json", "P93JX VSDC NEWLINE FV36RL Bootstrappers NEWLINE Ci76fP Eli_Regalado NEWLINE UN56fn JasonPalmer1971 NEWLINE iQ3H6zR GNOTP NEWLINE Qr04eB fcnewtech NEWLINE sE79dW melindaveee NEWLINE ud08GT MariaPanlilio NEWLINE c9B8EE akibantech NEWLINE ay26th Thepinkleash", "Player . health . fset NEWLINE Player . health . fget", "import csv NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE with open ( STRING , STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR = csv . VAR ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ : NUMBER ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR . append ( next ( ( VAR for VAR in VAR [ NUMBER : ] if VAR . startswith ( VAR ) ) , STRING ) ) NEWLINE VAR . writerow ( VAR + VAR )", "STRING", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE VAR = VAR [ : ] NEWLINE VAR [ NUMBER ] += outputList . pop ( NUMBER )", "VAR = open ( STRING ) NEWLINE VAR = json . loads ( VAR . read ( ) )", "VAR = ElmentTree ( file = STRING ) NEWLINE VAR = VAR . findall ( STRING", "", "import hello NEWLINE VAR = hello . A ( NUMBER , NUMBER ) NEWLINE VAR = hello . A ( NUMBER , NUMBER ) NEWLINE VAR = hello . get_a ( VAR , VAR ) NEWLINE print STRING , len ( VAR ) NEWLINE print STRING NEWLINE for VAR in VAR : NEWLINE print VAR . a , VAR . b", "from flask import render_template NEWLINE @ app . route ( STRING ) NEWLINE def hello ( VAR = None ) : NEWLINE return render_template ( STRING , buttons = [ STRING , STRING , STRING ] , active_btns = [ STRING , STRING ] )", "$ scons NEWLINE scons : Reading SConscript files . . . NEWLINE scons : done reading SConscript files . NEWLINE scons : Building targets . . . NEWLINE echo STRING > build / a NEWLINE echo STRING > build / b NEWLINE echo STRING > build / c NEWLINE echo STRING > build / d NEWLINE echo STRING > build / g NEWLINE my_action ( [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING ] ) NEWLINE gcc - o build / a . o - c build / a . c NEWLINE gcc - o build / b . o - c build / b . c NEWLINE gcc - o build / c . o - c build / c . c NEWLINE gcc - o build / d . o - c build / d . c NEWLINE gcc - o build / g . o - c build / g . c NEWLINE ar rc build / libfunctions . a build / a . o build / b . o build / c . o build / d . o build / g . o NEWLINE ranlib build / libfunctions . a NEWLINE scons : done building targets .", "df . index = [ STRING . join ( VAR ) for VAR in df . index ]", "from StringIO import StringIO NEWLINE import requests NEWLINE VAR = STRING NEWLINE VAR = StringIO ( ) NEWLINE VAR . write ( VAR ) NEWLINE VAR . seek ( NUMBER ) NEWLINE VAR = STRING NEWLINE VAR = { STRING : STRING } NEWLINE VAR = { STRING : VAR } NEWLINE VAR = requests . post ( VAR , VAR = VAR , VAR = VAR ) NEWLINE print VAR . content", "[ ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) , ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , NUMBER ) ]", "VAR = { STRING : ( STRING , STRING ) , STRING : ( STRING , STRING ) , STRING : ( STRING , STRING ) , STRING : ( STRING , STRING ) } NEWLINE def decor ( VAR ) : NEWLINE def wrap ( ) : NEWLINE print ( STRING ) NEWLINE VAR ( ) NEWLINE print ( STRING ) NEWLINE return wrap NEWLINE def print_text ( ) : NEWLINE print ( STRING ) NEWLINE VAR = decor ( print_text ) NEWLINE VAR ( ) NEWLINE VAR = input ( STRING ) . capitalize ( ) NEWLINE print ( VAR [ VAR ] [ NUMBER ] , VAR [ VAR ] [ NUMBER ] )", "In [ NUMBER ] : cumtrapz ( y , x = x , axis = NUMBER , initial = NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", ">> > with open ( infilepath ) as VAR : NEWLINE . . . VAR = { } NEWLINE . . . VAR = None NEWLINE . . . for VAR in VAR : NEWLINE . . . VAR = VAR . strip ( ) NEWLINE . . . if VAR . startswith ( STRING ) : NEWLINE . . . VAR = VAR NEWLINE . . . VAR [ VAR ] = { } NEWLINE . . . else : NEWLINE . . . VAR , VAR = VAR . split ( STRING , NUMBER ) NEWLINE . . . VAR [ VAR ] [ VAR . strip ( ) ] = VAR . strip ( ) NEWLINE . . . NEWLINE >> > VAR NEWLINE { STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } }", "In [ NUMBER ] : hashed . drop_duplicates ( ) . map ( hashed . value_counts ( ) ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE dtype : int64", "VAR = np . histogram ( a , bins = range ( NUMBER ) ) NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR = NUMBER NEWLINE plt . bar ( VAR [ NUMBER ] [ NUMBER : ] , VAR [ NUMBER ] ) NEWLINE VAR . set_xticks ( VAR [ NUMBER ] [ NUMBER : ] + VAR ) NEWLINE VAR . set_xticklabels ( ( STRING , STRING , STRING , STRING ) )", "return sum ( map ( doSomething , originalList ) , [ ] )", "import subprocess NEWLINE VAR = subprocess . Popen ( [ STRING , STRING , STRING , STRING ] , stdout = subprocess . PIPE , stdin = subprocess . PIPE , ) NEWLINE VAR . stdin . write ( STRING ) NEWLINE print STRING NEWLINE print VAR . stdout . readline ( ) . rstrip ( )", "from Bio import SeqIO NEWLINE import sys NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) . splitlines ( ) NEWLINE VAR = set ( ) NEWLINE VAR = { } NEWLINE for VAR in SeqIO . parse ( open ( STRING ) , STRING ) : NEWLINE VAR = str ( VAR . VAR ) NEWLINE if VAR in VAR and VAR not in VAR : NEWLINE VAR . add ( VAR ) NEWLINE VAR [ VAR . index ( VAR ) ] = VAR NEWLINE for VAR in sorted ( VAR ) : NEWLINE sys . stdout . write ( VAR [ VAR ] . format ( STRING ) )", ">> > class Room ( object ) : NEWLINE . . . def __init__ ( VAR , VAR , VAR ) : NEWLINE . . . VAR . VAR = VAR NEWLINE . . . VAR . VAR = VAR NEWLINE . . . NEWLINE >> > VAR = { } NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE >> > for VAR , VAR in zip ( VAR , VAR ) : NEWLINE . . . VAR [ VAR ] = Room ( * VAR ) NEWLINE . . . NEWLINE >> > VAR NEWLINE { STRING : < __main__ . Room object at NUMBER > , STRING : < __main__ . Room object at NUMBER > , STRING : < __main__ . Room object at NUMBER > , STRING : < __main__ . Room object at NUMBER > } NEWLINE >> > VAR [ STRING ] NEWLINE < __main__ . Room object at NUMBER > NEWLINE >> > VAR [ STRING ] . VAR NEWLINE NUMBER NEWLINE >> > VAR [ STRING ] . VAR NEWLINE NUMBER", "import re NEWLINE VAR = STRING NEWLINE if re . compile ( STRING ) . match ( VAR ) : NEWLINE print STRING NEWLINE else : NEWLINE print STRING", "VAR = [ tuple ( VAR ) for VAR in np . split ( x , np . where ( np . diff ( x ) != NUMBER ) [ NUMBER ] + NUMBER ) if VAR . size > NUMBER ] NEWLINE print ( VAR ) NEWLINE [ ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) ]", "import re NEWLINE VAR = STRING NEWLINE VAR = re . findall ( STRING , mv ) NEWLINE print VAR", "Client NEWLINE Python NUMBER NUMBER ( r265 : NUMBER , Mar NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) [ MSC v NUMBER NUMBER bit ( Intel ) ] on win32 NEWLINE Type STRING , STRING , STRING or STRING for VAR information . NEWLINE >> > from socket import * NEWLINE >> > s = socket ( ) NEWLINE >> > s . connect ( ( STRING , NUMBER ) ) NEWLINE >> > f = s . makefile ( ) NEWLINE >> > f . write ( STRING ) NEWLINE >> > f . flush ( )", "In [ NUMBER ] : VAR = rgb2int ( np . array ( color2ind . keys ( ) , dtype = STRING ) ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , dtype = uint32 )", "VAR = string_to_dict ( csv_data ) NEWLINE VAR = string_to_dict ( d . text ) NEWLINE", "In [ NUMBER ] : VAR = StringIO ( ) NEWLINE In [ NUMBER ] : df . to_csv ( VAR , quoting = NUMBER ) NEWLINE In [ NUMBER ] : VAR . getvalue ( ) NEWLINE Out [ NUMBER ] : STRING", "In [ NUMBER ] : NEWLINE VAR = [ NUMBER , STRING , STRING , STRING , STRING ] NEWLINE VAR *= NUMBER NEWLINE VAR = [ NUMBER , STRING , STRING , STRING , STRING ] NEWLINE VAR *= NUMBER NEWLINE VAR = np . array ( VAR ) NEWLINE VAR = np . array ( VAR ) NEWLINE % timeit ( VAR == VAR ) . sum ( ) NEWLINE % timeit sum ( VAR == VAR ) NEWLINE The slowest run took NUMBER times longer than the fastest . This could mean that an intermediate result is being cached NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = STRING NEWLINE while True : NEWLINE VAR += input ( STRING ) + STRING", "In [ NUMBER ] : df . pivot_table ( values = STRING , index = STRING , columns = STRING , aggfunc = STRING ) NEWLINE Out [ NUMBER ] : NEWLINE goods a b c NEWLINE month NEWLINE NUMBER NUMBER NUMBER NaN NEWLINE NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NaN NUMBER NaN NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NaN NaN", "hashlookup : NUMBER s NUMBER % NEWLINE unrolled_bitwise : NUMBER s NUMBER % NEWLINE log_e : NUMBER s NUMBER % NEWLINE stringcount : NUMBER s NUMBER % NEWLINE log_2 : NUMBER s NUMBER % NEWLINE ilog : NUMBER s NUMBER % NEWLINE bitwise : NUMBER s NUMBER % NEWLINE olgn : NUMBER s NUMBER % NEWLINE bitcounter : NUMBER s NUMBER %", "for VAR , VAR in dct . iteritems ( ) : NEWLINE print repr ( VAR ) + STRING + STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in enumerate ( VAR , start = NUMBER ) ) + STRING", "from sqlalchemy import MetaData NEWLINE VAR = MetaData ( ) NEWLINE VAR . reflect ( engine ) NEWLINE for VAR in VAR . tables . values ( ) : NEWLINE print ( VAR . name ) NEWLINE for VAR in VAR . c : NEWLINE print ( VAR . name )", "myproject NEWLINE - > task NEWLINE - - - - > models NEWLINE - - - - - - - - > __init__ . py NEWLINE - - - - - - - - > base . py NEWLINE - - - - - - - - > math . py NEWLINE - - - - - - - - > etc . NEWLINE - - - - > views NEWLINE - - - - - - - - > __init__ . py NEWLINE - - - - - - - - > math . py NEWLINE - - - - - - - - > etc . NEWLINE - - - - > urls NEWLINE - - - - - - - - > __init__ . py NEWLINE - - - - - - - - > etc . NEWLINE - > check NEWLINE - - - - > models NEWLINE - - - - - - - - > __init__ . py NEWLINE - - - - - - - - > base . py NEWLINE - - - - - - - - > etc . NEWLINE - etc . - ( you get the idea )", "while currenttime > STRING and currenttime < STRING :", "for / D % % d in ( % NUMBER ) do ( echo processing % % d script . py % % d )", "def classproperty_getter_only ( VAR ) : NEWLINE class NonDataDescriptor ( object ) : NEWLINE def __get__ ( VAR , VAR , VAR ) : NEWLINE return VAR ( VAR ) NEWLINE return NonDataDescriptor ( ) NEWLINE class Foo ( object ) : NEWLINE @ classproperty_getter_only NEWLINE def flup ( VAR ) : NEWLINE return STRING , VAR NEWLINE print Foo . flup NEWLINE print Foo ( ) . flup", "x ' = vx NEWLINE y ' = vy NEWLINE z ' = vz NEWLINE vx ' = Ac * x / r NEWLINE vy ' = Ac * y / r + q * E / m NEWLINE vz ' = Ac * z / r", "from sqlalchemy import create_engine , Column , Integer , SmallInteger , String , ForeignKey , Table , Index NEWLINE from sqlalchemy . orm import relationship , scoped_session , sessionmaker NEWLINE from sqlalchemy . ext . declarative import declarative_base NEWLINE VAR = create_engine ( STRING , echo = True ) NEWLINE VAR = scoped_session ( sessionmaker ( bind = VAR ) ) NEWLINE VAR = declarative_base ( ) NEWLINE VAR . query = VAR . query_property ( ) NEWLINE class _BaseMixin ( object ) : NEWLINE STRING NEWLINE def __init__ ( VAR , ** kwargs ) : NEWLINE for VAR , VAR in kwargs . items ( ) : NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE def __repr__ ( VAR ) : NEWLINE return STRING % ( VAR . __class__ . __name__ , STRING . join ( STRING % ( VAR , VAR . __dict__ [ VAR ] ) for VAR in sorted ( VAR . __dict__ ) if STRING != VAR [ : NUMBER ] and STRING != VAR [ : NUMBER ] ) ) NEWLINE class AnswerOption ( VAR , _BaseMixin ) : NEWLINE STRING NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( Integer , ForeignKey ( STRING ) , nullable = False ) NEWLINE VAR = Column ( Integer , nullable = False ) NEWLINE VAR = Column ( String ( NUMBER ) , nullable = False ) NEWLINE VAR = { STRING : VAR } NEWLINE class AnswerOptionChoice ( AnswerOption ) : NEWLINE STRING NEWLINE VAR = Column ( String , nullable = True ) NEWLINE VAR = { STRING : STRING } NEWLINE class AnswerOptionInput ( AnswerOption ) : NEWLINE STRING NEWLINE VAR = Column ( Integer , nullable = True ) NEWLINE VAR = { STRING : STRING } NEWLINE class Question ( VAR , _BaseMixin ) : NEWLINE STRING NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( String , nullable = False ) NEWLINE VAR = Column ( String ( NUMBER ) , nullable = False ) NEWLINE VAR = relationship ( AnswerOption , backref = STRING ) NEWLINE VAR = { STRING : VAR } NEWLINE def get_answer_value ( VAR , VAR ) : NEWLINE STRING NEWLINE raise Exception ( STRING ) NEWLINE class QuestionChoice ( Question ) : NEWLINE STRING NEWLINE VAR = { STRING : STRING } NEWLINE def get_answer_value ( VAR , VAR ) : NEWLINE assert isinstance ( VAR , AnswerChoice ) NEWLINE assert VAR . VAR in VAR . VAR , STRING NEWLINE return VAR . VAR . VAR NEWLINE class QuestionInput ( Question ) : NEWLINE STRING NEWLINE VAR = { STRING : STRING } NEWLINE def get_answer_value ( VAR , VAR ) : NEWLINE assert isinstance ( VAR , AnswerInput ) NEWLINE VAR = sorted ( [ ( VAR . VAR , VAR . VAR ) for VAR in VAR . VAR ] ) NEWLINE if not VAR : NEWLINE raise Exception ( STRING . format ( VAR ) ) NEWLINE if VAR . VAR <= VAR [ NUMBER ] [ NUMBER ] : NEWLINE return VAR [ NUMBER ] [ NUMBER ] NEWLINE elif VAR . VAR >= VAR [ - NUMBER ] [ NUMBER ] : NEWLINE return VAR [ - NUMBER ] [ NUMBER ] NEWLINE else : NEWLINE for VAR in range ( len ( VAR ) - NUMBER ) : NEWLINE if VAR . VAR == VAR [ VAR + NUMBER ] [ NUMBER ] : NEWLINE return VAR [ VAR + NUMBER ] [ NUMBER ] NEWLINE elif VAR . VAR < VAR [ VAR + NUMBER ] [ NUMBER ] : NEWLINE assert ( VAR [ VAR ] [ NUMBER ] != VAR [ VAR + NUMBER ] [ NUMBER ] ) NEWLINE return VAR [ VAR ] [ NUMBER ] + ( VAR [ VAR + NUMBER ] [ NUMBER ] - VAR [ VAR ] [ NUMBER ] ) * ( VAR . VAR - VAR [ VAR ] [ NUMBER ] ) / ( VAR [ VAR + NUMBER ] [ NUMBER ] - VAR [ VAR ] [ NUMBER ] ) NEWLINE assert False , STRING NEWLINE class Answer ( VAR , _BaseMixin ) : NEWLINE STRING NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( String ( NUMBER ) , nullable = False ) NEWLINE VAR = Column ( Integer , ForeignKey ( STRING ) , nullable = True ) NEWLINE VAR = relationship ( Question ) NEWLINE VAR = Column ( Integer , ForeignKey ( STRING ) , nullable = True ) NEWLINE VAR = { STRING : VAR } NEWLINE def get_value ( VAR ) : NEWLINE return VAR . VAR . get_answer_value ( VAR ) NEWLINE class AnswerChoice ( Answer ) : NEWLINE STRING NEWLINE VAR = { STRING : STRING } NEWLINE VAR = Column ( Integer , ForeignKey ( STRING ) , nullable = True ) NEWLINE VAR = relationship ( AnswerOption , single_parent = True ) NEWLINE class AnswerInput ( Answer ) : NEWLINE STRING NEWLINE VAR = { STRING : STRING } NEWLINE VAR = Column ( Integer , nullable = True ) NEWLINE VAR = Table ( STRING , VAR . metadata , Column ( STRING , Integer , primary_key = True ) , Column ( STRING , Integer , ForeignKey ( STRING ) ) , Column ( STRING , Integer , ForeignKey ( STRING ) ) ) NEWLINE VAR = Index ( STRING , VAR . c . VAR , VAR . c . VAR , unique = True ) NEWLINE class Questionnaire ( VAR , _BaseMixin ) : NEWLINE STRING NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( String , nullable = False ) NEWLINE VAR = relationship ( Question , secondary = VAR ) NEWLINE class Test ( VAR , _BaseMixin ) : NEWLINE STRING NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( Integer , ForeignKey ( STRING ) , nullable = False ) NEWLINE VAR = relationship ( Questionnaire , single_parent = True ) NEWLINE VAR = relationship ( Answer , backref = STRING ) NEWLINE def total_points ( VAR ) : NEWLINE return sum ( VAR . get_value ( ) for VAR in VAR . VAR ) NEWLINE VAR . metadata . create_all ( VAR ) NEWLINE print STRING * NUMBER + STRING NEWLINE VAR = QuestionChoice ( VAR = STRING ) NEWLINE VAR = AnswerOptionChoice ( VAR = STRING , VAR = NUMBER , VAR = VAR ) NEWLINE VAR = AnswerOptionChoice ( VAR = STRING , VAR = NUMBER , VAR = VAR ) NEWLINE VAR = AnswerOptionChoice ( VAR = STRING , VAR = NUMBER ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE VAR = AnswerChoice ( VAR = VAR , VAR = VAR ) NEWLINE assert VAR . get_value ( ) == NUMBER NEWLINE VAR . add ( VAR ) NEWLINE VAR . flush ( ) NEWLINE VAR = QuestionInput ( VAR = STRING ) NEWLINE VAR = AnswerOptionInput ( VAR = NUMBER , VAR = NUMBER , VAR = VAR ) NEWLINE VAR = AnswerOptionInput ( VAR = NUMBER , VAR = NUMBER , VAR = VAR ) NEWLINE VAR = AnswerOptionInput ( VAR = NUMBER , VAR = NUMBER ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE VAR = ( ( - NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ) NEWLINE VAR = AnswerInput ( VAR = VAR , VAR = None ) NEWLINE for VAR , VAR in VAR : NEWLINE VAR . VAR = VAR NEWLINE VAR = VAR . get_value ( ) NEWLINE assert VAR == VAR , STRING . format ( VAR , VAR , VAR ) NEWLINE VAR . VAR = NUMBER NEWLINE VAR . add ( VAR ) NEWLINE VAR . flush ( ) NEWLINE VAR = Questionnaire ( VAR = STRING ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE VAR . add ( VAR ) NEWLINE VAR = Test ( VAR = VAR ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE assert VAR . total_points ( ) == NUMBER NEWLINE VAR . add ( VAR ) NEWLINE VAR . flush ( ) NEWLINE print STRING * NUMBER + STRING NEWLINE VAR . expunge_all ( ) NEWLINE VAR = VAR . query ( Answer ) . get ( NUMBER ) NEWLINE assert VAR . get_value ( ) == NUMBER NEWLINE VAR = VAR . query ( Answer ) . get ( NUMBER ) NEWLINE assert VAR . get_value ( ) == NUMBER NEWLINE VAR = VAR . query ( Test ) . get ( NUMBER ) NEWLINE assert VAR . total_points ( ) == NUMBER", "from __future__ import print_function NEWLINE import numpy as np NEWLINE from scipy . integrate import ode NEWLINE def func ( VAR , VAR , VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR * ( NUMBER - VAR [ NUMBER ] * VAR [ NUMBER ] ) * VAR [ NUMBER ] - VAR [ NUMBER ] NEWLINE return np . array ( [ VAR , VAR ] ) NEWLINE def jac ( VAR , VAR , VAR ) : NEWLINE VAR = np . empty ( ( NUMBER , NUMBER ) ) NEWLINE VAR [ NUMBER , NUMBER ] = NUMBER NEWLINE VAR [ NUMBER , NUMBER ] = NUMBER NEWLINE VAR [ NUMBER , NUMBER ] = - VAR * NUMBER * VAR [ NUMBER ] * VAR [ NUMBER ] - NUMBER NEWLINE VAR [ NUMBER , NUMBER ] = VAR * ( NUMBER - VAR [ NUMBER ] * VAR [ NUMBER ] ) NEWLINE return VAR NEWLINE VAR = NUMBER NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE for VAR , VAR in [ ( STRING , dict ( method = STRING ) ) , ( STRING , dict ( method = STRING ) ) , ( STRING , { } ) ] : NEWLINE for VAR in [ None , jac ] : NEWLINE VAR = ode ( func , jac = VAR ) NEWLINE VAR . set_integrator ( VAR , atol = NUMBER , rtol = NUMBER , ** VAR ) NEWLINE VAR . set_f_params ( VAR ) NEWLINE VAR . set_jac_params ( VAR ) NEWLINE VAR . set_initial_value ( VAR , VAR ) NEWLINE VAR = [ ] NEWLINE VAR = NUMBER NEWLINE while VAR . successful ( ) and VAR . VAR < VAR : NEWLINE VAR . integrate ( VAR , step = True ) NEWLINE VAR += NUMBER NEWLINE print ( STRING % ( VAR , VAR . get ( STRING , STRING ) , VAR . func_name if VAR else None ) , end = STRING ) NEWLINE VAR = np . unique ( VAR ) NEWLINE print ( STRING , len ( VAR ) )", "import time NEWLINE VAR = time . time ( ) NEWLINE while True : NEWLINE VAR += NUMBER * NUMBER NEWLINE for VAR in range ( NUMBER ) : NEWLINE if time . time ( ) > VAR : NEWLINE break NEWLINE while time . time ( ) < VAR : NEWLINE time . sleep ( NUMBER )", "NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop", "a int a ( ) { } NEWLINE b int b ( ) { } NEWLINE c int c ( ) { } NEWLINE d int d ( ) { } NEWLINE g int g ( ) { }", "from api import common NEWLINE @ api . route ( STRING ) NEWLINE def get_users ( ) : NEWLINE return common . get_users ( )", "Start of Multiple Camera Processes NEWLINE def startProcess ( camera , config , log ) : NEWLINE STRING NEWLINE VAR = [ ] NEWLINE for VAR in range ( len ( camera ) ) : NEWLINE log . info ( STRING . format ( camera [ VAR ] ) ) NEWLINE print STRING . format ( camera [ VAR ] ) NEWLINE try : NEWLINE VAR = mp . Process ( target = monitorCam , args = ( camera [ VAR ] , config , log ) , name = camera [ VAR ] ) NEWLINE VAR . daemon = True NEWLINE VAR . append ( VAR ) NEWLINE VAR . start ( ) NEWLINE except KeyboardInterrupt : NEWLINE log . info ( STRING . format ( mp . current_process ( ) . pid , camera [ VAR ] ) ) NEWLINE VAR . terminate ( ) NEWLINE log . info ( STRING . format ( VAR , VAR . is_alive ( ) ) ) NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR [ VAR ] . join ( ) NEWLINE return", "In [ NUMBER ] : NEWLINE % timeit df [ df < NUMBER ] . count ( ) NEWLINE % timeit ( df < NUMBER ) . sum ( ) NEWLINE % timeit ( df < NUMBER ) . apply ( np . count_nonzero ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop", "hello from python NEWLINE version : NUMBER", "def run_folder_chooser_dialog ( ) : NEWLINE VAR = [ ] NEWLINE def run_dialog ( VAR ) : NEWLINE VAR = Gtk . FileChooserDialog ( STRING , None , Gtk . FileChooserAction . SELECT_FOLDER , ( Gtk . STOCK_CANCEL , Gtk . ResponseType . CANCEL , STRING , Gtk . ResponseType . OK ) ) NEWLINE VAR = VAR . run ( ) NEWLINE if VAR == Gtk . ResponseType . OK : NEWLINE VAR . append ( VAR . get_filename ( ) ) NEWLINE else : NEWLINE VAR . append ( None ) NEWLINE VAR . destroy ( ) NEWLINE Gtk . main_quit ( ) NEWLINE Gdk . threads_add_idle ( GLib . PRIORITY_DEFAULT , run_dialog , None ) NEWLINE Gtk . main ( ) NEWLINE return VAR [ NUMBER ]", "import numba as nb NEWLINE import numpy as np NEWLINE def neumann_laplacian_1d ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = np . zeros ( VAR . shape ) NEWLINE VAR [ NUMBER : - NUMBER ] = ( ( NUMBER ) * VAR [ NUMBER : ] + ( NUMBER ) * VAR [ : - NUMBER ] - ( NUMBER ) * VAR [ NUMBER : - NUMBER ] ) NEWLINE VAR [ NUMBER ] = ( ( NUMBER ) * VAR [ NUMBER ] - ( NUMBER ) * VAR [ NUMBER ] ) NEWLINE VAR [ - NUMBER ] = ( ( NUMBER ) * VAR [ - NUMBER ] - ( NUMBER ) * VAR [ - NUMBER ] ) NEWLINE return VAR / VAR NEWLINE @ nb . autojit ( nopython = True ) NEWLINE def neumann_laplacian_1d_numba ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = np . zeros ( VAR . shape ) NEWLINE VAR [ NUMBER : - NUMBER ] = ( ( NUMBER ) * VAR [ NUMBER : ] + ( NUMBER ) * VAR [ : - NUMBER ] - ( NUMBER ) * VAR [ NUMBER : - NUMBER ] ) NEWLINE VAR [ NUMBER ] = ( ( NUMBER ) * VAR [ NUMBER ] - ( NUMBER ) * VAR [ NUMBER ] ) NEWLINE VAR [ - NUMBER ] = ( ( NUMBER ) * VAR [ - NUMBER ] - ( NUMBER ) * VAR [ - NUMBER ] ) NEWLINE return VAR / VAR NEWLINE VAR = np . random . random ( NUMBER ) NEWLINE neumann_laplacian_1d_numba ( VAR , NUMBER ) NEWLINE % timeit neumann_laplacian_1d ( VAR , NUMBER ) NEWLINE % timeit neumann_laplacian_1d_numba ( VAR , NUMBER ) NEWLINE >> NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE >> The slowest run took NUMBER times longer than the fastest . This could mean that an intermediate result is being cached NEWLINE >> NUMBER loops , best of NUMBER : NUMBER s per loop", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE print [ VAR . name for VAR in VAR . find_all ( ) ]", "In [ NUMBER ] : p . reshape ( NUMBER , NUMBER , order = STRING ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] , dtype = STRING )", "OrderedDict ( [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] )", "ln ( y ) = A * x ^ NUMBER + B * x + C", "VAR = VAR . merge ( MvT101group , left_on = [ STRING ] , right_index = True , how = STRING ) NEWLINE VAR = VAR . merge ( MvT102group , left_on = [ STRING ] , right_index = True , how = STRING )", "if hasattr ( circle , STRING )", "VAR = list ( data ) NEWLINE while VAR : NEWLINE VAR = min ( NUMBER , len ( VAR ) ) NEWLINE f ( VAR [ : VAR ] ) NEWLINE del VAR [ : VAR ]", "VAR = re . compile ( STRING )", "VAR = price . get_text ( )", "$ awk STRING / tmp / genes . txt NEWLINE NUMBER NEWLINE NUMBER", "In [ NUMBER ] : color = np . tile ( color , ( NUMBER , NUMBER , NUMBER ) ) NEWLINE In [ NUMBER ] : ( rgb2vals ( color , color2ind ) == using_loops ( color , color2ind ) ) . all ( ) NEWLINE Out [ NUMBER ] : True NEWLINE In [ NUMBER ] : % timeit rgb2vals ( color , color2ind ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % timeit using_loops ( color , color2ind ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = [ STRING . join ( str ( VAR ) for VAR in VAR ) for VAR in VAR ]", "print ( STRING , grab_date , file = f ) NEWLINE print ( STRING , file = f )", "STRING : Counter ( { NUMBER : NUMBER , NUMBER : NUMBER } ) NEWLINE STRING : Counter ( { STRING : NUMBER , STRING : NUMBER } )", "import inspect NEWLINE def getCallerModule ( ) : NEWLINE print ( inspect . currentframe ( ) . f_back . f_globals [ STRING ] )", "C : \\ Users \\ NUMBER \\ Desktop \\ Python > python print . py C : \\ Users \\ NUMBER \\ Desktop \\ tes NEWLINE t . txt NEWLINE True NEWLINE C : \\ Users \\ NUMBER \\ Desktop \\ test . txt NEWLINE C : \\ Users \\ NUMBER \\ Desktop \\ Python > python print . py whatever NEWLINE False NEWLINE whatever", "class Site ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = manager . Manager ( ) NEWLINE def __unicode__ ( VAR ) : NEWLINE return VAR . VAR", "VAR = pd . DataFrame . from_dict ( d , orient = STRING ) . stack ( ) . reset_index ( NUMBER , drop = True ) . to_frame ( ) . reset_index ( ) NEWLINE VAR . columns = [ STRING , STRING ]", "from multiprocessing import Pool NEWLINE from time import sleep NEWLINE def square ( VAR ) : NEWLINE return VAR * VAR NEWLINE def cube ( VAR ) : NEWLINE return VAR * VAR * VAR NEWLINE VAR = Pool ( processes = NUMBER ) NEWLINE VAR = VAR . map_async ( f , range ( NUMBER ) ) NEWLINE VAR = VAR . map_async ( g , range ( NUMBER ) )", "{ % extends STRING % }", "VAR2 : = $ ( shell python - c STRING ) NEWLINE g + + main . cpp - I STRING", "python - mtimeit - s STRING STRING", "VAR = [ urlparse ( VAR ) . netloc for VAR in file ( ipath , STRING ) ]", "def recursive_sum ( VAR , VAR , VAR = None , VAR = NUMBER ) : NEWLINE if VAR is None : NEWLINE VAR = [ ] NEWLINE if VAR < min ( len ( VAR ) , len ( VAR ) ) : NEWLINE VAR . append ( VAR [ VAR ] + VAR [ VAR ] ) NEWLINE return recursive_sum ( VAR , VAR , VAR , VAR + NUMBER ) NEWLINE else : NEWLINE return VAR", "VAR = ( VAR for VAR in nltk . corpus . brown . VAR ( ) if re . search ( STRING , VAR ) )", "public void StopButton_OnClick ( object sender , EventArgs e ) { pythonThread . Abort ( new Microsoft . Scripting . KeyboardInterruptException ( STRING ) ) ; }", "db . things . find ( { name : { $ regex : STRING } } ) . forEach ( printjson ) ;", "( species ) C ( are in groups ) OG_1 , OG_3 NEWLINE ( species ) A ( are in groups ) OG_1 , OG_2 , OG_3 NEWLINE ( species ) B ( are in groups ) OG_1 , OG_2 , OG_3 NEWLINE ( species ) C , A ( are in groups ) OG_1 , OG_3 NEWLINE ( species ) C , B ( are in groups ) OG_1 , OG_3 NEWLINE ( species ) A , B ( are in groups ) OG_1 , OG_2 , OG_3 NEWLINE ( species ) C , A , B ( are in groups ) OG_1 , OG_3", "VAR = Rule ( STRING ) NEWLINE VAR = Rule ( STRING ) NEWLINE VAR = Rule ( STRING )", "VAR = re . compile ( STRING ) . findall", "[ NUMBER , NUMBER , NUMBER ]", "any ( b == a [ VAR : ] + a [ : VAR ] for VAR in range ( len ( a ) ) )", ">> > from collections import defaultdict NEWLINE >> > data = ( [ STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING ] ) NEWLINE >> > result = defaultdict ( list ) NEWLINE >> > for key , * values in data : NEWLINE . . . result [ key ] . extend ( values ) NEWLINE . . . NEWLINE >> > result NEWLINE defaultdict ( < class STRING > , { STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING ] } )", "var dict = $ . parseJSON ( $ . cookie ( STRING ) ) ;", "NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER A B C D NEWLINE NUMBER E F G H NEWLINE NUMBER I J K L", "from math import sin , cos , acos NEWLINE from unittest import assertAlmostEqual NEWLINE def assertAlmostEqualAngles ( VAR , VAR , ** kwargs ) : NEWLINE VAR = ( sin ( VAR ) - sin ( VAR ) ) ** NUMBER + ( cos ( VAR ) - cos ( VAR ) ) ** NUMBER NEWLINE VAR = acos ( ( NUMBER - VAR ) / NUMBER ) NEWLINE assertAlmostEqual ( VAR , NUMBER , ** kwargs )", "@ pause_wrapper ( x , n ) NEWLINE def function ( a , b , c ) : NEWLINE . . .", "def apply_something ( VAR , VAR , VAR ) : NEWLINE pass NEWLINE import functools NEWLINE reduce ( functools . partial ( apply_something , VAR = True ) , [ NUMBER , NUMBER , NUMBER ] , something_initializer )", ">> > cgi . escape ( STRING ) . encode ( STRING , STRING ) NEWLINE STRING", "from selenium import webdriver NEWLINE import re NEWLINE VAR = webdriver . PhantomJS ( ) NEWLINE VAR . set_window_size ( NUMBER , NUMBER ) NEWLINE VAR . get ( STRING ) NEWLINE VAR = STRING NEWLINE VAR = re . compile ( VAR , re . X ) NEWLINE VAR = VAR . find_elements_by_xpath ( STRING ) NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE VAR = STRING . format ( VAR ) NEWLINE VAR = VAR . find_element_by_xpath ( VAR ) NEWLINE VAR = re . match ( VAR , VAR . text ) NEWLINE if VAR and VAR . group ( NUMBER ) == STRING : NEWLINE VAR = STRING NEWLINE VAR = VAR . find_element_by_xpath ( VAR ) NEWLINE print STRING . format ( VAR ) NEWLINE print VAR . group ( NUMBER ) NEWLINE print VAR . get_attribute ( STRING ) NEWLINE print", "pip install beautifulsoup4 NEWLINE pip install requests NEWLINE pip install lxml", "proc . terminate ( )", "VAR = re . compile ( STRING ) NEWLINE VAR = re . findall ( VAR , STRING )", "VAR = [ { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } ] NEWLINE from collections import defaultdict NEWLINE VAR = defaultdict ( list ) NEWLINE for VAR in VAR : NEWLINE VAR [ ( VAR [ STRING ] , VAR [ STRING ] ) ] . append ( VAR [ STRING ] )", "rect ( - NUMBER , NUMBER , - NUMBER , NUMBER , col = c ( STRING ) ) NEWLINE rect ( - NUMBER , NUMBER , - NUMBER , NUMBER , col = c ( STRING ) ) NEWLINE rect ( - NUMBER , NUMBER , - NUMBER , NUMBER , col = c ( STRING ) )", "In [ NUMBER ] : % timeit testing [ STRING ] = [ STRING . join ( str ( VAR ) . split ( VAR ) ) for VAR , VAR in zip ( testing . FULL_NAME . astype ( STRING ) , testing . NAME . astype ( STRING ) ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "parsed . find ( STRING ) . previousSibling", "VAR = { }", "VAR = STRING", "VAR = first_td . renderContents ( )", ">> > import pandas as pd NEWLINE >> > f . seek ( NUMBER ) NEWLINE >> > pd . read_csv ( f , delimiter = STRING , index_col = NUMBER , names = [ STRING , STRING ] , . . . converters = { NUMBER : parse_pair , NUMBER : parse_pair } ) NEWLINE a b NEWLINE NUMBER ( NUMBER + NUMBER ) ( NUMBER + NUMBER ) NEWLINE NUMBER ( NUMBER + NUMBER ) ( NUMBER + NUMBER )", "import os NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( os . urandom ( NUMBER ) )", "def word2vec ( VAR ) : NEWLINE from collections import Counter NEWLINE from math import sqrt NEWLINE VAR = Counter ( VAR ) NEWLINE VAR = set ( VAR ) NEWLINE VAR = sqrt ( sum ( VAR * VAR for VAR in VAR . values ( ) ) ) NEWLINE return VAR , VAR , VAR NEWLINE def cosdis ( VAR , VAR ) : NEWLINE VAR = VAR [ NUMBER ] . intersection ( VAR [ NUMBER ] ) NEWLINE return sum ( VAR [ NUMBER ] [ VAR ] * VAR [ NUMBER ] [ VAR ] for VAR in VAR ) / VAR [ NUMBER ] / VAR [ NUMBER ]", "for VAR in self . variable_list : NEWLINE VAR , VAR , VAR = VAR NEWLINE if VAR == STRING : NEWLINE setattr ( self , VAR , VAR . GetValue ( ) )", "VAR = { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } NEWLINE for VAR in VAR : NEWLINE print ( VAR , VAR [ VAR ] )", "/ foos / { obj } NEWLINE / bars / { obj }", "name NEWLINE Kazakhstan NEWLINE Ukraine", "N - C NUMBER NEWLINE N - O NUMBER NEWLINE N - N NUMBER NEWLINE C - C NUMBER NEWLINE C - O NUMBER NEWLINE C - N NUMBER NEWLINE C - C NUMBER NEWLINE C - O NUMBER NEWLINE C - N NUMBER", "VAR = pd . pivot_table ( df_orig , index = [ STRING , STRING , STRING ] , columns = [ STRING , STRING ] , values = [ STRING , STRING ] )", "import re NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = [ VAR . strip ( ) for VAR in VAR ] NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = [ VAR . strip ( ) for VAR in VAR ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE VAR = STRING + VAR + STRING NEWLINE VAR = re . sub ( VAR , VAR , VAR ) NEWLINE VAR . append ( VAR )", "NUMBER Sequence : NEWLINE MNIFEMLRIDEGLRLKIYKDTEGYYTIGIGHLLTKSPSLNSLDAAKSELDKAIGRNTNGVITKDEAEKLFNQDVDAAVRGILRNAKLKPVYDSLDAVRRAALINMVFQMGETGVAGFTNSLRMLQQKRWDEAAVNLAKSRWYNQTPNRAKRVITTFRTGTWDAYKNL NEWLINE Disorder : Posi R NUMBER K NUMBER S NUMBER P NUMBER S NUMBER L NUMBER N NUMBER N NUMBER L", "{}", "Boxes to buy : NUMBER Cards Found : NUMBER ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NUMBER Total Amount Of Cards : NUMBER", ">> > import funcy NEWLINE >> > VAR = STRING NEWLINE >> > list ( funcy . chunks ( NUMBER , VAR ) ) NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "a a a a a a a a a NEWLINE b b b b b b b b b NEWLINE c c c c c c c c c", "def matPlotSelected ( VAR , VAR ) : NEWLINE VAR = VAR . selectionModel ( ) NEWLINE VAR = VAR . VAR ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . indexFromItem ( VAR ) NEWLINE VAR . select ( VAR , VAR . Select )", "def make_trie ( * words ) : NEWLINE VAR = { } NEWLINE for VAR in words : NEWLINE VAR = VAR NEWLINE for VAR in VAR : NEWLINE VAR = VAR . setdefault ( VAR , { } ) NEWLINE VAR [ None ] = None NEWLINE return VAR NEWLINE def find_first ( VAR , VAR ) : NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR , VAR , VAR = VAR , VAR , [ ] NEWLINE while VAR < len ( VAR ) and VAR [ VAR ] in VAR : NEWLINE VAR . append ( VAR [ VAR ] ) NEWLINE VAR = VAR [ VAR [ VAR ] ] NEWLINE if None in VAR : NEWLINE return STRING . join ( VAR ) NEWLINE VAR += NUMBER NEWLINE VAR = find_first ( VAR , make_trie ( s1 , s2 , s3 ) )", "Match the characters On literally On NEWLINE Match the regular expression below and capture its match into backreference number NUMBER ( [ ^ , ] + , ) { NUMBER } NEWLINE Exactly NUMBER times { NUMBER } NEWLINE Note : You repeated the capturing group itself . The group will capture only the last iteration . Put a capturing group around the repeated group to capture all iterations . { NUMBER } NEWLINE Match any character that is NOT a , [ ^ , ] + NEWLINE Between one and unlimited times , as many times as possible , giving back as needed ( greedy ) + NEWLINE Match the character , literally , NEWLINE Match any single character that is not a line break character . * ? NEWLINE Between zero and unlimited times , as few times as possible , expanding as needed ( lazy ) * ? NEWLINE Match the characters wrote : literally wrote : NEWLINE Created with RegexBuddy", "VAR = WebDriverWait ( driver , NUMBER ) NEWLINE VAR . until ( wait_for_class ( ( By . ID , STRING ) , STRING ) )", "swig - python - c + + mymod . i", ">> > x NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > y NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "bool_list [ : ] = [ False for VAR in bool_list ]", "VAR = { STRING : { NUMBER : value_1 , NUMBER : value_3 } STRING : { NUMBER : value_2 , NUMBER : value_5 } STRING : { NUMBER : value_4 } }", "{ STRING : [ { STRING : STRING , STRING : STRING Zippered back pocket \\ STRING Reflective details ' ] }", "for VAR in solution ( ) : NEWLINE print VAR ,", "VAR = driver . find_elements_by_css_selector ( STRING ) NEWLINE print len ( VAR ) NEWLINE for VAR in VAR : NEWLINE print VAR . get_attribute ( STRING )", "VAR = Weapon ( STRING , [ STRING , STRING ] )", ">> > VAR = MagicCounter ( ) NEWLINE >> > VAR [ STRING ] = NUMBER NEWLINE >> > VAR [ STRING ] = NUMBER NEWLINE >> > VAR [ STRING ] = NUMBER NEWLINE >> > VAR NEWLINE MagicCounter ( { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ) NEWLINE >> > VAR [ STRING ] += NUMBER NEWLINE >> > VAR NEWLINE MagicCounter ( { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } )", "$ CLASSPATH = / put / path / here java MyMainClass", "@ app . route ( STRING ) NEWLINE def feature_or_catch ( VAR ) : NEWLINE VAR = VAR NEWLINE if STRING not in VAR and slug_in_database ( VAR ) : NEWLINE return STRING + VAR NEWLINE return STRING + VAR", "NUMBER - - > NUMBER NEWLINE NUMBER - - > NUMBER NEWLINE NUMBER - - > NUMBER NEWLINE NUMBER - - > NUMBER NEWLINE NUMBER - - > NUMBER", "import os . path NEWLINE import shutil NEWLINE import sys NEWLINE import tempfile NEWLINE from VAR import ZipFile NEWLINE VAR = STRING NEWLINE VAR = input ( STRING ) NEWLINE VAR = os . path . abspath ( VAR ) NEWLINE VAR , VAR = os . path . splitext ( VAR ) NEWLINE if VAR == STRING : NEWLINE VAR = tempfile . gettempdir ( ) NEWLINE VAR = os . path . join ( VAR , VAR ) NEWLINE with ZipFile ( VAR , STRING ) as VAR : NEWLINE VAR . extract ( VAR , VAR ) NEWLINE if not os . path . isfile ( VAR ) : NEWLINE sys . exit ( STRING . format ( VAR , VAR ) ) NEWLINE VAR = VAR + STRING NEWLINE shutil . copy2 ( VAR , VAR ) NEWLINE shutil . rmtree ( os . path . join ( VAR , os . path . split ( VAR ) [ NUMBER ] ) ) NEWLINE print ( STRING . format ( VAR ) ) NEWLINE else : NEWLINE sys . exit ( STRING )", "VAR = ( HasNiceHatOrHasNicePants , )", "Output NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) ]", ">> config = ConfigParser . RawConfigParser ( ) NEWLINE >> config . read ( STRING ) NEWLINE >> items = config . items ( STRING ) NEWLINE >> items NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "from ast import literal_eval NEWLINE df [ STRING ] = [ literal_eval ( VAR ) for VAR in df . misc ]", "contour ( D1 , cmap = STRING ) NEWLINE contour ( D2 , cmap = STRING ) NEWLINE contour ( D2 , cmap = STRING )", "def __setitem__ ( self , key , value ) : NEWLINE try : NEWLINE VAR = getattr ( class_obj , key ) NEWLINE if ( VAR != None ) : NEWLINE if ( isinstance ( value , dict ) ) : NEWLINE for VAR , VAR in value . items ( ) : NEWLINE VAR . __setitem__ ( VAR , VAR ) NEWLINE setattr ( class_obj , key , VAR ) NEWLINE else : NEWLINE setattr ( class_obj , key , value ) NEWLINE except AttributeError : NEWLINE pass", "[ section ] NEWLINE VAR = value NEWLINE VAR = value2 NEWLINE VAR = value3", "class FileLineWrapper ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . line = NUMBER NEWLINE def close ( VAR ) : NEWLINE return VAR . VAR . close ( ) NEWLINE def readline ( VAR ) : NEWLINE VAR . line += NUMBER NEWLINE return VAR . VAR . readline ( )", ">> > sorted ( [ STRING , STRING , STRING , STRING ] , key = lambda VAR : RANKS . index ( VAR ) ) NEWLINE [ STRING , STRING , STRING , STRING ] NEWLINE >> > sorted ( [ STRING , STRING , STRING , STRING ] , key = lambda VAR : RANKS . index ( VAR ) ) NEWLINE [ STRING , STRING , STRING , STRING ]", "from kivy . app import App NEWLINE from kivy . uix . boxlayout import BoxLayout NEWLINE from kivy . uix . popup import Popup NEWLINE from kivy . properties import ObjectProperty NEWLINE from kivy . uix . label import Label NEWLINE import subprocess NEWLINE class shellcommand ( BoxLayout ) : NEWLINE VAR = ObjectProperty ( ) NEWLINE VAR = ObjectProperty ( ) NEWLINE VAR = ObjectProperty ( ) NEWLINE def uname ( self ) : NEWLINE VAR = subprocess . check_output ( STRING , shell = True ) NEWLINE VAR = Popup ( title = STRING , content = Label ( text = STRING + VAR ) ) NEWLINE VAR . open ( ) NEWLINE def date ( self ) : NEWLINE VAR = subprocess . check_output ( STRING , shell = True ) NEWLINE VAR = Popup ( title = STRING , content = Label ( text = STRING + VAR ) ) NEWLINE VAR . open ( ) NEWLINE def VAR ( self ) : NEWLINE VAR = subprocess . check_output ( STRING , shell = True ) NEWLINE VAR = Popup ( title = STRING , content = Label ( text = STRING + VAR ) ) NEWLINE VAR . open ( ) NEWLINE class shellApp ( App ) : NEWLINE def build ( self ) : NEWLINE return shellcommand ( ) NEWLINE shellApp ( ) . run ( )", "VAR = bld . new_task_gen ( name = STRING , source = STRING , target = STRING , rule = STRING )", ">> > from collections import namedtuple NEWLINE >> > VAR = namedtuple ( STRING , STRING ) NEWLINE >> > VAR = VAR ( a = NUMBER , b = { STRING : NUMBER } , d = [ STRING ] ) NEWLINE >> > VAR NEWLINE VAR ( a = NUMBER , b = { STRING : NUMBER } , d = [ STRING ] ) NEWLINE >> > VAR . a NEWLINE NUMBER NEWLINE >> > VAR . b NEWLINE { STRING : NUMBER } NEWLINE >> > VAR . c NEWLINE >> > VAR . d NEWLINE [ STRING ]", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE import scipy . interpolate as interp NEWLINE import scipy . integrate as integrate NEWLINE VAR , VAR = np . mgrid [ - NUMBER : NUMBER : NUMBER , - NUMBER : NUMBER : NUMBER ] NEWLINE VAR = - NUMBER - VAR ** NUMBER + VAR NEWLINE VAR = NUMBER + VAR - VAR ** NUMBER NEWLINE VAR = interp . interp2d ( VAR [ : ] , VAR [ : ] , VAR [ : ] ) NEWLINE VAR = interp . interp2d ( VAR [ : ] , VAR [ : ] , VAR [ : ] ) NEWLINE VAR = lambda VAR , VAR : [ VAR ( VAR [ NUMBER ] , VAR [ NUMBER ] ) [ NUMBER ] , VAR ( VAR [ NUMBER ] , VAR [ NUMBER ] ) [ NUMBER ] ] NEWLINE VAR = ( NUMBER , NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . arange ( VAR , VAR + VAR , VAR ) NEWLINE VAR = integrate . odeint ( VAR , VAR , VAR ) NEWLINE plt . figure ( ) NEWLINE plt . plot ( VAR [ : , NUMBER ] , VAR [ : , NUMBER ] ) NEWLINE plt . axis ( STRING ) NEWLINE VAR = ( VAR [ : , NUMBER ] . min ( ) * NUMBER <= VAR ) & ( VAR <= VAR [ : , NUMBER ] . max ( ) * NUMBER ) & ( VAR [ : , NUMBER ] . min ( ) * NUMBER <= VAR ) & ( VAR <= VAR [ : , NUMBER ] . max ( ) * NUMBER ) NEWLINE plt . quiver ( VAR [ VAR ] , VAR [ VAR ] , VAR [ VAR ] , VAR [ VAR ] ) NEWLINE plt . show ( )", "class PushbackWrapper ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . __dict__ [ STRING ] = VAR NEWLINE VAR . __dict__ [ STRING ] = [ ] NEWLINE def next ( VAR ) : NEWLINE if len ( VAR . _pushed ) : NEWLINE return VAR . _pushed . pop ( ) NEWLINE else : NEWLINE return VAR . _iterator . next ( ) NEWLINE def pushback ( VAR , VAR ) : NEWLINE VAR . _pushed . append ( VAR ) NEWLINE def __getattr__ ( VAR , VAR ) : NEWLINE return getattr ( VAR . _iterator , VAR ) NEWLINE def __setattr__ ( VAR , VAR , VAR ) : NEWLINE return setattr ( VAR . _iterator , VAR , VAR )", "SELECT ` id ` FROM ` words ` WHERE ` word ` IN ( STRING , STRING , STRING ) ;", "import numpy as np NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . random . randint ( - NUMBER , NUMBER , size = NUMBER ) NEWLINE VAR = np . random . randint ( - NUMBER , NUMBER , size = NUMBER ) NEWLINE VAR = VAR [ ( VAR >= NUMBER ) & ( VAR <= VAR ) ] NEWLINE VAR = VAR [ ( VAR >= NUMBER ) & ( VAR <= VAR ) ] NEWLINE VAR = VAR * VAR + VAR NEWLINE VAR = VAR . reshape ( VAR . shape [ NUMBER ] , NUMBER ) - VAR . reshape ( NUMBER , VAR . shape [ NUMBER ] ) NEWLINE VAR = np . argwhere ( VAR >= NUMBER ) NEWLINE VAR = zip ( VAR [ VAR [ : , NUMBER ] ] , VAR [ VAR [ : , NUMBER ] ] )", "VAR = { } NEWLINE for VAR in os . listdir ( directoryPath ) : NEWLINE if VAR . endswith ( STRING ) : NEWLINE VAR [ VAR ] = numpy . genfromtxt ( VAR , delimiter = STRING ) [ : , NUMBER ]", "VAR = [ ] NEWLINE for VAR in FileList : NEWLINE sys . stderr . write ( STRING % VAR ) NEWLINE VAR = open ( VAR , STRING ) NEWLINE VAR . append ( VAR . readlines ( ) ) NEWLINE VAR . close ( ) NEWLINE for VAR in VAR : NEWLINE print VAR", "SELECT * FROM Users WHERE name = ?", "DEBUG : NUMBER : First Event NEWLINE WARNING : NUMBER : Second Event", "VAR = ( STRING , )", "[ STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING ]", "def unique_rand ( ) : NEWLINE for VAR in range ( NUMBER ) : NEWLINE . . . NEWLINE raise ValueError ( STRING )", "VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE def get_digits ( VAR ) : NEWLINE VAR = int ( VAR * NUMBER ) NEWLINE VAR = float ( VAR ) / NUMBER NEWLINE VAR = { } NEWLINE for VAR , VAR in VAR : NEWLINE VAR [ VAR ] = VAR // VAR NEWLINE VAR = VAR % VAR NEWLINE return ( VAR ) NEWLINE get_digits ( NUMBER )", "VAR = { } NEWLINE for VAR , VAR in original . iteritems ( ) : NEWLINE VAR [ VAR [ NUMBER ] . upper ( ) ] = VAR . get ( VAR [ NUMBER ] . upper ( ) , NUMBER ) + VAR", "VAR = pd . IndexSlice NEWLINE df . loc [ VAR [ : , ( STRING , STRING ) ] , : ] = df_ . values", "from threading import Thread NEWLINE def bind ( VAR , VAR , VAR ) : NEWLINE def f ( ) : NEWLINE try : NEWLINE for VAR in iter ( VAR . readline , STRING ) : NEWLINE VAR = VAR ( VAR ) NEWLINE if VAR : NEWLINE VAR . write ( VAR ) NEWLINE finally : NEWLINE try : NEWLINE VAR . close ( ) NEWLINE finally : NEWLINE VAR . close ( ) NEWLINE VAR = Thread ( target = f ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( )", "application . systemManager . addEventListener ( FlexEvent . IDLE , onIdle ) ;", "VAR = signal . fftconvolve ( a , numpy . fliplr ( numpy . flipud ( b ) ) , STRING )", "import pandas as pd NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = pd . DataFrame ( { STRING : VAR , STRING : VAR , STRING : VAR } ) NEWLINE VAR = VAR . groupby ( STRING ) . agg ( lambda VAR : VAR [ STRING ] . sum ( ) + VAR [ STRING ] . sum ( ) ) NEWLINE VAR [ STRING ] = VAR . apply ( lambda VAR : VAR . ix [ VAR [ STRING ] ] [ STRING ] , axis = NUMBER )", "In [ NUMBER ] : df . val . iloc [ NUMBER ] = NUMBER NEWLINE In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE category val sensitivity_level NEWLINE NUMBER x NUMBER A NEWLINE NUMBER x NUMBER B NEWLINE NUMBER x NUMBER C NEWLINE NUMBER x NUMBER A NEWLINE NUMBER x NUMBER B NEWLINE NUMBER x NUMBER C NEWLINE NUMBER y NUMBER A NEWLINE NUMBER y NUMBER B NEWLINE NUMBER y NUMBER C NEWLINE NUMBER y NUMBER A NEWLINE NUMBER y NUMBER B NEWLINE NUMBER yfoo ( ) for VAR in xrange ( NUMBER ) ) NEWLINE >> > VAR NEWLINE < generator object < genexpr > at NUMBER > NEWLINE >> > list ( VAR ) NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE foo NEWLINE [ None , None , None , None , None , None , None , None , None , None ] NEWLINE >> >", "VAR = urllib . unquote ( VAR . encode ( STRING ) ) . decode ( STRING )", "VAR = sqlContext . createDataFrame ( sc . parallelize ( [ Row ( VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , VAR = NUMBER , VAR = NUMBER ) , Row ( VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , VAR = NUMBER , VAR = NUMBER ) , Row ( VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , VAR = NUMBER , VAR = NUMBER ) , Row ( VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , VAR = NUMBER , VAR = NUMBER ) , Row ( VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , VAR = NUMBER , VAR = NUMBER ) ] ) ) NEWLINE ( VAR . map ( lambda ( VAR , VAR , VAR ) : ( VAR . year , VAR . month , VAR . day ) ) . collect ( ) )", "In [ NUMBER ] : % timeit doit ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", ">> > VAR = STRING NEWLINE >> > if VAR . count ( STRING ) > NUMBER : NEWLINE VAR = VAR . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE >> > print VAR NEWLINE < td > NEWLINE $ GETR ( STRING , STRING ) $ Yes NEWLINE $ GETR ( STRING , STRING ) $ No $ NOTE ( ) $ NEWLINE < / td > NEWLINE >> > VAR = STRING NEWLINE >> > if VAR . count ( STRING ) > NUMBER : NEWLINE VAR = VAR . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE >> > print VAR NEWLINE < td > $ GETR ( STRING , STRING ) $ No $ NOTE ( ) $ < / td >", ">> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > STRING . join ( VAR ) NEWLINE STRING NEWLINE >> > STRING . join ( VAR ) NEWLINE STRING NEWLINE >> > STRING . join ( VAR ) NEWLINE STRING", "import collections NEWLINE class Foo ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . CompleteAnalysis = collections . defaultdict ( lambda : collections . defaultdict ( list ) ) NEWLINE def getFilledFields ( VAR , VAR ) : NEWLINE VAR , VAR , VAR = VAR . split ( STRING ) NEWLINE VAR = VAR . strip ( STRING ) NEWLINE VAR = VAR . strip ( STRING ) NEWLINE VAR . CompleteAnalysis [ VAR ] [ STRING ] . append ( VAR ) NEWLINE VAR . CompleteAnalysis [ VAR ] [ STRING ] . append ( VAR ) NEWLINE VAR = Foo ( ) NEWLINE VAR . getFilledFields ( STRING ) NEWLINE VAR . getFilledFields ( STRING ) NEWLINE print ( VAR . CompleteAnalysis [ STRING ] [ STRING ] ) NEWLINE print ( VAR . CompleteAnalysis [ STRING ] [ STRING ] ) NEWLINE", ">> > for VAR in itertools . product ( * l ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE ( NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER )", "part . Set ( STRING , faces = part . faces . findAt ( ( ( NUMBER , NUMBER , NUMBER ) , ) , ) )", "thing . data IS NULL OR thing . data != : param_1", ">> > VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > VAR = [ [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ] NEWLINE >> > func ( VAR , VAR ) NEWLINE True", "def time_range ( VAR , VAR , VAR ) : NEWLINE VAR = VAR NEWLINE while VAR < VAR : NEWLINE yield VAR NEWLINE VAR += VAR", "from z3c . form . browser . checkbox import CheckBoxFieldWidget NEWLINE from z3c . form . form import Form NEWLINE class EmailPreferenceForm ( Form ) : NEWLINE VAR = z3c . form . field . Fields ( IEmailPreference ) NEWLINE VAR [ STRING ] . widgetFactory = CheckBoxFieldWidget", "import numpy as np NEWLINE import pandas as pd NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = NUMBER NEWLINE VAR = pd . date_range ( start = STRING , periods = VAR , name = STRING ) NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR = pd . DataFrame ( data = np . random . random ( VAR ) * ( VAR + NUMBER ) , index = VAR , columns = [ STRING ] ) NEWLINE VAR . df_name = str ( VAR ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR = VAR . add_subplot ( ) NEWLINE for VAR in VAR : NEWLINE plt . plot ( VAR . index , VAR [ STRING ] , label = VAR . df_name ) NEWLINE plt . legend ( ) NEWLINE plt . show ( )", "def method ( VAR , VAR ) : NEWLINE VAR = list ( irrelevant_extraction_function ( VAR , VAR . some_dict ) ) NEWLINE VAR . storage [ VAR ] = [ VAR [ STRING ] for VAR in VAR ]", "min ( range ( len ( a ) ) , key = lambda VAR : abs ( a [ VAR ] - NUMBER ) )", "void findNeedles ( const std : : vector < cv : : Point > & needle_contour , const cv : : Mat & haystack_binarized ) NEWLINE { int nfound = NUMBER ; std : : vector < std : : vector < cv : : Point >> contours ; cv : : findContours ( haystack_binarized , contours , cv : : RETR_EXTERNAL , cv : : CHAIN_APPROX_NONE ) ; for ( size_t i = NUMBER ; i < contours . size ( ) ; i + + ) { // pre - filter for size : if ( ( contours [ i ] . size ( ) < needle_contour . size ( ) / NUMBER ) | | ( contours [ i ] . size ( ) > needle_contour . size ( ) * NUMBER ) ) continue ; double d = cv : : matchShapes ( contours [ i ] , needle_contour , CV_CONTOURS_MATCH_I2 , NUMBER ) ; if ( d < NUMBER ) // heuristic value , experiments needed ! ! { cv : : drawContours ( haystack_binarized , contours , i , NUMBER , NUMBER ) ; nfound + + ; } } cerr << nfound << STRING << endl ; cv : : imshow ( STRING , haystack_binarized ) ; // imwrite ( STRING , haystack_binarized ) ; cv : : waitKey ( ) ; } NEWLINE int main ( ) NEWLINE { // NUMBER get the contour of our needle : Mat needle = imread ( STRING , NUMBER ) ; Mat needle_b ; threshold ( needle , needle_b , NUMBER , NUMBER , NUMBER ) ; imshow ( STRING , needle_b ) ; std : : vector < std : : vector < cv : : Point >> needle_conts ; cv : : findContours ( needle_b , needle_conts , cv : : RETR_EXTERNAL , cv : : CHAIN_APPROX_NONE ) ; if ( needle_conts . size ( ) == NUMBER ) { std : : cout << STRING << std : : endl ; return - NUMBER ; } std : : vector < cv : : Point > needle_contour = needle_conts [ NUMBER ] ; // NUMBER check a positive sample : Mat haypos = imread ( STRING , NUMBER ) ; Mat haypos_b ; threshold ( haypos , haypos_b , NUMBER , NUMBER , NUMBER ) ; findNeedles ( needle_contour , haypos_b ) ; // NUMBER check a negative sample : Mat hayneg = imread ( STRING , NUMBER ) ; Mat hayneg_b ; threshold ( hayneg , hayneg_b , NUMBER , NUMBER , NUMBER ) ; findNeedles ( needle_contour , hayneg_b ) ; return NUMBER ; }", "[ STRING , STRING ]", "red : NUMBER NEWLINE green : NUMBER NEWLINE blue : NUMBER", "import importlib NEWLINE VAR = importlib . import_module ( STRING )", "import datetime NEWLINE def iso_year_start ( VAR ) : NEWLINE STRING NEWLINE VAR = datetime . VAR ( VAR , NUMBER , NUMBER ) NEWLINE VAR = datetime . timedelta ( VAR . isoweekday ( ) - NUMBER ) NEWLINE return VAR - VAR NEWLINE def iso_to_gregorian ( VAR , VAR , VAR ) : NEWLINE STRING NEWLINE VAR = iso_year_start ( VAR ) NEWLINE return VAR + datetime . timedelta ( days = VAR - NUMBER , weeks = VAR - NUMBER ) NEWLINE def week_start_end ( VAR ) : NEWLINE VAR = VAR . isocalendar ( ) [ NUMBER ] NEWLINE VAR = VAR . isocalendar ( ) [ NUMBER ] NEWLINE VAR = iso_to_gregorian ( VAR , VAR , NUMBER ) NEWLINE VAR = iso_to_gregorian ( VAR , VAR , NUMBER ) NEWLINE VAR = datetime . datetime ( VAR . VAR , VAR . month , VAR . day , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = datetime . datetime ( VAR . VAR , VAR . month , VAR . day , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE return ( VAR , VAR )", "VAR = Environment ( ) NEWLINE VAR = STRING NEWLINE VariantDir ( VAR , STRING , duplicate = NUMBER ) NEWLINE Export ( STRING ) NEWLINE SConscript ( VAR + STRING )", "Ishida Co . , Ltd . ( Kyoto , JP )", "return pair [ NUMBER ] if pair [ NUMBER ] != core else pair [ NUMBER ]", "for VAR , VAR in PointsOfInterest . iteritems ( ) : NEWLINE if VAR in mypkt . Text : NEWLINE VAR [ NUMBER ] . append ( mykt . Text )", "In [ NUMBER ] : % timeit pd . DataFrame ( { STRING : np . repeat ( aa , bb . size ) , STRING : np . tile ( bb , aa . size ) } ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % timeit pd . DataFrame ( list ( product ( aa , bb ) ) , columns = [ STRING , STRING ] ) NEWLINE NUMBER loop , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : aa . size NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : bb . size NEWLINE Out [ NUMBER ] : NUMBER", "str ( your_list [ NUMBER ] )", "In [ NUMBER ] : NEWLINE df [ STRING ] = df [ STRING ] . dt . strftime ( STRING ) NEWLINE df NEWLINE Out [ NUMBER ] : NEWLINE Timestamp Date Time NEWLINE NUMBER NUMBER _095900 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095901 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095902 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095903 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095904 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095905 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095906 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095907 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095908 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER _095909 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER", "VAR = sc . textFile ( STRING ) NEWLINE VAR = VAR . flatMap ( lambda VAR : VAR . split ( STRING ) ) . . . . map ( lambda VAR : ( VAR , NUMBER ) ) . . . . reduceByKey ( lambda VAR , VAR : VAR + VAR ) NEWLINE VAR . coalesce ( NUMBER ) . saveAsTextFile ( STRING )", "import random NEWLINE print ( STRING + os . environ [ STRING ] ) NEWLINE VAR = getpass ( STRING ) NEWLINE VAR = STRING . join ( random . choice ( STRING ) for range ( NUMBER ) ) NEWLINE VAR = hashlib . md5 ( ) NEWLINE VAR . update ( VAR ) NEWLINE VAR . update ( VAR . encode ( ) ) NEWLINE VAR = VAR + VAR . hexdigest ( )", "def method1 ( VAR ) : NEWLINE def wrapper ( ) : NEWLINE return STRING + VAR NEWLINE return wrapper NEWLINE def method2 ( VAR , VAR ) : NEWLINE VAR = VAR ( ) NEWLINE return VAR + STRING + VAR NEWLINE method2 ( method1 ( VAR = STRING ) , STRING )", "import numpy as np NEWLINE import scipy . ndimage . filters as filters NEWLINE def using_filters ( VAR ) : NEWLINE return np . where ( np . logical_and . reduce ( [ VAR == VAR ( VAR , footprint = np . ones ( ( NUMBER , NUMBER ) ) , mode = STRING , cval = np . inf ) for VAR in ( filters . maximum_filter , filters . minimum_filter ) ] ) ) NEWLINE using_filters ( VAR ) NEWLINE", "In [ NUMBER ] : df . where ( df . replace ( NUMBER , np . nan ) . bfill ( ) , NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE a b c NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER", "df [ STRING ] = pd . to_datetime ( df [ STRING ] ) NEWLINE df . set_index ( STRING ) . reindex ( hourly_date_rng ) . fillna ( NUMBER ) . reset_index ( ) NEWLINE date_closed amountn [ NUMBER ] : VAR = np . array ( x [ NUMBER : ] , dtype = object ) . reshape ( ( - NUMBER , NUMBER ) ) NEWLINE In [ NUMBER ] : VAR = pd . DataFrame ( VAR , columns = x [ : NUMBER ] ) NEWLINE In [ NUMBER ] : VAR [ STRING ] = VAR [ STRING ] . astype ( float )", "from pyspark . mllib . linalg import Vectors , SparseVector , DenseVector NEWLINE import numpy as np NEWLINE def add ( VAR , VAR ) : NEWLINE STRING NEWLINE assert isinstance ( VAR , SparseVector ) and isinstance ( VAR , SparseVector ) NEWLINE assert VAR . size == VAR . size NEWLINE VAR = set ( VAR . VAR ) . union ( set ( VAR . VAR ) ) NEWLINE VAR = dict ( zip ( VAR . VAR , VAR . VAR ) ) NEWLINE VAR = dict ( zip ( VAR . VAR , VAR . VAR ) ) NEWLINE VAR = np . float64 ( NUMBER ) NEWLINE VAR = { VAR : VAR . get ( VAR , VAR ) + VAR . get ( VAR , VAR ) for VAR in VAR if VAR . get ( VAR , VAR ) + VAR . get ( VAR , VAR ) != VAR } NEWLINE return Vectors . sparse ( VAR . size , VAR )", "while True : NEWLINE VAR = check_for_new_files ( ) NEWLINE time . sleep ( pollinterval ) NEWLINE process ( VAR )", "ax . get_lines ( ) [ NUMBER ] . set_visible ( False )", "def palindrome ( VAR , VAR ) : NEWLINE return re . sub ( STRING , STRING , VAR . lower ( ) ) == re . sub ( STRING , STRING , VAR . lower ( ) ) [ : : - NUMBER ]", "VAR = str ( hours ) + STRING + str ( minutes ) + STRING + str ( seconds ) NEWLINE print ( VAR ) - > STRING", "VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = - NUMBER NEWLINE VAR = [ STRING ] NEWLINE VAR = [ STRING ] NEWLINE VAR = STRING", "{ { photo . category_image } }", "with open ( audiofile , STRING ) as VAR : NEWLINE requests . post ( url , files = { STRING , VAR } )", "import pprint NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = [ { STRING : STRING , STRING : NUMBER , STRING : STRING } , { STRING : STRING , STRING : NUMBER , STRING : STRING } , { STRING : STRING , STRING : NUMBER , STRING : STRING } , { STRING : STRING , STRING : NUMBER , STRING : STRING } , { STRING : STRING , STRING : NUMBER , STRING : STRING } ] NEWLINE def keyfunc ( VAR ) : NEWLINE VAR = [ float ( VAR ) for VAR , VAR in enumerate ( VAR ) if VAR in VAR [ STRING ] ] NEWLINE VAR = VAR [ NUMBER ] if VAR else float ( STRING ) NEWLINE return VAR , VAR [ STRING ] NEWLINE VAR . sort ( key = keyfunc ) NEWLINE pprint . pprint ( VAR )", "import urllib2 NEWLINE from lxml import html NEWLINE VAR = urllib2 . urlopen ( STRING ) NEWLINE VAR = html . parse ( VAR ) . getroot ( ) NEWLINE for VAR in VAR . cssselect ( STRING ) : NEWLINE for VAR in VAR . iterchildren ( STRING ) : NEWLINE print ( VAR . text_content ( ) )", "BOOST_PYTHON_MODULE ( MyLibrary ) { using namespace boost : : python ; class_ < Foo > ( STRING , init <> ( ) ) . def ( STRING , & Foo : : pushBack , ( arg ( STRING ) ) ) . def ( STRING , & Foo : : getInt , ( arg ( STRING ) ) ) . def ( STRING , & Foo : : getBar , return_value_policy < reference_existing_object > ( ) ) ; class_ < Bar > ( STRING , init <> ( ) ) . def ( STRING , & Bar : : getValue ) . def ( STRING , & Bar : : setValue , ( arg ( STRING ) ) ) ; def ( STRING , compute ) ; }", ">> > VAR = STRING NEWLINE >> > print re . search ( STRING , VAR ) . group ( NUMBER ) NEWLINE world", "from importlib import import_module NEWLINE VAR = STRING NEWLINE VAR = VAR . rsplit ( STRING , NUMBER ) NEWLINE VAR = getattr ( import_module ( VAR [ NUMBER ] ) , VAR [ NUMBER ] ) NEWLINE VAR = VAR ( )", "from html5lib import HTMLParser , treebuilders NEWLINE VAR = HTMLParser ( tree = treebuilders . getTreeBuilder ( STRING ) ) NEWLINE VAR = STRING NEWLINE VAR = VAR . parse ( VAR ) NEWLINE print VAR . prettify ( )", "def val ( ) : NEWLINE if condition : NEWLINE return val_if_true NEWLINE else : NEWLINE return val_if_false", "VAR = Topic . objects . filter ( tag = STRING ) NEWLINE VAR = VAR . VAR . all ( )", "webapp2 . Route ( STRING , handler = DynServe )", "thing . data IS DISTINCT FROM % ( param_1 ) s NEWLINE thing . data <= > % s", "- ( BOOL ) connect NEWLINE { struct sockaddr_in addr ; VAR = socket ( AF_INET , SOCK_STREAM , NUMBER ) ; addr . sin_family = AF_INET ; addr . sin_addr . s_addr = inet_addr ( [ TV_IP UTF8String ] ) ; addr . sin_port = htons ( TV_PORT ) ; return connect ( VAR , ( struct sockaddr * ) & addr , sizeof ( addr ) ) == NUMBER ; } NEWLINE - ( long ) send : ( NSData * ) data NEWLINE { long sent = send ( VAR , [ data bytes ] , [ data length ] , NUMBER ) ; VADebugLog ( @ STRING , sent , [ data description ] ) ; return sent ; } NEWLINE - ( void ) close NEWLINE { close ( VAR ) ; }", "VAR += [ [ VAR + f ( VAR ) for VAR in VAR [ - NUMBER ] ] ]", "import nltk NEWLINE VAR = nltk . CFG . fromstring ( STRING ) NEWLINE VAR = STRING . split ( ) NEWLINE VAR = [ STRING if VAR . isdigit ( ) else VAR for VAR in VAR ] NEWLINE VAR = nltk . ChartParser ( VAR ) NEWLINE for VAR in VAR . parse ( VAR ) : NEWLINE print ( VAR )", "import subprocess NEWLINE VAR = STRING NEWLINE VAR = subprocess . Popen ( VAR , shell = True , stdin = subprocess . PIPE , stdout = subprocess . PIPE ) NEWLINE VAR = VAR . stdout . readline ( ) . strip ( ) NEWLINE print ( VAR ) NEWLINE VAR = VAR . communicate ( VAR ) [ NUMBER ] NEWLINE print ( VAR )", "def str2bits ( VAR ) : NEWLINE for VAR in VAR : NEWLINE VAR = ord ( VAR ) NEWLINE for VAR in STRING . format ( VAR ) [ NUMBER : ] : NEWLINE yield int ( VAR )", "from datetime import datetime , timedelta NEWLINE from pytz import timezone NEWLINE VAR = timezone ( STRING ) NEWLINE def _to_datetime ( VAR , VAR ) : NEWLINE VAR = STRING . format ( VAR , VAR ) NEWLINE VAR = datetime . strptime ( VAR , STRING ) NEWLINE VAR = VAR . localize ( VAR , is_dst = None ) NEWLINE return VAR NEWLINE VAR = _to_datetime ( STRING , STRING ) NEWLINE print ( STRING , VAR )", "import win32com . client as win32 NEWLINE import os NEWLINE VAR = win32 . gencache . EnsureDispatch ( STRING ) NEWLINE for VAR , VAR , VAR in os . walk ( STRING ) : NEWLINE for VAR in VAR : NEWLINE VAR , VAR = os . path . splitext ( VAR ) NEWLINE if VAR == STRING : NEWLINE VAR = VAR . Workbooks . Open ( os . path . join ( VAR , VAR ) ) NEWLINE VAR . DoNotPromptForConvert = True NEWLINE VAR . CheckCompatibility = False NEWLINE VAR . DisplayAlerts = False NEWLINE VAR . SaveAs ( os . path . join ( VAR , VAR + STRING ) , FileFormat = NUMBER , ConflictResolution = NUMBER ) NEWLINE VAR . Application . Quit ( )", "title , author NEWLINE Sandman Volume NUMBER : Preludes and Nocturnes , Neil Gaiman NEWLINE Good Omens , Neil Gamain NEWLINE Good Omens , Terry Pratchett NEWLINE", "$ curl - x localhost : NUMBER http : // example . com", "from scrapy import signals NEWLINE from scrapy . exceptions import DropItem NEWLINE class DuplicatesPipeline ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . ids_seen = set ( ) NEWLINE def process_item ( VAR , VAR , VAR ) : NEWLINE if VAR [ STRING ] in VAR . ids_seen : NEWLINE raise DropItem ( STRING % VAR ) NEWLINE else : NEWLINE VAR . ids_seen . add ( VAR [ STRING ] ) NEWLINE return VAR", "class Example ( object ) : NEWLINE pass NEWLINE VAR = Example ( ) NEWLINE VAR . a = STRING", "def count_number ( VAR , VAR ) : NEWLINE VAR = NUMBER NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE VAR += VAR . get ( VAR , NUMBER ) NEWLINE return VAR", "Enter a month as number : NUMBER NEWLINE Feb , NUMBER", "const Py_ssize_t tuple_length = NUMBER ; NEWLINE const unsigned some_limit = NUMBER ; NEWLINE PyObject * my_list = PyList_New ( NUMBER ) ; NEWLINE if ( my_list == NULL ) { // . . . } NEWLINE for ( unsigned i = NUMBER ; i < some_limit ; i + + ) { PyObject * the_tuple = PyTuple_New ( tuple_length ) ; if ( the_tuple == NULL ) { // . . . } for ( Py_ssize_t j = NUMBER ; i < tuple_length ; i + + ) { PyObject * the_object = PyLong_FromSsize_t ( i * tuple_length + j ) ; if ( the_object == NULL ) { // . . . } PyTuple_SET_ITEM ( the_tuple , j , the_object ) ; } if ( PyList_Append ( my_list , the_tuple ) == - NUMBER ) { // . . . } }", "ln ( y ) = ln ( height ) - ( x - mu ) ^ NUMBER / ( NUMBER * sigma ^ NUMBER )", ">> > from itertools import product NEWLINE >> > list ( product ( [ NUMBER , NUMBER ] , repeat = NUMBER ) ) NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "VAR = arcpy . GetInstallInfo ( STRING ) [ STRING ] NEWLINE VAR = os . path . join ( VAR , STRING ) NEWLINE arcpy . ExportMetadata_conversion ( featureClassPath , VAR , tempXmlExportPath )", "sys . version_info . major NEWLINE sys . version_info . minor NEWLINE sys . version_info . micro", "In [ NUMBER ] : VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE In [ NUMBER ] : VAR [ : NUMBER ] NEWLINE Out [ NUMBER ] : [ NUMBER , NUMBER , NUMBER ] NEWLINE In [ NUMBER ] : [ NUMBER ] * NUMBER NEWLINE Out [ NUMBER ] : [ ] NEWLINE In [ NUMBER ] : [ NUMBER ] * - NUMBER NEWLINE Out [ NUMBER ] : [ ]", "{ STRING : [ STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING ] }", "from datetime import datetime NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE VAR = VAR . split ( ) NEWLINE print datetime . strptime ( STRING % ( VAR [ NUMBER ] [ : - NUMBER ] ) , VAR [ NUMBER ] , VAR [ NUMBER ] ) , STRING ) . strftime ( STRING )", "VAR = grabber3 ( a_file )", ">> > set ( generate_neighbors ( STRING , { STRING , STRING , STRING , STRING } ) ) NEWLINE { STRING , STRING , STRING , STRING , STRING , STRING }", "def set_password ( VAR , VAR ) : NEWLINE import random NEWLINE VAR = STRING NEWLINE VAR = get_hexdigest ( VAR , str ( random . random ( ) ) , str ( random . random ( ) ) ) [ : NUMBER ] NEWLINE VAR = get_hexdigest ( VAR , VAR , VAR ) NEWLINE VAR . password = STRING % ( VAR , VAR , VAR )", ">> > print STRING % ( len ( text ) - NUMBER , text ) NEWLINE < abcdef >", "VAR = re . compile ( STRING ) NEWLINE VAR . match ( x ) . groups ( )", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE self . response . write ( STRING . join ( VAR ) )", "( abc_ ) ?", "dCE / dtheta2 ( NUMBER ) = dCE / dZ3 * dZ3 / dtheta2 ( NUMBER ) NEWLINE = ( L3 - Y ) * NUMBER NEWLINE dCE / dtheta2 ( NUMBER ) = dCE / dZ3 * dZ3 / dtheta2 ( NUMBER ) NEWLINE = ( L3 - Y ) * L2 ( NUMBER ) NEWLINE dCE / dtheta2 ( NUMBER ) = dCE / dZ3 * dZ3 / dtheta2 ( NUMBER ) NEWLINE = ( L3 - Y ) * L2 ( NUMBER ) NEWLINE dCE / dtheta2 ( NUMBER ) = dCE / dZ3 * dZ3 / dtheta2 ( NUMBER ) NEWLINE = ( L3 - Y ) * L2 ( NUMBER )", "STRING", "forms . py NEWLINE from django import forms NEWLINE from . models import CheckList , CheckListOption NEWLINE class CheckListForm ( forms . ModelForm ) : NEWLINE class Meta : NEWLINE VAR = CheckList NEWLINE VAR = STRING NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE super ( CheckListForm , VAR ) . __init__ ( * args , ** kwargs ) NEWLINE if VAR . instance . pk : NEWLINE VAR . VAR [ STRING ] . queryset = CheckListOption . objects . filter ( checklisttype = VAR . instance . checklist_type_id ) NEWLINE else : NEWLINE VAR . VAR [ STRING ] . queryset = CheckListOption . objects . none ( )", "VAR = list ( set ( df . index . get_level_values ( STRING ) ) )", "VAR = np . array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR = VAR * ( VAR [ : , None ] - VAR )", "A NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER / AS4637 NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER / AS13706", "class ChannelForm ( Form ) : NEWLINE VAR = HiddenField ( ) NEWLINE VAR = TextField ( _ ( STRING ) ) NEWLINE VAR = TextField ( _ ( STRING ) ) NEWLINE VAR = TextField ( _ ( STRING ) ) NEWLINE VAR = SubmitField ( _ ( STRING ) )", "var engine = Python . CreateEngine ( ) ; NEWLINE bool VAR = false ; NEWLINE try { engine . Execute ( / * whatever * / ) ; } catch ( ThreadAbortException tae ) { if ( tae . ExceptionState is Microsoft . Scripting . KeyboardInterruptException ) { Thread . ResetAbort ( ) ; VAR = true ; } else { throw ; } } NEWLINE if ( VAR ) { // this is application - specific }", "from scipy . optimize import minimize NEWLINE VAR = [ ] NEWLINE VAR = minimize ( fitness , VAR , method = STRING )", ". . . NEWLINE VAR = MySQLdb . connect ( host = . . . , port = . . . , VAR = . . . , passwd = . . . , db = . . . , VAR = MySQLdb . cursors . DictCursor , VAR = STRING ) NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR . execute ( STRING , ( STRING , STRING , STRING ) ) NEWLINE VAR = VAR . fetchall ( ) NEWLINE VAR . execute ( STRING , ( ( STRING , STRING , STRING ) ) ) NEWLINE VAR = VAR . fetchall ( ) NEWLINE VAR . close ( ) NEWLINE . . .", "VAR = VAR . set_index ( STRING )", "from mymod import mymod", "from collections import namedtuple NEWLINE class Point ( namedtuple ( STRING , STRING ) ) : NEWLINE VAR = ( ) NEWLINE def interpolate ( VAR , VAR , VAR = NUMBER ) : NEWLINE return Point ( x = VAR . x * ( NUMBER - VAR ) + VAR . x * float ( VAR ) , y = VAR . y * ( NUMBER - VAR ) + VAR . y * float ( VAR ) )", "Hard way NEWLINE import glob NEWLINE import subprocess NEWLINE VAR = subprocess . Popen ( [ STRING , STRING , STRING ] + glob . glob ( STRING ) , stdout = subprocess . PIPE ) NEWLINE VAR = subprocess . Popen ( [ STRING , STRING ] , stdin = VAR . stdout , stdout = subprocess . PIPE ) NEWLINE VAR = subprocess . call ( [ STRING , STRING ] , stdin = VAR . stdout )", "pip wheel - - find - links = / tmp - - wheel - dir = / tmp Cython == NUMBER NUMBER", "Flask - Login NEWLINE NUMBER NUMBER NEWLINE User session management for Flask NEWLINE https : // github . com / maxcountryman / flask - login", "def find_good_buyers ( VAR ) : NEWLINE VAR = VAR . groupby ( STRING ) NEWLINE VAR = VAR . agg ( { STRING : lambda VAR : STRING . join ( VAR . unique ( ) ) } ) NEWLINE VAR = ( len ( VAR . groupby ( STRING ) . groups ) > NUMBER ) * NUMBER NEWLINE return VAR NEWLINE df [ STRING ] = df [ STRING ] . astype ( STRING ) NEWLINE VAR = df . groupby ( STRING ) NEWLINE VAR = VAR . apply ( find_good_buyers ) NEWLINE df . set_index ( STRING , inplace = True ) NEWLINE df [ STRING ] = VAR NEWLINE df . reset_index ( inplace = True )", "for VAR in sys . argv [ NUMBER : ] : NEWLINE VAR = [ ] NEWLINE with open ( VAR ) as VAR : NEWLINE VAR = set ( VAR . rstrip ( ) for VAR in VAR ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR [ NUMBER ] . intersection ( * VAR [ NUMBER : ] )", ">> > unique_words ( STRING ) NEWLINE The unique word them occurs on line NUMBER NEWLINE The unique word I occurs on line NUMBER NEWLINE The unique word there occurs on line NUMBER NEWLINE The unique word some occurs on line NUMBER NEWLINE The unique word times occurs on line NUMBER NEWLINE The unique word say occurs on line NUMBER NEWLINE The unique word too occurs on line NUMBER NEWLINE The unique word have occurs on line NUMBER NEWLINE The unique word of occurs on line NUMBER NEWLINE >> >", "VAR = { STRING : STRING , STRING : STRING , STRING : STRING }", "def logsumexp_csr_rows ( VAR ) : NEWLINE VAR = np . empty ( VAR . shape [ NUMBER ] ) NEWLINE for VAR in range ( VAR . shape [ NUMBER ] ) : NEWLINE VAR = VAR . VAR [ VAR . indptr [ VAR ] : VAR . indptr [ VAR + NUMBER ] ] NEWLINE VAR [ VAR ] = mx + np . log ( r + k * np . exp ( - mx ) ) NEWLINE return VAR", "print STRING NEWLINE with Logger ( STRING , STRING ) as sys . stdout : NEWLINE print STRING NEWLINE with Logger ( STRING , STRING ) as sys . stdout : NEWLINE print STRING NEWLINE print STRING", "VAR = np . concatenate ( ( w - N * dw , w ) ) NEWLINE VAR = np . concatenate ( ( X , X ) plt . bar ( VAR , abs ( VAR ) , align = STRING , width = dw ) plt . xticks ( [ VAR * NUMBER * dw for VAR in range ( - N / NUMBER , NUMBER + N / NUMBER ) ] ) plt . xlim ( - dw * N / NUMBER , dw * N / NUMBER ) plt . show ( )", "from xml . dom . minidom import DOMImplementation NEWLINE VAR = DOMImplementation ( ) NEWLINE VAR = VAR . createDocumentType ( qualifiedName = STRING , publicId = STRING , systemId = STRING , ) NEWLINE VAR = VAR . createDocument ( None , STRING , VAR ) NEWLINE VAR . toxml ( )", "class Foo ( object ) : pass NEWLINE class Bar ( Foo ) : pass NEWLINE class Baz ( Foo ) : pass NEWLINE class Bing ( Bar ) : pass", "NUMBER", "your_ordered_dict [ STRING ]", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = NUMBER NEWLINE VAR = np . linspace ( NUMBER , NUMBER , VAR ) NEWLINE VAR = np . exp ( VAR ) NEWLINE VAR = NUMBER * np . exp ( NUMBER * VAR ) * np . random . normal ( NUMBER , NUMBER , VAR ) NEWLINE VAR += VAR NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR . plot ( VAR , VAR , STRING ) NEWLINE plt . show ( )", ">> > scipy . sparse . vstack ( [ X1 , X2 ] ) . toarray ( ) NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "class ExecutiveAdmin ( admin . ModelAdmin ) : NEWLINE VAR = ( STRING , STRING )", "< ! doctype html > NEWLINE < title > Path : { { tree . name } } < / title > NEWLINE < h1 > { { tree . name } } < / h1 > NEWLINE < ul > NEWLINE { % - for VAR in tree . children recursive % } NEWLINE < li > { { VAR . name } } NEWLINE { % - if VAR . children - % } NEWLINE < ul > { { loop ( VAR . children ) } } < / ul > NEWLINE { % - endif % } < / li > NEWLINE { % - endfor % } NEWLINE < / ul >", "array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "STRING", "VAR = colormap [ color_labels ] . reshape ( color . shape [ : NUMBER ] ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] , dtype = uint32 )", "{ % load pretty_forms % } NEWLINE < form action = STRING method = STRING > NEWLINE { { form . as_p | pretty_checkbox } } NEWLINE < p > < input type = STRING value = STRING > < / p > NEWLINE < / form >", "os . path . getmtime ( filepath )", "from random import choice NEWLINE VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE VAR = VAR + VAR + VAR + VAR NEWLINE def select ( ) : NEWLINE VAR = set ( VAR ) NEWLINE for VAR in ( VAR , VAR , VAR , VAR , VAR , VAR ) : NEWLINE VAR . remove ( choice ( tuple ( VAR ) ) ) NEWLINE return [ VAR for VAR in VAR if VAR not in VAR ]", ">> > VAR = [ NUMBER , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > for VAR in VAR : NEWLINE . . . if VAR in VAR : NEWLINE . . . print STRING % ( VAR ) NEWLINE . . . else : NEWLINE . . . print STRING % ( VAR ) NEWLINE . . . NEWLINE NUMBER in both sets ! NEWLINE NUMBER in both sets ! NEWLINE NUMBER does not match ! NEWLINE >> >", "dCE / dL3 = - ( ( Y / L3 ) - ( NUMBER - Y ) / ( NUMBER - L3 ) ) NEWLINE = - ( ( Y ( NUMBER - L3 ) - ( NUMBER - Y ) L3 ) / ( L3 ( NUMBER - L3 ) ) ) NEWLINE = - ( ( ( Y - Y * L3 ) - ( L3 - Y * L3 ) ) / ( L3 ( NUMBER - L3 ) ) ) NEWLINE = - ( ( Y - Y3 * L3 + Y3 * L3 - L3 ) / ( L3 ( NUMBER - L3 ) ) ) NEWLINE = - ( ( Y - L3 ) / ( L3 ( NUMBER - L3 ) ) ) NEWLINE = ( ( L3 - Y ) / ( L3 ( NUMBER - L3 ) ) )", "VAR = { STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] }", ">> > from collections import Counter NEWLINE >> > VAR = Counter ( [ VAR [ STRING ] for VAR in things ] ) NEWLINE >> > VAR [ NUMBER ] NEWLINE NUMBER NEWLINE >> > VAR [ NUMBER ] NEWLINE NUMBER NEWLINE >> > VAR . most_common ( ) NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE >> > sum ( VAR . values ( ) ) NEWLINE NUMBER NEWLINE >> > list ( VAR ) NEWLINE [ NUMBER , NUMBER ] NEWLINE >> > dict ( VAR ) NEWLINE { NUMBER : NUMBER , NUMBER : NUMBER }", "In [ NUMBER ] : x NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : VAR = x . reshape ( NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : VAR [ NUMBER , : , NUMBER , : ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : VAR [ NUMBER , : , NUMBER , : ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] )", "class Post ( Base ) : NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( Unicode ) NEWLINE class Like ( Base ) : NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( Integer , ForeignKey ( Post . VAR ) , nullable = False ) NEWLINE class Alert ( Base ) : NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( Integer , ForeignKey ( Like . VAR ) )", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING , STRING ] NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING , STRING ]", "In [ NUMBER ] : df = pd . DataFrame ( [ [ STRING , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER ] ] , columns = list ( STRING ) )", "def format_float ( VAR , VAR ) : NEWLINE VAR = STRING NEWLINE if VAR < NUMBER : NEWLINE VAR = abs ( VAR ) NEWLINE VAR = STRING NEWLINE if VAR >= NUMBER : NEWLINE VAR = min ( VAR - NUMBER for VAR in range ( VAR + NUMBER ) if VAR >= NUMBER ** ( VAR - VAR ) ) NEWLINE return STRING . format ( VAR , VAR , num_digits = max ( NUMBER , VAR ) ) NEWLINE VAR = STRING . format ( VAR ) . rstrip ( STRING ) NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE if not VAR : NEWLINE return STRING NEWLINE if len ( VAR ) < VAR or set ( VAR [ : VAR ] ) != { STRING } : NEWLINE VAR = VAR . ljust ( VAR , STRING ) [ : VAR ] NEWLINE elif len ( VAR ) > VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR != STRING : NEWLINE VAR = VAR [ : VAR + NUMBER ] NEWLINE break NEWLINE return STRING . format ( VAR , NUMBER , VAR )", ">> > def split_string ( VAR , VAR ) : NEWLINE . . . return re . split ( STRING . join ( re . escape ( VAR ) for VAR in VAR ) , VAR ) NEWLINE . . . NEWLINE >> > split_string ( STRING , STRING ) NEWLINE [ STRING , STRING , STRING ] NEWLINE >> > split_string ( STRING , [ STRING , STRING ] ) NEWLINE [ STRING , STRING , STRING ]", "VAR = pyodbc . connect ( STRING )", "import matplotlib NEWLINE def setEnv ( VAR ) : NEWLINE matplotlib . use ( VAR )", "VAR = NUMBER NEWLINE VAR = numpy . max ( rev_count ) // VAR NEWLINE VAR = np . arange ( NUMBER , np . max ( rev_count ) + VAR + NUMBER , VAR )", "auth_parse . parse_args ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] )", "def scream ( ) : NEWLINE print ( VAR . sound ) NEWLINE import part2 NEWLINE class GameVariables : NEWLINE pass NEWLINE if __name__ == STRING : NEWLINE VAR = GameVariables ( ) NEWLINE part2 . VAR = VAR NEWLINE VAR . sound = STRING NEWLINE part2 . scream ( ) NEWLINE VAR . sound = STRING NEWLINE part2 . scream ( ) NEWLINE Yooo NEWLINE Whaa", "{ VAR : VAR for VAR , VAR in zip ( ascii_lowercase , range ( NUMBER , NUMBER ) ) }", "auth . login ( request , user ) NEWLINE user . userattributes . set_session_key ( request . session . session_key )", "from lxml import html NEWLINE from urlparse import urlparse NEWLINE VAR = html . fromstring ( html_data ) NEWLINE VAR = VAR . cssselect ( STRING ) NEWLINE VAR = set ( [ ] ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . attrib [ STRING ] NEWLINE VAR = urlparse ( VAR ) NEWLINE VAR . add ( VAR . netloc ) NEWLINE print VAR", "import json NEWLINE VAR = dict ( { STRING : STRING , STRING : STRING } ) NEWLINE json . dumps ( { int ( VAR ) : VAR [ VAR ] for VAR in VAR . keys ( ) } , sort_keys = True )", "VAR = logging . getLogger ( __name__ )", "rahul @ HP - EliteBook ~ / Projects / Stackoverflow $ cat abc . txt NEWLINE hai am here", "$ ( document ) . ready ( function ( ) { $ ( STRING ) . click ( function ( event ) { var uInput = $ ( STRING ) . val ( ) ; $ . ajax ( { type : STRING , url : STRING , data : JSON . stringify ( { userInput : uInput } ) , contentType : STRING , success : function ( response ) { $ ( STRING ) . text ( response . results ) ; } , } ) ; } ) ; } ) ;", "line NUMBER NEWLINE added code line a NEWLINE added code line b NEWLINE line NUMBER", "[ STRING , STRING , STRING , STRING , STRING ]", "from sqlalchemy import create_engine NEWLINE VAR = create_engine ( STRING )", "In [ NUMBER ] : df . pivot_table ( values = STRING , index = pd . DatetimeIndex ( df . date ) . to_period ( STRING ) , columns = STRING , aggfunc = STRING ) NEWLINE Out [ NUMBER ] : NEWLINE goods a b c NEWLINE NUMBER - NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER NUMBER NaN NUMBER NEWLINE NUMBER - NUMBER NaN NUMBER NaN NEWLINE NUMBER - NUMBER NaN NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER NaN NaN", ">> > VAR = STRING NEWLINE >> > VAR = STRING % ( VAR ) NEWLINE >> > VAR NEWLINE STRING", "set terminal postscript eps color lw NUMBER STRING NUMBER NEWLINE set output STRING NEWLINE set xlabel STRING NEWLINE set ylabel STRING NEWLINE set title STRING NEWLINE set style data histogram NEWLINE set style histogram cluster gap NUMBER NEWLINE set style fill solid border - NUMBER NEWLINE set boxwidth NUMBER NEWLINE set key autotitle columnheader NEWLINE set xtics rotate by - NUMBER NEWLINE plot STRING using NUMBER : NUMBER with linespoints ls NUMBER", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE def parse_city_state ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if STRING in VAR : NEWLINE VAR = re . match ( VAR , VAR ) NEWLINE VAR . append ( VAR . group ( NUMBER ) ) NEWLINE VAR . append ( VAR . group ( NUMBER ) ) NEWLINE elif VAR [ NUMBER ] . isdigit ( ) or VAR [ NUMBER ] == STRING : NEWLINE VAR . append ( VAR . split ( STRING ) ) NEWLINE else : NEWLINE VAR . append ( VAR . split ( STRING , NUMBER ) [ NUMBER ] ) NEWLINE VAR . append ( VAR . split ( STRING , NUMBER ) [ NUMBER ] ) NEWLINE return VAR , VAR , VAR NEWLINE if __name__ == STRING : NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE for VAR in parse_city_state ( VAR ) : NEWLINE print VAR", "from win32api import keybd_event NEWLINE import time NEWLINE import random NEWLINE VAR = {} NEWLINE VAR = {} NEWLINE def KeyUp ( VAR ) : NEWLINE keybd_event ( VAR , NUMBER , NUMBER , NUMBER ) NEWLINE def KeyDown ( VAR ) : NEWLINE keybd_event ( VAR , NUMBER , NUMBER , NUMBER ) NEWLINE def Press ( VAR , VAR = NUMBER ) : NEWLINE VAR = NUMBER / VAR NEWLINE if VAR in VAR : NEWLINE VAR = VAR [ VAR ] NEWLINE KeyDown ( VAR ) NEWLINE time . sleep ( VAR ) NEWLINE KeyUp ( VAR ) NEWLINE return True NEWLINE if VAR in VAR : NEWLINE KeyDown ( VAR [ VAR [ VAR ] [ NUMBER ] ] ) NEWLINE time . sleep ( VAR ) NEWLINE KeyDown ( VAR [ VAR [ VAR ] [ NUMBER ] ] ) NEWLINE time . sleep ( VAR ) NEWLINE KeyUp ( VAR [ VAR [ VAR ] [ NUMBER ] ] ) NEWLINE time . sleep ( VAR ) NEWLINE KeyUp ( VAR [ VAR [ VAR ] [ NUMBER ] ] ) NEWLINE return True NEWLINE return False NEWLINE def Write ( VAR , VAR = NUMBER ) : NEWLINE for VAR in VAR : NEWLINE Press ( VAR , VAR ) NEWLINE time . sleep ( ( NUMBER + random . random ( ) / NUMBER ) / float ( VAR ) )", "import csv NEWLINE with open ( STRING ) as VAR , open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR , delimiter = STRING , skipinitialspace = True ) NEWLINE VAR = csv . reader ( VAR , delimiter = STRING ) NEWLINE VAR = csv . VAR ( VAR , delimiter = STRING ) NEWLINE while True : NEWLINE try : NEWLINE VAR = next ( VAR ) NEWLINE VAR [ NUMBER : NUMBER ] = next ( VAR ) NEWLINE VAR . writerows ( [ VAR , next ( VAR ) , next ( VAR ) ] ) NEWLINE except StopIteration : NEWLINE break", "from math import * NEWLINE import numpy as np NEWLINE from matplotlib import pyplot as plt NEWLINE from matplotlib import animation NEWLINE def Plongeon ( ) : NEWLINE VAR = float ( input ( STRING ) ) NEWLINE VAR = NUMBER NEWLINE VAR = sqrt ( NUMBER * VAR / VAR ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR = plt . axes ( xlim = ( NUMBER , NUMBER ) , ylim = ( - NUMBER , VAR + NUMBER ) ) NEWLINE VAR , = VAR . plot ( [ ] , [ ] , STRING , lw = NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR = [ NUMBER ] NEWLINE VAR = [ VAR ] NEWLINE def animate ( VAR ) : NEWLINE VAR [ - NUMBER ] = VAR NEWLINE VAR . set_data ( VAR , VAR ) NEWLINE return VAR , NEWLINE def get_y ( ) : NEWLINE VAR = NUMBER NEWLINE while VAR <= VAR : NEWLINE VAR = - NUMBER * VAR * VAR ** NUMBER + VAR NEWLINE yield VAR NEWLINE VAR += VAR NEWLINE VAR = animation . FuncAnimation ( VAR , animate , frames = get_y , interval = NUMBER ) NEWLINE plt . show ( ) NEWLINE Plongeon ( )", "from timeit import default_timer NEWLINE VAR = default_timer ( ) NEWLINE VAR = default_timer ( ) - VAR", "// The node class should be held by std : : auto_ptr NEWLINE class_ < Node , std : : auto_ptr < Node > > ( STRING ) NEWLINE // expose the thin wrapper function as node . add_child ( ) NEWLINE . def ( STRING , & node_add_child ) NEWLINE ;", "VAR = STRING * NUMBER ** NUMBER NEWLINE def using_fromarray ( ) : NEWLINE VAR = np . array ( [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] , dtype = STRING ) NEWLINE VAR = VAR [ np . array ( map ( int , list ( VAR ) ) ) ] . reshape ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR = Image . fromarray ( VAR , STRING ) NEWLINE return VAR NEWLINE def using_putdata ( ) : NEWLINE VAR = { STRING : ( NUMBER , NUMBER , NUMBER ) , STRING : ( NUMBER , NUMBER , NUMBER ) } NEWLINE VAR = [ VAR [ VAR ] for VAR in VAR ] NEWLINE VAR = Image . new ( STRING , ( NUMBER , len ( VAR ) // NUMBER ) , STRING ) NEWLINE VAR . putdata ( VAR ) NEWLINE return VAR", "VAR = int . from_bytes ( b , byteorder = STRING , signed = False )", "from random import choice NEWLINE def Number_recursive ( VAR , VAR = None ) : NEWLINE VAR = VAR or VAR NEWLINE if VAR < NUMBER : NEWLINE raise ValueError ( STRING ) NEWLINE if VAR == NUMBER : NEWLINE return [ ] NEWLINE return [ [ choice ( ( NUMBER , NUMBER ) ) for VAR in range ( VAR ) ] ] + Number_recursive ( VAR - NUMBER , VAR )", "class Site ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE def __unicode__ ( VAR ) : NEWLINE return VAR . VAR", "[ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ]", "def listallcams ( ) : NEWLINE VAR = SVSIpCamReg . query . filter_by ( u_id = current_user . id ) . all ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . key NEWLINE VAR = bytes ( VAR ) NEWLINE VAR = Fernet ( VAR ) NEWLINE VAR = bytes ( VAR . camurl_hash ) NEWLINE VAR = VAR . decrypt ( VAR ) NEWLINE VAR . VAR = VAR NEWLINE return render_template ( STRING , allcam = VAR )", "VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = build_pseudo_header ( VAR , VAR , NUMBER )", "VAR = datasetObj . varlist [ STRING ]", "from authbind import authenticate NEWLINE VAR = STRING NEWLINE authenticate ( bytearray ( VAR ) )", "VAR = [ [ ] for VAR in range ( NUMBER ) ]", "VAR = NUMBER NEWLINE VAR = STRING NEWLINE VAR = NUMBER NEWLINE while VAR < len ( VAR ) : NEWLINE print ( STRING ) NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE if VAR [ VAR ] is STRING and VAR [ VAR + NUMBER ] is not STRING : NEWLINE if VAR - NUMBER is NUMBER : NEWLINE VAR = int ( VAR [ VAR - NUMBER ] ) + int ( VAR [ VAR + NUMBER ] ) NEWLINE VAR += NUMBER NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE else : NEWLINE VAR = VAR + int ( VAR [ VAR + NUMBER ] ) NEWLINE VAR += NUMBER NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE elif VAR [ VAR ] is STRING and VAR [ VAR + NUMBER ] is STRING : NEWLINE if VAR - NUMBER is NUMBER : NEWLINE VAR = int ( VAR [ VAR - NUMBER ] ) - int ( VAR [ VAR + NUMBER ] ) NEWLINE VAR += NUMBER NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE else : NEWLINE VAR = VAR - int ( VAR [ VAR + NUMBER ] ) NEWLINE VAR += NUMBER NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE print ( STRING ) NEWLINE print ( VAR ) NEWLINE else : NEWLINE VAR += NUMBER NEWLINE print ( VAR )", "VAR = my_person . region . name", "from bs4 import BeautifulSoup NEWLINE import requests NEWLINE VAR = STRING NEWLINE VAR = requests . get ( VAR ) NEWLINE VAR = BeautifulSoup ( VAR . content ) NEWLINE for VAR in VAR . find ( STRING , id = STRING ) . find_next_sibling ( STRING ) . find_all ( STRING ) [ NUMBER : ] : NEWLINE print [ VAR . text for VAR in VAR ( STRING ) ]", "np . einsum ( STRING , A , B , C )", "Name A B C NEWLINE Date NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER", "map ( lambda VAR : VAR , range ( NUMBER ) )", ">> > from BeautifulSoup import BeautifulSoup NEWLINE >> > VAR = BeautifulSoup ( STRING ) NEWLINE >> > VAR . find ( STRING ) NEWLINE < a href = STRING > a link < / a > NEWLINE >> > VAR . find ( STRING ) . previousSibling NEWLINE STRING NEWLINE >> >", "[ VAR [ STRING ] for VAR in query . column_descriptions ]", "import math NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR . append ( [ ] ) NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR [ VAR ] . append ( STRING ) NEWLINE VAR = NUMBER NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR = math . floor ( ( VAR + VAR ) / NUMBER ) NEWLINE VAR = ( VAR + VAR ) - NUMBER * VAR NEWLINE VAR [ VAR ] [ VAR ] = str ( VAR + NUMBER ) NEWLINE print ( VAR )", "from django . VAR import connections NEWLINE class DBRouter ( object ) : NEWLINE STRING NEWLINE def db_for_read ( VAR , VAR , ** hints ) : NEWLINE VAR = VAR . __module__ . split ( STRING ) NEWLINE try : NEWLINE VAR = VAR [ - NUMBER ] NEWLINE if VAR in connections : NEWLINE return VAR NEWLINE except IndexError : NEWLINE pass NEWLINE return None NEWLINE def db_for_write ( VAR , VAR , ** hints ) : NEWLINE VAR = VAR . __module__ . split ( STRING ) NEWLINE try : NEWLINE VAR = VAR [ - NUMBER ] NEWLINE if VAR in connections : NEWLINE return VAR NEWLINE except IndexError : NEWLINE pass NEWLINE return None NEWLINE def allow_syncdb ( VAR , VAR , VAR ) : NEWLINE STRING NEWLINE if VAR . _meta . app_label == STRING : NEWLINE return False NEWLINE elif VAR == STRING : NEWLINE return True NEWLINE return None", "[ STRING , STRING , STRING , STRING , STRING ]", "VAR = np . linalg . inv ( np . transpose ( A ) . dot ( A ) ) NEWLINE VAR = VAR . dot ( np . transpose ( A ) ) . dot ( B )", "In [ NUMBER ] : arr [ : - NUMBER ] NEWLINE Out [ NUMBER ] : array ( [ [ True , False , True ] ] , dtype = bool )", "[ mssql ] NEWLINE VAR = MSSQL Server NEWLINE VAR = freetds NEWLINE VAR = MyDatabase NEWLINE VAR = mssql NEWLINE VAR = NUMBER", ">> > VAR = lambdify ( x , integrate ( x ** NUMBER + NUMBER , x ) ) NEWLINE >> > VAR ( NUMBER ) NEWLINE NUMBER", ">> > VAR = Vector ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR = Vector ( NUMBER , NUMBER , NUMBER ) . unitVector ( ) NEWLINE >> > VAR + VAR NEWLINE [ NUMBER , NUMBER , NUMBER ]", "for VAR in filepath : NEWLINE with open ( VAR , STRING ) as f : NEWLINE for VAR in f : NEWLINE if STRING in VAR : NEWLINE for VAR in f : NEWLINE", ">> > VAR = { NUMBER : STRING } NEWLINE >> > NUMBER in VAR NEWLINE True NEWLINE >> > NUMBER in VAR NEWLINE False", "import re NEWLINE VAR = STRING NEWLINE VAR = re . findall ( STRING , VAR ) NEWLINE print VAR", ">> > df != df . shift ( ) NEWLINE Bid Ask NEWLINE NUMBER True True NEWLINE NUMBER False False NEWLINE NUMBER False False NEWLINE NUMBER True True NEWLINE NUMBER False False NEWLINE NUMBER True True NEWLINE NUMBER False False NEWLINE NUMBER False True", ">> > print ( example . encode ( STRING ) . decode ( STRING ) ) NEWLINE Foo ' \" \\ \\ Bar NEWLINE >> > example . encode ( STRING ) . decode ( STRING ) NEWLINE STRING", "import time NEWLINE VAR = ExpireCounter ( ) NEWLINE assert ( len ( VAR ) == NUMBER ) NEWLINE print ( VAR ) NEWLINE VAR . add ( datetime . datetime . now ( ) ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . add ( datetime . datetime . now ( ) ) NEWLINE assert ( len ( VAR ) == NUMBER ) NEWLINE print ( VAR ) NEWLINE time . sleep ( NUMBER ) NEWLINE assert ( len ( VAR ) == NUMBER ) NEWLINE print ( VAR ) NEWLINE", "d1 d2 NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NaN NaN", "VAR = pd . DataFrame ( data ) NEWLINE VAR . columns = [ STRING , STRING ] NEWLINE VAR [ STRING ] = pd . to_datetime ( VAR [ STRING ] ) NEWLINE VAR [ STRING ] = VAR [ STRING ] . dt . weekofyear NEWLINE VAR . reset_index ( STRING ) NEWLINE VAR . sort_index ( inplace = True ) NEWLINE VAR [ STRING ] = VAR . groupby ( STRING ) . cumsum ( )", "class Object1 : NEWLINE VAR = NUMBER NEWLINE def __str__ ( VAR ) : NEWLINE return str ( VAR . VAR ) NEWLINE def __repr__ ( VAR ) : NEWLINE return str ( VAR . VAR )", "use strict ; NEWLINE use warnings ; NEWLINE use IO : : Handle ; NEWLINE STDOUT - > autoflush ; NEWLINE open my $ in_xml , STRING , STRING or die STRING ; NEWLINE open my $ in_titles , STRING , STRING or die STRING ; NEWLINE open my $ out_xml , STRING , STRING or die STRING ; NEWLINE while ( my $ xml_line = < $ in_xml > ) { if ( $ xml_line = ~ / < text / ) { my ( $ id1 ) = $ xml_line = ~ / id = STRING / ; unless ( defined $ id1 ) { chomp ; die sprintf qq { Error in input XML file at line % d : % s \\ n - } , $ in_xml - > input_line_number , $ _ ; } printf STRING , $ id1 unless $ id1 % NUMBER ; my $ title_line = < $ in_titles > ; my ( $ id2 , $ title ) = $ title_line = ~ / ^ ( \\ d + ) \\ s + ( . + ) / ; unless ( defined $ id2 ) { chomp $ title_line ; die sprintf qq { Error in input titles file at line % d : % s \\ n - } , $ in_titles - > input_line_number , $ title_line ; } unless ( $ id1 == $ id2 ) { die sprintf STRING , $ id1 , $ id2 , $ in_xml - > input_line_number , $ in_titles - > input_line_number } $ xml_line = ~ s / > / title = STRING > / ; } print $ out_xml $ xml_line ; } NEWLINE close $ out_xml or die STRING ;", "- - - modulename : untitled - NUMBER , funcname : main NEWLINE untitled - NUMBER py ( NUMBER ) : a = NUMBER NEWLINE untitled - NUMBER py ( NUMBER ) : tracer . enabled = False", "pip install browsermob - proxy", "root ( Root ) NEWLINE | - foos ( FooContainer ) NEWLINE | ` - { obj } ( Foo ) NEWLINE ` - bars ( BarContainer ) NEWLINE ` - { obj } ( Bar )", "import random NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = STRING NEWLINE VAR = dict ( ) NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR [ VAR + str ( VAR + NUMBER ) ] = [ ] NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR = random . sample ( VAR , NUMBER ) NEWLINE VAR [ VAR + str ( VAR + NUMBER ) ] . append ( VAR [ NUMBER ] ) NEWLINE VAR . remove ( VAR [ NUMBER ] ) NEWLINE print ( VAR )", "VAR = np . array ( filterColumns ) NEWLINE VAR = np . array ( combination ) NEWLINE VAR = VAR == VAR [ newaxis , : ] NEWLINE VAR = raw_data [ VAR ]", "[ ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) ]", "def tree ( VAR , VAR ) : NEWLINE for VAR in xrange ( NUMBER , VAR + NUMBER , NUMBER ) : NEWLINE print ( STRING * VAR ) . center ( VAR ) NEWLINE VAR = ( VAR / NUMBER ) if ( VAR / NUMBER ) % NUMBER else ( VAR / NUMBER ) - NUMBER NEWLINE for VAR in xrange ( VAR ) : NEWLINE print ( STRING * VAR ) . center ( VAR ) NEWLINE >> > tree ( NUMBER , NUMBER ) NEWLINE * NEWLINE ** * NEWLINE ** ** * NEWLINE ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** ** * NEWLINE ** ** * NEWLINE ** ** * NEWLINE >> > tree ( NUMBER , NUMBER ) NEWLINE * NEWLINE ** * NEWLINE ** ** * NEWLINE ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** ** * NEWLINE ** ** ** ** ** ** * NEWLINE ** ** ** * NEWLINE ** ** ** * NEWLINE ** ** ** * NEWLINE ** ** ** *", ">> > from lxml import html NEWLINE >> > VAR = STRING NEWLINE . . . NEWLINE >> > VAR = html . fromstring ( VAR ) NEWLINE >> > print html . tostring ( VAR ) NEWLINE < div class = STRING > NEWLINE < div class = STRING > NEWLINE < b > Recommended length of visit : < / b > NEWLINE < div class = STRING > NEWLINE < b > Fee : < / b > NEWLINE No NEWLINE < / div > NEWLINE < / div > < / div >", "$ cd my - sphinx - dir NEWLINE $ mkdir - p theme / static NEWLINE $ touch theme / theme . conf NEWLINE $ touch theme / static / style . css", "import numpy as np NEWLINE VAR = np . asarray ( a , float ) NEWLINE VAR = np . lib . pad ( VAR , ( NUMBER , NUMBER ) , STRING ) NEWLINE VAR , VAR = np . where ( VAR == NUMBER ) NEWLINE VAR = VAR . shape [ NUMBER ] NEWLINE VAR = np . array ( [ - VAR , - NUMBER , NUMBER , VAR ] ) NEWLINE VAR = np . ravel_multi_index ( ( VAR + NUMBER , VAR + NUMBER ) , VAR . shape ) [ : , None ] + VAR NEWLINE VAR = VAR . copy ( ) NEWLINE VAR [ VAR , VAR ] = VAR . ravel ( ) [ VAR ] . sum ( NUMBER ) / NUMBER", "{ % get_current_time STRING as the_time % } NEWLINE < p > The time is { { the_time } } . < / p >", "VAR = ( STRING , )", "def xform ( VAR ) : NEWLINE if type ( VAR ) == list and len ( VAR ) > NUMBER and VAR [ NUMBER ] == STRING : NEWLINE return VAR [ NUMBER ] + STRING + VAR [ NUMBER ] + STRING NEWLINE else : NEWLINE return str ( VAR ) NEWLINE VAR = [ xform ( VAR ) for VAR in input ]", "VAR = select ( [ table2 . c . col1 , table2 . c . col2 ] ) . where ( table1 . c . key == table2 . c . key )", "Complete answer NEWLINE import matplotlib . pyplot as plt NEWLINE import numpy as np NEWLINE np . random . seed ( NUMBER ) NEWLINE VAR = NUMBER ; VAR = NUMBER NEWLINE VAR = np . linspace ( NUMBER , VAR * VAR - VAR , VAR ) NEWLINE VAR = NUMBER + ( np . arange ( VAR ) - VAR / NUMBER ) ** NUMBER * np . random . random ( VAR ) NEWLINE plt . bar ( VAR , abs ( VAR ) , align = STRING , width = VAR ) NEWLINE plt . xticks ( [ VAR * NUMBER * VAR for VAR in range ( VAR / NUMBER ) ] + [ VAR * VAR - VAR / NUMBER ] ) NEWLINE plt . xlim ( - VAR / NUMBER , VAR * VAR - VAR / NUMBER ) NEWLINE plt . show ( )", "location / yourapp { include uwsgi_params ; uwsgi_pass < your app address , eg . localhost > : < portno > ; }", "def p_expression_binop ( VAR ) : NEWLINE STRING", "VAR = STRING", "NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", "for VAR in range ( m , low - NUMBER , - NUMBER ) :", "import sys , termios NEWLINE VAR = termios . tcgetattr ( sys . stdin . fileno ( ) )", "which python", "In [ NUMBER ] : x NEWLINE Out [ NUMBER ] : NEWLINE array ( [ ^ A ^ B ^ C ^ D ] , dtype = STRING )", "sys . stdout = backup", "VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE VAR = sorted ( VAR , key = VAR . get ) NEWLINE VAR = sorted ( VAR , key = VAR . get ) NEWLINE VAR = dict ( ( VAR , VAR . index ( VAR ) - VAR . index ( VAR ) ) for VAR in VAR )", "from types import GeneratorType NEWLINE def yield_next_two ( VAR ) : NEWLINE if not isinstance ( VAR , GeneratorType ) : NEWLINE for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) : NEWLINE yield VAR [ VAR : VAR + NUMBER ] NEWLINE else : NEWLINE while True : NEWLINE VAR = next ( VAR ) NEWLINE try : NEWLINE VAR = next ( VAR ) NEWLINE yield [ VAR , VAR ] NEWLINE except StopIteration : NEWLINE yield [ VAR ] NEWLINE VAR = yield_next_two ( original ) NEWLINE VAR = yield_next_two ( yield_next_two ( original ) ) NEWLINE next ( VAR ) NEWLINE next ( VAR )", "import inspect NEWLINE VAR = STRING NEWLINE def make_chi_squared ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = STRING . join ( inspect . getargspec ( VAR ) . args [ NUMBER : ] ) NEWLINE exec VAR % { STRING : VAR } NEWLINE return chi_squared", "VAR = np . array ( [ Y , Z , [ NUMBER ] * len ( X ) ] ) . transpose ( )", "In [ NUMBER ] : VAR = pd . DataFrame ( [ [ STRING , NUMBER , NUMBER ] , . . . : [ STRING , NUMBER , NUMBER ] , . . . : [ STRING , NUMBER , NUMBER ] ] , columns = [ STRING , STRING , STRING ] ) NEWLINE In [ NUMBER ] : VAR . groupby ( STRING ) [ STRING ] . transform ( lambda VAR : len ( VAR ) ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE Name : B , dtype : int64", "[ NUMBER NUMBER NUMBER . . . , NUMBER NUMBER NUMBER ]", "abs ( z )", ">> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > [ VAR for VAR in [ [ VAR , VAR ] if VAR < VAR else [ VAR , VAR ] for VAR , VAR in zip ( VAR , VAR ) ] for VAR in VAR ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "namespace elps { class TestClass { public : TestClass ( ) { } ; virtual ~ TestClass ( ) { } ; int getA ( ) { return this - > a ; } ; virtual int override_me ( ) { return NUMBER ; } ; int calculate ( int a ) { return a * this - > override_me ( ) ; } private : int a ; } ; } / * namespace elps * / NEWLINE", "datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , tzinfo = < DstTzInfo STRING EDT - NUMBER day , NUMBER : NUMBER : NUMBER DST > )", "STRING . format ( ** data )", "$ cat data . txt NEWLINE \\ u0441 \\ u043b \\ u043e \\ u0432 \\ u043e", "VAR = [ [ STRING , NUMBER , NUMBER ] [ STRING , NUMBER , NUMBER ] [ STRING , NUMBER , NUMBER ] [ STRING , NUMBER , NUMBER ] [ STRING , NUMBER , NUMBER ] [ STRING , NUMBER , NUMBER ] ] NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ NUMBER ] NEWLINE if VAR not in VAR : VAR [ VAR ] = [ ] NEWLINE VAR [ VAR ] . append ( VAR )", ">> > d [ STRING ] = NUMBER NEWLINE >> > str ( d or STRING ) NEWLINE STRING", "@ register . simple_tag ( takes_context = True ) NEWLINE def current_time ( VAR , VAR ) : NEWLINE VAR = VAR [ STRING ] NEWLINE return your_get_current_time_method ( VAR , VAR )", "k . press_key ( k . shift_key ) NEWLINE k . press_key ( k . control_key ) NEWLINE k . type_string ( STRING ) NEWLINE k . release_key ( k . shift_key ) NEWLINE k . release_key ( k . control_key )", "import numpy as np NEWLINE from scipy import integrate NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER * NUMBER ) NEWLINE def derivN ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR , VAR = VAR NEWLINE return np . array ( [ VAR * ( NUMBER - VAR - NUMBER * VAR ) , VAR * ( NUMBER - VAR - NUMBER * VAR ) ] ) NEWLINE def coupled ( VAR , VAR , VAR ) : NEWLINE STRING NEWLINE VAR = integrate . odeint ( derivN , VAR , VAR ) NEWLINE VAR [ NUMBER ] . plot ( VAR [ : , NUMBER ] , VAR [ : , NUMBER ] , label = STRING . format ( * VAR ) ) NEWLINE VAR , = VAR [ NUMBER ] . plot ( VAR , VAR [ : , NUMBER ] , label = STRING . format ( * VAR ) ) NEWLINE VAR [ NUMBER ] . plot ( VAR , VAR [ : , NUMBER ] , color = VAR . get_color ( ) )", "In [ NUMBER ] : NEWLINE def func ( VAR ) : NEWLINE if VAR . values [ NUMBER ] is None : NEWLINE return None NEWLINE else : NEWLINE return df . loc [ VAR . name , VAR . values [ NUMBER ] ] NEWLINE pd . DataFrame ( df . apply ( lambda VAR : VAR . first_valid_index ( ) , axis = NUMBER ) ) . apply ( func , axis = NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NaN NEWLINE dtype : float64", ">> > VAR = np . array ( [ np . random . random ( ( NUMBER , NUMBER ) ) , np . random . random ( ( NUMBER , NUMBER ) ) ] ) NEWLINE >> > VAR NEWLINE array ( [ array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ) , array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) ] , dtype = object )", "CLB , HNRG , LPI , MTDR , MVO , NRGY , PSE , PVR , RRC , WES NEWLINE ACMP , ATLS , ATW , BP , BWP , COG , DGAS , DNR , EPB , EPL NEWLINE EXLP , NOV , OIS , PNRG , SEP , APL , ARP , CVX , DMLP , DRQ NEWLINE DWSN , EC , ECA , FTI , GLOG , IMO , LINE , NFX , OILT , PNG NEWLINE QRE , RGP , RRMS , SDRL , SNP , TLP , VNR , XOM , XTXI , AHGP", "function ! s : GetVisualSelection ( ) NEWLINE let [ lnum1 , col1 ] = getpos ( STRING ) [ NUMBER : NUMBER ] NEWLINE let [ lnum2 , col2 ] = getpos ( STRING ) [ NUMBER : NUMBER ] NEWLINE let lines = getline ( lnum1 , lnum2 ) NEWLINE let lines [ - NUMBER ] = lines [ - NUMBER ] [ : col2 - ( & selection == STRING ? NUMBER : NUMBER ) ] NEWLINE let lines [ NUMBER ] = lines [ NUMBER ] [ col1 - NUMBER : ] NEWLINE return join ( lines , STRING ) NEWLINE endfunction", "import os NEWLINE VAR = os . environ [ STRING ]", "update_field ( STRING , STRING , STRING )", "from itertools import groupby NEWLINE from operator import itemgetter NEWLINE for VAR , VAR in groupby ( sorted ( init_treats ) , itemgetter ( NUMBER ) ) : NEWLINE if init_untreat [ VAR ] + sum ( map ( init_treats . get , VAR ) ) == NUMBER : NEWLINE", "{ STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] }", ">> > VAR = STRING NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING , STRING , STRING ]", "from django . conf . urls import url , patterns NEWLINE from views import get_no_of_lines , line_form NEWLINE VAR = patterns ( STRING , url ( STRING , get_no_of_lines , name = STRING ) , url ( STRING , line_form , name = STRING ) , )", "{ STRING : { STRING : NUMBER , STRING : NUMBER } , STRING : { STRING : NUMBER , STRING : NUMBER } , STRING : { STRING : NUMBER , STRING : NUMBER } }", "def test ( VAR , VAR , VAR ) : NEWLINE VAR . insert ( VAR + NUMBER , VAR [ VAR ] ) NEWLINE VAR . insert ( VAR + NUMBER , VAR [ VAR + NUMBER ] ) NEWLINE VAR [ VAR ] , VAR [ VAR + NUMBER ] = VAR [ VAR + NUMBER ] , VAR [ VAR + NUMBER ] NEWLINE del VAR [ VAR + NUMBER ] NEWLINE del VAR [ VAR + NUMBER ]", ">> > VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE >> > print week_start_end ( VAR ) NEWLINE ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) )", "In [ NUMBER ] : NEWLINE VAR = pd . read_table ( io . StringIO ( t ) , skiprows = NUMBER , header = None , nrows = NUMBER ) NEWLINE VAR NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NEWLINE NUMBER Col_A Col_B Col_C NEWLINE In [ NUMBER ] : NEWLINE VAR . iloc [ NUMBER ] [ NUMBER ] NEWLINE Out [ NUMBER ] : NEWLINE STRING", "In [ NUMBER ] : type ( exit ) . __repr__ = lambda VAR : setattr ( VAR . shell , STRING , True ) or STRING", "tell application STRING NEWLINE tell document NUMBER to set theUrl to ( do JavaScript STRING ) NEWLINE end tell", ">> > df . groupby ( [ STRING , STRING ] ) . id . apply ( list ) NEWLINE FName LName NEWLINE Andreas Kai [ NUMBER ] NEWLINE Constantine Pape [ nan , nan ] NEWLINE Koethe Talukdar [ NUMBER , NUMBER , NUMBER ] NEWLINE Manual Hausman [ NUMBER , NUMBER ] NEWLINE Max Weber [ NUMBER , NUMBER ] NEWLINE Nadia Alam [ NUMBER , NUMBER ] NEWLINE Pia Naime [ NUMBER , NUMBER , NUMBER ] NEWLINE Plank Ingo [ NUMBER ] NEWLINE Tanvir Hossain [ NUMBER , NUMBER ] NEWLINE Weber Mac [ NUMBER , NUMBER , NUMBER ] NEWLINE Name : id , dtype : object", "from HTMLParser import HTMLParser NEWLINE class AllLanguages ( HTMLParser ) : NEWLINE def __init__ ( VAR ) : NEWLINE HTMLParser . __init__ ( VAR ) NEWLINE VAR . inLink = False NEWLINE VAR . dataArray = [ ] NEWLINE VAR . countLanguages = NUMBER NEWLINE VAR . lasttag = None NEWLINE VAR . lastname = None NEWLINE VAR . lastvalue = None NEWLINE def handle_starttag ( VAR , VAR , VAR ) : NEWLINE VAR . inLink = False NEWLINE if VAR == STRING : NEWLINE for VAR , VAR in VAR : NEWLINE if VAR == STRING and VAR == STRING : NEWLINE VAR . countLanguages += NUMBER NEWLINE VAR . inLink = True NEWLINE VAR . lasttag = VAR NEWLINE def handle_endtag ( VAR , VAR ) : NEWLINE if VAR == STRING : NEWLINE VAR . inlink = False NEWLINE def handle_data ( VAR , VAR ) : NEWLINE if VAR . lasttag == STRING and VAR . inLink and VAR . strip ( ) : NEWLINE print VAR NEWLINE VAR = AllLanguages ( ) NEWLINE VAR . feed ( STRING )", "def generate_paths ( VAR , VAR = NUMBER , VAR = NUMBER ) : NEWLINE if VAR == VAR : NEWLINE yield ( ( VAR , VAR ) , ) NEWLINE else : NEWLINE for VAR in generate_paths ( VAR , VAR + NUMBER , VAR ) : NEWLINE yield ( ( VAR , VAR ) , ) + VAR NEWLINE for VAR in generate_paths ( VAR , VAR + NUMBER , VAR + NUMBER ) : NEWLINE yield ( ( VAR , VAR ) , ) + VAR", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "from nltk . corpus import wordnet NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = VAR . readlines ( ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE for VAR in VAR : NEWLINE if not wordnet . synsets ( VAR ) : NEWLINE print STRING + VAR NEWLINE else : NEWLINE print STRING + VAR NEWLINE VAR . write ( VAR ) NEWLINE VAR . close ( )", "def fun1 ( VAR ) : NEWLINE return VAR + fun1 . VAR NEWLINE fun1 . VAR = NUMBER ; VAR = fun2 ( fun1 , x0 ) ; print ( VAR ) NEWLINE fun1 . VAR = NUMBER ; VAR = fun2 ( fun1 , x0 ) ; print ( VAR ) NEWLINE def fun1 ( VAR ) : NEWLINE def wrapper ( VAR ) : NEWLINE return VAR + VAR NEWLINE return wrapper NEWLINE VAR = fun2 ( fun1 ( VAR = NUMBER ) , x0 ) ; print ( VAR ) NEWLINE VAR = fun2 ( fun1 ( VAR = NUMBER ) , x0 ) ; print ( VAR ) NEWLINE from functools import partial NEWLINE def fun1 ( VAR , VAR ) : NEWLINE return VAR + VAR NEWLINE VAR = fun2 ( partial ( fun1 , VAR = NUMBER ) , x0 ) ; print ( VAR ) NEWLINE VAR = fun2 ( partial ( fun1 , VAR = NUMBER ) , x0 ) ; print ( VAR ) NEWLINE class Fun1 ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE def __call__ ( VAR , VAR ) : NEWLINE return VAR + VAR . VAR NEWLINE VAR = fun2 ( Fun1 ( VAR = NUMBER ) , x0 ) ; print ( VAR ) NEWLINE VAR = fun2 ( Fun1 ( VAR = NUMBER ) , x0 ) ; print ( VAR ) NEWLINE def fun1 ( VAR , VAR ) : NEWLINE return VAR + VAR NEWLINE def decorate ( VAR ) : NEWLINE def wrapper ( VAR ) : NEWLINE def wrapped ( VAR ) : NEWLINE return VAR ( VAR , VAR ) NEWLINE return wrapped NEWLINE return wrapper NEWLINE VAR = fun2 ( decorate ( VAR = NUMBER ) ( fun1 ) , x0 ) ; print ( VAR ) NEWLINE VAR = fun2 ( decorate ( VAR = NUMBER ) ( fun1 ) , x0 ) ; print ( VAR )", "% timeit np . einsum ( STRING , a , b ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "self . _filter = Filter ( ) NEWLINE self . ui . lineEdit . installEventFilter ( self . _filter )", ">> > VAR = { STRING : ( NUMBER , NUMBER , None ) , STRING : ( NUMBER , NUMBER , STRING ) } NEWLINE >> > all ( VAR [ NUMBER ] in ( STRING , None ) for VAR in VAR . values ( ) ) NEWLINE True NEWLINE >> > VAR [ STRING ] = ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > all ( VAR [ NUMBER ] in ( STRING , None ) for VAR in VAR . values ( ) ) NEWLINE False", "from scipy . ndimage import rotate , zoom NEWLINE from scipy . misc import ascent NEWLINE from matplotlib import pyplot as plt NEWLINE VAR = ascent ( ) NEWLINE VAR = rotate ( VAR , NUMBER , reshape = False ) NEWLINE VAR , VAR = plt . subplots ( NUMBER , NUMBER ) NEWLINE VAR [ NUMBER ] . imshow ( VAR , cmap = STRING ) NEWLINE VAR [ NUMBER ] . imshow ( VAR , cmap = STRING )", "VAR = MyClass ( )", "VAR = inlineformset_factory ( Father , Son , form = SonInline , extra = NUMBER , can_delete = False , can_order = False )", "def merge_books ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ STRING ] NEWLINE VAR [ STRING ] = [ { STRING : VAR [ STRING ] , STRING : VAR [ STRING ] , STRING : VAR [ STRING ] , } ] NEWLINE del VAR [ STRING ] NEWLINE del VAR [ STRING ] NEWLINE del VAR [ STRING ] NEWLINE if VAR in VAR : NEWLINE VAR [ VAR ] [ STRING ] . append ( VAR [ STRING ] [ NUMBER ] ) NEWLINE else : NEWLINE VAR [ VAR ] = VAR NEWLINE return tuple ( VAR . values ( ) )", "[ { V_Cf : R_S / ( R_1 + R_S ) , tau : NUMBER / log ( exp ( ( NUMBER / R_S + NUMBER / R_1 ) / ( C_1 + C_S ) ) ) , V_Ci : k_1 } ]", "< adapter NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING / >", "with open ( sys . argv [ NUMBER ] ) as VAR : NEWLINE VAR = [ tuple ( VAR ) for VAR in csv . reader ( VAR ) ]", "$ / usr / bin / time - f STRING tclsh gutenberg . tcl > output1 . txt NEWLINE NUMBER : NUMBER NEWLINE $ / usr / bin / time - f STRING python gutenberg . py > output2 . txt NEWLINE NUMBER : NUMBER", "STRING . join ( VAR for VAR in x if VAR in STRING )", ">> > class A : NEWLINE . . . def __init__ ( VAR , VAR , VAR ) : NEWLINE . . . VAR . VAR = VAR NEWLINE . . . VAR . VAR = VAR NEWLINE . . . NEWLINE >> > VAR = A ( NUMBER , NUMBER ) NEWLINE >> > vars ( VAR ) NEWLINE { STRING : NUMBER , STRING : NUMBER } NEWLINE >> > for VAR in vars ( VAR ) . keys ( ) : NEWLINE . . . print STRING % ( VAR , str ( getattr ( VAR , VAR ) ) ) NEWLINE . . . NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER", "In [ NUMBER ] : VAR = { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } NEWLINE In [ NUMBER ] : VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR [ NUMBER ] NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : VAR [ NUMBER ] NEWLINE Out [ NUMBER ] : NUMBER", "SELECT column_name NEWLINE FROM information_schema . table_constraints NEWLINE JOIN information_schema . key_column_usage NEWLINE USING ( constraint_catalog , constraint_schema , constraint_name , table_catalog , table_schema , table_name ) NEWLINE WHERE constraint_type = STRING NEWLINE AND ( table_schema , table_name ) = ( STRING , STRING ) NEWLINE ORDER BY ordinal_position ;", ">> > pd . concat ( [ df , target ] , axis = NUMBER ) NEWLINE temp isJan isFeb isMar isApr isMay isJun isJul isAug NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE isSep isOct isNov isDec NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER", "for VAR in itertools . islice ( iter_all_strings ( ) , NUMBER ) : NEWLINE print VAR", "VAR = STRING NEWLINE VAR = VAR . split ( )", ">> > import hashlib NEWLINE >> > import base64 NEWLINE >> > VAR = hashlib . sha1 ( STRING ) NEWLINE >> > base64 . b64encode ( VAR . digest ( ) ) NEWLINE STRING", "VAR = soup . find ( STRING , text = lambda text and STRING in text ) NEWLINE VAR = [ VAR [ STRING ] for VAR in VAR . find_next_siblings ( STRING , href = True ) ] NEWLINE print ( VAR )", "from selenium import webdriver NEWLINE from browsermobproxy import Server NEWLINE VAR = Server ( environment . b_mob_proxy_path ) NEWLINE VAR . start ( ) NEWLINE VAR = VAR . create_proxy ( ) NEWLINE VAR = [ STRING % VAR . VAR ] NEWLINE VAR = webdriver . PhantomJS ( VAR = VAR ) NEWLINE VAR . new_har ( ) NEWLINE VAR . get ( STRING ) NEWLINE print VAR . har NEWLINE VAR = [ VAR [ STRING ] [ STRING ] for VAR in VAR . har [ STRING ] [ STRING ] ]", "from django . contrib . postgres . fields import JSONField NEWLINE class Something ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = JSONField ( db_index = True )", "VAR = re . findall ( STRING , text )", ">> > range ( NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "United States , California NEWLINE Va Long Beach Healthcare System NEWLINE Long Beach , California , United States , NUMBER NEWLINE United States , Georgia NEWLINE Gastrointestinal Specialists Of Georgia Pc NEWLINE Marietta , Georgia , United States , NUMBER NEWLINE Local Institution NEWLINE Taipei , Taiwan , NUMBER NEWLINE Local Institution NEWLINE Taoyuan , Taiwan , NUMBER NEWLINE United Kingdom NEWLINE Local Institution NEWLINE London , Greater London , United Kingdom , SE5 NUMBER RS", "import redis NEWLINE VAR = STRING NEWLINE VAR = redis . Redis ( host = STRING , port = NUMBER , db = NUMBER ) NEWLINE VAR = VAR . llen ( VAR )", "CREATE TABLE ` dog_measurements ` ( ` id ` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY , ` dog_id ` INT UNSIGNED NOT NULL , ` paw ` ENUM ( STRING , STRING , STRING , STRING ) , ` taken_at ` DATETIME NOT NULL ) ;", ">> > reduce ( getitem , lis [ : - NUMBER ] , DictOfVehiclePrices ) [ lis [ - NUMBER ] ] = STRING", "qconf - mc", "makedir ( STRING % ( datetime . date . today ( ) . strftime ( STRING ) ) )", "def convert ( VAR ) : NEWLINE VAR = re . sub ( STRING , STRING , VAR ) NEWLINE return re . sub ( STRING , STRING , VAR ) . lower ( )", "def GetInterpolatedZ ( VAR , VAR , VAR ) : NEWLINE VAR = NUMBER / VAR [ NUMBER ] . VAR NEWLINE VAR = NUMBER / VAR [ NUMBER ] . VAR NEWLINE VAR = NUMBER / VAR [ NUMBER ] . VAR NEWLINE VAR = VAR + VAR * ( VAR - VAR ) + VAR * ( VAR - VAR ) NEWLINE return NUMBER / VAR", "var data = { STRING : get_form_args ( ) ; }", ">> > import MySQLdb NEWLINE >> > MySQLdb . paramstyle NEWLINE STRING", "class MyDict ( dict ) : NEWLINE def __str__ ( VAR ) : NEWLINE return STRING + STRING . join ( [ STRING % ( VAR , VAR [ VAR ] ) for VAR in VAR ] ) + STRING NEWLINE VAR = { NUMBER : STRING } NEWLINE VAR = MyDict ( { NUMBER : STRING } ) NEWLINE VAR = STRING NEWLINE print ( VAR ) NEWLINE print ( VAR ) NEWLINE print ( VAR )", "Column NUMBER Column NUMBER Column NUMBER Column NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER", "import os NEWLINE import unittest NEWLINE def make_test ( VAR ) : NEWLINE class TestClass ( unittest . TestCase ) : NEWLINE def test_file ( VAR ) : NEWLINE import random NEWLINE if not random . randint ( NUMBER , NUMBER ) : NEWLINE VAR . assertEquals ( NUMBER , NUMBER , STRING ) NEWLINE test_file . __doc__ = STRING % VAR NEWLINE return TestClass NEWLINE VAR = make_test ( STRING ) NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE globals ( ) [ STRING % VAR ] = make_test ( STRING % VAR ) NEWLINE for VAR , VAR , VAR in os . walk ( STRING ) : NEWLINE for VAR in VAR : NEWLINE globals ( ) [ STRING % VAR ] = make_test ( STRING % ( VAR , VAR ) ) NEWLINE if __name__ == STRING : NEWLINE unittest . main ( )", "lambda VAR : list ( VAR ) [ - NUMBER ]", "In [ NUMBER ] : VAR = rgb2int ( color ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] , dtype = uint32 )", "[ [ STRING ] , [ STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING , STRING ] ]", "awk STRING / tmp / genes . txt NEWLINE A2M NEWLINE ACADM", "VAR = data . set_index ( STRING ) [ STRING ] NEWLINE VAR = pd . get_dummies ( VAR )", "self . caseful_id = value", "VAR = [ ] NEWLINE class Object ( ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . something = VAR NEWLINE VAR . append ( VAR ) NEWLINE VAR = Object ( STRING ) NEWLINE VAR = Object ( STRING ) NEWLINE VAR = Object ( STRING ) NEWLINE for VAR in VAR : NEWLINE print ( VAR . something )", "import os NEWLINE Import ( STRING ) NEWLINE VAR = [ STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE SConscript ( os . path . join ( VAR , STRING ) , exports = [ STRING ] )", "Operation_ID , Operation_Name , business_group_name , business_unit_name , Program_ID , Program_Name , Project_ID , Project_Name , Program_Type_Name , Program_Cost_Type_Name , Start_date , Estimated_End_Date , End_Date , SQA_Name , CMA_Name , SSE_Name , PMs , TLs , PortfolioManager , Finished , Research , SQA_ID , CMA_ID , SSE_ID NEWLINE NUMBER , XXX , YYY , ZZZ , NUMBER , WWW , NUMBER , QQQ , NUMBER / NUMBER / NUMBER , NUMBER / NUMBER / NUMBER , EEE EEE , True NEWLINE NUMBER , XXX , YYY , ZZZ , NUMBER , WWW , NUMBER , QQQ , NUMBER / NUMBER / NUMBER , NUMBER NUMBER / NUMBER / NUMBER , EEE EEE EEE , True , False NEWLINE NUMBER , XXX , YYY , ZZZ , NUMBER , WWW , NUMBER , QQQ , Development , Direct , NUMBER / NUMBER / NUMBER , NUMBER / NUMBER / NUMBER , EEE , EEE EEE ; EEE EEE ; EEE EEE , True , False NEWLINE NUMBER , XXX , YYY , ZZZ , NUMBER , WWW , NUMBER , QQQ , NUMBER / NUMBER / NUMBER , NUMBER / NUMBER / NUMBER , True , False NEWLINE NUMBER , XXX , YYY , ZZZ , NUMBER , WWW , NUMBER , QQQ , Development , Direct , NUMBER / NUMBER / NUMBER , NUMBER / NUMBER / NUMBER , EEE EEE EEE , EEE EEE , True NEWLINE NUMBER , XXX , YYY , ZZZ , NUMBER , WWW , NUMBER , QQQ , NUMBER / NUMBER / NUMBER , NUMBER / NUMBER / NUMBER , EEE EEE EEE , EEE EEE EEE EEE , True NEWLINE etc . . . . . . . . . . . . . . . . .", ">> > any ( isinstance ( VAR , int ) and VAR > NUMBER for VAR in [ NUMBER , NUMBER , STRING ] ) NEWLINE True", "VAR = interpolate . UnivariateSpline ( x , y , k = NUMBER , s = NUMBER )", "In [ NUMBER ] : class B ( object ) : NEWLINE . . . : def __init__ ( VAR ) : NEWLINE . . . : VAR . d = { STRING : STRING } NEWLINE . . . : VAR . l = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE . . . : def keys ( VAR ) : NEWLINE . . . : return VAR . d . keys ( ) NEWLINE . . . : def __getitem__ ( VAR , VAR ) : NEWLINE . . . : return VAR . d [ VAR ] NEWLINE . . . : def __iter__ ( VAR ) : NEWLINE . . . : return iter ( VAR . l ) NEWLINE . . . : NEWLINE In [ NUMBER ] : VAR = B ( ) NEWLINE In [ NUMBER ] : list ( VAR ) NEWLINE Out [ NUMBER ] : [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE In [ NUMBER ] : dict ( VAR ) NEWLINE Out [ NUMBER ] : { STRING : STRING }", "In [ NUMBER ] : % timeit using_astype ( drg , timestamp ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : % timeit using_datetimes ( drg , timestamp ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "import numpy as np NEWLINE cimport numpy as np NEWLINE import cython NEWLINE @ cython . wraparound ( False ) NEWLINE @ cython . boundscheck ( False ) NEWLINE cpdef dijkway3 ( int [ : , : : NUMBER ] m , int VAR , int VAR ) : NEWLINE cdef list wayarr = [ ] NEWLINE while ( VAR != VAR ) & ( VAR >= NUMBER ) : NEWLINE wayarr . append ( VAR ) NEWLINE VAR = m [ VAR , VAR ] NEWLINE return wayarr NEWLINE @ cython . wraparound ( False ) NEWLINE @ cython . boundscheck ( False ) NEWLINE def jumpvec3 ( int [ : , : : NUMBER ] pmat , int node ) : NEWLINE cdef np . ndarray VAR NEWLINE cdef int [ : : NUMBER ] VAR NEWLINE cdef int VAR , VAR , VAR , VAR NEWLINE cdef list VAR NEWLINE VAR = np . zeros ( len ( pmat ) , int ) NEWLINE VAR = VAR NEWLINE VAR [ node ] = - NUMBER NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE if VAR [ VAR ] != NUMBER : NEWLINE continue NEWLINE VAR = VAR NEWLINE VAR = dijkway3 ( pmat , node , VAR ) NEWLINE VAR = len ( VAR ) NEWLINE for VAR in range ( VAR ) : NEWLINE VAR [ < int > VAR [ VAR ] ] = VAR - VAR NEWLINE return VAR", "from collections import Counter NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = Counter ( ) NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE if VAR in VAR : NEWLINE VAR [ VAR ] += VAR [ VAR ] NEWLINE print ( VAR . items ( ) )", "codecs . decode ( string , STRING )", "STRING . join ( [ VAR for VAR in x if VAR in STRING ] )", "VAR = pymel . core . ls ( VAR = True , transforms = True )", "In [ NUMBER ] : l = [ randint ( NUMBER , NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE In [ NUMBER ] : % % timeit NEWLINE VAR = [ ] NEWLINE VAR = set ( ) NEWLINE for VAR , VAR in enumerate ( l ) : NEWLINE if VAR not in VAR : NEWLINE VAR . append ( ( VAR , VAR ) ) NEWLINE VAR . add ( VAR ) NEWLINE . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : timeit OrderedDict ( ( VAR , l . index ( VAR ) ) for VAR in l ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : l = [ randint ( NUMBER , NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE In [ NUMBER ] : timeit OrderedDict ( ( VAR , l . index ( VAR ) ) for VAR in l ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : % % timeit NEWLINE VAR = [ ] NEWLINE VAR = set ( ) NEWLINE for VAR , VAR in enumerate ( l ) : NEWLINE if VAR not in VAR : NEWLINE VAR . append ( ( VAR , VAR ) ) NEWLINE VAR . add ( VAR ) NEWLINE . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = ticker . MultipleLocator ( NUMBER / NUMBER ) NEWLINE ax . yaxis . set_major_locator ( VAR )", "[ VAR for VAR , VAR in foo . __dict__ . iteritems ( ) if callable ( VAR ) ]", "self . skills = filter ( lambda VAR : VAR . id != skill_to_remove . id , self . skills )", "[ STRING , STRING , STRING , STRING ]", "not cat NEWLINE not meoooow NEWLINE yes mouse", ">> > print common NEWLINE set ( [ STRING , STRING , STRING , STRING ] ) NEWLINE >> > len ( common ) NEWLINE NUMBER", "class OrderProduct ( BaseModel ) : NEWLINE VAR = models . ForeignKey ( Order ) NEWLINE VAR = models . ForeignKey ( Product ) NEWLINE VAR = models . IntegerField ( )", "{ STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "from pprint import pprint NEWLINE from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE VAR = VAR . find_all ( STRING , { STRING : STRING } ) NEWLINE VAR = { STRING : [ { STRING : VAR . h3 . get_text ( strip = True ) , STRING : VAR . p . get_text ( strip = True ) , STRING : VAR . a [ STRING ] } for VAR in VAR ] } NEWLINE pprint ( VAR )", "from kivy . base import runTouchApp NEWLINE from kivy . lang import Builder NEWLINE VAR = STRING NEWLINE if __name__ == STRING : NEWLINE runTouchApp ( Builder . load_string ( VAR ) )", "( STRING , ) NEWLINE ( STRING , ) NEWLINE ( STRING , )", ">> > VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE >> > VAR , VAR = zip ( * VAR ) NEWLINE >> > VAR NEWLINE ( STRING , STRING , STRING ) NEWLINE >> > VAR NEWLINE ( NUMBER , NUMBER , NUMBER )", "< form method = STRING > NEWLINE { % csrf_token % } NEWLINE { { machine_form } } NEWLINE < / form >", "x . vtype = GRB . BINARY", "VAR = data . reshape ( N , Nt , N ) . swapaxes ( NUMBER , NUMBER )", ">> > d = np . arange ( NUMBER ) NEWLINE >> > random . shuffle ( d ) NEWLINE >> > % timeit rank1 ( d ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE >> > % timeit rank2 ( d ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE >> > d = np . arange ( NUMBER ) NEWLINE >> > random . shuffle ( d ) NEWLINE >> > % timeit rank1 ( d ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE >> > % timeit rank2 ( d ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE >> > d = np . arange ( NUMBER ) NEWLINE >> > random . shuffle ( d ) NEWLINE >> > % timeit rank1 ( d ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE >> > d = np . arange ( NUMBER ) NEWLINE >> > random . shuffle ( d ) NEWLINE >> > % timeit rank1 ( d ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "from xml . etree . ElementTree as etree NEWLINE VAR = STRING NEWLINE VAR = etree . fromstring ( VAR ) NEWLINE for VAR in VAR : NEWLINE print VAR", "VAR = [ STRING , STRING , STRING , STRING ]", "def iterative_weighted_invert ( VAR , VAR , VAR = None , VAR = NUMBER ) : NEWLINE VAR = VAR NEWLINE for VAR in range ( VAR ) : NEWLINE VAR = weighted_invert ( VAR , VAR , weights = VAR , VAR = VAR ) NEWLINE VAR = gaussian ( VAR , * VAR ) NEWLINE return VAR", "from fabric . api import run NEWLINE def super_status ( ) : NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING . format ( VAR = VAR , VAR = VAR ) NEWLINE print VAR NEWLINE run ( VAR )", "main NEWLINE main NEWLINE main NEWLINE main NEWLINE main NEWLINE end main NEWLINE end main NEWLINE end main NEWLINE end main NEWLINE end main", ">> > VAR = [ ( VAR , VAR [ NUMBER ] , VAR [ NUMBER ] ) for VAR , VAR in dd . iteritems ( ) ] NEWLINE >> > VAR NEWLINE [ ( [ NUMBER ] , STRING , STRING ) , ( [ NUMBER , NUMBER ] , STRING , STRING ) , ( [ NUMBER , NUMBER , NUMBER ] , STRING , STRING ) ] NEWLINE >> > NEWLINE >> > VAR = sorted ( VAR , key = lambda VAR : len ( VAR [ NUMBER ] ) , reverse = True ) NEWLINE >> > VAR NEWLINE [ ( [ NUMBER , NUMBER , NUMBER ] , STRING , STRING ) , ( [ NUMBER , NUMBER ] , STRING , STRING ) , ( [ NUMBER ] , STRING , STRING ) ]", "rdd . map ( lambda ( VAR , VAR ) : ( tuple ( VAR ) , VAR ) ) . groupByKey ( )", "VAR = STRING NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE print ( VAR . format ( user1 = VAR . strip ( ) ) )", "VAR = STRING . split ( ) NEWLINE def get_query_results ( * filters ) : NEWLINE VAR = models . Item . query NEWLINE for VAR , VAR in zip ( VAR , filters ) : NEWLINE if VAR is not None : NEWLINE VAR = { VAR : VAR } NEWLINE VAR = VAR . filter ( ** VAR ) NEWLINE return VAR . all ( )", "import argparse NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR = VAR . add_subparsers ( title = STRING ) NEWLINE VAR = VAR . add_parser ( STRING ) NEWLINE VAR . set_defaults ( target = STRING ) NEWLINE VAR = VAR . add_parser ( STRING ) NEWLINE VAR . add_argument ( STRING ) NEWLINE VAR . set_defaults ( target = STRING )", "def weight ( VAR ) : NEWLINE if VAR == None : NEWLINE return NUMBER NEWLINE VAR . pathweight = VAR . val + max ( weight ( VAR . left ) , weight ( VAR . right ) ) NEWLINE return VAR . pathweight NEWLINE def heavy_edge ( VAR ) : NEWLINE if not VAR . left : NEWLINE VAR = NUMBER NEWLINE else : NEWLINE VAR = VAR . left . pathweight NEWLINE if not VAR . right : NEWLINE VAR = NUMBER NEWLINE else : NEWLINE VAR = VAR . right . pathweight NEWLINE if VAR > VAR : NEWLINE return [ VAR . val , heavy_edge ( VAR . left ) ] NEWLINE else : NEWLINE return [ VAR . val , heavy_edge ( VAR . right ) ] NEWLINE weight ( t ) NEWLINE heavy_edge ( T )", "from __future__ import print_function NEWLINE import click NEWLINE @ click . command ( ) NEWLINE @ click . option ( STRING , help = STRING ) NEWLINE @ click . pass_context NEWLINE def gatherarguments ( VAR , VAR ) : NEWLINE return VAR NEWLINE def usectx ( VAR ) : NEWLINE print ( STRING % VAR . params [ STRING ] ) NEWLINE if __name__ == STRING : NEWLINE VAR = gatherarguments ( standalone_mode = False ) NEWLINE print ( VAR ) NEWLINE usectx ( VAR )", "with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) . split ( STRING ) NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] . split ( STRING , NUMBER ) [ NUMBER ] NEWLINE VAR = VAR . split ( STRING ) [ NUMBER : ] NEWLINE VAR = [ VAR for VAR in VAR if STRING in VAR ] [ NUMBER ] . strip ( STRING ) NEWLINE VAR = [ VAR . strip ( STRING ) for VAR in VAR ] NEWLINE print ( VAR ) NEWLINE print ( VAR ) NEWLINE print ( VAR )", "VAR = dict ( zip ( modules , map ( __import__ , modules ) ) )", "from Bio import Seq NEWLINE from itertools import product NEWLINE def extend_ambiguous_dna ( VAR ) : NEWLINE STRING NEWLINE VAR = Seq . IUPAC . IUPACData . ambiguous_dna_values NEWLINE return [ list ( map ( STRING . join , product ( * map ( VAR . get , VAR ) ) ) ) ]", "VAR = df . set_index ( STRING ) . reindex ( hourly_date_rng ) . fillna ( NUMBER ) . reset_index ( ) NEWLINE VAR [ STRING ] = pd . DatetimeIndex ( VAR [ STRING ] ) . to_native_types ( ) NEWLINE VAR = VAR . to_json ( orient = STRING ) NEWLINE from pprint import pprint NEWLINE pprint ( json . loads ( VAR ) ) NEWLINE [ { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } ]", "is_subnet_of ( STRING , STRING )", "In [ NUMBER ] : VAR = sparse . bmat ( lc ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE < NUMBER x5 sparse matrix of type STRING numpy . float64 STRING NEWLINE with NUMBER stored elements in COOrdinate format > NEWLINE In [ NUMBER ] : VAR . A NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "df [ STRING ] = ( df . weekday != df . weekday . shift ( ) ) . cumsum ( ) NEWLINE >> > df NEWLINE records weekday week_counter NEWLINE NUMBER NUMBER Monday NUMBER NEWLINE NUMBER NUMBER Monday NUMBER NEWLINE NUMBER NUMBER Monday NUMBER NEWLINE NUMBER NUMBER Tuesday NUMBER NEWLINE NUMBER NUMBER Tuesday NUMBER NEWLINE NUMBER NUMBER Wednesday NUMBER NEWLINE NUMBER NUMBER Thursday NUMBER NEWLINE NUMBER NUMBER Thursday NUMBER NEWLINE NUMBER NUMBER Thursday NUMBER NEWLINE . . . NEWLINE NUMBER NUMBER Tuesday NUMBER NEWLINE NUMBER NUMBER Wednesday NUMBER NEWLINE NUMBER NUMBER Wednesday NUMBER", "from xml . etree . ElementTree import fromstring , ElementTree NEWLINE VAR = STRING NEWLINE VAR = ElementTree ( fromstring ( VAR ) ) NEWLINE print [ VAR . tag for VAR in VAR . getiterator ( ) ]", "VAR , VAR = access . getinfo ( ) [ STRING ] , access . getinfo ( ) [ STRING ] NEWLINE . . . . .", ">> > s = STRING NEWLINE >> > fix_xml ( s ) NEWLINE Adding closing tag < C > at line NUMBER NEWLINE Adding closing tag < B > at linefor VAR in VAR : NEWLINE while VAR < VAR [ NUMBER ] : NEWLINE VAR . append ( ( VAR , NUMBER ) ) NEWLINE VAR += NUMBER NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR [ NUMBER ] + NUMBER", "python download . py com . google . android . gm", "{ { lines | linebreaksbr } }", "print STRING . join ( < either of the above expressions > )", "< td > { % documento . cuentasxdocumento_set . all | sum_monto : STRING % } < / td > NEWLINE < td > { % documento . cuentasxdocumento_set . all | sum_monto : STRING % } < / td >", "STRING . translate ( m )", "from collections import defaultdict NEWLINE VAR = defaultdict ( list ) NEWLINE for key , * values in data : NEWLINE VAR [ key ] . extend ( values )", "do JavaScript STRING in document NUMBER", "VAR = web . template . render ( STRING , globals = template_globals ) NEWLINE template_globals . update ( render = VAR )", "def expand_grid ( VAR ) : NEWLINE VAR = itertools . product ( * VAR . values ( ) ) NEWLINE return pd . DataFrame . from_records ( VAR , columns = VAR . keys ( ) ) NEWLINE expand_grid ( { STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] } ) NEWLINE In [ NUMBER ] : expand_grid ( { STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] } ) NEWLINE Out [ NUMBER ] : NEWLINE val_1 val_2 NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "def __getitem__ ( self , index ) : NEWLINE if isinstance ( index , tuple ) : NEWLINE elif isinstance ( index , slice ) NEWLINE else : NEWLINE", "def parseTags ( VAR ) : NEWLINE VAR = VAR . split ( STRING ) NEWLINE return filter ( None , map ( sanitizeTag , VAR ) ) NEWLINE def sanitizeTag ( VAR ) : NEWLINE VAR = STRING . join ( VAR if VAR . isalnum ( ) else STRING for VAR in VAR ) NEWLINE VAR = VAR . split ( ) NEWLINE VAR = len ( VAR ) NEWLINE if VAR == NUMBER : NEWLINE return None NEWLINE elif VAR == NUMBER : NEWLINE return VAR [ NUMBER ] NEWLINE else : NEWLINE return VAR [ NUMBER ] . lower ( ) + STRING . join ( VAR . capitalize ( ) for VAR in VAR [ NUMBER : ] )", "from django . db . models import Q NEWLINE import operator NEWLINE def get_queryset_descendants ( nodes , include_self = False ) : NEWLINE if not nodes : NEWLINE return Node . tree . none ( ) NEWLINE VAR = [ ] NEWLINE for VAR in nodes : NEWLINE VAR , VAR = VAR . VAR , VAR . VAR NEWLINE if include_self : NEWLINE VAR -= NUMBER NEWLINE VAR += NUMBER NEWLINE VAR . append ( Q ( tree_id = VAR . tree_id , lft__gt = VAR , rght__lt = VAR ) ) NEWLINE VAR = reduce ( operator . or_ , VAR ) NEWLINE return Node . tree . filter ( VAR )", "for VAR in list_of_arrays : NEWLINE print total ( VAR )", "random . choice ( moves ) [ NUMBER ]", "class VAR ( object ) : . . . NEWLINE VAR = decorate_all_methods ( Http500Resistant ) ( VAR )", "In [ NUMBER ] : import networkx as nx NEWLINE In [ NUMBER ] : VAR = nx . DiGraph ( ) NEWLINE In [ NUMBER ] : VAR . add_path ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR . add_path ( [ NUMBER , NUMBER , NUMBER ] )", "VAR = STRING NEWLINE from VAR . etree import ElementTree as ET NEWLINE VAR = ET . ElementTree ( ET . fromstring ( VAR ) ) NEWLINE VAR = VAR . getroot ( ) NEWLINE for VAR in VAR . iter ( STRING ) : NEWLINE if VAR . find ( STRING ) . text == STRING : NEWLINE VAR . set ( STRING , STRING ) NEWLINE VAR . find ( STRING ) . text = STRING NEWLINE VAR . find ( STRING ) . text = STRING NEWLINE VAR . find ( STRING ) . text = STRING NEWLINE print ET . tostring ( VAR , encoding = STRING , method = STRING ) NEWLINE", "class MyDocument ( mongoengine . Document ) : NEWLINE def save ( self , * args , ** kwargs ) : NEWLINE for VAR in self . _pre_save_hooks : NEWLINE VAR ( self ) : NEWLINE super ( MyDocument , self ) . save ( * args , ** kwargs )", ">> > VAR = { STRING : [ NUMBER , NUMBER , NUMBER ] } NEWLINE >> > VAR = VAR [ STRING ] [ : ] NEWLINE >> > VAR . append ( NUMBER ) NEWLINE >> > VAR [ STRING ] NEWLINE [ NUMBER , NUMBER , NUMBER ]", "os . path . join ( ls , STRING )", "import random , collections , csv NEWLINE def pick_non_zero ( VAR ) : NEWLINE VAR = collections . defaultdict ( int ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR , delimiter = STRING ) NEWLINE VAR = VAR . next ( ) NEWLINE for VAR , VAR in VAR : NEWLINE VAR [ VAR ] += int ( VAR ) NEWLINE VAR = [ ] NEWLINE for VAR in range ( VAR ) : NEWLINE VAR = [ VAR for VAR , VAR in VAR . items ( ) if VAR > NUMBER ] NEWLINE if len ( VAR ) == NUMBER : NEWLINE VAR . append ( STRING ) NEWLINE break NEWLINE VAR = random . VAR ( VAR ) NEWLINE VAR [ VAR ] -= NUMBER NEWLINE VAR . append ( VAR ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR , delimiter = STRING ) NEWLINE VAR . writerow ( VAR ) NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE VAR . writerow ( [ VAR , VAR ] ) NEWLINE print STRING NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE print STRING % ( VAR , VAR ) NEWLINE return VAR NEWLINE VAR = pick_non_zero ( NUMBER ) NEWLINE print NEWLINE print STRING , VAR", "def main ( ) : NEWLINE STRING NEWLINE VAR = input ( STRING ) NEWLINE return sum ( ord ( VAR ) - NUMBER for VAR in VAR . lower ( ) if VAR != STRING )", ". . . NEWLINE ( STRING , STRING , STRING , NUMBER , STRING ) = Jake Roberts NEWLINE ( STRING , STRING , STRING , NUMBER , STRING ) = Section NEWLINE ( STRING , STRING , STRING , NUMBER , STRING ) = True NEWLINE ( STRING , STRING , STRING , NUMBER , STRING ) = False NEWLINE ( STRING , STRING , STRING , NUMBER , STRING ) = NUMBER NEWLINE . . .", ">> > import json NEWLINE >> > VAR = { STRING : NUMBER , STRING : NUMBER } NEWLINE >> > print ( VAR ) NEWLINE { STRING : NUMBER , STRING : NUMBER } NEWLINE >> > print ( json . dumps ( VAR ) ) NEWLINE { STRING : NUMBER , STRING : NUMBER } NEWLINE >> >", "from pyparsing import * NEWLINE VAR , VAR , VAR , VAR , VAR = map ( Suppress , STRING ) NEWLINE VAR = Word ( alphas + STRING , alphanums + STRING ) NEWLINE VAR = Regex ( STRING ) . setParseAction ( lambda VAR : float ( VAR [ NUMBER ] ) ) NEWLINE VAR = Regex ( STRING ) . setParseAction ( lambda VAR : int ( VAR [ NUMBER ] ) ) NEWLINE VAR = VAR | VAR NEWLINE VAR = Combine ( STRING + delimitedList ( VAR , delim = oneOf ( STRING ) , combine = True ) ) NEWLINE VAR = Group ( VAR ( STRING ) + VAR + VAR ( STRING ) ) NEWLINE VAR = Group ( VAR ( STRING ) ) NEWLINE VAR , VAR = map ( Keyword , STRING . split ( ) ) NEWLINE VAR = Forward ( ) NEWLINE VAR = VAR | VAR NEWLINE def setType ( VAR ) : NEWLINE def parseAction ( VAR ) : NEWLINE VAR [ STRING ] = VAR NEWLINE return parseAction NEWLINE VAR = operatorPrecedence ( VAR | VAR , [ ( oneOf ( STRING ) , NUMBER , opAssoc . LEFT ) , ] ) NEWLINE VAR = Group ( VAR + VAR + VAR + VAR ( STRING ) + VAR + VAR + VAR ( STRING ) + VAR + Optional ( VAR + VAR + VAR + VAR ( STRING ) + VAR ) ) NEWLINE VAR . setParseAction ( setType ( STRING ) ) NEWLINE VAR . setParseAction ( setType ( STRING ) ) NEWLINE VAR << Group ( VAR | VAR | ( VAR + VAR + delimitedList ( VAR ) + VAR ) ) NEWLINE VAR = Group ( VAR ( STRING ) + VAR + Group ( ZeroOrMore ( VAR ) ) ( STRING ) + VAR ) NEWLINE VAR = OneOrMore ( VAR ) NEWLINE VAR = STRING NEWLINE def dump_stmt ( VAR , VAR = NUMBER ) : NEWLINE if STRING in VAR : NEWLINE print VAR . type NEWLINE print VAR [ NUMBER ] . dump ( VAR = VAR ) NEWLINE else : NEWLINE for VAR in VAR : NEWLINE dump_stmt ( VAR , VAR = VAR + NUMBER ) NEWLINE for VAR in VAR . parseString ( VAR ) : NEWLINE print VAR . dump ( ) NEWLINE print VAR . section_name NEWLINE for VAR in VAR . section_body : NEWLINE dump_stmt ( VAR ) NEWLINE print", "def junuxx ( VAR ) : NEWLINE VAR = np . array ( [ ] , dtype = np . uint8 ) NEWLINE for VAR in VAR : NEWLINE VAR = np . append ( VAR , np . arange ( VAR ) ) NEWLINE return VAR NEWLINE def mr_e ( VAR ) : NEWLINE return reduce ( lambda VAR , VAR : VAR + range ( VAR ) , VAR , [ ] )", "app . jinja_env . trim_blocks = True NEWLINE app . jinja_env . lstrip_blocks = True", "for VAR , VAR in foo . __dict__ . iteritems ( ) : NEWLINE if callable ( VAR ) : NEWLINE VAR ( )", "for VAR in itertools . chain ( list1 , list2 , list3 ) : NEWLINE do_stuff ( VAR )", "VAR = treeWidget . findItems ( text ) [ NUMBER ] NEWLINE treeWidget . scrollToItem ( VAR )", ">> > VAR = one [ NUMBER ] NEWLINE >> > VAR NEWLINE NUMBER NEWLINE >> > VAR + VAR NEWLINE NUMBER", "import numpy as np NEWLINE VAR = np . random . random ( [ NUMBER , NUMBER ] ) NEWLINE print VAR NEWLINE print NEWLINE print np . max ( VAR , axis = NUMBER ) NEWLINE print NEWLINE print np . max ( VAR , axis = NUMBER )", "ser . read ( ser . inWaiting ( ) )", "VAR = { } NEWLINE VAR [", "import cv NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = [ VAR . strip ( ) for VAR in VAR ] NEWLINE for VAR in VAR : NEWLINE VAR = cv . LoadImage ( VAR ) NEWLINE", "{ % block content % } NEWLINE { % for VAR in newsletter_list % } NEWLINE < h2 > { { VAR . label } } < / h2 > NEWLINE < p > Volume { { VAR . volume } } , Number { { VAR . number } } < / p > NEWLINE < p > { { VAR . article } } < / p > NEWLINE < ul > NEWLINE { % for VAR in VAR . article_set . all % } NEWLINE < li > { { VAR . title } } < / li > NEWLINE { % endfor % } NEWLINE < / ul > NEWLINE { % endfor % } NEWLINE { % endblock % }", "$ python script . py NEWLINE Done ! NEWLINE $ NEWLINE $", "STRING , STRING , STRING NEWLINE STRING , STRING , STRING NEWLINE STRING , STRING , STRING", "import contextlib NEWLINE class context_mixin : NEWLINE def __enter__ ( VAR ) : NEWLINE VAR . __context = VAR . context ( ) NEWLINE return VAR . __context . __enter__ ( ) NEWLINE def __exit__ ( VAR , * args ) : NEWLINE return VAR . __context . __exit__ ( * args ) NEWLINE class class_a ( context_mixin ) : NEWLINE @ contextlib . contextmanager NEWLINE def context ( VAR ) : NEWLINE print ( STRING ) NEWLINE try : NEWLINE yield VAR NEWLINE finally : NEWLINE print ( STRING ) NEWLINE class class_b ( class_a ) : NEWLINE @ contextlib . contextmanager NEWLINE def context ( VAR ) : NEWLINE with super ( ) . context ( ) : NEWLINE print ( STRING ) NEWLINE try : NEWLINE yield VAR NEWLINE finally : NEWLINE print ( STRING )", "t . value1 = NUMBER NEWLINE t . value2 = NUMBER NEWLINE t . save ( )", "print pd . concat ( [ df [ STRING ] , df [ STRING ] . str . get_dummies ( ) ] , axis = NUMBER ) NEWLINE ID and it long road take the walkweather location time date Condition insectName count NUMBER sunny balabala NUMBER NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER aaa NUMBER NEWLINE NUMBER sunny balabala NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER XXX NUMBER NEWLINE insectName count insectName count insectName count NEWLINE NUMBER bbb NUMBER ccc NUMBER ddd NUMBER NEWLINE NUMBER yyy NUMBER yyy NUMBER NaN NaN", ">> > df [ STRING ] . diff ( ) . apply ( np . sign ) NEWLINE time NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NaN NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE Name : close , dtype : float64", "import sys , re NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE def eachCite ( VAR ) : NEWLINE VAR = VAR NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR in ( VAR , VAR ) : NEWLINE VAR += VAR NEWLINE if re . match ( STRING , VAR ) : NEWLINE if VAR == VAR : NEWLINE VAR = VAR NEWLINE VAR = VAR NEWLINE elif VAR in ( VAR , VAR ) : NEWLINE raise Exception ( STRING , VAR ) NEWLINE else : NEWLINE raise NotImplementedError ( VAR ) NEWLINE elif re . match ( STRING , VAR ) : NEWLINE if VAR == VAR : NEWLINE raise Exception ( STRING , VAR ) NEWLINE elif VAR == VAR : NEWLINE yield False , VAR NEWLINE VAR = VAR NEWLINE elif VAR == VAR : NEWLINE yield True , VAR NEWLINE VAR = VAR NEWLINE else : NEWLINE raise NotImplementedError ( VAR ) NEWLINE elif re . match ( STRING , VAR ) : NEWLINE if VAR == VAR : NEWLINE raise Exception ( STRING , VAR ) NEWLINE elif VAR == VAR : NEWLINE VAR = VAR NEWLINE elif VAR == VAR : NEWLINE raise Exception ( STRING , VAR ) NEWLINE else : NEWLINE raise NotImplementedError ( VAR ) NEWLINE if VAR != VAR : NEWLINE raise Exception ( STRING ) NEWLINE for VAR , VAR in eachCite ( sys . stdin ) : NEWLINE if VAR : NEWLINE print STRING NEWLINE print VAR", "import win32print NEWLINE VAR = { STRING : win32print . PRINTER_ALL_ACCESS } NEWLINE VAR = win32print . OpenPrinter ( STRING , VAR ) NEWLINE VAR = win32print . GetPrinter ( VAR , NUMBER ) NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = [ ] NEWLINE VAR . DefaultSource = VAR NEWLINE VAR [ STRING ] = VAR NEWLINE win32print . SetPrinter ( VAR , NUMBER , VAR , NUMBER )", "def func ( VAR ) : NEWLINE return STRING . join ( VAR ) . translate ( None , STRING + whitespace ) NEWLINE VAR = [ VAR . split ( ) for VAR in re . split ( STRING , ph . strip ( ) , re . DOTALL ) ] NEWLINE VAR = { } NEWLINE for VAR , VAR in zip ( VAR [ : - NUMBER ] , VAR [ NUMBER : - NUMBER ] ) : NEWLINE VAR [ VAR [ - NUMBER ] ] = func ( VAR [ : - NUMBER ] ) . split ( STRING ) NEWLINE VAR [ VAR [ - NUMBER ] [ - NUMBER ] ] = func ( VAR [ - NUMBER ] ) . split ( STRING ) NEWLINE print VAR [ STRING ] NEWLINE print VAR [ STRING ] NEWLINE print VAR [ STRING ]", "from twisted . application . service import Service NEWLINE class ThingDoer ( Service ) : NEWLINE def startService ( VAR ) : NEWLINE print STRING", "( S ( NP I ) ( VP ( V shot ) ( NP ( NUM NUMBER ) ( N elephants ) ) ) )", "import base64 NEWLINE with open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = base64 . b64decode ( VAR ) NEWLINE VAR . write ( VAR )", "+ - - - - - - - + - - - - - - - + NEWLINE | Name | Grade | NEWLINE + - - - - - - - + - - - - - - - + NEWLINE | Alice | NUMBER | NEWLINE | Bill | NUMBER | NEWLINE | Joe | NUMBER | NEWLINE | Sally | NUMBER | NEWLINE + - - - - - - - + - - - - - - - +", "for VAR in chunks : NEWLINE", "VAR = asyncio . get_event_loop ( ) NEWLINE VAR = hello_world ( VAR ) NEWLINE VAR . run_until_complete ( VAR )", "def count_zeros ( VAR ) : NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR += VAR . count ( NUMBER ) NEWLINE return VAR", "sdadf", "max ( x , key = sum )", "Close O C NEWLINE Datepip help", ">> > VAR = { VAR : VAR for VAR , VAR in results } NEWLINE >> > print VAR [ STRING ] NEWLINE object6 NEWLINE >> > print VAR [ STRING ] NEWLINE object1 NEWLINE >> > print VAR [ STRING ] NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE KeyError : STRING NEWLINE >> > print VAR . get ( STRING ) NEWLINE object5 NEWLINE >> > print VAR . get ( STRING ) NEWLINE None", "VAR , VAR = measurements . label ( z2 ) NEWLINE print VAR NEWLINE arraytell application STRING NEWLINE set thelink to do JavaScript STRING in document NUMBER NEWLINE end tell", "def my_extend ( VAR , VAR , VAR ) : NEWLINE VAR [ VAR : VAR ] = VAR", "OPTION NUMBER : Roll your own VAR NEWLINE @ User . method ( request_fields = ( STRING , ) , VAR = STRING , VAR = STRING , name = STRING ) NEWLINE def get_by_email ( self , user ) : NEWLINE VAR = User . VAR ( User . email == user . email ) NEWLINE VAR = VAR . fetch ( NUMBER ) NEWLINE if len ( VAR == NUMBER ) : NEWLINE raise endpoints . NotFoundException ( STRING ) NEWLINE elif len ( VAR == NUMBER ) : NEWLINE raise endpoints . BadRequestException ( STRING ) NEWLINE else : NEWLINE return VAR [ NUMBER ]", "with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR . replace ( STRING , VAR ) )", "def get_context_data ( VAR , ** kwargs ) : NEWLINE VAR = super ( TeacherCreation , VAR ) . get_context_data ( ** kwargs ) NEWLINE VAR [ STRING ] = VAR . second_form_class NEWLINE return VAR", "for VAR in found : NEWLINE print VAR", "< Iteration_hit > Elememt2 Element2 NEWLINE abc2 hit NUMBER NEWLINE < / Iteration_hit > NEWLINE < Iteration_hit > Elememt4 Element4 NEWLINE abc4 hit NUMBER NEWLINE < / Iteration_hit >", "while true ; do NEWLINE yourpythonscript . py NEWLINE done", "VAR = VAR | Transformer ( STRING ) . append ( tag . script ( functionNameCode , type = STRING ) )", "np . vstack ( ( ii , y [ ii ] ) ) . T NEWLINE [ NUMBER , NUMBER ] , NEWLINE [ NUMBER , NUMBER ] , NEWLINE [ NUMBER , NUMBER ] ] )", "a b c NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE [ NUMBER , NUMBER , NUMBER ] NEWLINE [ NUMBER , NUMBER , NUMBER ]", "def f ( VAR ) : NEWLINE return get_sub_matrix_C ( * VAR ) NEWLINE VAR = multiprocessing . Pool ( ) NEWLINE VAR = VAR . map ( f , ( ( VAR , other_args ) for VAR in range ( NUMBER ) ) ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE C [ VAR * NUMBER : ( VAR + NUMBER ) * NUMBER , : NUMBER ] = VAR", "OrderedDict ( itertools . islice ( d . iteritems ( ) , NUMBER ) )", ">> > VAR = dataToPython ( STRING ) NEWLINE >> > searchByYear ( VAR , NUMBER ) NEWLINE [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] NEWLINE >> > searchByYear ( VAR , NUMBER ) NEWLINE [ ]", "os . path . dirname ( __file__ )", "def transpose ( VAR ) : NEWLINE return zip ( * VAR )", "VAR = NUMBER NEWLINE VAR = np . logical_and ( results [ : , NUMBER ] < VAR , results [ : , NUMBER ] < VAR ) NEWLINE VAR = results [ VAR ] [ : , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ]", "var config = { } ; NEWLINE var app = require ( STRING ) . createServer ( ) . listen ( config . server . port ) ; NEWLINE var io = require ( STRING ) . listen ( app ) ; NEWLINE var listenerDgram = require ( STRING ) . createSocket ( STRING ) ; NEWLINE listenerDgram . bind ( config . listeners . udp . port ) ; NEWLINE var sprintf = require ( STRING ) . sprintf ; NEWLINE var users = [ ] ; NEWLINE app . on ( STRING , function ( er ) { console . log ( sprintf ( STRING , Date ( ) , config . server . port , er . toString ( ) ) ) ; process . exit ( ) ; } ) ; NEWLINE listenerDgram . on ( STRING , function ( er ) { console . log ( sprintf ( STRING , Date ( ) , config . listeners . udp . port , er . toString ( ) ) ) ; process . exit ( ) ; } ) ; NEWLINE listenerDgram . on ( STRING , function ( msg , rinfo ) { // handling , let ' s say , JSONized msg from part two script , // buildinf a var frame and finally if ( user ) { // emit to single user based on what happened // inside this method users [ user ] . emit ( STRING , frame ) ; } else { // emit to all users io . emit ( STRING , frame ) ; } } ) ; NEWLINE io . sockets . on ( STRING , function ( socket ) { // handling user connection here and pushing users ' sockets to // users aray . } ) ;", "import os NEWLINE import argparse NEWLINE VAR = [ VAR [ VAR . rindex ( STRING ) + NUMBER : ] for VAR in os . listdir ( STRING ) if VAR . startswith ( STRING ) ] NEWLINE VAR . append ( STRING ) NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , choices = VAR ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE print VAR . case", "VAR = NUMBER NEWLINE with open ( filename , STRING ) as VAR : NEWLINE VAR = VAR . readlines ( ) NEWLINE with open ( filename , STRING ) as VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR == VAR : NEWLINE VAR . write ( STRING ) NEWLINE VAR . write ( VAR )", "xml . xpath ( STRING , namespaces = ns )", "def my_func ( VAR ) : NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE if any ( VAR in VAR for VAR in VAR ) : NEWLINE return True NEWLINE return False", "plt . plot ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING , dashes = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE plt . show ( )", "from robot . parsing import TestData NEWLINE import sys NEWLINE def main ( VAR ) : NEWLINE VAR = TestData ( parent = None , source = VAR ) NEWLINE VAR = get_tags ( VAR ) NEWLINE print STRING . join ( sorted ( set ( VAR ) ) ) NEWLINE def get_tags ( VAR ) : NEWLINE VAR = [ ] NEWLINE if VAR . setting_table . force_tags : NEWLINE VAR . extend ( VAR . setting_table . force_tags . value ) NEWLINE if VAR . setting_table . default_tags : NEWLINE VAR . extend ( VAR . setting_table . default_tags . value ) NEWLINE for VAR in VAR . testcase_table . tests : NEWLINE if VAR . VAR : NEWLINE VAR . extend ( VAR . VAR . value ) NEWLINE for VAR in VAR . children : NEWLINE VAR . extend ( get_tags ( VAR ) ) NEWLINE return VAR NEWLINE if __name__ == STRING : NEWLINE main ( sys . argv [ NUMBER ] )", "VAR = [ STRING ] NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = [ STRING , STRING ] NEWLINE print ( list ( map2x ( None , VAR , VAR , VAR ) ) )", "def main ( ) NEWLINE VAR = { } NEWLINE VAR = RLock ( ) NEWLINE VAR = Queue ( ) NEWLINE VAR = threading . Thread ( target = udp_server , args = ( udp_ip , udp_port , VAR , VAR , VAR ) ) NEWLINE VAR . start ( ) NEWLINE while True : NEWLINE VAR = VAR . get ( ) NEWLINE . . . process VAR . . .", "VAR = [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE for VAR , VAR in VAR : NEWLINE lst [ VAR : VAR ] = reversed ( lst [ VAR : VAR ] )", "import itertools NEWLINE def pairwise ( VAR ) : NEWLINE for VAR in VAR . itervalues ( ) : NEWLINE for VAR in itertools . combinations ( VAR . iteritems ( ) , NUMBER ) : NEWLINE yield dict ( VAR )", "Boston Phoenix New York NEWLINE Boston NUMBER NUMBER NUMBER NEWLINE Phoenix NUMBER NUMBER NUMBER NEWLINE New York NUMBER NUMBER NUMBER", ">> > from itertools import groupby NEWLINE >> > [ STRING . join ( VAR . split ( ) [ NUMBER ] for VAR in VAR ) . . . for VAR , VAR in groupby ( raw , VAR = lambda VAR : VAR . split ( ) [ NUMBER ] ) ] NEWLINE [ STRING , STRING ]", "Group NEWLINE NUMBER [ Lazy , Brown , Fox , Jumps , Over ] NEWLINE NUMBER [ Big , Blue , Sea ] NEWLINE Name : a , dtype : object", "NUMBER NEWLINE NUMBER", "from matplotlib import pyplot as plt NEWLINE from matplotlib . patches import Polygon NEWLINE import numpy as np NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . sin ( VAR ) NEWLINE plt . plot ( VAR , VAR ) NEWLINE VAR = plt . gca ( ) NEWLINE VAR = Polygon ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] , True , transform = VAR . transAxes ) NEWLINE VAR . add_patch ( VAR ) NEWLINE plt . show ( )", "from pyspark . streaming import * NEWLINE VAR = StreamingContext ( sc , NUMBER ) NEWLINE VAR = [ sc . parallelize ( VAR , NUMBER ) for VAR in [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ] NEWLINE VAR = VAR . queueStream ( VAR ) NEWLINE def list_median ( ( VAR , VAR ) , VAR ) : NEWLINE VAR = [ VAR ] if not VAR else VAR . append ( VAR ) NEWLINE VAR = sorted ( VAR ) NEWLINE return ( VAR [ int ( len ( VAR ) / NUMBER ) ] , VAR ) NEWLINE VAR = VAR . reduce ( list_median ) . map ( lambda ( VAR , VAR ) : VAR ) NEWLINE def printRec ( VAR ) : NEWLINE import sys NEWLINE VAR . foreach ( lambda VAR : sys . stderr . write ( repr ( VAR ) ) ) NEWLINE VAR . foreachRDD ( printRec ) NEWLINE VAR . start ( ) ; VAR . awaitTermination ( )", ">> > from lxml import etree NEWLINE >> > NEWLINE >> > VAR = STRING NEWLINE >> > VAR = etree . fromstring ( VAR ) NEWLINE >> > VAR = VAR . xpath ( STRING ) NEWLINE >> > NEWLINE >> > for VAR in VAR : NEWLINE . . . try : NEWLINE . . . print VAR . xpath ( STRING ) [ - NUMBER ] . get ( STRING ) NEWLINE . . . except IndexError : NEWLINE . . . print STRING NEWLINE . . . NEWLINE No preceding STRING element . NEWLINE important", "import re NEWLINE VAR = browser . find_elements_by_tag_name ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = re . search ( STRING , VAR . get_attribute ( STRING ) ) NEWLINE if VAR : NEWLINE print VAR . group ( NUMBER )", "$ mkdir my - project ; cd my - project NEWLINE $ mkvirtualenv my - env - name NEWLINE $ pip install django < more - good - stuff > NEWLINE $ pip freeze > requirements . txt NEWLINE $ git init ; git add - - all ; git commit - m STRING NEWLINE . . . push to github . . .", "VAR = WeakCallback ( self . _something_changed ) NEWLINE long_lived_object . connect ( STRING , VAR )", ">> > df NEWLINE A B abc1 abc2 abc3 abc4 NEWLINE NUMBER NUMBER NUMBER VAR root a d NEWLINE NUMBER NUMBER NUMBER y d b e NEWLINE NUMBER NUMBER NUMBER z e c bar NEWLINE NUMBER NUMBER NUMBER r g d f NEWLINE NUMBER NUMBER NUMBER z z z z NEWLINE >> > VAR = [ VAR for VAR in df . columns if STRING in VAR ] NEWLINE >> > df [ STRING ] = df [ VAR ] . apply ( lambda VAR : VAR . str . contains ( STRING ) , axis = NUMBER ) . any ( axis = NUMBER ) NEWLINE >> > df [ STRING ] = df [ STRING ] . map ( { True : STRING , False : STRING } ) NEWLINE >> > df NEWLINE A B abc1 abc2 abc3 abc4 newcol NEWLINE NUMBER NUMBER NUMBER VAR root a d r NEWLINE NUMBER NUMBER NUMBER y d b e np . nan NEWLINE NUMBER NUMBER NUMBER z e c bar r NEWLINE NUMBER NUMBER NUMBER r g d f r NEWLINE NUMBER NUMBER NUMBER z z z z np . nan", "def factors ( VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER , VAR + NUMBER ) : NEWLINE if VAR % VAR == NUMBER : NEWLINE VAR . append ( VAR ) NEWLINE return VAR", "STRING NEWLINE - - - - - - - - - - - - - - - - - - - - - NEWLINE a \\ NEWLINE - - - - - NEWLINE STRING NEWLINE - - - - - - - - - - - - - - - - - - - - - NEWLINE a \\ NEWLINE b NEWLINE - - - - - NEWLINE STRING", "STRING", "sometemplate . html NEWLINE { % load my_tags % } NEWLINE . . . NEWLINE { % for VAR in users | where_id : NUMBER % } NEWLINE . . . .", "df . loc [ STRING , : ] = df_", "fgrep - rlf messages . txt dir", "for VAR in idx_values : NEWLINE df . iloc [ VAR - NUMBER : VAR + NUMBER ]", "STRING NEWLINE STRING NEWLINE STRING NEWLINE STRING NEWLINE STRING NEWLINE STRING NEWLINE STRING NEWLINE STRING NEWLINE STRING", "VAR = dict ( zip ( cities , countries ) )", "def ed_xed ( VAR , VAR ) : NEWLINE VAR = VAR . api NEWLINE return VAR . magic . im_class . magic_edit ( VAR . IP , STRING % VAR ) NEWLINE VAR . expose_magic ( STRING , ed_xed )", "import random NEWLINE def mutate ( VAR , VAR , VAR ) : NEWLINE return STRING . join ( [ VAR [ VAR ] if random . random ( ) < VAR and VAR in VAR else VAR for VAR in VAR ] )", ">> > M [ : NUMBER , : NUMBER ] NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "from z3c . form import field NEWLINE from plone . app . z3cform . layout import wrap_form NEWLINE from collective . documentviewer . views import GlobalSettingsForm NEWLINE class CustomGlobalSettingsForm ( GlobalSettingsForm ) : NEWLINE VAR = field . Fields ( IEnhancedDocumentViewerSchema ) NEWLINE VAR = wrap_form ( CustomGlobalSettingsForm )", "VAR = declarative_base ( ) NEWLINE class MyClass ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = MyClass ( VAR = NUMBER ) NEWLINE from sqlalchemy . inspection import inspect NEWLINE VAR = inspect ( VAR ) . identity NEWLINE print VAR", "def p_type_list_1 ( VAR ) : NEWLINE STRING NEWLINE VAR [ NUMBER ] = [ VAR [ NUMBER ] ] NEWLINE def p_type_list_2 ( VAR ) : NEWLINE STRING NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] + [ VAR [ NUMBER ] ]", "In [ NUMBER ] : VAR = df . groupby ( STRING ) NEWLINE In [ NUMBER ] : df . value / VAR . value . transform ( STRING ) * df . wt NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE dtype : float64", "C : \\ Python27 \\ python . exe my_cool_script . py - - foo = bar", "VAR = immediate annuities definition NEWLINE VAR = ad group NEWLINE VAR = fixed income NEWLINE NUMBER ro = NUMBER k rollover NEWLINE VAR = retirment system NEWLINE VAR = variable annuity NEWLINE VAR = deferred variable annuities NEWLINE VAR = retirement income NEWLINE VAR = immediate variable annuities NEWLINE VAR = forbes . com NEWLINE VAR = immediate fixed annuities NEWLINE VAR = deferred annuities NEWLINE VAR = annuity calculator NEWLINE VAR = current annuity rates NEWLINE VAR = annuities calculator NEWLINE VAR = online financial planner NEWLINE VAR = aig annuities NEWLINE VAR = annuity definition NEWLINE VAR = annuity formula NEWLINE VAR = certified financial planner NEWLINE VAR = tax deferred annuity NEWLINE VAR = deferred annuies calculator NEWLINE VAR = annuities explained NEWLINE VAR = annuity tables NEWLINE VAR = deferred annuity rates", "sorted ( alpha_items , key = lambda VAR : VAR [ NUMBER ] , reverse = True )", "np . where ( arr_b > NUMBER , arr_a , np . nan )", "import os NEWLINE class View : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . f_offset = VAR NEWLINE VAR . VAR = NUMBER NEWLINE VAR . VAR = VAR NEWLINE def seek ( VAR , VAR , VAR = NUMBER ) : NEWLINE if VAR == os . SEEK_SET : NEWLINE VAR . VAR = VAR NEWLINE elif VAR == os . SEEK_CUR : NEWLINE VAR . VAR += VAR NEWLINE elif VAR == os . SEEK_END : NEWLINE VAR . VAR = VAR . VAR + VAR NEWLINE else : NEWLINE return VAR . VAR . seek ( VAR , VAR ) NEWLINE return VAR . VAR . seek ( VAR . VAR + VAR . f_offset , os . SEEK_SET ) NEWLINE def tell ( VAR ) : NEWLINE return VAR . VAR NEWLINE def read ( VAR , VAR = - NUMBER ) : NEWLINE VAR . seek ( VAR . VAR ) NEWLINE if VAR < NUMBER : NEWLINE VAR = VAR . VAR - VAR . VAR NEWLINE VAR = max ( NUMBER , min ( VAR , VAR . VAR - VAR . VAR ) ) NEWLINE VAR . VAR += VAR NEWLINE return VAR . VAR . read ( VAR ) NEWLINE if __name__ == STRING : NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = [ ] NEWLINE VAR = [ VAR * NUMBER for VAR in range ( NUMBER ) ] NEWLINE for VAR in VAR : NEWLINE VAR . seek ( VAR + NUMBER ) NEWLINE VAR = int ( VAR . read ( NUMBER ) ) NEWLINE VAR . append ( View ( VAR , VAR + NUMBER , VAR ) ) NEWLINE VAR . seek ( NUMBER ) NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR [ VAR . f_offset ] = VAR . read ( ) NEWLINE VAR . seek ( NUMBER ) NEWLINE import collections NEWLINE VAR = collections . defaultdict ( str ) NEWLINE for VAR in range ( NUMBER ) : NEWLINE for VAR in VAR : NEWLINE VAR [ VAR . f_offset ] += VAR . read ( NUMBER ) NEWLINE VAR = dict ( VAR ) NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE print VAR , VAR [ VAR ] , VAR [ VAR ] NEWLINE assert VAR [ VAR ] == VAR [ VAR ] , STRING", "a . symmetric_difference ( b )", ">> > VAR = [ VAR . assistants for VAR in Course . query . join ( . . . University ) . filter ( University . name == STRING ) ] NEWLINE >> > [ VAR . name for VAR in set ( itertools . chain ( * VAR ) ) ]", "In [ NUMBER ] : import numpy as np NEWLINE In [ NUMBER ] : [ dict ( zip ( VAR . keys ( ) , [ int ( np . round ( np . mean ( VAR . values ( ) ) ) ) ] ) ) for VAR in L ] NEWLINE", "VAR = y . mean ( axis = ( NUMBER , NUMBER ) )", "import sys , csv NEWLINE with open ( sys . argv [ NUMBER ] ) as VAR : NEWLINE VAR = list ( csv . reader ( VAR ) )", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE from matplotlib import cm NEWLINE VAR = asciitable . read ( STRING ) NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = float ( VAR . max ( ) ) NEWLINE plt . figure ( ) NEWLINE plt . title ( STRING ) NEWLINE plt . xlabel ( STRING ) NEWLINE plt . ylabel ( STRING ) NEWLINE plt . xlim ( NUMBER , NUMBER ) NEWLINE plt . ylim ( NUMBER , NUMBER ) NEWLINE for VAR in np . unique ( VAR ) : NEWLINE VAR = VAR == VAR NEWLINE VAR = np . argsort ( VAR [ VAR ] ) NEWLINE plt . plot ( VAR [ VAR ] [ VAR ] , VAR [ VAR ] [ VAR ] , label = str ( VAR ) , color = cm . jet ( VAR / VAR ) ) NEWLINE plt . legend ( ) NEWLINE plt . show ( ) NEWLINE plt . figure ( ) NEWLINE plt . title ( STRING ) NEWLINE plt . xlabel ( STRING ) NEWLINE plt . ylabel ( STRING ) NEWLINE plt . xlim ( NUMBER , NUMBER ) NEWLINE plt . ylim ( - NUMBER , NUMBER ) NEWLINE for VAR in np . unique ( VAR ) : NEWLINE VAR = VAR == VAR NEWLINE VAR = np . argsort ( VAR [ VAR ] ) NEWLINE plt . plot ( VAR [ VAR ] [ VAR ] , VAR [ VAR ] [ VAR ] , label = str ( VAR ) , color = cm . jet ( VAR / VAR ) ) NEWLINE plt . legend ( ) NEWLINE plt . show ( )", "VAR = BeautifulSoup ( data , STRING )", "VAR = np . unique ( data [ : , NUMBER ] ) . shape [ NUMBER ] NEWLINE VAR = np . unique ( data [ : , NUMBER ] ) . shape [ NUMBER ] NEWLINE VAR = np . unique ( data [ : , NUMBER ] ) . shape [ NUMBER ]", "from django . contrib . auth . models import User NEWLINE get_model_metadata ( User , meta_whitelist = [ STRING ] )", "import re NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = re . sub ( STRING , STRING , VAR . replace ( STRING , STRING ) ) NEWLINE print ( VAR )", "import csv NEWLINE with open ( fn , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR , skipinitialspace = True ) NEWLINE VAR = next ( VAR ) NEWLINE VAR = { VAR : [ ] for VAR in VAR } NEWLINE for VAR in VAR : NEWLINE VAR = { VAR : VAR for VAR , VAR in zip ( VAR , VAR ) } NEWLINE if ( all ( len ( VAR [ VAR ] ) for VAR in VAR ) and VAR [ STRING ] == VAR [ STRING ] [ - NUMBER ] and VAR [ STRING ] == VAR [ STRING ] [ - NUMBER ] ) : NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] . pop ( ) NEWLINE else : NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] . append ( VAR [ VAR ] ) NEWLINE >> > VAR NEWLINE { STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] }", "f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE f ( NUMBER ) is returning NUMBER NEWLINE NUMBER [ NUMBER ] [ NUMBER ] NEWLINE NUMBER [ NUMBER ] [ NUMBER ]", "FROM python : NUMBER NEWLINE RUN adduser - - disabled - password - - gecos STRING - - uid NUMBER pytest NEWLINE COPY . / / home / pytest NEWLINE WORKDIR / home / pytest NEWLINE RUN pip install - - upgrade pip setuptools pytest NEWLINE RUN pip install - - upgrade - r requirements . txt NEWLINE RUN python setup . py develop NEWLINE USER pytest NEWLINE ENTRYPOINT [ STRING ]", "NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", ">> > s . rfind ( STRING ) NEWLINE NUMBER", "i am done NEWLINE Java program received : haha", ">> > def find_sequences ( VAR , VAR ) : NEWLINE . . . VAR = NUMBER NEWLINE . . . VAR = len ( VAR ) NEWLINE . . . VAR = len ( VAR ) NEWLINE . . . while VAR < VAR : NEWLINE . . . if VAR [ VAR : VAR + VAR ] == VAR : NEWLINE . . . yield True NEWLINE . . . VAR = VAR + NUMBER NEWLINE . . . NEWLINE >> > list ( find_sequences ( lst , VAR ) ) NEWLINE >> > sum ( find_sequences ( [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING ] ) ) NEWLINE NUMBER", "In [ ] : import this NEWLINE The Zen of Python , by Tim Peters NEWLINE Beautiful is better than ugly . NEWLINE Explicit is better than implicit . NEWLINE . . .", "from collections import defaultdict NEWLINE VAR = defaultdict ( dict ) NEWLINE VAR [ STRING ] [ STRING ] = NUMBER", "df [ STRING ] = df . apply ( lambda VAR : check ( VAR [ STRING ] , VAR [ STRING ] , cnxn ) , axis = NUMBER )", "if __name__ == STRING : NEWLINE VAR = Circle ( x = NUMBER , y = NUMBER , r = NUMBER ) NEWLINE print ( VAR . x ) NEWLINE print ( VAR . y ) NEWLINE print ( VAR . r ) NEWLINE print ( VAR . area ) NEWLINE print ( VAR . area ) NEWLINE print ( VAR . circumference ) NEWLINE print ( VAR . distance_to_origin ) NEWLINE VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE for VAR in VAR : NEWLINE try : NEWLINE exec ( VAR [ NUMBER ] ) NEWLINE except : NEWLINE exec ( VAR [ NUMBER ] )", "for VAR in friends : NEWLINE print STRING % ( VAR [ STRING ] , VAR [ STRING ] )", "def is_full ( VAR ) : NEWLINE for VAR in VAR . data : NEWLINE for VAR in VAR : NEWLINE if VAR == STRING : NEWLINE return False NEWLINE return True", "Finding edges from layer NUMBER to NUMBER . . . NEWLINE Reachable nodes of next layer : [ NUMBER ] NEWLINE Finding edges from layer NUMBER to NUMBER . . . NEWLINE Reachable nodes of next layer : [ NUMBER ] NEWLINE True NEWLINE Finding edges from layer NUMBER to NUMBER . . . NEWLINE Reachable nodes of next layer : [ NUMBER , NUMBER ] NEWLINE Finding edges from layer NUMBER to NUMBER . . . NEWLINE Reachable nodes of next layer : [ NUMBER ] NEWLINE True", "from datetime import datetime NEWLINE VAR = [ ] NEWLINE VAR . append ( datetime . now ( ) . timestamp ( ) )", "NUMBER - element Array { Array { Int64 , NUMBER } , NUMBER } : NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE [ NUMBER , NUMBER , NUMBER ]", "from scipy import ndimage NEWLINE VAR = time . time ( ) NEWLINE VAR = np . zeros ( im . shape ) NEWLINE VAR = np . array ( [ yy , xx , np . zeros ( im . shape [ : NUMBER ] ) ] ) NEWLINE for VAR in range ( im . shape [ NUMBER ] ) : NEWLINE VAR [ : , : , VAR ] = ndimage . map_coordinates ( im , VAR , order = NUMBER ) NEWLINE VAR [ NUMBER ] += NUMBER NEWLINE VAR = time . time ( ) NEWLINE print STRING , VAR - VAR", "VAR = randint ( NUMBER , len ( reduced_list ) - NUMBER ) NEWLINE last5 . append ( reduced_list [ VAR ] )", "{ STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING }", "from django . db import connection NEWLINE VAR = connection . queries", "from flask import Flask NEWLINE from flask_sockets import Sockets NEWLINE VAR = Flask ( __name__ ) NEWLINE VAR = Sockets ( VAR ) NEWLINE VAR . config . from_object ( STRING ) NEWLINE from VAR import viewsimport numpy as np NEWLINE VAR = np . array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , ] , dtype = STRING ) . reshape ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR = { ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER , ( NUMBER , NUMBER , NUMBER ) : NUMBER }", "VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE VAR = sorted ( VAR . iteritems ( ) , key = lambda VAR : VAR [ NUMBER ] , reverse = True )", "$ easy_install lxml", "GtkEntry { color : darkgrey ; } NEWLINE GtkEntry : focused { color : black ; }", ">> > C_b NEWLINE NUMBER C0 NEWLINE + NUMBER ( ( NUMBER C0 + NUMBER ) NUMBER + ( NUMBER C0 + NUMBER ) NUMBER ) NUMBER NEWLINE + NUMBER ( ( NUMBER C0 + NUMBER ) NUMBER + ( NUMBER C0 + NUMBER ) NUMBER ) NUMBER NEWLINE + NUMBER ( ( NUMBER C0 + NUMBER ) NUMBER + NUMBER ) NUMBER NEWLINE + NUMBER NEWLINE >> > simplify ( C_b ) NEWLINE NUMBER C0 NEWLINE + NUMBER ( NUMBER C02 + NUMBER C0 + NUMBER ) NUMBER NEWLINE + NUMBER ( NUMBER C02 + NUMBER C0 + NUMBER ) NUMBER NEWLINE + NUMBER ( NUMBER C02 + NUMBER C0 + NUMBER ) NUMBER NEWLINE + NUMBER", "VAR = AsyncBoot . apply_async ( args = [ name ] , name = name , connect_timeout = NUMBER ) NEWLINE VAR = VAR . task_id", "VAR = np . hstack ( ( a_t , b_t ) ) [ : , np . argsort ( np . hstack ( ( a , b ) ) ) ] NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "df [ STRING ] = df . groupby ( STRING ) . cumcount ( ) + NUMBER NEWLINE", "[ [ STRING NUMBER NUMBER NUMBER NUMBER NUMBER ] [ STRING NUMBER NUMBER NUMBER NUMBER NUMBER ] [ STRING NUMBER NUMBER NUMBER NUMBER NUMBER ] [ STRING NUMBER NUMBER NUMBER NUMBER NUMBER ] ]", "import bottle NEWLINE from web . bottleApp import app NEWLINE from configure . config import configure_app NEWLINE VAR = bottle . Bottle ( ) NEWLINE VAR . mount ( STRING , configure ) NEWLINE VAR . mount ( STRING , app ) NEWLINE VAR . run ( host = STRING , port = NUMBER )", "[ NUMBER : NUMBER : NUMBER xxx021 ] status XYZ ID : NUMBER P00935xxx - NUMBER NUMBER quote : NUMBER / NUMBER avg : - NUMBER - NUMBER NEWLINE ( STRING , STRING , STRING ) NEWLINE [ NUMBER : NUMBER : NUMBER xxx024 ] status XYZ ID : NUMBER C0099xxx0 - NUMBER NUMBER quote : NUMBER / NUMBER avg : - NUMBER NUMBER NEWLINE ( STRING , STRING , STRING ) NEWLINE [ NUMBER : NUMBER : NUMBER xxx027 ] status XYZ ID : NUMBER P0099xxx0 NUMBER - NUMBER quote : NUMBER / NUMBER avg : - NUMBER NUMBER NEWLINE ( STRING , STRING , STRING ) NEWLINE [ NUMBER : NUMBER : NUMBER xxx029 ] status XYZ ID : NUMBER C00995xxx NUMBER - NUMBER quote : NUMBER / NUMBER avg : - NUMBER - NUMBER NEWLINE ( STRING , STRING , STRING ) NEWLINE [ NUMBER : NUMBER : NUMBER xxx031 ] status XYZ ID : NUMBER P00995xxx NUMBER NUMBER quote : NUMBER / NUMBER avg : NUMBER NUMBER NEWLINE ( STRING , STRING , STRING )", "import requests NEWLINE VAR = STRING . format ( result [ STRING ] [ NUMBER ] [ STRING ] [ NUMBER ] [ STRING ] ) NEWLINE VAR = requests . get ( VAR ) NEWLINE if VAR . status_code == NUMBER : NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR . write ( VAR . content ) NEWLINE VAR . close ( )", "import scraperwiki NEWLINE import simplejson NEWLINE import urllib2 NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = NUMBER NEWLINE for VAR in range ( NUMBER , VAR + NUMBER ) : NEWLINE VAR = STRING % ( urllib2 . quote ( VAR ) , VAR , VAR ) NEWLINE try : NEWLINE VAR = simplejson . loads ( scraperwiki . scrape ( VAR ) ) NEWLINE for VAR in VAR [ STRING ] : NEWLINE VAR = { } NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR [ STRING ] = scraperwiki . geo . extract_gb_postcode ( VAR [ STRING ] ) NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE if VAR [ STRING ] : NEWLINE print VAR [ STRING ] , VAR [ STRING ] NEWLINE scraperwiki . sqlite . save ( [ STRING ] , VAR ) NEWLINE except : NEWLINE print STRING % VAR NEWLINE break", "return reduced_list [ i ]", "from sys import stdin , stdout NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE for VAR in stdin : NEWLINE VAR = VAR . strip ( ) . split ( STRING ) NEWLINE stdout . write ( STRING . join ( VAR [ : NUMBER ] ) ) NEWLINE for VAR in VAR : NEWLINE stdout . write ( STRING ) NEWLINE stdout . write ( next ( ( VAR for VAR in VAR [ NUMBER : ] if VAR . startswith ( VAR ) ) , STRING ) ) NEWLINE stdout . write ( STRING ) NEWLINE stdout . flush ( )", "VAR = [ VAR / float ( VAR ) for VAR , VAR in zip ( whole . shape , flash . shape ) ] NEWLINE VAR = nd . interpolation . zoom ( flash , zoom = VAR )", ">> > VAR = [ STRING , STRING , STRING , STRING ] NEWLINE >> > VAR [ NUMBER ] += VAR . pop ( NUMBER )", "for VAR in tree . iterfind ( STRING ) : NEWLINE for VAR in VAR : NEWLINE if VAR . get ( STRING ) == STRING : NEWLINE VAR . set ( STRING , STRING ) NEWLINE", "VAR = STRING . join ( chr ( VAR ) if VAR in ords_to_keep else replace_with for VAR in xrange ( NUMBER ) )", ">> > s = STRING NEWLINE >> > if STRING in s : NEWLINE print STRING NEWLINE yes NEWLINE >> > if STRING in s . split ( STRING ) : NEWLINE print STRING NEWLINE >> >", "< div id = STRING class = STRING data - toggle = STRING > NEWLINE { % for VAR in buttons % } NEWLINE { % if VAR in active_btns % } NEWLINE < VAR type = STRING class = STRING name = STRING value = STRING > { { VAR } } < / VAR > NEWLINE { % else % } NEWLINE < VAR type = STRING class = STRING name = STRING value = STRING > { { VAR } } < / VAR > NEWLINE { % endif % } NEWLINE { % endfor % } NEWLINE < / div >", "E : \\ > python run . py - t $ Test_Name - b - c - no_compile - no_wlf NEWLINE Number of arguments NUMBER NEWLINE run . py NEWLINE - t NEWLINE $ Test_Name NEWLINE - b NEWLINE - c NEWLINE - no_compile NEWLINE - no_wlf NEWLINE second method NEWLINE jenkins . py NEWLINE - t NEWLINE $ Test_Name NEWLINE - b NEWLINE - c NEWLINE - no_compile NEWLINE - no_wlf NEWLINE $ Test_Name", "VAR = VAR . reset_index ( )", "VAR = dict ( [ ( VAR , float ( sum ( VAR ) ) / len ( VAR ) ) for VAR , VAR in pairs ] )", "class CHull ( ConvexHull ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE ConvexHull . __init__ ( VAR , VAR ) NEWLINE def centrum ( VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in range ( VAR . VAR . shape [ NUMBER ] ) : NEWLINE VAR . append ( np . mean ( VAR . VAR [ VAR . vertices , VAR ] ) ) NEWLINE return VAR NEWLINE VAR = CHull ( VAR ) NEWLINE VAR = VAR . centrum ( )", "In [ NUMBER ] : x NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : y NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "value NEWLINE col NEWLINE Arnston , Arnston NUMBER NEWLINE Berg , Berg NUMBER NEWLINE Carlson , Carlson NUMBER NEWLINE Arnston , Berg NUMBER NEWLINE Arnston , Carlson NUMBER NEWLINE Berg , Carlson NUMBER", "In [ NUMBER ] : VAR = df . apply ( lambda VAR : hash ( str ( VAR . values ) ) , axis = NUMBER ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE dtype : int64", ">> > import string NEWLINE >> > string . lowercase NEWLINE STRING", "return sum ( ( doSomething ( VAR ) for VAR in originalList ) , [ ] )", "public class MyProg { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System . in ) ; String data = in . next ( ) ; System . out . println ( STRING + data ) ; } }", ">> > z NEWLINE matrix ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", ">> > for VAR , VAR in rooms . items ( ) : NEWLINE . . . print VAR , VAR . x , VAR . y NEWLINE . . . NEWLINE a NUMBER NUMBER NEWLINE c NUMBER NUMBER NEWLINE b NUMBER NUMBER NEWLINE d NUMBER NUMBER", "VAR = pd . Series ( new_mac_list ) . value_counts ( )", ">> > import re NEWLINE >> > re . findall ( STRING , ss ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ]", "from datetime import datetime NEWLINE VAR = datetime . VAR ( ) NEWLINE VAR = ( VAR - VAR . replace ( hour = NUMBER , minute = NUMBER , second = NUMBER , microsecond = NUMBER ) ) . total_seconds ( )", "import random NEWLINE def sample_from_cdf ( VAR ) : NEWLINE ( VAR , VAR ) = VAR ; NEWLINE VAR = random . uniform ( NUMBER , VAR ) NEWLINE return [ VAR for VAR , VAR in VAR if VAR > VAR ] [ NUMBER ]", "import re NEWLINE VAR = STRING NEWLINE VAR = re . compile ( STRING , re . IGNORECASE ) NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE for VAR , VAR in VAR . findall ( VAR ) : NEWLINE print ( int ( VAR ) * ( NUMBER ** VAR . index ( VAR . lower ( ) ) ) )", "enemies . knightofni ( selfindex [ : int_colors . size ] NEWLINE VAR = index [ - len ( color2ind ) : ]", "VAR = { STRING : { STRING : { STRING : { STRING : { STRING : [ NUMBER , NUMBER , NUMBER ] } , } , } , STRING : { STRING : { STRING : { STRING : [ ] } , } , } , } , } NEWLINE print list ( find_parent_keys ( VAR , STRING ) ) NEWLINE print list ( find_parent_keys ( VAR , STRING ) )", "import sys NEWLINE for VAR in sys . argv : NEWLINE print STRING", "In [ NUMBER ] : df . index = df . index . astype ( str ) NEWLINE In [ NUMBER ] : VAR = StringIO ( ) NEWLINE In [ NUMBER ] : df . to_csv ( VAR , quoting = NUMBER ) NEWLINE In [ NUMBER ] : VAR . getvalue ( ) NEWLINE Out [ NUMBER ] : STRING", ">> > VAR = [ STRING , STRING , None , STRING ] NEWLINE >> > VAR , VAR = [ VAR if VAR is None else VAR . split ( STRING ) [ NUMBER ] for VAR in VAR ] , [ VAR if VAR is None else VAR . split ( STRING ) [ NUMBER ] for VAR in VAR ] NEWLINE >> > VAR NEWLINE [ STRING , STRING , None , STRING ] NEWLINE >> > VAR NEWLINE [ STRING , STRING , None , STRING ]", "hashlookup : NUMBER s NUMBER % NEWLINE lookup : NUMBER s NUMBER % NEWLINE stringcount : NUMBER s NUMBER % NEWLINE unrolled_bitwise : NUMBER s NUMBER % NEWLINE log_e : NUMBER s NUMBER % NEWLINE bitcounter : NUMBER s NUMBER % NEWLINE log_2 : NUMBER s NUMBER % NEWLINE ilog : NUMBER s NUMBER % NEWLINE bitwise : NUMBER s NUMBER % NEWLINE olgn : NUMBER s NUMBER %", "class Wrapper : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE def __call__ ( VAR , * args , ** kwargs ) : NEWLINE VAR . VAR . _func ( VAR . VAR , * args , ** kwargs ) NEWLINE @ property NEWLINE def remaining ( VAR ) : NEWLINE", "STRING : ( Country1 : Germany , Country2 : France , Country3 : Italy ) NEWLINE STRING : ( Country1 : India , Country2 : China , Country3 : Malaysia )", "def foo ( * mylist ) : NEWLINE bar ( STRING , * mylist ) NEWLINE def bar ( * vals ) : NEWLINE print STRING . join ( vals ) NEWLINE foo ( STRING , STRING )", "while currenttime > STRING and currenttime < STRING :", "class MainWindow ( QMainWindow ) : NEWLINE def __init__ ( VAR ) : NEWLINE QMainWindow . __init__ ( VAR ) NEWLINE uic . loadUi ( STRING , VAR ) NEWLINE VAR = MainWindow ( )", "def increment_invoice_number ( ) : NEWLINE VAR = Invoice . objects . all ( ) . order_by ( STRING ) . last ( ) NEWLINE if not VAR : NEWLINE return STRING NEWLINE VAR = VAR . VAR NEWLINE VAR = int ( VAR . split ( STRING ) [ - NUMBER ] ) NEWLINE VAR = VAR + NUMBER NEWLINE VAR = STRING + str ( VAR ) NEWLINE return VAR", "VAR = re . compile ( STRING ) NEWLINE def getParens ( VAR ) : NEWLINE return VAR . findall ( VAR )", "from PyQt4 import QtCore , QtGui , Qt NEWLINE import cPickle NEWLINE import pickle", "vode adams jac = None len ( tvals ) = NUMBER NEWLINE vode adams jac = jac len ( tvals ) = NUMBER NEWLINE vode bdf jac = None len ( tvals ) = NUMBER NEWLINE vode bdf jac = jac len ( tvals ) = NUMBER NEWLINE lsoda jac = None len ( tvals ) = NUMBER NEWLINE lsoda jac = jac len ( tvals ) = NUMBER", "import time NEWLINE VAR = time . time ( ) NEWLINE while True : NEWLINE VAR += NUMBER NEWLINE print STRING , NEWLINE for VAR in range ( NUMBER ) : NEWLINE time . sleep ( NUMBER ) NEWLINE print VAR , NEWLINE if time . time ( ) > VAR : NEWLINE break NEWLINE print STRING NEWLINE while time . time ( ) < VAR : NEWLINE time . sleep ( NUMBER )", "import matplotlib NEWLINE matplotlib . use ( STRING ) NEWLINE matplotlib . rcParams [ STRING ] = STRING NEWLINE from matplotlib . backends . backend_qt4agg import ( FigureCanvasQTAgg as FigureCanvas , NavigationToolbar2QT as NavigationToolbar ) NEWLINE from matplotlib . figure import Figure NEWLINE from PySide import QtGui , QtCore NEWLINE import random NEWLINE from weakref import proxy NEWLINE from VAR import Ui_Form NEWLINE class Plotter ( FigureCanvas ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR . VAR = proxy ( VAR ) NEWLINE VAR = [ random . random ( ) for VAR in range ( NUMBER ) ] NEWLINE VAR = Figure ( ) NEWLINE super ( Plotter , VAR ) . __init__ ( VAR ) NEWLINE VAR . axes = VAR . add_subplot ( NUMBER ) NEWLINE VAR . axes . hold ( False ) NEWLINE VAR . axes . plot ( VAR , STRING ) NEWLINE def binding_plotter_with_ui ( VAR ) : NEWLINE VAR . VAR . vLayout . insertWidget ( NUMBER , VAR ) NEWLINE if __name__ == STRING : NEWLINE import sys NEWLINE VAR = QtGui . QApplication ( sys . argv ) NEWLINE VAR = QtGui . QWidget ( ) NEWLINE VAR = Ui_Form ( ) NEWLINE VAR . setupUi ( VAR ) NEWLINE VAR = Plotter ( VAR ) NEWLINE VAR . binding_plotter_with_ui ( ) NEWLINE VAR = Plotter ( VAR ) NEWLINE VAR . binding_plotter_with_ui ( ) NEWLINE VAR . show ( ) NEWLINE sys . exit ( VAR . exec_ ( ) )", "NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER s per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER s per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER s per loop", "import socket NEWLINE from time import sleep NEWLINE VAR = socket . socket ( ) NEWLINE VAR . connect ( ( STRING , NUMBER ) ) NEWLINE VAR . send ( STRING ) NEWLINE sleep ( NUMBER ) NEWLINE VAR . send ( STRING )", ">> > a [ rows , cols ] = NUMBER NEWLINE >> > a NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > a [ rows , cols ] = np . array ( [ - NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER ] ) NEWLINE >> > a NEWLINE array ( [ [ - NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , - NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER ] , [ NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = str . maketrans ( { STRING : None } ) NEWLINE from binascii import unhexlify NEWLINE unhexlify ( u . translate ( VAR ) ) NEWLINE Out [ NUMBER ] : STRING", ">> > for VAR in User . objects . all ( ) : NEWLINE . . . try : NEWLINE . . . UserProfile ( user = VAR ) . save ( ) NEWLINE . . . except : NEWLINE . . . pass", "VAR = open ( os . path . join ( os . path . dirname ( __file__ ) , STRING ) ) . read ( )", "[ STRING , STRING , STRING , STRING , STRING ]", "import collections NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . readlines ( ) NEWLINE VAR = [ VAR . strip ( ) for VAR in VAR ] NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = collections . OrderedDict ( ) NEWLINE for VAR in VAR : NEWLINE if VAR . find ( STRING ) > - NUMBER : NEWLINE VAR += NUMBER NEWLINE elif VAR . find ( STRING ) > - NUMBER : NEWLINE VAR = NUMBER NEWLINE else : NEWLINE VAR += NUMBER NEWLINE VAR = STRING . format ( VAR , VAR ) NEWLINE VAR = VAR . split ( ) [ NUMBER ] NEWLINE VAR [ VAR ] = VAR NEWLINE print ( VAR )", "VAR = s1 [ : s . rfind ( STRING ) ]", ">> > import gconf NEWLINE >> > VAR = gconf . Client ( ) NEWLINE >> > NEWLINE >> > VAR = VAR . get ( STRING ) NEWLINE >> > VAR . type NEWLINE < enum GCONF_VALUE_STRING of type GConfValueType > NEWLINE >> > VAR . get_string ( ) NEWLINE STRING", "VAR = NUMBER / ( NUMBER * sigma ^ NUMBER ) NEWLINE VAR = mu / ( NUMBER * sigma ^ NUMBER ) NEWLINE VAR = mu ^ NUMBER / sigma ^ NUMBER + ln ( height )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE print VAR . count ( NUMBER )", "VAR = STRING NEWLINE globals ( ) [ VAR ] = dict ( )", "df [ STRING ] = ( df [ STRING ] - df [ STRING ] ) / NUMBER", "def print_table ( VAR = NUMBER ) : NEWLINE for VAR in range ( NUMBER , VAR + NUMBER ) : NEWLINE print_multiples ( VAR )", "if __name__ == STRING : NEWLINE VAR = Circle ( x = NUMBER , y = NUMBER , r = NUMBER ) NEWLINE print ( STRING , VAR . circumference ) NEWLINE print ( STRING ) NEWLINE VAR . circumference = NUMBER", "In [ NUMBER ] : catalog = [ ( VAR , VAR + NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE In [ NUMBER ] : def with_zip ( ) : NEWLINE . . . : return zip ( * catalog ) NEWLINE . . . : NEWLINE In [ NUMBER ] : def without_zip ( ) : NEWLINE . . . : names , vals = [ ] , [ ] NEWLINE . . . : for VAR , VAR in catalog : NEWLINE . . . : names . append ( VAR ) NEWLINE . . . : vals . append ( VAR ) NEWLINE . . . : return names , vals NEWLINE . . . : NEWLINE In [ NUMBER ] : % timeit with_zip ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % timeit without_zip ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = [ { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER } ] NEWLINE for VAR in VAR [ NUMBER ] : NEWLINE if VAR in VAR [ NUMBER ] ] : NEWLINE print VAR", "VAR = re . compile ( STRING )", "Code NEWLINE import numpy as np NEWLINE class CustomIndexTable : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = np . array ( VAR , dtype = object ) NEWLINE VAR . VAR = VAR . VAR . reshape ( ( len ( VAR ) , len ( VAR ) ) ) NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE VAR , VAR = VAR [ : NUMBER ] , VAR [ NUMBER : ] NEWLINE return VAR . VAR [ VAR . VAR . VAR ( VAR ) , VAR . VAR . VAR ( VAR ) ] NEWLINE def __setitem__ ( VAR , VAR , VAR ) : NEWLINE VAR , VAR = VAR [ : NUMBER ] , VAR [ NUMBER : ] NEWLINE VAR . VAR [ VAR . VAR . VAR ( VAR ) , VAR . VAR . VAR ( VAR ) ] = VAR NEWLINE def _where ( VAR , VAR ) : NEWLINE VAR , VAR = np . where ( VAR . VAR == VAR ) NEWLINE return VAR . VAR [ VAR ] + VAR . VAR [ VAR ] NEWLINE def transpose ( VAR ) : NEWLINE VAR . VAR , VAR . VAR = VAR . VAR , VAR . VAR NEWLINE VAR . VAR = VAR . VAR . T NEWLINE def where ( VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = NUMBER NEWLINE for VAR in xrange ( NUMBER , len ( VAR ) + NUMBER ) : NEWLINE if VAR [ VAR : VAR ] in VAR . VAR : NEWLINE VAR . append ( VAR [ VAR : VAR ] ) NEWLINE VAR = VAR NEWLINE return STRING . join ( VAR . _where ( VAR ) for VAR in VAR ) NEWLINE def input_matrix_data ( VAR ) : NEWLINE return raw_input ( VAR ) . split ( ) NEWLINE VAR = input_matrix_data ( STRING ) NEWLINE VAR = input_matrix_data ( STRING ) NEWLINE VAR = input_matrix_data ( STRING ) NEWLINE VAR = CustomIndexTable ( VAR , VAR , VAR )", "from random import randint NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE VAR = randint ( NUMBER , len ( VAR ) - NUMBER ) NEWLINE del VAR [ VAR ] NEWLINE del VAR [ VAR ]", ">> > range ( NUMBER , len ( data ) , NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "pot . do_slot_assign ( STRING , ts )", "import os NEWLINE os . environ . setdefault ( STRING , STRING ) NEWLINE from myapp . models import Stuff NEWLINE", "def foo ( ) : NEWLINE return STRING , NUMBER NEWLINE VAR , VAR = foo ( )", "VAR = STRING . format ( grab_date )", "[ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ]", "exclusive excl INT <= YES YES NUMBER NUMBER", "$ ( STRING ) . bind ( STRING , function ( ) { $ . post ( STRING , { name : STRING // Any example parameter that is to be passed to the view function . } , function ( data , textStatus ) { // Callback function on success } ) ; } ) ;", "VAR = { STRING : [ STRING . format ( VAR ) for VAR in list ( range ( NUMBER ) ) ] , STRING : [ STRING . format ( VAR ) for VAR in list ( range ( NUMBER , NUMBER ) ) ] } NEWLINE { STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] }", "[ NUMBER , NUMBER , NUMBER , NUMBER ]", "from itertools import groupby NEWLINE def key ( VAR ) : NEWLINE return [ int ( VAR ) for VAR in VAR [ NUMBER ] . split ( ) [ : NUMBER ] ] NEWLINE VAR = [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] NEWLINE for VAR , VAR in groupby ( VAR , key = key ) : NEWLINE print STRING . join ( VAR [ NUMBER ] for VAR in VAR ) + STRING + STRING . join ( str ( VAR ) for VAR in VAR )", ">> > print result_squares . get ( timeout = NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > print result_cubes . get ( timeout = NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = [ VAR [ NUMBER ] [ NUMBER ] for VAR in e ]", "[ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ]", "for VAR in range ( NUMBER , NUMBER ) : NEWLINE for VAR in models . InOut . objects . filter ( Q ( in_dt__month = VAR ) and ~ Q ( out_dt__month = VAR ) ) NEWLINE VAR = VAR . in_dt . VAR NEWLINE VAR = ( VAR % NUMBER ) + NUMBER NEWLINE VAR = datetime ( VAR , VAR , calendar . monthrange ( VAR , VAR ) [ NUMBER ] , NUMBER , NUMBER , NUMBER , NUMBER , tz ) NEWLINE VAR = datetime ( VAR , VAR , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , tz ) NEWLINE models . InOut . objects . bulk_create ( [ models . InOut ( user = VAR . user , in_dt = VAR . in_dt , out_dt = VAR ) , models . InOut ( user = VAR . user , in_dt = VAR , out_dt = VAR . out_dt ) ] ) NEWLINE VAR . delete ( )", "import sqlite3 NEWLINE def insert_or_replace ( ) : NEWLINE VAR = sqlite3 . connect ( STRING ) NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR . execute ( STRING ) NEWLINE VAR . execute ( STRING , ( NUMBER , NUMBER ) ) NEWLINE VAR . execute ( STRING , ( NUMBER , NUMBER ) ) NEWLINE VAR . execute ( STRING ) NEWLINE VAR = VAR . fetchall ( ) NEWLINE print ( VAR ) NEWLINE def on_conflict ( ) : NEWLINE VAR = sqlite3 . connect ( STRING ) NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR . execute ( STRING ) NEWLINE VAR . execute ( STRING , ( NUMBER , NUMBER ) ) NEWLINE VAR . execute ( STRING , ( NUMBER , NUMBER ) ) NEWLINE VAR . execute ( STRING ) NEWLINE VAR = VAR . fetchall ( ) NEWLINE print ( VAR ) NEWLINE insert_or_replace ( ) NEWLINE on_conflict ( )", "import unicodedata as ud NEWLINE VAR = STRING . join ( unichr ( VAR ) for VAR in xrange ( NUMBER ) ) NEWLINE VAR = STRING . join ( VAR for VAR in VAR if ud . category ( VAR ) == STRING or ud . category ( VAR ) == STRING )", "Loading brown corpus took NUMBER NEWLINE Sentence tokenizing corpus took NUMBER NEWLINE Word tokenizing corpus took NUMBER NEWLINE Loading and tokenizing corpus took NUMBER NEWLINE Tagging sentence by sentence took NUMBER NEWLINE Tagging sentences by batch took NUMBER", "assert np . allclose ( expected [ STRING ] . dropna ( ) , result [ STRING ] . dropna ( ) )", "using_filters : NUMBER NEWLINE using_eight_shifts : NUMBER NEWLINE using_quadratic_loop : NUMBER", "SELECT * FROM things WHERE name like STRING", "bool_list [ : ] = [ False ] * len ( bool_list )", "import random NEWLINE def add ( VAR , VAR , VAR ) : NEWLINE while VAR : NEWLINE VAR = random . randrange ( len ( VAR ) ) NEWLINE VAR = random . randrange ( len ( VAR [ NUMBER ] ) ) NEWLINE if world [ VAR ] [ VAR ] == STRING : NEWLINE world [ VAR ] [ VAR ] = VAR NEWLINE VAR -= NUMBER", "import numpy as np NEWLINE from scipy . optimize import curve_fit NEWLINE from pylab import * NEWLINE def myFunc ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = VAR * VAR - ( ( VAR - VAR ) * ( NUMBER - np . exp ( - VAR * VAR ) ) / VAR ) NEWLINE return VAR NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = myFunc ( VAR , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = VAR + NUMBER * np . random . normal ( size = len ( VAR ) ) NEWLINE VAR , VAR = curve_fit ( myFunc , VAR , VAR ) NEWLINE print VAR NEWLINE print VAR NEWLINE clf ( ) NEWLINE plot ( VAR , VAR , STRING ) NEWLINE plot ( VAR , myFunc ( VAR , VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] ) ) NEWLINE grid ( True ) NEWLINE show ( )", "def isSquare ( VAR ) : NEWLINE if VAR == NUMBER : NEWLINE return True NEWLINE VAR = NUMBER NEWLINE VAR = VAR // NUMBER NEWLINE VAR = VAR NEWLINE while VAR * VAR != VAR : NEWLINE VAR = ( VAR + VAR ) // NUMBER NEWLINE if VAR + NUMBER >= VAR : NEWLINE return False NEWLINE if VAR * VAR > VAR : NEWLINE VAR = VAR NEWLINE else : NEWLINE VAR = VAR NEWLINE return True", "df_total_data [ df_total_data [ STRING ] . apply ( lambda VAR : STRING not in VAR ) ]", "Case NUMBER : you want to open the file in Python NEWLINE from pyPdf import PdfFileReader , PageObject NEWLINE VAR = PdfFileReader ( path_to_your_pdf ) NEWLINE VAR = VAR . getPage ( NUMBER ) NEWLINE print VAR . extractText ( )", "[ NUMBER NUMBER ]", "VAR = the_list NEWLINE VAR += [ NUMBER ] * ( - len ( VAR ) % NUMBER ) NEWLINE VAR = [ VAR [ VAR : VAR + NUMBER ] for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) ]", "VAR = open ( STRING , STRING ) NEWLINE for VAR in lines : NEWLINE VAR , VAR = VAR . split ( STRING ) ; NEWLINE VAR . write ( STRING % VAR ) NEWLINE VAR . close ( ) NEWLINE text_file . close ( )", "def create_grid ( * commands ) : NEWLINE VAR = subprocess . Popen ( [ STRING ] , stdin = subprocess . PIPE ) NEWLINE VAR . communicate ( STRING . join ( commands ) + STRING )", "( STRING , STRING ) ( STRING , STRING ) NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER", "proc . pid", "VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR = [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ]", "VAR = tuple ( lst )", ">> > from jwkest import long_to_base64 NEWLINE >> > long_to_base64 ( NUMBER ) NEWLINE STRING", ">> > dd NEWLINE defaultdict ( < type STRING > , { ( STRING , STRING ) : [ NUMBER ] , ( STRING , STRING ) : [ NUMBER , NUMBER ] , ( STRING , STRING ) : [ NUMBER , NUMBER , NUMBER ] } )", "VAR = open ( STRING ) NEWLINE VAR = { VAR [ : NUMBER ] : VAR [ NUMBER : ] . split ( ) for VAR in VAR } NEWLINE print VAR NEWLINE VAR . close ( )", "In [ NUMBER ] : % timeit testing [ STRING ] = [ VAR . replace ( VAR , STRING ) for VAR , VAR in zip ( testing . FULL_NAME . astype ( STRING ) , testing . NAME . astype ( STRING ) ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "{ STRING : STRING , STRING : lambda VAR : VAR }", "@ asyncio . coroutine NEWLINE def hello_world ( VAR ) : NEWLINE print ( STRING ) NEWLINE yield from asyncio . sleep ( NUMBER , VAR = VAR ) NEWLINE print ( STRING ) NEWLINE VAR . stop ( )", "import tokenize NEWLINE from itertools import count NEWLINE import re NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = [ ] NEWLINE VAR = tokenize . generate_tokens ( VAR . readline ) NEWLINE for VAR , VAR in ( VAR [ : NUMBER ] for VAR in VAR ) : NEWLINE if VAR == tokenize . STRING : NEWLINE VAR = re . sub ( STRING , lambda VAR , VAR = count ( ) : STRING . format ( next ( VAR ) ) , VAR ) NEWLINE VAR . append ( ( VAR , VAR ) ) NEWLINE print tokenize . untokenize ( VAR )", ">> > int ( age . days / NUMBER ) NEWLINE NUMBER", "f . write ( struct . pack ( STRING , random . randint ( NUMBER , sys . maxint * NUMBER + NUMBER ) ) )", "[ ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) ]", "from PyQt4 . QtCore import * NEWLINE from PyQt4 . QtGui import * NEWLINE import sys NEWLINE class Model ( QAbstractTableModel ) : NEWLINE def __init__ ( VAR , VAR = None , * args ) : NEWLINE QAbstractTableModel . __init__ ( VAR , VAR , * args ) NEWLINE VAR . items = [ STRING , STRING , STRING , STRING ] NEWLINE def rowCount ( VAR , VAR = QModelIndex ( ) ) : NEWLINE return len ( VAR . items ) NEWLINE def columnCount ( VAR , VAR = QModelIndex ( ) ) : NEWLINE return NUMBER NEWLINE def data ( VAR , VAR , VAR ) : NEWLINE if not VAR . isValid ( ) : return QVariant ( ) NEWLINE elif VAR != Qt . DisplayRole : NEWLINE return QVariant ( ) NEWLINE VAR = VAR . VAR ( ) NEWLINE if VAR < len ( VAR . items ) : NEWLINE return QVariant ( VAR . items [ VAR ] ) NEWLINE else : NEWLINE return QVariant ( ) NEWLINE class Proxy ( QSortFilterProxyModel ) : NEWLINE def __init__ ( VAR ) : NEWLINE super ( Proxy , VAR ) . __init__ ( ) NEWLINE VAR . filterActive = False NEWLINE def setView ( VAR , VAR ) : NEWLINE VAR . _view = VAR NEWLINE def filterAcceptsRow ( VAR , VAR , VAR ) : NEWLINE if VAR . filterActive and STRING in VAR . sourceModel ( ) . data ( VAR . sourceModel ( ) . VAR ( VAR , NUMBER ) , Qt . DisplayRole ) . toPyObject ( ) : NEWLINE VAR . _view . selectRow ( VAR ) NEWLINE return True NEWLINE class MyWindow ( QWidget ) : NEWLINE def __init__ ( VAR , * args ) : NEWLINE QWidget . __init__ ( VAR , * args ) NEWLINE VAR = Model ( VAR ) NEWLINE VAR = Proxy ( ) NEWLINE VAR . setSourceModel ( VAR ) NEWLINE VAR . tableview = QTableView ( VAR ) NEWLINE VAR . tableview . setModel ( VAR ) NEWLINE VAR . tableview . horizontalHeader ( ) . setStretchLastSection ( True ) NEWLINE VAR . tableview . setSelectionMode ( QAbstractItemView . MultiSelection ) NEWLINE VAR . setView ( VAR . tableview ) NEWLINE VAR = QPushButton ( VAR ) NEWLINE VAR . setText ( STRING ) NEWLINE VAR . clicked . connect ( VAR . clicked ) NEWLINE VAR = QVBoxLayout ( VAR ) NEWLINE VAR . addWidget ( VAR . tableview ) NEWLINE VAR . addWidget ( VAR ) NEWLINE VAR . setLayout ( VAR ) NEWLINE def clicked ( VAR , VAR ) : NEWLINE VAR = VAR . tableview . model ( ) NEWLINE VAR . tableview . clearSelection ( ) NEWLINE VAR . filterActive = True NEWLINE VAR . invalidateFilter ( ) NEWLINE if __name__ == STRING : NEWLINE VAR = QApplication ( sys . argv ) NEWLINE VAR = MyWindow ( ) NEWLINE VAR . show ( ) NEWLINE sys . exit ( VAR . exec_ ( ) )", "Kazakhstan KZ NEWLINE Ukraine UA", "import rdflib NEWLINE VAR = rdflib . namespace . VAR NEWLINE VAR = rdflib . Graph ( ) NEWLINE VAR . parse ( STRING ) NEWLINE print STRING , len ( VAR ) NEWLINE VAR = rdflib . Namespace ( STRING ) NEWLINE VAR = rdflib . Namespace ( STRING ) NEWLINE VAR = NUMBER NEWLINE VAR = rdflib . term . URIRef ( STRING ) NEWLINE for VAR in VAR . triples ( ( VAR , VAR [ STRING ] , None ) ) : NEWLINE VAR = filter ( lambda VAR : VAR [ STRING ] != VAR [ NUMBER ] , VAR . triples ( ( VAR [ NUMBER ] , None , None ) ) ) NEWLINE VAR = sorted ( VAR , key = lambda VAR : int ( VAR [ NUMBER ] [ NUMBER : ] ) ) NEWLINE for VAR in VAR : NEWLINE for VAR in VAR . triples ( ( VAR [ NUMBER ] , VAR [ STRING ] , None ) ) : NEWLINE VAR = VAR [ NUMBER ] NEWLINE for VAR in VAR . triples ( ( VAR [ NUMBER ] , VAR [ STRING ] , None ) ) : NEWLINE VAR = VAR [ NUMBER ] NEWLINE print STRING % ( VAR , VAR , VAR ) NEWLINE VAR += NUMBER", "from mechanize import Browser NEWLINE VAR = Browser ( ) NEWLINE VAR = VAR . open ( STRING ) NEWLINE if VAR . code == NUMBER : NEWLINE for VAR in VAR . links ( ) : NEWLINE print VAR NEWLINE else : NEWLINE print STRING", ">> > VAR = [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] NEWLINE >> > sorted ( VAR , key = lambda VAR : ( - ord ( VAR [ NUMBER ] ) , VAR [ NUMBER ] ) ) NEWLINE [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ]", "VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = VAR [ NUMBER ] + STRING + VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = [ STRING ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR == STRING : NEWLINE VAR . append ( STRING . format ( VAR , VAR [ VAR ] ) ) NEWLINE VAR = STRING . join ( VAR ) NEWLINE open ( STRING , STRING ) . write ( STRING . join ( [ VAR , VAR , VAR ] ) )", ">> > re . sub ( STRING , STRING , s ) NEWLINE STRING", ">> > print mydict [ STRING ] NEWLINE [ STRING , STRING ]", ">> > for VAR in List : NEWLINE . . . print ( STRING . join ( [ VAR for VAR in VAR ] ) , STRING )", "export PYTHONSTARTUP = $ HOME / myproject / . pystartup NEWLINE python ~ / myproject / start . py", "myMatPlotView . selectionchanged . connect ( myTableView . matplotSelected )", ">> > import re NEWLINE >> > VAR = re . compile ( STRING ) NEWLINE >> > VAR . search ( STRING ) . groups ( ) NEWLINE ( STRING , STRING ) NEWLINE >> > VAR . search ( STRING ) . groups ( ) NEWLINE ( STRING , STRING )", "user . get_profile ( ) . location .", "VAR = [ [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR = [ [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR = { VAR [ NUMBER ] : VAR for VAR in VAR } NEWLINE VAR = { VAR [ NUMBER ] : VAR for VAR in VAR } NEWLINE print ( [ VAR [ VAR ] for VAR in VAR . keys ( ) - VAR ] ) NEWLINE print ( [ VAR [ VAR ] for VAR in VAR . keys ( ) - VAR ] )", "% module mymod NEWLINE % { % } NEWLINE % include STRING", ">> > VAR , VAR = np . meshgrid ( np . linspace ( NUMBER , NUMBER , NUMBER ) , np . linspace ( NUMBER , NUMBER , NUMBER ) ) NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = max ( d [ STRING ] )", "VAR = re . compile ( STRING ) NEWLINE VAR . match ( x ) . groups ( )", "NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", "for VAR in solution ( ) : NEWLINE print ( VAR , end = STRING )", "class Weapon ( object ) : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE def __gt__ ( VAR , VAR ) : NEWLINE return VAR . VAR in VAR . VAR", "** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** ** * NEWLINE ** ** ** NEWLINE", "VAR = pd . DataFrame ( vals , columns = df . columns ) NEWLINE VAR . to_dict ( orient = STRING ) NEWLINE [ { STRING : NUMBER , STRING : nan , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ]", "create table testins ( foo int , bar int , baz int )", "VAR = camera . reverse ( pygame . mouse . get_pos ( ) ) NEWLINE if hit_block : NEWLINE replace_block ( VAR )", "STRING . format ( num )", "self . Button = Tkinter . Button ( self , text = STRING , command = self . display_next )", "def c ( ) : NEWLINE class Clone ( object ) : NEWLINE pass NEWLINE return Clone NEWLINE VAR = c ( ) NEWLINE VAR = c ( ) NEWLINE print id ( VAR ) NEWLINE print id ( VAR )", "foo NEWLINE bar NEWLINE NUMBER foo", ">> > from collections import Counter NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = Counter ( VAR ) NEWLINE >> > VAR [ STRING ] NEWLINE NUMBER", "VAR = [ STRING , STRING , STRING ] NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER , len ( VAR ) ) : NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = [ ] NEWLINE if VAR != NUMBER : NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR . append ( VAR [ - NUMBER ] . strip ( ) ) NEWLINE VAR . append ( VAR [ - NUMBER ] . strip ( ) ) NEWLINE VAR . append ( tuple ( VAR ) ) NEWLINE print VAR", "VAR = np . zeros ( grid_shape ) NEWLINE VAR = VAR . ravel ( ) NEWLINE VAR [ idx ] = np . arange ( N ) NEWLINE print ( VAR ) NEWLINE", "VAR = [ [ VAR . get ( STRING ) for VAR in VAR ] for VAR in df . misc ] NEWLINE VAR = list ( set ( [ VAR for VAR in VAR for VAR in VAR ] ) ) NEWLINE for VAR in VAR : NEWLINE df [ VAR ] = NUMBER", "pcolor ( D2 - D1 )", "VAR = as_class ( ) NEWLINE for VAR , VAR in dict_expr . items ( ) : NEWLINE VAR . __setitem__ ( VAR , VAR )", "print df NEWLINE a NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE print df . values NEWLINE [ [ NUMBER ] [ NUMBER ] [ NUMBER ] [ NUMBER ] [ NUMBER ] [ NUMBER ] ] NEWLINE print df . iloc [ : , NUMBER ] . tolist ( ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = STRING NEWLINE VAR = STRING . format ( VAR = VAR )", "VAR = dict ( zip ( RANKS , zip ( VALUES , range ( len ( VALUES ) ) ) ) )", "public interface Func < In , Out > { public Out apply ( In in ) ; }", "TestingThisWordlistWithReturnsBetweenLines", "for VAR , VAR in PointsOfInterest . iteritems ( ) : NEWLINE if VAR in mypkt . Text : NEWLINE PointsOfInterest [ VAR ] [ NUMBER ] = PointsOfInterest [ VAR ] [ NUMBER ] + NUMBER", "{ % for VAR , VAR in by_date % } < div > NEWLINE < p > { { VAR . isoformat ( ) } } < / p > NEWLINE { % for VAR in VAR % } < div > NEWLINE { { VAR . title } } NEWLINE . . . NEWLINE < / div > { % endfor % } NEWLINE < / div > { % endfor % }", ">> > def my_splitext ( VAR ) : NEWLINE . . . STRING NEWLINE . . . VAR = [ ] NEWLINE . . . VAR = os . VAR . join ( os . VAR . dirname ( VAR ) , os . VAR . basename ( VAR ) . split ( os . extsep ) [ NUMBER ] ) NEWLINE . . . VAR = os . VAR . basename ( VAR ) . split ( os . extsep ) [ NUMBER : ] NEWLINE . . . VAR . append ( VAR ) NEWLINE . . . NEWLINE . . . VAR . extend ( VAR ) NEWLINE . . . return VAR NEWLINE . . . NEWLINE >> > my_splitext ( STRING ) NEWLINE [ STRING , STRING , STRING ]", "SELECT ` sentence_id ` , ` word_id ` FROM ` sentences_words ` NEWLINE WHERE ` word_id ` IN ( [ here goes list of words ' ids ] ) ;", "[ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "{ STRING : STRING }", "import logging NEWLINE class ContextFilter ( logging . Filter ) : NEWLINE def filter ( VAR , VAR ) : NEWLINE VAR . count = VAR NEWLINE return True NEWLINE logging . basicConfig ( level = logging . DEBUG , format = STRING ) NEWLINE VAR = logging . getLogger ( __name__ ) NEWLINE VAR . addFilter ( ContextFilter ( ) ) NEWLINE VAR = NUMBER NEWLINE VAR . debug ( STRING ) NEWLINE VAR += NUMBER NEWLINE VAR . warning ( STRING )", "VAR = theta2 ( NUMBER ) + theta2 ( NUMBER ) * L2 ( NUMBER ) + theta2 ( NUMBER ) * L2 ( NUMBER ) + theta2 ( NUMBER ) * L2 ( NUMBER ) NEWLINE dZ3 / dtheta2 ( NUMBER ) = NUMBER NEWLINE dZ3 / dtheta2 ( NUMBER ) = L2 ( NUMBER ) NEWLINE dZ3 / dtheta2 ( NUMBER ) = L2 ( NUMBER ) NEWLINE dZ3 / dtheta2 ( NUMBER ) = L2 ( NUMBER )", "VAR = { STRING : STRING , STRING : STRING } NEWLINE with open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE if any ( VAR in VAR for VAR in VAR . values ( ) ) : NEWLINE VAR . write ( VAR )", "from selenium import webdriver NEWLINE VAR = webdriver . Firefox ( ) NEWLINE VAR . get ( STRING ) NEWLINE VAR = VAR . find_element_by_css_selector ( STRING ) NEWLINE VAR . execute_script ( STRING , VAR , STRING )", "> zero_crossings NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "from django . contrib . auth . models import User NEWLINE def unique_rand ( ) : NEWLINE while True : NEWLINE VAR = VAR = User . objects . make_random_password ( length = NUMBER ) NEWLINE if not Person . objects . filter ( VAR = VAR ) . exists ( ) : NEWLINE return VAR NEWLINE class Person ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER , unique = True , default = unique_rand )", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "from collections import defaultdict : NEWLINE VAR = defaultdict ( int ) NEWLINE for VAR , VAR in original . iteritems ( ) : NEWLINE VAR [ VAR [ NUMBER ] . upper ( ) ] += VAR", "LAT LONG NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER - NUMBER NEWLINE NUMBER NUMBER", "int main ( int argc , char ** argv ) NEWLINE { assert ( argc == NUMBER ) ; assert ( argv [ NUMBER ] == std : : string ( STRING ) ; assert ( argv [ NUMBER ] == std : : string ( STRING ) ; }", "SELECT t3 . alt_bilesen NEWLINE FROM urunler_seviyeler t1 NEWLINE JOIN urunler_seviyeler t2 ON t2 . parcano = t1 . alt_bilesen NEWLINE JOIN urunler_seviyeler t3 ON t3 . parcano = t2 . alt_bilesen NEWLINE WHERE t1 . parcano = STRING", "import numpy as np NEWLINE def calc_combination ( VAR , VAR , VAR , VAR , VAR , VAR ) : NEWLINE VAR = VAR [ ( VAR >= NUMBER ) & ( VAR <= VAR ) ] NEWLINE VAR = VAR [ ( VAR >= NUMBER ) & ( VAR <= VAR ) ] NEWLINE VAR = VAR * VAR + VAR NEWLINE VAR = VAR . reshape ( VAR . shape [ NUMBER ] , NUMBER ) - VAR . reshape ( NUMBER , VAR . shape [ NUMBER ] ) NEWLINE VAR = np . argwhere ( VAR >= NUMBER ) NEWLINE VAR = zip ( VAR [ VAR [ : , NUMBER ] ] , VAR [ VAR [ : , NUMBER ] ] ) NEWLINE return VAR NEWLINE def test_case ( ) : NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . arange ( VAR + NUMBER ) NEWLINE VAR = np . arange ( VAR + NUMBER ) NEWLINE assert ( calc_combination ( VAR , VAR , VAR , VAR , VAR , VAR ) == [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] ) NEWLINE test_case ( )", "def debug ( VAR ) : NEWLINE print VAR NEWLINE return STRING NEWLINE environment . filters [ STRING ] = debug", "VAR = ElementTree . parse ( STRING ) NEWLINE VAR = VAR . getroot ( ) NEWLINE VAR = XmlDictConfig ( VAR )", ">> > re . split ( STRING , STRING ) NEWLINE [ STRING ]", "In [ NUMBER ] : VAR = df . groupby ( [ STRING , STRING ] ) . max ( ) NEWLINE In [ NUMBER ] : VAR = VAR [ VAR . val <= NUMBER ] NEWLINE In [ NUMBER ] : NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE val NEWLINE category sensitivity_level NEWLINE VAR A NUMBER NEWLINE B NUMBER NEWLINE y A NUMBER NEWLINE In [ NUMBER ] : VAR . reset_index ( STRING ) . sort_index ( ascending = False ) . groupby ( level = STRING ) . first ( ) NEWLINE Out [ NUMBER ] : NEWLINE category val NEWLINE sensitivity_level NEWLINE A y NUMBER NEWLINE B VAR NUMBER", "VAR = urllib . unquote ( s ) . decode ( STRING )", "[ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ]", ">> > res . sort ( key = lambda VAR : VAR [ STRING ] ) NEWLINE >> > res NEWLINE [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ]", "NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE interp_checked NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE scipy_interpn NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE Output allclose : NEWLINE [ True , True , True ]", "[ STRING , STRING , STRING , STRING , STRING ]", "casp . run ( function ( ) { } ) ;", "from datetime import datetime , timedelta NEWLINE from dateutil import tz NEWLINE VAR = tz . gettz ( STRING ) NEWLINE def _to_datetime ( VAR , VAR ) : NEWLINE VAR = STRING . format ( VAR , VAR ) NEWLINE return datetime . strptime ( VAR , STRING ) . replace ( tzinfo = VAR ) NEWLINE VAR = _to_datetime ( STRING , STRING ) NEWLINE print ( STRING , VAR ) NEWLINE", "print ( len ( foo . CompleteAnalysis [ STRING ] [ STRING ] ) ) NEWLINE", ">> > print os . getpid ( ) NEWLINE NUMBER NEWLINE >> > os . execl ( STRING , STRING )", "from sqlalchemy import TypeDecorator , type_coerce , String NEWLINE from sqlalchemy . ext . VAR import compiles NEWLINE from sqlalchemy . sql . expression import BinaryExpression NEWLINE import operator NEWLINE class IsDistinctFrom ( BinaryExpression ) : NEWLINE pass NEWLINE @ compiles ( IsDistinctFrom , STRING ) NEWLINE def pg_is_distinct_from ( VAR , VAR , ** kw ) : NEWLINE return STRING % ( VAR . process ( VAR . left , ** kw ) , VAR . process ( VAR . right , ** kw ) , ) NEWLINE @ compiles ( IsDistinctFrom , STRING ) NEWLINE def mysql_is_distinct_from ( VAR , VAR , ** kw ) : NEWLINE return STRING % ( VAR . process ( VAR . left , ** kw ) , VAR . process ( VAR . right , ** kw ) , ) NEWLINE class AdvancedNullComparisons ( TypeDecorator ) : NEWLINE VAR = String NEWLINE class comparator_factory ( TypeDecorator . Comparator ) : NEWLINE def __ne__ ( VAR , VAR ) : NEWLINE VAR = type_coerce ( VAR . VAR , String ) NEWLINE VAR = VAR . _check_literal ( VAR , operator . ne , VAR ) NEWLINE return IsDistinctFrom ( VAR . VAR , VAR , operator . ne )", "def func ( VAR , VAR ) : NEWLINE VAR = set ( tuple ( VAR ) for VAR in VAR for VAR in VAR ) NEWLINE return any ( tuple ( VAR ) in VAR for VAR in VAR )", "A . multiply ( B )", "{ STRING : STRING }", "Palette ( STRING , STRING , name = STRING )", "print ( list ( filter ( lambda VAR : isinstance ( VAR , type ) , ( getattr ( B , VAR ) for VAR in B . members ) ) ) )", "for VAR in sorted ( entries ) : NEWLINE VAR = total_scores [ VAR ] / entries [ VAR ] NEWLINE print ( VAR , VAR )", "[ { V_Ci : k_1 , V_Cf : R_S / ( R_1 + R_S ) , tau : R_1 * R_S * ( C_1 + C_S ) / ( R_1 + R_S ) } ]", "Row NUMBER Col NUMBER - NUMBER != NUMBER", "for VAR in dicta : NEWLINE VAR = VAR [ STRING ] NEWLINE VAR . clear ( ) NEWLINE VAR [ STRING ] = VAR", "return set ( pair ) - [ core ]", "def YYMMDD0FtoYYYYMMDD ( VAR ) : NEWLINE return dt . datetime . strftime ( dt . datetime . strptime ( VAR , STRING ) , STRING )", "In [ NUMBER ] : class A ( object ) : NEWLINE . . . : def __init__ ( VAR ) : NEWLINE . . . : VAR . pairs = ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ) NEWLINE . . . : def __iter__ ( VAR ) : NEWLINE . . . : return iter ( VAR . pairs ) NEWLINE . . . : NEWLINE In [ NUMBER ] : VAR = A ( ) NEWLINE In [ NUMBER ] : dict ( VAR ) NEWLINE Out [ NUMBER ] : { NUMBER : NUMBER , NUMBER : NUMBER }", "{ % for VAR in request . current_page . placeholders % } NEWLINE { { VAR . render } } NEWLINE { % endfor % }", "% NEWLINE - if left justified NEWLINE * or integer - min width ( if STRING , insert variable length in data tuple ) NEWLINE . * or . integer - max width ( if STRING , insert variable length in data tuple )", "import re NEWLINE VAR = STRING NEWLINE VAR = re . findall ( STRING , VAR ) NEWLINE print VAR", "VAR = { VAR : sum ( VAR for VAR in VAR if isinstance ( VAR , int ) ) for VAR , VAR in d . items ( ) }", "import fileinput NEWLINE for VAR in fileinput . input ( filename , inplace = True ) : NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE VAR = int ( VAR ) NEWLINE if some_condition : NEWLINE print STRING . format ( VAR , VAR )", "VAR = NUMBER NEWLINE while VAR < len ( myList ) : NEWLINE if ( myList [ VAR ] . count ( None ) >= NUMBER ) : NEWLINE del myList [ VAR ] NEWLINE else : NEWLINE VAR += NUMBER", "import re NEWLINE VAR = STRING NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = VAR . findall ( VAR ) NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE print VAR NEWLINE VAR [ VAR [ NUMBER ] . strip ( ) ] = VAR [ NUMBER : ] NEWLINE print VAR", "VAR = [ VAR for VAR in VAR if VAR not in dirExclude and not re . search ( exre , VAR ) ]", "VAR = pd . date_range ( start = STRING , end = STRING , freq = STRING ) NEWLINE VAR . name = STRING NEWLINE VAR NEWLINE DatetimeIndex ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , dtype = STRING , name = STRING , freq = STRING , tz = None )", "fabric $ fab hello - H web01 , web02 NEWLINE > [ web01 ] Executing task STRING NEWLINE > [ web01 ] run : hostname NEWLINE > [ web01 ] out : web01 NEWLINE > [ web01 ] out : NEWLINE > [ web02 ] Executing task STRING NEWLINE > [ web02 ] run : hostname NEWLINE > [ web02 ] out : web02 NEWLINE > [ web02 ] out : NEWLINE > NEWLINE > this is at exit command . NEWLINE > NEWLINE > Done .", "from scipy . sparse import csc_matrix NEWLINE from pyspark . mllib . regression import LabeledPoint NEWLINE VAR = csc_matrix ( ( v1 . values , ( v1 . indices , [ NUMBER ] * v1 . numNonzeros ( ) ) ) , shape = ( v1 . size , NUMBER ) ) NEWLINE VAR = csc_matrix ( ( v2 . values , ( v2 . indices , [ NUMBER ] * v2 . numNonzeros ( ) ) ) , shape = ( v2 . size , NUMBER ) ) NEWLINE LabeledPoint ( NUMBER , VAR + VAR )", "def get_buttons_hbox ( VAR ) : NEWLINE VAR = gtk . Label ( STRING ) NEWLINE VAR . add_action_widget ( VAR ) NEWLINE VAR = VAR . get_parent ( ) NEWLINE VAR . remove ( VAR ) NEWLINE return VAR", "print sorted ( my_list , key = key )", "VAR = int ( timeList [ NUMBER ] ) - > NUMBER NEWLINE VAR = int ( timeList [ NUMBER ] ) - > NUMBER NEWLINE VAR = int ( timeList [ NUMBER ] ) - > NUMBER", "VAR = STRING NEWLINE print STRING . join ( [ VAR for VAR in re . split ( STRING , VAR ) if VAR ] )", "VAR = VAR . withColumn ( STRING , split ( VAR . fieldList , STRING ) ) NEWLINE VAR = VAR . withColumn ( STRING , explode ( VAR . temp ) ) NEWLINE VAR = VAR . withColumn ( STRING , split ( VAR . cols , STRING ) ) NEWLINE VAR = VAR . withColumn ( STRING , VAR . col_value [ NUMBER ] ) NEWLINE . withColumn ( STRING , VAR . col_value [ NUMBER ] )", "In [ NUMBER ] : % time a = reduce ( list ( np . arange ( NUMBER ) ) ) NEWLINE CPU times : user NUMBER s , sys : NUMBER s , total : NUMBER s NEWLINE Wall time : NUMBER s NEWLINE In [ NUMBER ] : % time c = np . convolve ( list ( np . arange ( NUMBER ) ) , [ NUMBER , NUMBER ] , mode = STRING ) [ : : NUMBER ] NEWLINE CPU times : user NUMBER s , sys : NUMBER s , total : NUMBER s NEWLINE Wall time : NUMBER s", "import string NEWLINE for VAR in string . ascii_uppercase : NEWLINE if VAR not in processed : NEWLINE print ( STRING . format ( VAR ) ) NEWLINE else : NEWLINE print ( STRING . format ( VAR , min ( processed [ VAR ] ) , max ( processed [ VAR ] ) ) )", "from collections import Counter NEWLINE print [ VAR for VAR , VAR in Counter ( a ) . most_common ( ) for VAR in [ VAR ] * VAR ] NEWLINE", "[ { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } , { STRING : NUMBER , STRING : STRING , STRING : STRING } ]", "In [ NUMBER ] : tdf [ STRING ] . values NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "$ cat file_L1 . csv NEWLINE EXAMPLEfoo , NUMBER , NUMBER NEWLINE EXAMPLEbar , NUMBER , NUMBER NEWLINE EXAMPLE1 , NUMBER , NUMBER NEWLINE EXAMPLE2 , NUMBER , NUMBER NEWLINE EXAMPLE3 , NUMBER , NUMBER NEWLINE EXAMPLE4 , NUMBER , NUMBER NEWLINE $ cat file_L2 . csv NEWLINE EXAMPLEfoo , NUMBER , NUMBER NEWLINE EXAMPLEbar , NUMBER , NUMBER NEWLINE EXAMPLE1 , NUMBER , NUMBER NEWLINE EXAMPLE2 , NUMBER , NUMBER NEWLINE EXAMPLE3 , NUMBER , NUMBER NEWLINE EXAMPLE4 , NUMBER , NUMBER NEWLINE $ cat file_L11 . csv NEWLINE EXAMPLEfoo , NUMBER , NUMBER NEWLINE EXAMPLEbar , NUMBER , NUMBER NEWLINE EXAMPLE1 , NUMBER , NUMBER NEWLINE EXAMPLE2 , NUMBER , NUMBER NEWLINE EXAMPLE3 , NUMBER , NUMBER NEWLINE EXAMPLE4 , NUMBER , NUMBER", ">> > VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > np . argsort ( VAR ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > VAR [ np . argsort ( VAR ) ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] )", ">> > VAR = STRING NEWLINE >> > print re . search ( STRING , VAR ) . group ( NUMBER ) NEWLINE world", "[ { STRING : STRING } , { STRING : STRING } , { } , { } ]", "( NUMBER , NUMBER , NUMBER )", "In [ NUMBER ] : df [ df . Distance . astype ( STRING ) >= df . Distance . astype ( STRING ) . cummax ( ) ] NEWLINE Out [ NUMBER ] : NEWLINE Area Distance NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "In [ NUMBER ] : % timeit multipleApply ( dataset ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "class MyForm ( forms . ModelForm ) : NEWLINE class Meta : NEWLINE VAR = MyModel NEWLINE def clean_date_created ( VAR ) : NEWLINE if VAR . cleaned_fields [ STRING ] != VAR . instance . date_created : NEWLINE raise ValidationError , STRING NEWLINE VAR . cleaned_fields [ STRING ]", "def bincount ( VAR , VAR ) : NEWLINE VAR = zeros ( VAR . max ( ) + NUMBER ) NEWLINE for i , w = zip ( VAR , VAR ) : NEWLINE VAR [ i ] += w NEWLINE return VAR", "NSString * src = @ STRING ; NEWLINE NSString * mac = @ STRING ; NEWLINE const unsigned char byte64 [ ] = { NUMBER } ; NEWLINE const unsigned char byte00 [ ] = { NUMBER } ; NEWLINE NSString * srcString = [ src base64EncodedString ] ; NEWLINE int srcDataLength = [ srcString length ] ; NEWLINE char * srcDataLengthAsByte = ( char * ) & srcDataLength ; NEWLINE NSString * macString = [ mac base64EncodedString ] ; NEWLINE int macDataLength = [ macString length ] ; NEWLINE char * macDataLengthAsByte = ( char * ) & macDataLength ; NEWLINE NSString * remoteString = [ remote base64EncodedString ] ; NEWLINE int remoteDataLength = [ remoteString length ] ; NEWLINE char * remoteDataLengthAsByte = ( char * ) & remoteDataLength ; NEWLINE NSString * appString = [ app base64EncodedString ] ; NEWLINE int appDataLength = [ appString length ] ; NEWLINE char * appDataLengthAsByte = ( char * ) & appDataLength ; NEWLINE NSMutableData * msgData = [ NSMutableData data ] ; NEWLINE [ msgData appendBytes : byte64 length : NUMBER ] ; NEWLINE [ msgData appendBytes : byte00 length : NUMBER ] ; NEWLINE [ msgData appendBytes : srcDataLengthAsByte length : NUMBER ] ; NEWLINE [ msgData appendBytes : byte00 length : NUMBER ] ; NEWLINE [ msgData appendData : [ srcString dataUsingEncoding : NSASCIIStringEncoding ] ] ; NEWLINE [ msgData appendBytes : macDataLengthAsByte length : NUMBER ] ; NEWLINE [ msgData appendBytes : byte00 length : NUMBER ] ; NEWLINE [ msgData appendData : [ macString dataUsingEncoding : NSASCIIStringEncoding ] ] ; NEWLINE [ msgData appendBytes : remoteDataLengthAsByte length : NUMBER ] ; NEWLINE [ msgData appendBytes : byte00 length : NUMBER ] ; NEWLINE [ msgData appendData : [ remoteString dataUsingEncoding : NSASCIIStringEncoding ] ] ; NEWLINE int msgDataLength = [ msgData length ] ; NEWLINE char * msgDataLengthAsByte = ( char * ) & msgDataLength ; NEWLINE NSMutableData * packet = [ NSMutableData data ] ; NEWLINE [ packet appendBytes : byte00 length : NUMBER ] ; NEWLINE [ packet appendBytes : appDataLengthAsByte length : NUMBER ] ; NEWLINE [ packet appendBytes : byte00 length : NUMBER ] ; NEWLINE [ packet appendData : [ appString dataUsingEncoding : NSASCIIStringEncoding ] ] ; NEWLINE [ packet appendBytes : msgDataLengthAsByte length : NUMBER ] ; NEWLINE [ packet appendBytes : byte00 length : NUMBER ] ; NEWLINE [ packet appendData : msgData ] ; NEWLINE [ self send : packet ] ;", "itertools . count ( someStartTime , delta )", "import sys NEWLINE import curses NEWLINE curses . initscr ( ) NEWLINE if not curses . has_colors ( ) : NEWLINE curses . endwin ( ) NEWLINE print STRING NEWLINE sys . exit ( ) NEWLINE else : NEWLINE curses . start_color ( ) NEWLINE curses . noecho ( ) NEWLINE curses . cbreak ( ) NEWLINE curses . curs_set ( NUMBER ) NEWLINE VAR = NUMBER NEWLINE curses . init_pair ( VAR , curses . COLOR_RED , curses . COLOR_BLACK ) NEWLINE VAR = curses . newwin ( NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR . box ( ) NEWLINE VAR = curses . newwin ( NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR . box ( ) NEWLINE VAR . addstr ( NUMBER , NUMBER , STRING , curses . color_pair ( VAR ) ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE while True : NEWLINE VAR . addch ( VAR , VAR , STRING ) NEWLINE VAR . refresh ( ) NEWLINE VAR . box ( ) NEWLINE VAR . refresh ( ) NEWLINE VAR = VAR . getch ( ) NEWLINE VAR . addch ( VAR , VAR , STRING ) NEWLINE if VAR == ord ( STRING ) : NEWLINE VAR -= NUMBER NEWLINE elif VAR == ord ( STRING ) : NEWLINE VAR -= NUMBER NEWLINE elif VAR == ord ( STRING ) : NEWLINE VAR += NUMBER NEWLINE elif VAR == ord ( STRING ) : NEWLINE VAR += NUMBER NEWLINE elif VAR == ord ( STRING ) : NEWLINE break NEWLINE curses . endwin ( )", "Hello World ! NEWLINE Hello World !", "import numpy as np NEWLINE def permgrid ( VAR , VAR ) : NEWLINE VAR = np . indices ( ( VAR , ) * VAR ) NEWLINE return VAR . reshape ( VAR , - NUMBER ) . T", "mylist [ mylist . index ( value ) ]", "def string_to_dict ( VAR ) : NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR = map ( lambda VAR : VAR . split ( STRING ) , VAR ) NEWLINE return dict ( VAR )", ">> > VAR = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE >> > VAR = { } NEWLINE >> > for VAR , VAR in VAR . items ( ) : NEWLINE . . . VAR . setdefault ( VAR , set ( ) ) . add ( VAR )", "from BeautifulSoup import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) . find ( STRING , VAR = STRING ) . parent . findNextSiblings ( STRING ) NEWLINE print BeautifulSoup ( STRING . join ( VAR [ NUMBER ] ) )", "VAR = Disk ( ) NEWLINE VAR . test1 = STRING NEWLINE", "class TodoSimple ( Resource ) : NEWLINE def get ( VAR , VAR ) : NEWLINE return { VAR : todos [ VAR ] } NEWLINE def put ( VAR , VAR ) : NEWLINE todos [ VAR ] = request . form [ STRING ] NEWLINE return { VAR : todos [ VAR ] } NEWLINE api . add_resource ( TodoSimple , STRING )", "from functools import partial NEWLINE map ( partial ( add_x_to_input , some_value_for_x ) , myList )", "< ? xml version = STRING ? > < ! DOCTYPE foo SYSTEM \\ ' http : // www . path . to . my . dtd . com / my . dtd \\ ' > < foo / >", "from django . db . models import manager", "class TicketForm ( forms . ModelForm ) : NEWLINE def __init__ ( VAR , VAR , * args , ** kwargs ) : NEWLINE super ( TicketForm , VAR ) . __init__ ( * args , ** kwargs ) NEWLINE VAR . fields [ STRING ] . queryset = Event . objects . filter ( creator = VAR )", "def natural_key2 ( VAR ) : NEWLINE VAR = re_natural . findall ( VAR ) NEWLINE VAR = [ ( NUMBER , int ( VAR ) ) if VAR . isdigit ( ) else ( NUMBER , VAR . lower ( ) ) for VAR in VAR ] NEWLINE VAR = [ VAR for VAR in VAR if not VAR . isdigit ( ) ] NEWLINE VAR = [ VAR for VAR in VAR if VAR . isdigit ( ) ] NEWLINE return VAR + [ ( - NUMBER , ) ] + VAR + VAR", "SELECT t2 . alt_bilesen NEWLINE FROM urunler_seviyeler t1 NEWLINE JOIN urunler_seviyeler t2 NEWLINE ON t2 . parcano = t1 . alt_bilesen NEWLINE WHERE t1 . parcano = STRING", ">> > from sqlalchemy import MetaData , Table , Integer , Column , create_engine NEWLINE >> > VAR = create_engine ( STRING ) NEWLINE >> > VAR = MetaData ( bind = VAR ) NEWLINE >> > VAR = Table ( STRING , VAR , . . . Column ( STRING , Integer ( ) , primary_key = True , ) , . . . Column ( STRING , Integer ( ) , ) , . . . ) NEWLINE >> > VAR = STRING NEWLINE >> > VAR . c . get ( VAR ) NEWLINE Column ( STRING , Integer ( ) , VAR = < Bookings > ) NEWLINE >> > VAR . c [ VAR ] NEWLINE Column ( STRING , Integer ( ) , VAR = < Bookings > )", "def get_reports ( self , cr , uid , ids , VAR ) : NEWLINE VAR = { STRING : ids , STRING : STRING , STRING : { STRING : value , . . . } } NEWLINE VAR = self . pool . get ( STRING ) . render_report ( cr , uid , ids , STRING , VAR , VAR = None ) NEWLINE VAR = self . pool . get ( STRING ) . render_report ( cr , uid , ids , STRING , VAR , VAR = None ) NEWLINE . . . NEWLINE return VAR [ NUMBER ] . encode ( STRING ) , STRING , VAR [ NUMBER ] . encode ( STRING ) , STRING , . . .", "( ? <= look behind to see if there is : \\ d digits ( NUMBER - NUMBER ) ) end of look - behind NEWLINE \\ s + whitespace ( \\ n , \\ r , \\ t , \\ f , and STRING ) ( NUMBER or more times ) NEWLINE ( ? = look ahead to see if there is : \\ d digits ( NUMBER - NUMBER ) ) end of look - ahead", "def justify_bitwise ( VAR ) : NEWLINE VAR = int ( abs ( VAR ) ) NEWLINE VAR = NUMBER NEWLINE while VAR != NUMBER : NEWLINE VAR += NUMBER NEWLINE VAR >>= NUMBER NEWLINE return float ( VAR ) / ( NUMBER << VAR )", ". . . NEWLINE return redirect ( request . form . get ( STRING , STRING ) )", "import csv NEWLINE import itertools NEWLINE VAR = { STRING : [ STRING , STRING , STRING ] , STRING : [ STRING , STRING ] , STRING : [ STRING ] } NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR = itertools . izip_longest ( * [ VAR [ VAR ] for VAR in VAR ] , fillvalue = STRING ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR , delimiter = STRING , quotechar = STRING , quoting = csv . QUOTE_MINIMAL ) NEWLINE VAR . writerow ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR . writerow ( VAR )", "NUMBER NEWLINE NUMBER NEWLINE NUMBER", "VAR = { } NEWLINE for VAR in FileList : NEWLINE sys . stderr . write ( STRING % VAR ) NEWLINE VAR = open ( VAR , STRING ) NEWLINE VAR [ VAR ] = VAR . readlines ( ) NEWLINE VAR . close ( ) NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE print VAR , VAR", "import win32com . client as win32 NEWLINE import glob NEWLINE import os NEWLINE VAR = win32 . gencache . EnsureDispatch ( STRING ) NEWLINE for VAR in glob . glob ( STRING ) : NEWLINE print VAR NEWLINE VAR = VAR . Workbooks . Open ( VAR ) NEWLINE VAR . SaveAs ( os . path . splitext ( VAR ) [ NUMBER ] + STRING , FileFormat = NUMBER , ConflictResolution = NUMBER ) NEWLINE VAR . Application . Quit ( )", "import pandas as pd NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = pd . DataFrame ( { STRING : VAR , STRING : VAR , STRING : VAR } ) NEWLINE VAR = VAR . groupby ( STRING ) . agg ( lambda VAR : VAR [ STRING ] . sum ( ) + VAR [ STRING ] . sum ( ) ) NEWLINE def func ( VAR ) : NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = VAR . ix [ VAR ] [ STRING ] NEWLINE return VAR NEWLINE VAR [ STRING ] = VAR . apply ( func , axis = NUMBER )", "def make_tree ( VAR ) : NEWLINE VAR = dict ( VAR = os . VAR . basename ( VAR ) , children = [ ] ) NEWLINE try : VAR = os . listdir ( VAR ) NEWLINE except OSError : NEWLINE pass NEWLINE else : NEWLINE for VAR in VAR : NEWLINE VAR = os . VAR . join ( VAR , VAR ) NEWLINE if os . VAR . isdir ( VAR ) : NEWLINE VAR [ STRING ] . append ( make_tree ( VAR ) ) NEWLINE else : NEWLINE VAR [ STRING ] . append ( dict ( VAR = VAR ) ) NEWLINE return VAR", "VAR = VAR [ STRING ] . value_counts ( ) NEWLINE VAR = STRING . join ( VAR [ VAR == NUMBER ] . index ) NEWLINE VAR = VAR [ ~ VAR [ STRING ] . str . contains ( VAR ) ]", "In [ NUMBER ] : A NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : new_shape = ( NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : shape_diff = np . array ( new_shape ) - np . array ( A . shape ) NEWLINE In [ NUMBER ] : np . lib . pad ( A , ( ( NUMBER , shape_diff [ NUMBER ] ) , ( NUMBER , shape_diff [ NUMBER ] ) ) , STRING , constant_values = ( NUMBER ) ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "Z2 ( NUMBER ) = theta1 ( NUMBER , NUMBER ) + theta1 ( NUMBER , NUMBER ) * L1 ( NUMBER ) + theta1 ( NUMBER , NUMBER ) * L1 ( NUMBER ) NEWLINE dZ2 ( NUMBER ) / dtheta1 ( NUMBER , NUMBER ) = NUMBER NEWLINE dZ2 ( NUMBER ) / dtheta1 ( NUMBER , NUMBER ) = L1 ( NUMBER ) NEWLINE dZ2 ( NUMBER ) / dtheta1 ( NUMBER , NUMBER ) = L1 ( NUMBER ) NEWLINE Z2 ( NUMBER ) = theta1 ( NUMBER , NUMBER ) + theta1 ( NUMBER , NUMBER ) * L1 ( NUMBER ) + theta1 ( NUMBER , NUMBER ) * L1 ( NUMBER ) NEWLINE dZ2 ( NUMBER ) / dtheta1 ( NUMBER , NUMBER ) = NUMBER NEWLINE dZ2 ( NUMBER ) / dtheta1 ( NUMBER , NUMBER ) = L1 ( NUMBER ) NEWLINE dZ2 ( NUMBER ) / dtheta1 ( NUMBER , NUMBER ) = L1 ( NUMBER )", "df [ STRING ] = ( df . groups != df . groups . shift ( ) ) . cumsum ( )", "[ STRING , STRING , STRING ]", "In [ NUMBER ] : y . mean ( axis = ( NUMBER , NUMBER ) ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "B ' ( t ) = ( a * t + b , c * t + d ) NEWLINE VAR = ( e , f )", "df . set_index ( [ STRING , STRING ] , inplace = True )", ">> > try_parse ( STRING ) NEWLINE STRING NEWLINE >> > try_parse ( STRING ) NEWLINE STRING NEWLINE >> > try_parse ( STRING ) NEWLINE STRING NEWLINE >> > try_parse ( STRING ) NEWLINE STRING", "combined [ combined . delivery == combined . most ]", "VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE VAR = df . B . isnull ( )", "import csv NEWLINE import math NEWLINE VAR = open ( STRING ) NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = [ VAR for VAR in VAR ] NEWLINE for VAR in VAR [ NUMBER : ] : NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE for VAR in VAR [ NUMBER : ] : NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = ( VAR - ( math . pow ( VAR , NUMBER ) ) ) - ( VAR - ( math . pow ( VAR , NUMBER ) ) ) NEWLINE print ( VAR )", ">> > VAR = g ( f ) NEWLINE >> > print ( VAR ( NUMBER ) ) NEWLINE NUMBER", "with open ( STRING , STRING ) as VAR : NEWLINE print ( VAR . read ( ) ) NEWLINE Name , May , June , July , August NEWLINE ABC , NUMBER , NUMBER , , NEWLINE DEF , NUMBER , , NUMBER , NEWLINE GHI , , NUMBER , , NUMBER NEWLINE Total , NUMBER , NUMBER , NUMBER , NUMBER", "def fitness ( points ) : NEWLINE", "Chrom NEWLINE NUMBER chrMT NEWLINE NUMBER chrY NEWLINE NUMBER chrX NEWLINE NUMBER chr13 NEWLINE NUMBER chr12 NEWLINE NUMBER chr11 NEWLINE NUMBER chr10 NEWLINE NUMBER chr17 NEWLINE NUMBER chr16 NEWLINE NUMBER chr15 NEWLINE NUMBER chr14 NEWLINE NUMBER chr19 NEWLINE NUMBER chr18 NEWLINE NUMBER chrM NEWLINE NUMBER chr7 NEWLINE NUMBER chr6 NEWLINE NUMBER chr5 NEWLINE NUMBER chr4 NEWLINE NUMBER chr3 NEWLINE NUMBER chr2 NEWLINE NUMBER chr1 NEWLINE NUMBER chr9 NEWLINE NUMBER chr8 NEWLINE NUMBER unknown_chr", "VAR = pd . pivot_table ( df , index = df . index , columns = STRING , values = STRING ) . fillna ( NUMBER )", "In [ NUMBER ] : from collections import defaultdict NEWLINE In [ NUMBER ] : VAR = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE In [ NUMBER ] : VAR = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE In [ NUMBER ] : VAR = defaultdict ( dict ) NEWLINE In [ NUMBER ] : for VAR in set ( VAR . keys ( ) + VAR . keys ( ) ) : NEWLINE . . . : if VAR in VAR : NEWLINE . . . : VAR [ VAR ] [ STRING ] = VAR [ VAR ] NEWLINE . . . : if VAR in VAR : NEWLINE . . . : VAR [ VAR ] [ STRING ] = VAR [ VAR ] NEWLINE . . . : NEWLINE . . . : NEWLINE In [ NUMBER ] : for VAR , VAR in VAR . iteritems ( ) : NEWLINE . . . : print VAR , VAR NEWLINE . . . : NEWLINE . . . : NEWLINE George { STRING : STRING , STRING : STRING } NEWLINE Will { STRING : STRING , STRING : STRING } NEWLINE Marat { STRING : STRING } NEWLINE Steven { STRING : STRING , STRING : STRING } NEWLINE Peter { STRING : STRING } NEWLINE Mary { STRING : STRING , STRING : STRING }", "class CubicBSpline ( object ) : NEWLINE VAR = ( STRING , ) NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = [ Point ( * VAR ) for VAR in VAR ]", "import bar NEWLINE class Data ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . val = bar . get_data ( ) NEWLINE if __name__ == STRING : NEWLINE VAR = Data ( ) NEWLINE print VAR . val", "NUMBER Kb76YK9a4mhrif766m321AMocNvzeQxqV", "user . profile", "- - find - links = / tmp", "colormap [ key_labels ] = color2ind . values ( )", "{ % for VAR , VAR , VAR in attendees_list % }", "VAR = numpy . random . uniform ( NUMBER )", "$ python location_regexes . py NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ [ STRING , STRING ] ]", "python . exe - c STRING * . txt", ">> > for VAR , VAR in sorted ( class1 . items ( ) , key = lambda VAR : VAR [ NUMBER ] ) : NEWLINE . . . print ( VAR , VAR ) NEWLINE . . . NEWLINE Ian NUMBER NEWLINE Holly NUMBER NEWLINE Helen NUMBER NEWLINE Ethan NUMBER NEWLINE >> > for VAR , VAR in sorted ( class1 . items ( ) , key = lambda VAR : VAR [ NUMBER ] , reverse = True ) : NEWLINE . . . print ( VAR , VAR ) NEWLINE . . . NEWLINE Ethan NUMBER NEWLINE Helen NUMBER NEWLINE Holly NUMBER NEWLINE Ian NUMBER", "import threading NEWLINE def worker ( ) : NEWLINE for VAR in shares . split ( STRING ) : NEWLINE . . . NEWLINE VAR = subprocess . Popen ( . . . ) NEWLINE VAR , VAR = VAR . communicate ( ) NEWLINE VAR = threading . Thread ( target = worker ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( ) NEWLINE VAR . join ( )", "< div id = STRING > < / div >", "multi_dicts ( * list_of_dicts )", "for VAR , VAR in values [ NUMBER ] . items ( ) :", "self . h , = self . axes . plot ( data , STRING )", "^ [ NUMBER - NUMBER ] * \\ + . * $", ">> > from collections import OrderedDict NEWLINE >> > VAR = OrderedDict ( [ ( STRING , OrderedDict ( [ ( STRING , STRING ) , ( STRING , STRING ) ] ) ) , ( STRING , NUMBER ) ] ) NEWLINE >> > VAR . keys ( ) NEWLINE [ STRING , STRING ] NEWLINE >> > VAR [ STRING ] NEWLINE NUMBER", "VAR = ( X0 + X1 ) / NUMBER", "ABCDEFGHIJKLMNOPQRSTUVWXYZ NEWLINE BCDEFGHIJKLMNOPQRSTUVWXYZA NEWLINE CDEFGHIJKLMNOPQRSTUVWXYZAB NEWLINE DEFGHIJKLMNOPQRSTUVWXYZABC NEWLINE EFGHIJKLMNOPQRSTUVWXYZABCD NEWLINE FGHIJKLMNOPQRSTUVWXYZABCDE NEWLINE GHIJKLMNOPQRSTUVWXYZABCDEF NEWLINE HIJKLMNOPQRSTUVWXYZABCDEFG NEWLINE IJKLMNOPQRSTUVWXYZABCDEFGH NEWLINE JKLMNOPQRSTUVWXYZABCDEFGHI NEWLINE KLMNOPQRSTUVWXYZABCDEFGHIJ NEWLINE LMNOPQRSTUVWXYZABCDEFGHIJK NEWLINE MNOPQRSTUVWXYZABCDEFGHIJKL NEWLINE NOPQRSTUVWXYZABCDEFGHIJKLM NEWLINE OPQRSTUVWXYZABCDEFGHIJKLMN NEWLINE PQRSTUVWXYZABCDEFGHIJKLMNO NEWLINE QRSTUVWXYZABCDEFGHIJKLMNOP NEWLINE RSTUVWXYZABCDEFGHIJKLMNOPQ NEWLINE STUVWXYZABCDEFGHIJKLMNOPQR NEWLINE TUVWXYZABCDEFGHIJKLMNOPQRS NEWLINE UVWXYZABCDEFGHIJKLMNOPQRST NEWLINE VWXYZABCDEFGHIJKLMNOPQRSTU NEWLINE WXYZABCDEFGHIJKLMNOPQRSTUV NEWLINE XYZABCDEFGHIJKLMNOPQRSTUVW NEWLINE YZABCDEFGHIJKLMNOPQRSTUVWX NEWLINE ZABCDEFGHIJKLMNOPQRSTUVWXY", "from collections import defaultdict NEWLINE VAR = defaultdict ( list ) NEWLINE VAR [ STRING ] = [ STRING , STRING ] NEWLINE VAR [ STRING ] = [ STRING , STRING , STRING ] NEWLINE VAR = defaultdict ( list ) NEWLINE VAR [ STRING ] = [ STRING ] NEWLINE VAR [ STRING ] = [ STRING , STRING ] NEWLINE VAR [ STRING ] = [ STRING ]", "for VAR in soup ( STRING ) [ NUMBER ] . findAll ( STRING ) : NEWLINE VAR = VAR ( STRING ) NEWLINE if not VAR : NEWLINE continue NEWLINE print STRING . join ( [ VAR . string for VAR in VAR if VAR . string ] )", "VAR = [ VAR for VAR in b if VAR in a ]", "VAR = sigmoid ( Z3 ) NEWLINE dL3 / dZ3 = VAR ( NUMBER - VAR )", "class DictCounter ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE for VAR , VAR in VAR [ NUMBER ] . items ( ) : NEWLINE VAR . __dict__ [ VAR ] = collections . Counter ( [ VAR [ VAR ] for VAR in VAR ] ) NEWLINE >> > VAR = [ { STRING : NUMBER , STRING : NUMBER } for VAR in range ( NUMBER ) ] NEWLINE >> > for VAR in VAR [ NUMBER : NUMBER ] : VAR [ STRING ] = NUMBER NEWLINE >> > VAR = DictCounter ( VAR ) NEWLINE >> > VAR . count NEWLINE Counter ( { NUMBER : NUMBER , NUMBER : NUMBER } ) NEWLINE >> > VAR . test NEWLINE Counter ( { NUMBER : NUMBER } )", "VAR = MyDict ( ) NEWLINE VAR [ STRING ] = NUMBER NEWLINE VAR [ STRING ] = NUMBER NEWLINE VAR [ STRING ] = NUMBER NEWLINE print VAR NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE print VAR . pop ( min ( VAR , key = VAR . get ) ) NEWLINE ( STRING , NUMBER ) NEWLINE print VAR NEWLINE { STRING : NUMBER , STRING : NUMBER }", "from sklearn . feature_extraction import DictVectorizer NEWLINE >> > VAR = DictVectorizer ( sparse = False ) NEWLINE >> > VAR = [ { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER } ] NEWLINE >> > VAR = VAR . fit_transform ( VAR ) NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > VAR . inverse_transform ( VAR ) == [ { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER } ] NEWLINE True", "import numpy as np NEWLINE from collections import Counter NEWLINE VAR = ( STRING , STRING , STRING , STRING , STRING ) NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR = VAR . split ( ) NEWLINE VAR , VAR = [ int ( VAR [ VAR ] ) for VAR in ( NUMBER , NUMBER ) ] NEWLINE VAR . append ( [ VAR , VAR ] ) NEWLINE VAR , VAR = [ VAR [ VAR ] for VAR in ( NUMBER , NUMBER ) ] NEWLINE VAR . append ( [ VAR , VAR ] ) NEWLINE VAR = VAR [ NUMBER : NUMBER ] NEWLINE VAR = VAR [ NUMBER : NUMBER ] NEWLINE for VAR in ( VAR , VAR ) : NEWLINE VAR = Counter ( VAR ) NEWLINE VAR = [ sum ( VAR [ VAR ] for VAR in VAR . keys ( ) if VAR in VAR ) for VAR in VAR ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR [ VAR ] += VAR [ VAR ] NEWLINE VAR [ - NUMBER ] . extend ( VAR ) NEWLINE VAR = np . array ( VAR , dtype = np . float ) NEWLINE VAR [ : , NUMBER : NUMBER ] /= NUMBER NEWLINE VAR [ : , NUMBER : ] /= NUMBER", "def split_string ( VAR , VAR ) : NEWLINE return re . split ( STRING + STRING . join ( re . escape ( VAR ) for VAR in VAR ) + STRING , VAR )", "next ( ( VAR for VAR in lst if . . . ) , [ default value ] )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE print ( sum ( NUMBER <= VAR <= NUMBER for VAR in VAR ) ) NEWLINE NUMBER", "VAR = numpy . max ( rev_count ) // NUMBER NEWLINE VAR = range ( NUMBER , numpy . max ( rev_count ) , VAR ) NEWLINE VAR = [ None ] * len ( VAR ) NEWLINE for VAR in range ( NUMBER , len ( VAR ) - NUMBER ) : NEWLINE VAR = VAR [ VAR ] - VAR / NUMBER < rev_count NEWLINE VAR = rev_count < VAR [ VAR ] + VAR / NUMBER ) NEWLINE VAR [ VAR ] = numpy . mean ( stars [ np . logical_and ( VAR , VAR ) ] )", "auth_parse . parse_args ( STRING )", "def scream ( ) : NEWLINE print ( sound ) NEWLINE import part2 NEWLINE if __name__ == STRING : NEWLINE part2 . sound = STRING NEWLINE part2 . scream ( ) NEWLINE Yoooo", "[ [ NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER ] ] NEWLINE [ NUMBER NUMBER NUMBER ] NEWLINE [ NUMBER NUMBER NUMBER NUMBER ]", "class class_b ( context_mixin ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . a = class_a ( ) NEWLINE @ contextlib . contextmanager NEWLINE def context ( VAR ) : NEWLINE with VAR . a : NEWLINE print ( STRING ) NEWLINE try : NEWLINE yield VAR NEWLINE finally : NEWLINE print ( STRING )", ">> > VAR = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE >> > print ( sorted ( VAR . items ( ) ) ) NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "< ! DOCTYPE html > NEWLINE < html > NEWLINE < head > NEWLINE < script src = STRING > < / script > NEWLINE < script src = STRING > < / script > NEWLINE < / script > NEWLINE < / head > NEWLINE < body > NEWLINE < h1 > Calculation < / h1 > NEWLINE < h1 > Test Page < / h1 > NEWLINE < input id = STRING placeholder = STRING > < / input > NEWLINE < p id = STRING > Results will go here < p > NEWLINE < button id = STRING > Submit < / button > NEWLINE < / body > NEWLINE < / html >", ">> > import sqlite3 NEWLINE >> > VAR = sqlite3 . connect ( STRING ) NEWLINE >> > VAR . execute ( STRING ) NEWLINE < sqlite3 . Cursor object at NUMBER > NEWLINE >> > VAR . commit ( ) NEWLINE >> > VAR = ( STRING , STRING , STRING ) NEWLINE >> > VAR . executemany ( STRING , ( ( VAR , ) for VAR in VAR ) ) NEWLINE < sqlite3 . Cursor object at NUMBER > NEWLINE >> > list ( VAR . execute ( STRING ) ) NEWLINE [ ( STRING , ) , ( STRING , ) , ( STRING , ) ]", "os . kill ( os . getpid ( ) , signal . CTRL_C_EVENT )", "In [ NUMBER ] : res2 . reindex ( pd . period_range ( res2 . index [ NUMBER ] , res2 . index [ - NUMBER ] , freq = STRING ) ) NEWLINE Out [ NUMBER ] : NEWLINE goods a b c NEWLINE NUMBER - NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER NUMBER NaN NUMBER NEWLINE NUMBER - NUMBER NaN NUMBER NaN NEWLINE NUMBER - NUMBER NaN NaN NaN NEWLINE NUMBER - NUMBER NaN NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER NaN NaN", ">> > VAR = STRING NEWLINE >> > VAR = STRING . format ( VAR ) NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > VAR = STRING . format ( VAR = VAR ) NEWLINE >> > str NEWLINE STRING", "import MySQLdb NEWLINE def DumpHistogramData ( VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR ) : NEWLINE VAR = open ( STRING + VAR , STRING ) NEWLINE VAR = MySQLdb . connect ( VAR , VAR , VAR , VAR ) NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR = STRING + VAR + STRING + VAR + STRING NEWLINE VAR . execute ( VAR ) NEWLINE VAR = NUMBER ; NEWLINE while True : NEWLINE VAR = VAR . fetchmany ( NUMBER ) NEWLINE if not VAR : NEWLINE break NEWLINE for VAR in VAR : NEWLINE VAR . close ( ) NEWLINE def PrepareHistogramBins ( VAR , VAR , VAR , VAR , VAR , maxValue , totalBins ) : NEWLINE VAR = MySQLdb . connect ( VAR , VAR , VAR , VAR ) NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR = STRING + VAR NEWLINE VAR . execute ( VAR ) NEWLINE VAR = STRING + VAR + STRING NEWLINE VAR . execute ( VAR ) NEWLINE VAR = maxValue / totalBins NEWLINE for VAR in range ( NUMBER , maxValue , VAR ) : NEWLINE if VAR is NUMBER : NEWLINE VAR = VAR NEWLINE VAR = VAR + VAR NEWLINE else : NEWLINE VAR = VAR + NUMBER NEWLINE VAR = VAR + VAR NEWLINE VAR = STRING + VAR + STRING + str ( VAR ) + STRING + str ( VAR ) + STRING NEWLINE VAR . execute ( VAR ) NEWLINE VAR . close ( ) NEWLINE return VAR NEWLINE VAR = PrepareHistogramBins ( STRING , STRING , STRING , STRING , STRING , NUMBER , NUMBER ) NEWLINE DumpHistogramData ( STRING , STRING , STRING , STRING , STRING , STRING , VAR , STRING )", "VAR = ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , nargs = STRING , choices = [ STRING , STRING , STRING ] , default = STRING , ) NEWLINE VAR , VAR = VAR . parse_known_args ( ) NEWLINE if VAR . function == STRING : NEWLINE VAR = ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR = VAR . parse_args ( VAR ) NEWLINE function1 ( VAR . a , VAR . b , VAR . c ) NEWLINE elif VAR . function == STRING : NEWLINE . . . NEWLINE elif VAR . function == STRING : NEWLINE . . .", "[ ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) ] NEWLINE [ ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) ] NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER NEWLINE insert NUMBER into NUMBER NEWLINE NUMBER", "import json", ">> > from timeit import default_timer NEWLINE >> > VAR = default_timer ( ) NEWLINE >> > NEWLINE . . . NEWLINE >> > print default_timer ( ) - VAR NEWLINE NUMBER", "void node_add_child ( Node & n , std : : auto_ptr < Node > child ) { n . add_child ( child . get ( ) ) ; child . release ( ) ; }", "In [ NUMBER ] : % timeit using_fromarray ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : % timeit using_putdata ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = self . findItemWidget ( findQWidget )", ">> > from random import choice NEWLINE >> > NEWLINE >> > def Number_recursive ( VAR , VAR = None ) : NEWLINE . . . VAR = VAR or VAR NEWLINE . . . if VAR < NUMBER : NEWLINE . . . raise ValueError ( STRING ) NEWLINE . . . if VAR == NUMBER : NEWLINE . . . return [ ] NEWLINE . . . return [ [ choice ( ( NUMBER , NUMBER ) ) for VAR in range ( VAR ) ] ] + Number_recursive ( VAR - NUMBER , VAR ) NEWLINE . . . NEWLINE >> > Number_recursive ( NUMBER ) NEWLINE [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ]", "fld1 fld2 relationship connection NEWLINE NUMBER x x NUMBER NUMBER NEWLINE NUMBER x y NUMBER NUMBER NEWLINE NUMBER x z NUMBER NUMBER NEWLINE NUMBER y x NUMBER NUMBER NEWLINE NUMBER y y NUMBER NUMBER NEWLINE NUMBER y z NUMBER NUMBER NEWLINE NUMBER z x NUMBER NUMBER NEWLINE NUMBER z y NUMBER NUMBER", "VAR = { VAR [ STRING ] : dict ( VAR ) for VAR in a_list } NEWLINE for VAR in b_list : NEWLINE VAR [ VAR [ STRING ] ] . update ( VAR ) NEWLINE VAR = list ( VAR . values ( ) )", "from pprint import pprint NEWLINE from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE VAR = [ VAR . get_text ( strip = True ) for VAR in VAR . find_all ( STRING ) ] NEWLINE VAR = [ dict ( zip ( VAR , [ VAR . get_text ( strip = True ) for VAR in VAR . find_all ( STRING ) ] ) ) for VAR in VAR . find_all ( STRING ) [ NUMBER : - NUMBER ] ] NEWLINE pprint ( VAR )", "NUMBER : int NEWLINE NUMBER : float NEWLINE None : ( none ) NEWLINE False : bool NEWLINE STRING : str NEWLINE [ NUMBER , NUMBER , NUMBER ] : list < int > NEWLINE [ STRING , STRING ] : list < str > NEWLINE [ NUMBER , STRING ] : list < ? > NEWLINE ( False , NUMBER , STRING ) : tuple < bool , int , str > NEWLINE set ( [ NUMBER , NUMBER , NUMBER ] ) : set < float > NEWLINE [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] : list < list < int >> NEWLINE [ ( NUMBER , STRING ) , ( NUMBER , STRING ) ] : list < tuple < int , str >> NEWLINE { NUMBER : STRING , NUMBER : STRING } : dict < int , str > NEWLINE [ < __main__ . Foo object at NUMBER > ] : list < Foo >", ">> > def VAR ( VAR , VAR , VAR ) : NEWLINE . . . VAR = locals ( ) NEWLINE . . . print ( VAR ) NEWLINE . . . d ( ** VAR ) NEWLINE . . . VAR = NUMBER NEWLINE . . . print ( locals ( ) ) NEWLINE . . . NEWLINE >> > def d ( ** kwargs ) : NEWLINE . . . print ( kwargs ) NEWLINE . . . NEWLINE >> > VAR ( NUMBER , NUMBER , NUMBER ) NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : { . . . } , STRING : NUMBER }", "In [ NUMBER ] : kwa = dict ( gen = xrange ( NUMBER ) , size = NUMBER , fill = - NUMBER , fill_left = True , fill_right = True ) NEWLINE In [ NUMBER ] : % timeit - n NUMBER [ VAR + VAR + VAR + VAR for VAR , VAR , VAR , VAR in tmpf5 . ia ( ** kwa ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit - n NUMBER [ VAR + VAR + VAR + VAR for VAR , VAR , VAR , VAR in tmpf5 . window ( ** kwa ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit - n NUMBER [ sum ( VAR ) for VAR in tmpf5 . ia ( ** kwa ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit - n NUMBER [ sum ( VAR ) for VAR in tmpf5 . window ( ** kwa ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop", "static PyObject * authenticate ( PyObject * self , PyObject * args ) { PyByteArrayObject * creds ; if ( ! PyArg_ParseTuple ( args , STRING , & creds ) ) return NULL ; char * VAR ; VAR = PyByteArray_AsString ( ( PyObject * ) creds ) ; }", "@ pytest . fixture ( scope = STRING , params = [ load_dataset1 , load_dataset2 ] ) NEWLINE def data ( VAR ) : NEWLINE VAR = VAR . param NEWLINE VAR = VAR ( ) NEWLINE def fin ( ) : NEWLINE pass NEWLINE VAR . addfinalizer ( fin ) NEWLINE return VAR", "for VAR in range ( NUMBER ) : NEWLINE VAR = sock . recv ( NUMBER ) NEWLINE VAR = VAR . split ( None , NUMBER )", "class Person ( db . Model ) : NEWLINE VAR = db . Column ( db . Integer , primary_key = True ) NEWLINE VAR = db . Column ( db . String ( NUMBER ) ) NEWLINE VAR = db . Column ( db . Integer , db . ForeignKey ( STRING ) ) NEWLINE VAR = db . relationship ( STRING , backref = STRING ) NEWLINE class Region ( db . Model ) : NEWLINE VAR = db . Column ( db . Integer , primary_key = True ) NEWLINE VAR = db . Column ( db . String ( NUMBER ) )", "In [ NUMBER ] : df . groupby ( [ STRING ] ) . mean ( ) NEWLINE Out [ NUMBER ] : NEWLINE A B C D id NEWLINE year NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER", "( int . from_bytes ( bytes_input , STRING ) >> bit_position ) & NUMBER", ">> > import heapq NEWLINE >> > list ( heapq . merge ( l1 , l2 , l3 ) ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "sandbox . other_module = __import__ ( STRING )", "STRING", "import csv NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR . readlines ( ) ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE for VAR in VAR : NEWLINE if VAR [ NUMBER ] == STRING : NEWLINE VAR . writerow ( [ VAR [ NUMBER ] , STRING ) break else : VAR . writerow ( VAR ) VAR . writerows ( VAR )", "In [ NUMBER ] : VAR = [ frozenset ( VAR . split ( ) ) for VAR in VAR ] NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE [ frozenset ( [ STRING ] ) , frozenset ( [ STRING ] ) , . . . frozenset ( [ STRING , STRING ] ) , frozenset ( [ STRING ] ) ]", "import imp NEWLINE VAR = imp . load_source ( STRING , STRING )", "class MyModel ( models . Model ) : NEWLINE VAR = STRING NEWLINE", "VAR , VAR = C . reshape ( NUMBER )", "def start_tcp_client ( VAR ) : NEWLINE VAR = subprocess . Popen ( [ STRING , STRING , STRING , STRING , STRING ] , stdin = subprocess . PIPE , stdout = subprocess . PIPE , bufsize = NUMBER ) NEWLINE with VAR : NEWLINE VAR . wait ( ) NEWLINE VAR . communicate ( input = STRING ) NEWLINE VAR . communicate ( ) NEWLINE def TCPSettings ( VAR ) : NEWLINE with VAR : NEWLINE RunSer2Command ( lines2 [ NUMBER ] ) NEWLINE RunSer2Command ( lines2 [ NUMBER ] ) NEWLINE VAR . notify ( ) NEWLINE VAR = threading . Condition ( ) NEWLINE VAR = threading . Condition ( ) NEWLINE VAR = threading . Thread ( name = STRING , target = start_tcp_client , args = ( VAR , ) ) NEWLINE VAR = threading . Thread ( name = STRING , target = TCPSettings , args = ( VAR , ) ) NEWLINE RunSer2Command ( lines2 [ NUMBER ] ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . start ( ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . start ( ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . join ( ) NEWLINE time . sleep ( NUMBER ) NEWLINE RunSer2Command ( lines2 [ NUMBER ] )", "In [ NUMBER ] : arr [ NUMBER : ] NEWLINE Out [ NUMBER ] : array ( [ [ True , True , True ] ] , dtype = bool )", "VAR = [ VAR [ NUMBER ] for VAR in VAR ]", "if not any ( any ( VAR ) for VAR in x ) :", "import msvcrt NEWLINE VAR = msvcrt . getch ( )", "DeliveryCount DeliveryNb NEWLINE Date NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER", "< area > NEWLINE < media > NEWLINE < options > NEWLINE < name > Mumbai < / name > NEWLINE < / options > NEWLINE < / media > NEWLINE < / area >", ">> > VAR = Counter ( x ) NEWLINE >> > VAR NEWLINE Counter ( { ( STRING , STRING ) : NUMBER , ( STRING , STRING ) : NUMBER , ( STRING , STRING ) : NUMBER } )", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE import glob NEWLINE STRING NEWLINE VAR = plt . VAR . get_cmap ( STRING ) NEWLINE VAR , VAR , VAR = np . loadtxt ( STRING , skiprows = NUMBER , unpack = True ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR . patch . set_facecolor ( STRING ) NEWLINE VAR = VAR . add_subplot ( NUMBER ) NEWLINE VAR = VAR . scatter ( VAR , VAR , c = VAR , edgecolor = STRING ) ) NEWLINE NEWLINE VAR = plt . colorbar ( mappable = VAR , VAR = VAR , cmap = VAR ) NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE VAR . setlim ( NUMBER , max_vel ) NEWLINE VAR . set_label ( STRING ) NEWLINE plt . show ( )", ">> > df . shift ( ) NEWLINE Bid Ask NEWLINE NUMBER NaN NaN NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "VAR = pd . DataFrame ( NUMBER , index = df . index , columns = range ( NUMBER , NUMBER ) ) NEWLINE VAR = pd . get_dummies ( df . index . month ) . set_index ( df . index ) NEWLINE VAR = ( VAR + VAR ) . fillna ( NUMBER ) NEWLINE VAR . columns = [ STRING + VAR . capitalize ( ) for VAR in pd . datetools . MONTHS ] NEWLINE pd . concat ( [ df , VAR ] , axis = NUMBER )", "if f ( ) == STRING :", "import sys NEWLINE import trace NEWLINE class MyTrace ( trace . Trace ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE trace . Trace . __init__ ( VAR , * args , ** kwargs ) NEWLINE VAR . enabled = False NEWLINE def localtrace_trace_and_count ( VAR , * args , ** kwargs ) : NEWLINE if not VAR . enabled : NEWLINE return None NEWLINE return trace . Trace . localtrace_trace_and_count ( VAR , * args , ** kwargs ) NEWLINE VAR = MyTrace ( ignoredirs = [ sys . prefix , sys . exec_prefix ] , ) NEWLINE def main ( ) : NEWLINE VAR = NUMBER NEWLINE VAR . enabled = True NEWLINE VAR = NUMBER NEWLINE VAR . enabled = False NEWLINE VAR = NUMBER NEWLINE VAR . run ( STRING )", "subprocess . Popen ( [ STRING , STRING , STRING ] , . . . )", "counters [ NUMBER ] | counters [ NUMBER ] | counters [ NUMBER ] | . . .", "{ STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] }", ">> > help ( pydoc . plain ) NEWLINE Help on function plain in module pydoc : NEWLINE plain ( text ) NEWLINE Remove boldface formatting from text .", "VAR = { STRING : VAR [ STRING ] }", "{ { request . current_page } }", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE from matplotlib import scale as mscale NEWLINE from matplotlib import transforms as mtransforms NEWLINE class MagScale ( mscale . ScaleBase ) : NEWLINE VAR = STRING NEWLINE def __init__ ( VAR , VAR , ** kwargs ) : NEWLINE mscale . ScaleBase . __init__ ( VAR ) NEWLINE VAR . VAR = None NEWLINE def get_transform ( VAR ) : NEWLINE return VAR . MagTransform ( VAR . VAR ) NEWLINE def set_default_locators_and_formatters ( VAR , VAR ) : NEWLINE pass NEWLINE class MagTransform ( mtransforms . Transform ) : NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = True NEWLINE def __init__ ( VAR , VAR ) : NEWLINE mtransforms . Transform . __init__ ( VAR ) NEWLINE VAR . VAR = VAR NEWLINE def transform_non_affine ( VAR , VAR ) : NEWLINE return NUMBER ** ( ( np . array ( VAR ) - NUMBER ) / ( - NUMBER ) ) NEWLINE def inverted ( VAR ) : NEWLINE return MagScale . InvertedMagTransform ( VAR . VAR ) NEWLINE class InvertedMagTransform ( mtransforms . Transform ) : NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = True NEWLINE def __init__ ( VAR , VAR ) : NEWLINE mtransforms . Transform . __init__ ( VAR ) NEWLINE VAR . VAR = VAR NEWLINE def transform_non_affine ( VAR , VAR ) : NEWLINE return - NUMBER * np . log10 ( np . array ( VAR ) ) + NUMBER NEWLINE def inverted ( VAR ) : NEWLINE return MagScale . MagTransform ( VAR . VAR ) NEWLINE def flux_to_mag ( VAR ) : NEWLINE return - NUMBER * np . log10 ( VAR ) + NUMBER NEWLINE mscale . register_scale ( MagScale )", ">> > from bs4 import BeautifulSoup NEWLINE >> > VAR = BeautifulSoup ( raw , STRING ) NEWLINE >> > print VAR . prettify ( ) NEWLINE < div class = STRING > NEWLINE < div class = STRING > NEWLINE < b > NEWLINE Recommended length of visit : NEWLINE < / b > NEWLINE & lt ; NUMBER hour NEWLINE < / div > NEWLINE < div class = STRING > NEWLINE < b > NEWLINE Fee : NEWLINE < / b > NEWLINE No NEWLINE < / div > NEWLINE < / div >", "[ theme ] NEWLINE VAR = default NEWLINE VAR = style . css NEWLINE VAR = pygments . css", "In [ NUMBER ] : df . Distance . cummax ( ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE Name : Distance , dtype : object", "set theUrl to STRING NEWLINE tell application STRING NEWLINE tell document NUMBER NEWLINE do JavaScript STRING NEWLINE delay NUMBER NEWLINE set timeoutCounter to NUMBER NEWLINE repeat until ( do JavaScript STRING ) is STRING NEWLINE set timeoutCounter to timeoutCounter + NUMBER NEWLINE delay NUMBER NEWLINE if timeoutCounter is greater than NUMBER then NEWLINE exit repeat NEWLINE end if NEWLINE end repeat NEWLINE set theUrl to ( do JavaScript STRING ) NEWLINE end tell NEWLINE end tell NEWLINE log theUrl", "from collections import defaultdict NEWLINE VAR = defaultdict ( int ) NEWLINE for VAR in batting : NEWLINE VAR [ VAR [ STRING ] ] += VAR . get ( STRING , NUMBER ) or NUMBER NEWLINE for VAR , VAR in sorted ( VAR . items ( ) , key = lambda VAR : VAR [ NUMBER ] ) : NEWLINE print VAR , VAR", "map ( lambda VAR : add_x_to_input ( some_value_for_x , VAR ) , myList )", "print ( MaxVal . UI32 )", "In [ NUMBER ] : print ( table . update ( ) . values ( col1 = select_query . with_only_columns ( [ table2 . c . col1 ] ) , col2 = select_query . with_only_columns ( [ table2 . c . col2 ] ) ) ) NEWLINE UPDATE table SET a = ( SELECT tweet . id FROM tweet WHERE tweet . id IS NOT NULL ) , b = ( SELECT tweet . user_id FROM tweet WHERE tweet . id IS NOT NULL )", "from random import randint NEWLINE def getNum1To4 ( VAR ) : NEWLINE VAR = { VAR + NUMBER : NUMBER for VAR in range ( NUMBER ) } NEWLINE for VAR in range ( VAR ) : NEWLINE VAR = [ VAR for VAR in VAR if VAR [ VAR ] < VAR / NUMBER ] NEWLINE VAR = VAR [ randint ( NUMBER , len ( VAR ) - NUMBER ) ] NEWLINE VAR [ VAR ] += NUMBER NEWLINE yield VAR", "ax . imshow ( image , extent = [ NUMBER , NUMBER , NUMBER , NUMBER ] , aspect = NUMBER )", "VAR = open ( STRING , STRING ) . readlines ( ) NEWLINE VAR = open ( STRING , STRING ) . readlines ( ) NEWLINE VAR = [ ] NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR = False NEWLINE for VAR in VAR : NEWLINE if VAR == VAR : NEWLINE VAR = True NEWLINE if not VAR : NEWLINE VAR . append ( VAR ) NEWLINE VAR += NUMBER NEWLINE for VAR in VAR : NEWLINE print VAR", "range ( . . . ) NEWLINE range ( stop ) - > list of integers NEWLINE range ( start , stop [ , step ] ) - > list of integers", "Chromclass raquete ( pygame . sprite . Sprite ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR , VAR ) : NEWLINE pygame . sprite . Sprite . __init__ ( VAR ) NEWLINE VAR . image = pygame . Surface ( ( VAR , VAR ) ) NEWLINE VAR . image . fill ( branco ) NEWLINE VAR . rect = VAR . image . get_rect ( VAR = VAR , VAR = VAR )", "dZ3 / dL2 ( NUMBER ) = theta2 ( NUMBER ) NEWLINE dZ3 / dL2 ( NUMBER ) = theta2 ( NUMBER ) NEWLINE dZ3 / dL2 ( NUMBER ) = theta2 ( NUMBER )", "def heavy_path ( node ) : NEWLINE if not node NEWLINE return ( NUMBER , [ ] ) NEWLINE [ VAR , VAR ] = heavy_path ( node . left ) NEWLINE [ VAR , VAR ] = heavy_path ( node . right ) NEWLINE if VAR > VAR : NEWLINE return ( node . val + VAR , [ node . val ] + VAR ) NEWLINE else : NEWLINE return ( node . val + VAR , [ node . val ] + VAR )", "import os NEWLINE import argparse NEWLINE def intOrUnderscore ( VAR ) : NEWLINE if VAR != STRING : NEWLINE return int ( VAR ) NEWLINE VAR = ( VAR for VAR in os . listdir ( STRING ) if VAR . startswith ( STRING ) ) NEWLINE return max ( int ( VAR [ VAR . rindex ( STRING ) + NUMBER : ] ) for VAR in VAR ) NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , type = intOrUnderscore ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE print VAR . case", "gunicorn - k flask_sockets . worker app : app", "class MyClass : NEWLINE def __init__ ( VAR , VAR = None ) : NEWLINE if VAR is None : NEWLINE VAR = create_default_parser ( ) NEWLINE VAR . VAR = VAR NEWLINE def create_default_parser ( VAR ) : NEWLINE VAR = argparse . ArgumentParser ( description = STRING ) NEWLINE VAR . add_argument ( STRING , STRING , dest = STRING , default = STRING ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE return VAR", "np . random . permutation ( NUMBER )", "import numpy NEWLINE def f ( VAR , VAR , VAR , VAR , VAR ) : NEWLINE return VAR + VAR * VAR + VAR * VAR ** NUMBER + VAR * VAR ** NUMBER NEWLINE VAR = numpy . arange ( NUMBER ) NEWLINE VAR = numpy . random . randn ( NUMBER ) * NUMBER NEWLINE VAR = VAR ** NUMBER + VAR NEWLINE VAR = make_chi_squared ( f , VAR , VAR , VAR ) NEWLINE print inspect . getargspec ( VAR ) . args", "VAR = [ [ VAR for VAR in VAR if VAR ] for VAR in x . T ]", "In [ NUMBER ] : df [ STRING ] = df . groupby ( STRING ) [ STRING ] . transform ( lambda VAR : len ( VAR ) ) NEWLINE In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE A B C len NEWLINE NUMBER one NUMBER NUMBER NUMBER NEWLINE NUMBER one NUMBER NUMBER NUMBER NEWLINE NUMBER two NUMBER NUMBER NUMBER", "with open ( infilepath ) as VAR : NEWLINE VAR = { } NEWLINE VAR = None NEWLINE for VAR in VAR : NEWLINE VAR = VAR . strip ( ) NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR = VAR NEWLINE VAR [ VAR ] = { } NEWLINE else : NEWLINE VAR , VAR = VAR . split ( STRING , NUMBER ) NEWLINE VAR [ VAR ] [ VAR . strip ( ) ] = VAR . strip ( )", "z . real", "VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR . append ( VAR [ NUMBER ] ) NEWLINE VAR = VAR", "// Created by Cython when providing STRING keywords NEWLINE namespace elps { class ITestClass : public TestClass { public : PyObject * m_obj ; ITestClass ( PyObject * obj ) ; virtual ~ ITestClass ( ) ; virtual int override_me ( ) ; } ; } / * namespace elps * / NEWLINE", "In [ NUMBER ] : VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : arr [ VAR ] NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] )", "In [ NUMBER ] : f = open ( STRING , STRING ) NEWLINE In [ NUMBER ] : % timeit f . write ( s . encode ( STRING ) ) NEWLINE The slowest run took NUMBER times longer than the fastest . This could mean that an intermediate result is being cached . NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : % timeit f . write ( s . encode ( STRING , STRING ) ) NEWLINE The slowest run took NUMBER times longer than the fastest . This could mean that an intermediate result is being cached . NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : f . close ( )", ">> > pd . datetools . MONTHS NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > target . columns = [ STRING + VAR . capitalize ( ) for VAR in pd . datetools . MONTHS ]", "import invRegex NEWLINE import inverse_regex NEWLINE print ( repr ( STRING . join ( invRegex . invert ( STRING ) ) ) ) NEWLINE print ( repr ( STRING . join ( inverse_regex . ipermute ( STRING ) ) ) )", ">> > time . sleep ( NUMBER ) ; k . type_string ( STRING ) NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE File STRING , line NUMBER , in type_string NEWLINE self . tap_key ( i ) NEWLINE File STRING , line NUMBER , in tap_key NEWLINE self . press_key ( character ) NEWLINE File STRING , line NUMBER , in press_key NEWLINE keycode = self . lookup_character_keycode ( character ) NEWLINE File STRING , line NUMBER , in lookup_character_keycode NEWLINE keysym = Xlib . XK . string_to_keysym ( special_X_keysyms [ character ] ) NEWLINE KeyError : STRING", "class Alpha ( object ) : NEWLINE @ classmethod NEWLINE def get_derivatives ( VAR ) : NEWLINE return VAR . __subclasses__ ( ) NEWLINE class Beta ( Alpha ) : NEWLINE pass NEWLINE print ( Alpha . get_derivatives ( ) ) NEWLINE print ( Beta . get_derivatives ( ) )", "In [ NUMBER ] : NEWLINE def func ( VAR ) : NEWLINE if VAR . first_valid_index ( ) is None : NEWLINE return None NEWLINE else : NEWLINE return VAR [ VAR . first_valid_index ( ) ] NEWLINE df . apply ( func , axis = NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NaN NEWLINE dtype : float64", "% timeit ( ( big [ : - NUMBER ] * big [ NUMBER : ] ) < NUMBER ) . sum ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "=", ">> > soup . find_all ( STRING , class_ = STRING ) NEWLINE [ < tr class = STRING > < / tr > , < tr class = STRING > < / tr > ]", "{ STRING : STRING }", "def extract_fields ( VAR ) : NEWLINE VAR = set ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . strip ( ) . split ( STRING ) NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE VAR . add ( VAR ) NEWLINE VAR . seek ( NUMBER ) NEWLINE return sorted ( list ( VAR ) )", "VAR = [ [ STRING , STRING , STRING , STRING , STRING , STRING , ] , [ STRING , STRING , STRING , STRING , STRING , STRING ] ] NEWLINE VAR = { VAR [ NUMBER ] : VAR [ NUMBER : ] for VAR in VAR } NEWLINE print VAR", "VAR = numpy . cumprod ( [ NUMBER ] + nbins ) [ : - NUMBER ] NEWLINE VAR = numpy . cumprod ( [ NUMBER ] + nbins [ : : - NUMBER ] ) [ : - NUMBER ] [ : : - NUMBER ] NEWLINE VAR = numpy . dot ( VAR , binassign ) NEWLINE VAR = numpy . dot ( VAR , binassign )", "xxxd - NUMBER NEWLINE xxxa - NUMBER , NUMBER , NUMBER NEWLINE xxxb - NUMBER NEWLINE xxxc - NUMBER", "VAR = { } NEWLINE for VAR in data . keys ( ) : NEWLINE VAR [ VAR ] = dict . fromkeys ( data [ VAR ] . keys ( ) , NUMBER ) NEWLINE for VAR in data [ VAR ] . keys ( ) : NEWLINE VAR = [ int ( VAR ) for VAR , VAR in data [ VAR ] [ VAR ] . items ( ) if VAR in [ STRING , STRING ] ] NEWLINE VAR [ VAR ] [ VAR ] = sum ( VAR ) NEWLINE print VAR", "from nltk . stem import WordNetLemmatizer NEWLINE from nltk import pos_tag , word_tokenize NEWLINE VAR = STRING NEWLINE VAR = pos_tag ( word_tokenize ( VAR ) ) NEWLINE VAR = [ ] NEWLINE VAR = WordNetLemmatizer ( ) NEWLINE for VAR in VAR : NEWLINE VAR = penn_to_wn ( VAR [ NUMBER ] ) NEWLINE if not VAR : NEWLINE continue NEWLINE VAR = VAR . lemmatize ( VAR [ NUMBER ] , pos = VAR ) NEWLINE VAR . append ( wn . VAR ( VAR , pos = VAR ) [ NUMBER ] ) NEWLINE print VAR", "VAR = parser . add_option ( . . . , nargs = NUMBER ) NEWLINE if not options . categories : NEWLINE options . categories = [ raw_input ( STRING ) for VAR in range ( VAR . nargs ) ]", "from threading import Thread NEWLINE from collections import deque NEWLINE import time NEWLINE class Worker ( Thread ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE STRING NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE super ( ) . __init__ ( ) NEWLINE def run ( VAR ) : NEWLINE while VAR . VAR : NEWLINE VAR = VAR . VAR . popleft ( ) NEWLINE print ( STRING ) NEWLINE VAR = VAR . VAR ( VAR ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE print ( STRING ) NEWLINE def test ( VAR ) : NEWLINE time . sleep ( VAR ) NEWLINE return NUMBER * VAR NEWLINE if __name__ == STRING : NEWLINE VAR = NUMBER * [ NUMBER , ] NEWLINE VAR = deque ( VAR ) NEWLINE VAR = deque ( ) NEWLINE VAR = [ Worker ( VAR , VAR , test ) for VAR in range ( NUMBER ) ] NEWLINE for VAR in VAR : NEWLINE VAR . start ( ) NEWLINE for VAR in VAR : NEWLINE VAR . join ( ) NEWLINE print ( VAR )", "waiting . . . NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , NUMBER ) NEWLINE got a ( NUMBER , None ) NEWLINE waited", ">> > exit", "def process ( ) : NEWLINE Buffer . onNewReading ( data1 , data2 , etc )", "import random NEWLINE def box ( ) : NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ ] NEWLINE while True : NEWLINE VAR = random . randrange ( NUMBER , NUMBER ) NEWLINE VAR = VAR + NUMBER NEWLINE if str ( VAR [ VAR ] ) not in VAR : NEWLINE VAR [ VAR ] NEWLINE VAR = VAR + NUMBER NEWLINE VAR . append ( str ( VAR [ VAR ] ) ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE break NEWLINE return STRING + str ( VAR ) + STRING + STRING . join ( VAR ) + STRING + str ( VAR ) NEWLINE box ( )", "FName LName NEWLINE Andreas Kai NUMBER NEWLINE Constantine Pape NaN NEWLINE Koethe Talukdar NUMBER NEWLINE Manual Hausman NUMBER NEWLINE Max Weber NUMBER NEWLINE Nadia Alam NUMBER NEWLINE Pia Naime NUMBER NEWLINE Plank Ingo NUMBER NEWLINE Tanvir Hossain NUMBER NEWLINE Weber Mac NUMBER NEWLINE Name : id , dtype : float64", "VAR = text . split ( ) NEWLINE VAR = len ( VAR )", "python setup . py install NEWLINE python setup . py clean - - all", "db . Key . from_path ( STRING , vertex1 . name + STRING + vertex2 . name )", ">> > numpy . savez ( STRING , ** arrs )", "cat NEWLINE meoooow NEWLINE mouse", "VAR = [ STRING , STRING , STRING ]", "VAR = NUMBER NEWLINE def fun2 ( VAR , VAR ) : NEWLINE return VAR ( VAR )", "import argparse NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , help = STRING ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE print VAR . s", ">> > scipy . stats . pearsonr ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ) NEWLINE ( NUMBER , NUMBER ) NEWLINE >> > scipy . stats . pearsonr ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ) NEWLINE ( NUMBER , NUMBER )", "class Category ( db . Model ) : NEWLINE VAR = db . StringProperty ( ) NEWLINE VAR = db . ListProperty ( db . Key ) NEWLINE VAR = db . ListProperty ( db . Key ) NEWLINE def add_sub_category ( VAR , VAR ) : NEWLINE VAR = Category ( VAR ) NEWLINE VAR . put ( ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE VAR . put ( ) NEWLINE return VAR", "import MySQLdb NEWLINE def get_authors_with_articles ( VAR ) : NEWLINE VAR = VAR . VAR ( ) NEWLINE VAR = { } NEWLINE for VAR in VAR . execute ( STRING ) : NEWLINE VAR [ STRING ] = [ ] NEWLINE VAR [ VAR [ STRING ] ] = VAR NEWLINE for VAR in VAR . execute ( STRING ) . fetchall ( ) : NEWLINE VAR = VAR [ STRING ] NEWLINE del VAR [ STRING ] NEWLINE VAR [ VAR ] [ STRING ] . append ( VAR ) NEWLINE return list ( VAR . values ( ) ) NEWLINE if __name__ == STRING : NEWLINE VAR = MySQLdb . connect ( mysql_host , mysql_user , mysql_pass , mysql_base , cursorclass = MySQLdb . cursors . DictCursor ) NEWLINE print ( get_authors_with_articles ( VAR ) )", "import os NEWLINE def split ( VAR , VAR = STRING , VAR = NUMBER , VAR = STRING , VAR = STRING , VAR = True ) : NEWLINE import csv NEWLINE VAR = csv . VAR ( VAR , VAR = VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = os . path . join ( VAR , VAR % VAR ) NEWLINE VAR = csv . writer ( open ( VAR , STRING ) , VAR = VAR ) NEWLINE VAR = VAR NEWLINE if VAR : NEWLINE VAR = VAR . next ( ) NEWLINE VAR . writerow ( VAR ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR + NUMBER > VAR : NEWLINE VAR += NUMBER NEWLINE VAR = VAR * VAR NEWLINE VAR = os . path . join ( VAR , VAR % VAR ) NEWLINE VAR = csv . writer ( open ( VAR , STRING ) , VAR = VAR ) NEWLINE if VAR : NEWLINE VAR . writerow ( VAR ) NEWLINE VAR . writerow ( VAR )", "Out [ NUMBER ] : NEWLINE PhaseA PhaseB PhaseC DataCol NEWLINE Index NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER", "B ( t ) = P1 * ( NUMBER - t ) ** NUMBER + NUMBER * P2 * ( NUMBER - t ) * t + P3 * t ** NUMBER", "import matplotlib . pyplot as plt NEWLINE from matplotlib . patches import Wedge NEWLINE def main ( ) : NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE dual_half_circle ( ( NUMBER , NUMBER ) , VAR = NUMBER , VAR = NUMBER , VAR = VAR ) NEWLINE VAR . axis ( STRING ) NEWLINE plt . show ( ) NEWLINE def dual_half_circle ( VAR , VAR , VAR = NUMBER , VAR = None , VAR = ( STRING , STRING ) , ** kwargs ) : NEWLINE STRING NEWLINE if VAR is None : NEWLINE VAR = plt . gca ( ) NEWLINE VAR , VAR = VAR , VAR + NUMBER NEWLINE VAR = Wedge ( VAR , VAR , VAR , VAR , fc = VAR [ NUMBER ] , ** kwargs ) NEWLINE VAR = Wedge ( VAR , VAR , VAR , VAR , fc = VAR [ NUMBER ] , ** kwargs ) NEWLINE for VAR in [ VAR , VAR ] : NEWLINE VAR . add_artist ( VAR ) NEWLINE return [ VAR , VAR ] NEWLINE main ( )", "from datetime import datetime NEWLINE import pytz NEWLINE import calendar NEWLINE VAR = datetime . now ( pytz . utc ) NEWLINE VAR = calendar . timegm ( VAR . utctimetuple ( ) ) NEWLINE print VAR , VAR", "re . findall ( STRING , STRING )", "def convert_to_dict ( VAR , VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = STRING NEWLINE VAR = VAR . strip ( ) . split ( STRING ) NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR", "class PersonForm ( forms . ModelForm ) : NEWLINE VAR = DenormalizedChoiceField ( choices = Person . COLORS ) NEWLINE class Meta : NEWLINE VAR = Person NEWLINE VAR = STRING", "VAR = [ { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } ] NEWLINE VAR = collections . defaultdict ( lambda : collections . defaultdict ( list ) ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ STRING ] ] [ VAR [ STRING ] ] . append ( VAR [ STRING ] ) NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE for VAR , VAR in VAR [ VAR ] . items ( ) : NEWLINE VAR . append ( { STRING : VAR , STRING : VAR , STRING : VAR } )", ">> > def rep ( * args ) : NEWLINE print ( * args , sep = STRING ) NEWLINE >> > def ori ( * args ) : NEWLINE print ( args ) NEWLINE >> > ori ( STRING , NUMBER ) NEWLINE ( STRING , NUMBER ) NEWLINE >> > ori = rep NEWLINE >> > ori ( STRING , NUMBER ) NEWLINE dfef - - NUMBER", "VAR = asyncio . get_event_loop ( ) NEWLINE VAR = hello_world ( VAR ) NEWLINE VAR = lambda : asyncio . ensure_future ( VAR ) NEWLINE VAR . call_soon ( VAR ) NEWLINE VAR . run_forever ( ) NEWLINE VAR . close ( )", "VAR = STRING", "if os . path . isfile ( file_path ) : NEWLINE VAR = True NEWLINE try : NEWLINE with open ( file_path ) as VAR : NEWLINE if STRING in VAR . read ( ) : NEWLINE VAR = False NEWLINE except IOError : NEWLINE print ( STRING . format ( file_path ) ) NEWLINE if VAR : NEWLINE os . unlink ( file_path )", ">> > print dict ( c ) NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "def GetInterpolatedZ ( VAR , VAR , VAR ) : NEWLINE VAR = Vec3 ( VAR [ NUMBER ] . x / VAR [ NUMBER ] . z , VAR [ NUMBER ] . y / VAR [ NUMBER ] . z , NUMBER / VAR [ NUMBER ] . z ) NEWLINE VAR = Vec3 ( VAR [ NUMBER ] . x / VAR [ NUMBER ] . z , VAR [ NUMBER ] . y / VAR [ NUMBER ] . z , NUMBER / VAR [ NUMBER ] . z ) NEWLINE VAR = Vec3 ( VAR [ NUMBER ] . x / VAR [ NUMBER ] . z , VAR [ NUMBER ] . y / VAR [ NUMBER ] . z , NUMBER / VAR [ NUMBER ] . z ) NEWLINE VAR = VAR + VAR * ( VAR - VAR ) + VAR * ( VAR - VAR ) NEWLINE VAR . z = NUMBER / VAR . z NEWLINE VAR . x *= VAR . z NEWLINE VAR . y *= VAR . z NEWLINE return VAR", "[ STRING , STRING ]", "def parse_the_file ( ) : NEWLINE VAR = str . VAR NEWLINE VAR = str . VAR NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = { } NEWLINE VAR = VAR . read ( ) . VAR ( STRING ) NEWLINE for VAR , VAR in [ VAR ( VAR ) for VAR in VAR ] : NEWLINE try : NEWLINE VAR [ VAR ( VAR ) ] . add ( VAR ) NEWLINE except KeyError : NEWLINE VAR [ VAR ( VAR ) ] = set ( VAR ) NEWLINE for VAR in VAR : NEWLINE print STRING % ( VAR , STRING . join ( list ( VAR [ VAR ] ) ) ) NEWLINE if __name__ == STRING : NEWLINE parse_the_file ( )", "for VAR , VAR in iterparse ( source ) : NEWLINE if VAR . tag == STRING : NEWLINE . . . process record elements . . . NEWLINE VAR . clear ( )", "[ STRING , STRING , STRING , STRING ]", "x . h NEWLINE struct example { char * data ; int len ; // of data buffer double * doubles ; int count ; // of doubles } ; NEWLINE DLL_API void func ( struct example * p ) ;", "class MyModel ( models . Model ) : NEWLINE . . . NEWLINE @ property NEWLINE def priority ( self ) : NEWLINE return ( NUMBER + ( date . today ( ) - self . reset_date ) / self . days_to_expiration ) * self . importance", "from itertools import chain NEWLINE print ( [ VAR for VAR in languages_list for VAR in chain ( [ VAR . code ] , VAR . alt ) ] )", ">> > reduce ( getitem , lis , DictOfVehiclePrices ) NEWLINE STRING", "from sklearn . svm import LinearSVC NEWLINE from sklearn . calibration import CalibratedClassifierCV NEWLINE from sklearn . datasets import load_iris NEWLINE VAR = load_iris ( ) NEWLINE VAR = VAR . data NEWLINE VAR = VAR . target NEWLINE VAR = LinearSVC ( ) NEWLINE VAR = CalibratedClassifierCV ( VAR , cv = NUMBER ) NEWLINE VAR . fit ( VAR , VAR ) NEWLINE VAR = VAR . predict_proba ( VAR )", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE import matplotlib as mpl NEWLINE import itertools NEWLINE def main ( ) : NEWLINE def run ( VAR , VAR , VAR , VAR = NUMBER ) : NEWLINE VAR = [ VAR ( VAR , VAR , VAR = VAR ) for VAR in VAR . T ] NEWLINE VAR , VAR , VAR = [ np . array ( VAR ) for VAR in zip ( * VAR ) ] NEWLINE VAR = gaussian ( VAR , VAR , VAR , VAR ) NEWLINE plt . figure ( ) NEWLINE plot ( VAR , VAR , linestyle = STRING , marker = STRING , markersize = NUMBER ) NEWLINE plot ( VAR , VAR , linestyle = STRING , lw = NUMBER ) NEWLINE VAR , VAR = generate_data ( NUMBER , NUMBER , VAR = NUMBER ) NEWLINE VAR = NUMBER NEWLINE run ( VAR , VAR , weighted_invert , VAR = VAR ) NEWLINE plt . title ( STRING ) NEWLINE run ( VAR , VAR , invert , VAR = VAR ) NEWLINE plt . title ( STRING plt . show ( ) def invert ( VAR , VAR , VAR = NUMBER ) : VAR = VAR > VAR VAR , VAR = VAR [ VAR ] , VAR [ VAR ] VAR , VAR , VAR = np . polyfit ( VAR , np . log ( VAR ) , NUMBER ) VAR , VAR , VAR = poly_to_gauss ( VAR , VAR , VAR ) return VAR , VAR , VAR def poly_to_gauss ( VAR , VAR , VAR ) : VAR = np . sqrt ( - NUMBER / ( NUMBER * VAR ) ) VAR = VAR * VAR ** NUMBER VAR = np . exp ( VAR + NUMBER * VAR ** NUMBER / VAR ** NUMBER ) return VAR , VAR , VAR def weighted_invert ( VAR , VAR , VAR = None , VAR = NUMBER ) : VAR = VAR > VAR VAR , VAR = VAR [ VAR ] , VAR [ VAR ] if VAR is None : VAR = VAR else : VAR = VAR [ VAR ] VAR = np . log ( VAR ) VAR = np . ones ( ( VAR . size , NUMBER ) , dtype = np . float ) VAR [ : , NUMBER ] = VAR ** NUMBER VAR [ : , NUMBER ] = VAR VAR , VAR , VAR , VAR = np . linalg . lstsq ( ( VAR . T * VAR ** NUMBER ) . T , VAR * VAR ** NUMBER ) return poly_to_gauss ( * VAR ) def generate_data ( numpoints , numcurves , VAR = None ) : np . random . seed ( NUMBER ) VAR = np . linspace ( NUMBER , NUMBER , numpoints ) VAR = NUMBER * np . random . random ( numcurves ) VAR = NUMBER * np . random . random ( numcurves ) VAR = NUMBER * np . random . random ( numcurves ) + NUMBER VAR = gaussian ( VAR , VAR , VAR , VAR ) if VAR is None : VAR = NUMBER * VAR . max ( ) VAR = VAR * ( np . random . random ( VAR . shape ) - NUMBER ) return VAR , VAR + VAR def gaussian ( VAR , VAR , VAR , VAR ) : VAR = - np . subtract . outer ( VAR , VAR ) ** NUMBER / ( NUMBER * VAR ** NUMBER ) return VAR * np . exp ( VAR ) def plot ( VAR , ydata , VAR = None , ** kwargs ) : if VAR is None : VAR = plt . gca ( ) VAR = itertools . cycle ( mpl . rcParams [ STRING ] ) for VAR , VAR in zip ( ydata . T , VAR ) : VAR . plot ( VAR , VAR , VAR = VAR , ** kwargs ) main ( )", ">> > convert ( STRING ) NEWLINE STRING NEWLINE >> > convert ( STRING ) NEWLINE STRING NEWLINE >> > convert ( STRING ) NEWLINE STRING NEWLINE >> > convert ( STRING ) NEWLINE STRING NEWLINE >> > convert ( STRING ) NEWLINE STRING NEWLINE >> > convert ( STRING ) NEWLINE STRING NEWLINE >> > convert ( STRING ) NEWLINE STRING", "( ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) )", "import inspect NEWLINE class A : NEWLINE def a ( VAR ) : NEWLINE print ( STRING ) NEWLINE B ( ) . b ( ) NEWLINE class B : NEWLINE def b ( VAR ) : NEWLINE print ( STRING ) NEWLINE VAR = inspect . VAR ( ) NEWLINE VAR = VAR [ NUMBER ] [ NUMBER ] . f_locals [ STRING ] . __class__ NEWLINE VAR = VAR [ NUMBER ] [ NUMBER ] . f_code . co_name NEWLINE print ( STRING . format ( str ( VAR ) , VAR ) ) NEWLINE A ( ) . a ( )", "VAR = NUMBER NEWLINE VAR = len ( str ( VAR ) ) NEWLINE print ( VAR )", "import svmutil NEWLINE VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE svmutil . svm_train ( VAR , VAR , STRING )", "def using_quadratic_loop ( VAR ) : NEWLINE return np . array ( [ [ VAR , VAR ] for VAR in range ( NUMBER , np . shape ( VAR ) [ NUMBER ] - NUMBER ) for VAR in range ( NUMBER , np . shape ( VAR ) [ NUMBER ] - NUMBER ) if np . all ( VAR [ VAR - NUMBER : VAR + NUMBER , VAR - NUMBER : VAR + NUMBER ] == VAR [ VAR , VAR ] ) ] ) . T", "Here are the results : NEWLINE NUMBER = NUMBER , NUMBER , NUMBER NEWLINE NUMBER = NUMBER , NUMBER , NUMBER NEWLINE NUMBER = NUMBER , NUMBER NEWLINE NUMBER = NUMBER , NUMBER NEWLINE NUMBER = NUMBER , NUMBER , NUMBER NEWLINE NUMBER = NUMBER , NUMBER NUMBER NEWLINE Total rolls equal : NUMBER", "In [ NUMBER ] : dis . dis ( func1 ) NEWLINE NUMBER NUMBER LOAD_GLOBAL NUMBER ( range ) NEWLINE NUMBER LOAD_CONST NUMBER ( NUMBER ) NEWLINE NUMBER CALL_FUNCTION NUMBER NEWLINE NUMBER STORE_FAST NUMBER ( a ) NEWLINE NUMBER NUMBER LOAD_FAST NUMBER ( a ) NEWLINE NUMBER SLICE + NUMBER NEWLINE NUMBER STORE_FAST NUMBER ( b ) NEWLINE NUMBER LOAD_CONST NUMBER ( None ) NEWLINE NUMBER RETURN_VALUE NEWLINE In [ NUMBER ] : dis . dis ( func2 ) NEWLINE NUMBER NUMBER LOAD_GLOBAL NUMBER ( range ) NEWLINE NUMBER LOAD_CONST NUMBER ( NUMBER ) NEWLINE NUMBER CALL_FUNCTION NUMBER NEWLINE NUMBER STORE_FAST NUMBER ( a ) NEWLINE NUMBER NUMBER LOAD_FAST NUMBER ( a ) NEWLINE NUMBER LOAD_CONST NUMBER ( NUMBER ) NEWLINE NUMBER LOAD_GLOBAL NUMBER ( len ) NEWLINE NUMBER LOAD_FAST NUMBER ( a ) NEWLINE NUMBER CALL_FUNCTION NUMBER NEWLINE NUMBER SLICE + NUMBER NEWLINE NUMBER STORE_FAST NUMBER ( b ) NEWLINE NUMBER LOAD_CONST NUMBER ( None ) NEWLINE NUMBER RETURN_VALUE", "def get_word_list ( VAR , VAR ) : NEWLINE if VAR in [ STRING , STRING , STRING ] : NEWLINE return getattr ( VAR , VAR ) . split ( STRING ) NEWLINE def __getattr__ ( VAR , VAR ) : NEWLINE if VAR [ - NUMBER : ] == STRING and VAR [ : - NUMBER ] in [ STRING , STRING , STRING ] : NEWLINE return getattr ( VAR , VAR [ : - NUMBER ] ) . split ( STRING ) NEWLINE else NEWLINE raise AttributeError NEWLINE VAR = Categories . get ( pk = NUMBER ) NEWLINE VAR . get_word_list ( STRING ) NEWLINE VAR . keywords_list NEWLINE VAR . keywords", "from datetime import date , timedelta NEWLINE VAR = date . VAR ( ) NEWLINE VAR = VAR - timedelta ( NUMBER ) NEWLINE VAR = STRING NEWLINE VAR = STRING . format ( VAR . strftime ( STRING ) , VAR . strftime ( STRING ) ) NEWLINE VAR = service . users ( ) . messages ( ) . list ( userId = VAR , q = VAR ) . execute ( ) NEWLINE", "a1 a15 a3 a4 a5 a8 NEWLINE datedef IdSet ( VAR , VAR ) : NEWLINE if not isinstance ( VAR , basestring ) : NEWLINE raise TypeError ( STRING ) NEWLINE VAR . caseful_id = VAR NEWLINE VAR . UpdateFromKey ( ndb . Key ( VAR . __class__ , VAR . lower ( ) ) )", "VAR = STRING NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = [ int ( VAR ) for VAR in VAR . split ( ) ] NEWLINE print VAR", "VAR = STRING NEWLINE VAR = file_loader ( VAR . split ( STRING ) ) NEWLINE print VAR NEWLINE print count_number ( VAR , STRING )", "How a newbie can find the documentation in Python NEWLINE % python NEWLINE Python NUMBER NUMBER ( r271 : NUMBER , Jan NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) NEWLINE [ GCC NUMBER NUMBER ( Apple Inc . build NUMBER ) ] on darwin NEWLINE Type STRING , STRING , STRING or STRING for VAR information . NEWLINE >> > import urllib2 NEWLINE >> > req = urllib2 . Request ( STRING ) NEWLINE >> > resp = urllib2 . urlopen ( req ) NEWLINE >> > help ( resp . info ( ) )", "from google . appengine . api . app_identity import get_application_id NEWLINE VAR = get_application_id ( )", "STRING % f if f >= NUMBER else STRING", "import pandas as pd NEWLINE import numpy as np NEWLINE VAR = pd . date_range ( STRING , STRING , freq = STRING ) NEWLINE VAR = pd . Timestamp ( STRING , STRING ) NEWLINE def using_astype ( VAR , VAR ) : NEWLINE VAR = VAR . values . astype ( STRING ) NEWLINE VAR = VAR . asm8 . astype ( STRING ) NEWLINE return np . busday_count ( VAR , VAR ) NEWLINE def using_datetimes ( VAR , VAR ) : NEWLINE VAR = [ VAR . date ( ) for VAR in VAR ] NEWLINE VAR = pd . Timestamp ( STRING , STRING ) . date ( ) NEWLINE return np . busday_count ( VAR , VAR )", ">> > import requests NEWLINE >> > VAR = requests . get ( STRING , stream = True ) NEWLINE >> > VAR . raw NEWLINE < requests . packages . urllib3 . response . HTTPResponse object at NUMBER >", "[ ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "VAR = STRING NEWLINE VAR += STRING . join ( lines_to_save ) NEWLINE VAR += STRING NEWLINE open ( STRING , STRING ) . write ( VAR )", "[ STRING , STRING , STRING , STRING ]", "awk - F STRING STRING file NEWLINE NUMBER NUMBER NUMBER NUMBER", "def is_group ( VAR ) : NEWLINE VAR = VAR . getChildren ( ) NEWLINE for VAR in VAR : NEWLINE if type ( VAR ) is not pymel . core . nodetypes . Transform : NEWLINE return False NEWLINE return True", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ ] NEWLINE VAR = set ( ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR not in VAR : NEWLINE VAR . append ( VAR ) NEWLINE VAR . add ( VAR )", "import pytz NEWLINE import datetime as DT NEWLINE VAR = DT . datetime . VAR ( ) NEWLINE VAR = dict ( ) NEWLINE for VAR in pytz . all_timezones : NEWLINE VAR = pytz . timezone ( VAR ) NEWLINE try : NEWLINE VAR = VAR . dst ( VAR , is_dst = False ) NEWLINE except TypeError : NEWLINE VAR = VAR . dst ( VAR ) NEWLINE if VAR == DT . timedelta ( NUMBER ) : NEWLINE VAR [ VAR ] = VAR . localize ( VAR , is_dst = False ) . strftime ( STRING ) NEWLINE else : NEWLINE VAR = VAR NEWLINE while True : NEWLINE VAR = VAR - DT . timedelta ( days = NUMBER ) NEWLINE VAR = VAR . dst ( VAR , is_dst = False ) NEWLINE if VAR == DT . timedelta ( NUMBER ) : NEWLINE VAR [ VAR ] = ( VAR . localize ( VAR , is_dst = False ) . strftime ( STRING ) ) NEWLINE break NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE assert len ( VAR ) == len ( pytz . all_timezones )", "try : from BigPackage . SmallSubset import TheOnlyFunctionIReallyNeed NEWLINE except ImportError : from BigPackageSmallSubset import TheOnlyFunctionIReallyNeed", "from cStringIO import StringIO NEWLINE from csv import reader NEWLINE VAR = StringIO ( STRING ) NEWLINE VAR = reader ( VAR , quotechar = STRING ) NEWLINE for VAR in VAR : NEWLINE print VAR", "import csv", "class Order ( BaseModel ) : NEWLINE VAR = models . ForeignKey ( Company ) NEWLINE VAR = models . ManyToManyField ( Product , through = STRING )", ">> > json . loads ( repair_json ( v [ NUMBER ] ) ) NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : True , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : { STRING : NUMBER , STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ] , STRING : NUMBER , STRING : True , STRING : NUMBER , STRING : [ { STRING : [ { STRING : False , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : False , STRING : STRING , STRING : True , STRING : False , STRING : STRING } , { STRING : False , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : False , STRING : STRING , STRING : True , STRING : False , STRING : STRING } , { STRING : False , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : False , STRING : STRING , STRING : True , STRING : False , STRING : STRING } , { STRING : False , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : False , STRING : STRING , STRING : True , STRING : False , STRING : STRING } , { STRING : False , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : False , STRING : STRING , STRING : True , STRING : False , STRING : STRING } ] } ] , STRING : [ { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : False , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } ] } , { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : False , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } ] } , { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : False , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } ] } , { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : False , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } ] } , { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : False , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } ] } , { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : False , STRING : STRING , STRING : [ { STRING : STRING , STRING : STRING } ] } ] , STRING : NUMBER , STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : True , STRING : NUMBER , STRING : STRING , STRING : False , STRING : STRING , STRING : [ ] , STRING : NUMBER , STRING : STRING , STRING : STRING , STRING : NUMBER } , STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : True , STRING : [ { STRING : False , STRING : STRING , STRING : STRING } ] , STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : None , STRING : STRING , STRING : STRING , STRING : False , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : None , STRING : STRING , STRING : STRING , STRING : False , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : NUMBER , STRING : True , STRING : False , STRING : STRING , STRING : NUMBER , STRING : NUMBER }", "{ STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } ] }", "In [ NUMBER ] : list ( nx . weakly_connected_component_subgraphs ( G ) ) NEWLINE Out [ NUMBER ] : NEWLINE [ < networkx . classes . digraph . DiGraph at NUMBER > , < networkx . classes . digraph . DiGraph at NUMBER > ]", "import re NEWLINE def get_matcher ( VAR , VAR ) : NEWLINE VAR = STRING . join ( [ VAR [ NUMBER : VAR ] for VAR in range ( len ( VAR ) , VAR - NUMBER , - NUMBER ) ] ) NEWLINE return re . compile ( STRING % ( VAR ) ) NEWLINE VAR = get_matcher ( STRING , NUMBER ) NEWLINE for VAR in [ STRING , STRING , STRING ] : NEWLINE print VAR . search ( VAR ) . groups ( )", "from django . conf . urls . static import static NEWLINE from django . conf import settings NEWLINE VAR = [ . . . . ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT )", "In [ NUMBER ] : data . src NEWLINE Out [ NUMBER ] : STRING", "[ dict ( VAR , phoneNumbers = [ dict ( VAR , phone = VAR [ STRING ] . replace ( STRING , STRING ) ) for VAR in VAR [ STRING ] ] ) for VAR in list_of_dicts ]", "import gurobipy as grb NEWLINE VAR = grb . VAR NEWLINE VAR = grb . Model ( ) NEWLINE VAR = VAR . addVar ( NUMBER , NUMBER , vtype = VAR . CONTINUOUS ) NEWLINE VAR = VAR . addVar ( NUMBER , NUMBER , vtype = VAR . CONTINUOUS ) NEWLINE VAR . update ( ) NEWLINE VAR . addConstr ( VAR >= VAR - NUMBER ) NEWLINE VAR . addConstr ( VAR >= NUMBER - VAR ) NEWLINE VAR . setObjective ( VAR ) NEWLINE VAR . update ( ) NEWLINE VAR . optimize ( ) NEWLINE print VAR . X NEWLINE VAR . vtype = VAR . BINARY NEWLINE VAR . optimize ( ) NEWLINE print VAR . X NEWLINE", "VAR = data . reshape ( N , Nt , N ) . transpose ( NUMBER , NUMBER , NUMBER )", ">> > main ( ) NEWLINE Enter your full name here : a NEWLINE NUMBER NEWLINE >> > main ( ) NEWLINE Enter your full name here : abc NEWLINE NUMBER NEWLINE >> > main ( ) NEWLINE Enter your full name here : a b c NEWLINE NUMBER", "[ STRING , STRING ]", "VAR = { STRING : { STRING : { STRING : NUMBER } , STRING : { STRING : NUMBER } } } NEWLINE VAR = { STRING : { STRING : { STRING : NUMBER } , STRING : { STRING : NUMBER } } , STRING : { STRING : { STRING : NUMBER } } } NEWLINE def findDiff ( VAR , VAR , VAR = STRING ) : NEWLINE for VAR in VAR . keys ( ) : NEWLINE if not VAR . has_key ( VAR ) : NEWLINE print VAR , STRING NEWLINE print VAR + STRING , STRING NEWLINE else : NEWLINE if type ( VAR [ VAR ] ) is dict : NEWLINE if VAR == STRING : NEWLINE VAR = VAR NEWLINE else : NEWLINE VAR = VAR + STRING + VAR NEWLINE findDiff ( VAR [ VAR ] , VAR [ VAR ] , VAR ) NEWLINE else : NEWLINE if VAR [ VAR ] != VAR [ VAR ] : NEWLINE print VAR , STRING NEWLINE print STRING , VAR , STRING , VAR [ VAR ] NEWLINE print STRING , VAR , STRING , VAR [ VAR ] NEWLINE print STRING NEWLINE print findDiff ( VAR , VAR ) NEWLINE print STRING NEWLINE print findDiff ( VAR , VAR )", "def make_ticker ( VAR ) : NEWLINE VAR = time . time ( ) NEWLINE def elapsed ( ) : NEWLINE VAR = time . time ( ) NEWLINE return ( VAR - VAR ) // VAR NEWLINE return elapsed NEWLINE >> > VAR = make_ticker ( NUMBER ) NEWLINE >> > VAR ( ) NEWLINE NUMBER NEWLINE >> > VAR ( ) NEWLINE NUMBER NEWLINE >> > VAR ( ) NEWLINE NUMBER NEWLINE >> > VAR ( ) NEWLINE NUMBER", "In [ NUMBER ] : VAR = { STRING : NUMBER , STRING : NUMBER } NEWLINE In [ NUMBER ] : vars ( ) . update ( VAR ) NEWLINE In [ NUMBER ] : key1 NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : key2 NEWLINE Out [ NUMBER ] : NUMBER", "print ( STRING . join ( map ( STRING . join , itertools . product ( list1 , list2 , list3 ) ) ) )", "In [ NUMBER ] : % timeit new_function2 ( close , volume , INTERVAL_LENGTH ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "import time NEWLINE from PySide import QtCore , QtGui NEWLINE VAR = QtGui . QApplication ( [ ] ) NEWLINE class WorkerThread ( QtCore . QThread ) : NEWLINE STRING NEWLINE def __init__ ( VAR ) : NEWLINE super ( WorkerThread , VAR ) . __init__ ( ) NEWLINE VAR . running = True NEWLINE def run ( VAR ) : NEWLINE STRING NEWLINE for VAR in range ( NUMBER ) : NEWLINE print ( VAR ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . running = False NEWLINE class BackgroundThread ( QtCore . QThread ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR ) : NEWLINE super ( BackgroundThread , VAR ) . __init__ ( ) NEWLINE VAR . VAR = VAR NEWLINE def run ( VAR ) : NEWLINE STRING NEWLINE while VAR . VAR . running : NEWLINE VAR . processEvents ( ) NEWLINE print ( STRING ) NEWLINE time . sleep ( NUMBER ) NEWLINE def main ( ) : NEWLINE VAR = WorkerThread ( ) NEWLINE VAR = BackgroundThread ( VAR ) NEWLINE VAR . start ( ) NEWLINE VAR . start ( ) NEWLINE VAR . wait ( ) NEWLINE if __name__ == STRING : NEWLINE main ( )", "def get_query_results ( * filters ) : NEWLINE VAR = models . Item . query NEWLINE for VAR , VAR in enumerate ( filters , NUMBER ) : NEWLINE if VAR is not None : NEWLINE VAR = { STRING . format ( VAR ) : VAR } NEWLINE VAR = VAR . filter ( ** VAR ) NEWLINE return VAR . all ( )", "def choice_without_repetition ( VAR ) : NEWLINE VAR = None NEWLINE while True : NEWLINE VAR = random . randrange ( len ( VAR ) ) NEWLINE if VAR != VAR : NEWLINE yield VAR [ VAR ] NEWLINE VAR = VAR", "pl . xlabel ( STRING , labelpad = NUMBER )", "[ STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING ] NEWLINE Charge", "import re NEWLINE import collections NEWLINE def cleandup ( VAR ) : NEWLINE for VAR in VAR : NEWLINE for VAR in re . findall ( STRING , VAR . lower ( ) ) : NEWLINE yield VAR NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = collections . Counter ( cleanedup ( VAR ) ) NEWLINE print VAR . most_commond ( NUMBER )", "class VirtualField ( object ) : NEWLINE VAR = None NEWLINE def contribute_to_class ( VAR , VAR , VAR ) : NEWLINE VAR . attname = VAR . VAR = VAR NEWLINE VAR = VAR . _meta . VAR NEWLINE VAR . _meta . VAR = lambda VAR , VAR = True : VAR if VAR == VAR . VAR else VAR ( VAR , VAR ) NEWLINE models . signals . pre_init . connect ( VAR . pre_init , VAR = VAR ) NEWLINE models . signals . post_init . connect ( VAR . post_init , VAR = VAR ) NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE def pre_init ( VAR , VAR , VAR , VAR , VAR , ** _kwargs ) : NEWLINE VAR . _meta . _field_name_cache . append ( VAR ) NEWLINE def post_init ( VAR , VAR , VAR , ** VAR ) : NEWLINE VAR . _meta . _field_name_cache [ : ] = VAR . _meta . _field_name_cache [ : - NUMBER ] NEWLINE def __get__ ( VAR , VAR , VAR = None ) : NEWLINE if VAR is None : NEWLINE return VAR NEWLINE return VAR . VAR + STRING + VAR . VAR NEWLINE def __set__ ( VAR , VAR , VAR ) : NEWLINE if VAR is None : NEWLINE raise AttributeError ( STRING % VAR . related . opts . object_name ) NEWLINE VAR . VAR , VAR . VAR = VAR . split ( STRING ) NEWLINE def to_python ( VAR , VAR ) : NEWLINE return VAR NEWLINE class A ( models . Model ) : NEWLINE VAR = models . TextField ( ) NEWLINE VAR = models . TextField ( ) NEWLINE VAR = VirtualField ( ) NEWLINE [ { STRING : NUMBER , STRING : STRING , STRING : { STRING : STRING } } , { STRING : NUMBER , STRING : STRING , STRING : { STRING : STRING } } ] NEWLINE $ . / manage . py loaddump legacy . json NEWLINE Installed NUMBER object ( s ) from NUMBER fixture ( s )", "import numpy NEWLINE import timeit NEWLINE def makebigfile ( VAR ) : NEWLINE VAR = numpy . random . standard_normal ( ( NUMBER , NUMBER ) ) NEWLINE numpy . savetxt ( VAR , VAR , delimiter = STRING ) NEWLINE def csvdump ( VAR , VAR = True ) : NEWLINE VAR , VAR , VAR , VAR , VAR , VAR , VAR = numpy . genfromtxt ( str ( VAR ) + STRING , unpack = True , delimiter = STRING ) NEWLINE if VAR : NEWLINE for VAR in VAR : NEWLINE VAR = str ( NUMBER / VAR ) NEWLINE VAR = open ( str ( VAR ) + STRING , STRING ) NEWLINE VAR . write ( VAR ) NEWLINE VAR . write ( STRING ) NEWLINE else : NEWLINE numpy . savetxt ( str ( VAR ) + STRING , NUMBER / VAR ) NEWLINE makebigfile ( STRING ) NEWLINE print timeit . timeit ( stmt = STRING , setup = STRING , number = NUMBER ) NEWLINE print timeit . timeit ( stmt = STRING , setup = STRING , number = NUMBER )", "< can_be_link > NEWLINE < ul > NEWLINE < li class = STRING > NEWLINE < can_be_link > NEWLINE < / li > NEWLINE < / ul >", "class bidirectional_iterator ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . index = NUMBER NEWLINE def next ( VAR ) : NEWLINE try : NEWLINE VAR = VAR . VAR [ VAR . index ] NEWLINE VAR . index += NUMBER NEWLINE except IndexError : NEWLINE raise StopIteration NEWLINE return VAR NEWLINE def prev ( VAR ) : NEWLINE VAR . index -= NUMBER NEWLINE if VAR . index < NUMBER : NEWLINE raise StopIteration NEWLINE return VAR . VAR [ VAR . index ] NEWLINE def __iter__ ( VAR ) : NEWLINE return VAR", "In [ NUMBER ] : VAR = [ [ sparse . coo_matrix ( VAR ) ] for VAR in ll ] NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE [ [ < NUMBER x5 sparse matrix of type STRING numpy . float64 STRING with NUMBER stored elements in COOrdinate format > ] , [ < NUMBER x5 sparse matrix of type STRING numpy . float64 STRING with NUMBER stored elements in COOrdinate format > ] , [ < NUMBER x5 sparse matrix of type STRING numpy . float64 STRING with NUMBER stored elements in COOrdinate format > ] , [ < NUMBER x5 sparse matrix of type STRING numpy . float64 STRING with NUMBER stored elements in COOrdinate format > ] ]", "from decimal import Decimal NEWLINE print ( access . getinfo ( ) [ STRING ] )", ">> > import re NEWLINE >> > from string import whitespace NEWLINE >> > VAR = re . search ( STRING , ph , re . DOTALL ) . group ( NUMBER ) NEWLINE >> > VAR . translate ( None , STRING + whitespace ) . split ( STRING ) NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "In [ NUMBER ] : y [ NUMBER , : , NUMBER , : ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : y [ NUMBER , : , NUMBER , : ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] )", "wFatDate [ in ] NEWLINE The MS - DOS date . The date is a packed value with the following format . NEWLINE Bits Description NEWLINE NUMBER - NUMBER Day of the month ( NUMBER ) NEWLINE NUMBER - NUMBER Month ( NUMBER = January , NUMBER = February , and so on ) NEWLINE NUMBER - NUMBER Year offset from NUMBER ( add NUMBER to get actual year ) NEWLINE wFatTime [ in ] NEWLINE The MS - DOS time . The time is a packed value with the following format . NEWLINE Bits Description NEWLINE NUMBER - NUMBER Second divided by NUMBER NEWLINE NUMBER - NUMBER Minute ( NUMBER NUMBER ) NEWLINE NUMBER - NUMBER Hour ( NUMBER on a NUMBER - hour clock )", "[ STRING % VAR for VAR in range ( NUMBER ) ]", "from django import template NEWLINE VAR = template . Library ( ) NEWLINE @ VAR . filter NEWLINE def sum_monto ( VAR , VAR ) : NEWLINE if VAR == STRING : NEWLINE return sum ( VAR . monto for VAR in VAR if VAR . monto > NUMBER ) NEWLINE else NEWLINE return sum ( VAR . monto for VAR in VAR if VAR . monto < NUMBER )", "In [ NUMBER ] : VAR = np . arange ( NUMBER ) NEWLINE In [ NUMBER ] : VAR = np . dtype ( [ ( STRING , int ) , ( STRING , [ ( STRING , float ) , ( STRING , float ) ] ) ] ) NEWLINE In [ NUMBER ] : VAR = np . array ( zip ( VAR , zip ( x , y ) ) , dtype = VAR ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) , ( NUMBER , ( NUMBER , NUMBER ) ) ] , dtype = [ ( STRING , STRING ) , ( STRING , [ ( STRING , STRING ) , ( STRING , STRING ) ] ) ] ) NEWLINE In [ NUMBER ] : VAR [ STRING ] NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , dtype = [ ( STRING , STRING ) , ( STRING , STRING ) ] ) NEWLINE In [ NUMBER ] : VAR [ STRING ] [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "import os NEWLINE VAR = STRING NEWLINE VAR = [ ] NEWLINE for VAR in os . listdir ( VAR ) : NEWLINE if os . VAR . isfile ( os . VAR . join ( VAR , VAR ) ) and STRING in VAR : NEWLINE VAR . append ( VAR )", "// / @ brief Mockup Spam class . NEWLINE struct Spam NEWLINE { int x ; int y ; Spam ( ) { std : : cout << STRING << std : : endl ; } ~ Spam ( ) { std : : cout << STRING << std : : endl ; } Spam ( const Spam & rhs ) : x ( rhs . x ) , y ( rhs . y ) { std : : cout << STRING << std : : endl ; } } ; NEWLINE // / @ brief Helper function to ceck if an object has an attributed with a NEWLINE // / specific type . NEWLINE template < typename T > NEWLINE bool hasattr ( const boost : : python : : object & obj , const char * name ) NEWLINE { return PyObject_HasAttrString ( obj . ptr ( ) , name ) & & boost : : python : : extract < T > ( obj . attr ( name ) ) . check ( ) ; } NEWLINE // / @ brief Helper type that provides conversions from a Python object to Spam . NEWLINE struct spam_from_python NEWLINE { spam_from_python ( ) { boost : : python : : converter : : registry : : push_back ( & spam_from_python : : convertible , & spam_from_python : : construct , boost : : python : : type_id < Spam > ( ) ) ; } // / @ brief Check if PyObject contains an x and y int attribute . static void * convertible ( PyObject * object ) { namespace python = boost : : python ; python : : handle <> handle ( python : : borrowed ( object ) ) ; python : : object o ( handle ) ; // If x and y are not int attributes , then return null . if ( ! hasattr < int > ( o , STRING ) & & hasattr < int > ( o , STRING ) ) return NULL ; return object ; } // / @ brief Convert PyObject to Spam . static void construct ( PyObject * object , boost : : python : : converter : : rvalue_from_python_stage1_data * data ) { // Obtain a handle to the memory block that the converter has allocated // for the C + + type . namespace python = boost : : python ; typedef python : : converter : : rvalue_from_python_storage < Spam > storage_type ; void * storage = reinterpret_cast < storage_type * > ( data ) - > storage . bytes ; // Allocate the C + + type into the converter ' s memory block , and assign // its handle to the converter ' s convertible variable . Spam * spam ; data - > convertible = spam = new ( storage ) Spam ( ) ; // Initialize spam from an object . initialize_spam ( spam , object ) ; } // / @ brief Initialize a spam instance based on a python object . static void initialize_spam ( Spam * spam , PyObject * object ) { namespace python = boost : : python ; python : : handle <> handle ( python : : borrowed ( object ) ) ; python : : object o ( handle ) ; spam - > x = python : : extract < int > ( o . attr ( STRING ) ) ; spam - > y = python : : extract < int > ( o . attr ( STRING ) ) ; } } ; NEWLINE // / @ brief Helper type that provides conversions from a Python object to NEWLINE // / boost : : shared_ptr < Spam > . NEWLINE struct shared_spam_from_python NEWLINE { shared_spam_from_python ( ) { boost : : python : : converter : : registry : : push_back ( & spam_from_python : : convertible , & shared_spam_from_python : : construct , boost : : python : : type_id < boost : : shared_ptr < Spam > > ( ) ) ; } // / @ brief Convert PyObject to boost : : shared < Spam > . static void construct ( PyObject * object , boost : : python : : converter : : rvalue_from_python_stage1_data * data ) { // Obtain a handle to the memory block that the converter has allocated // for the C + + type . namespace python = boost : : python ; typedef python : : converter : : rvalue_from_python_storage < boost : : shared_ptr < Spam > > storage_type ; void * storage = reinterpret_cast < storage_type * > ( data ) - > storage . bytes ; // Allocate the C + + type into the converter ' s memory block , and assign // its handle to the converter ' s convertible variable . boost : : shared_ptr < Spam > * spam ; data - > convertible = spam = new ( storage ) boost : : shared_ptr < Spam > ( boost : : make_shared < Spam > ( ) ) ; // Initialize spam from an object . spam_from_python : : initialize_spam ( spam - > get ( ) , object ) ; } } ; NEWLINE // / @ brief Mockup functions acceping Spam in different ways . NEWLINE void by_value ( Spam spam ) { std : : cout << STRING << std : : endl ; } NEWLINE void by_const_ref ( const Spam & spam ) { std : : cout << STRING << std : : endl ; } NEWLINE void by_ref ( Spam & spam ) { std : : cout << STRING << std : : endl ; } NEWLINE void by_ptr ( Spam * spam ) { std : : cout << STRING << std : : endl ; } NEWLINE // / @ brief Use auxiliary functions that accept boost : : shared_ptr < Spam > and NEWLINE // / delegate to functions that have formal parameters of Spam & and NEWLINE // / Spam * . NEWLINE void by_ref_wrap ( boost : : shared_ptr < Spam > spam ) { return by_ref ( * spam ) ; } NEWLINE void by_ptr_wrap ( boost : : shared_ptr < Spam > spam ) { return by_ptr ( spam . get ( ) ) ; } NEWLINE BOOST_PYTHON_MODULE ( example ) NEWLINE { namespace python = boost : : python ; // Enable python to Spam conversion . spam_from_python ( ) ; // Enable python to boost : : shared_ptr < Spam > conversion . shared_spam_from_python ( ) ; // Expose functions that have parameters that can accept a const Spam & // argument . python : : def ( STRING , & by_value ) ; python : : def ( STRING , & by_const_ref ) ; // Expose functions that have parameters that can accept a const // boost : : shared_ptr < Spam > & argument . As copies of shared_ptr are cheap , // a copy is used and the managed instance is passed to other functions , // allowing Spam & and Spam * parameters . python : : def ( STRING , & by_ptr_wrap ) ; python : : def ( STRING , & by_ref_wrap ) ; }", "GetPosition ( ) NEWLINE GetState ( ) NEWLINE GetStep ( ) NEWLINE SetPosition ( pos ) NEWLINE StepIt ( )", "import web NEWLINE VAR = { STRING : web . cookies , } NEWLINE VAR = web . template . VAR ( STRING , globals = VAR , base = STRING , cache = False )", "import glob NEWLINE import numpy as np NEWLINE VAR = glob . glob ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = np . load ( VAR ) NEWLINE plt . plot ( VAR )", "VAR = BeautifulSoup ( data ) NEWLINE for VAR in VAR . find_all ( text = STRING ) : NEWLINE print VAR . find_parent ( STRING ) . find_next_sibling ( STRING ) . get_text ( strip = True )", ">> > parseTags ( STRING ) NEWLINE [ STRING , STRING , STRING , STRING ]", "VAR = STRING ; NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR . write ( VAR . encode ( STRING ) ) NEWLINE VAR . close ( )", "[ NUMBER NUMBER ] NEWLINE [ NUMBER NUMBER ] NEWLINE [ NUMBER NUMBER ] NEWLINE [ NUMBER NUMBER ]", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE def parse ( VAR ) : NEWLINE VAR = VAR . strip ( ) . split ( STRING ) NEWLINE VAR , VAR = VAR [ NUMBER ] . split ( STRING ) NEWLINE return VAR , VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] NEWLINE print map ( parse , VAR ) NEWLINE", "VAR = User . objects . get ( username = STRING ) NEWLINE VAR . tasks . all ( )", "def Http500Resistant ( VAR ) : NEWLINE VAR = NUMBER NEWLINE @ functools . wraps ( VAR ) NEWLINE def wrapper ( * a , ** kw ) : NEWLINE VAR = NUMBER NEWLINE for VAR in range ( VAR ) : NEWLINE try : NEWLINE return VAR ( * a , ** kw ) NEWLINE except apiclient . errors . HttpError , VAR : NEWLINE if VAR . resp . status == NUMBER and VAR < VAR - NUMBER : NEWLINE sleep ( VAR ) NEWLINE VAR = min ( NUMBER * VAR , NUMBER ) NEWLINE else : NEWLINE raise VAR NEWLINE return wrapper NEWLINE class A ( object ) : NEWLINE @ Http500Resistant NEWLINE def f1 ( self ) : . . . NEWLINE @ Http500Resistant NEWLINE def f2 ( self ) : . . .", ">> > from itertools import product NEWLINE >> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > def f ( VAR ) : return VAR . lower ( ) NEWLINE . . . NEWLINE >> > VAR = [ f ( VAR ) for VAR in VAR ] NEWLINE >> > for VAR in product ( * zip ( VAR , VAR ) ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING ) NEWLINE ( STRING , STRING , STRING )", "VAR = [ NUMBER for VAR in bins ] NEWLINE for VAR in data_points : NEWLINE VAR = VAR // bin_width NEWLINE VAR [ VAR ] += NUMBER", "{ % block STRING % } NEWLINE { { contact . title } } NEWLINE { % endblock % } NEWLINE { % block STRING % } NEWLINE { % endblock % }", "Stock left NEWLINE COMH000 NUMBER NEWLINE COMT000 NUMBER NEWLINE COMT001 NUMBER NEWLINE CT100H000 NUMBER NEWLINE COM NEWLINE COM NEWLINE COM NEWLINE COME001 NUMBER NEWLINE Picked : [ STRING , STRING , STRING , STRING , STRING , STRING ]", "palindrom iteratorPalindrome pythonicPalindrome palindromewrite_cols ( data , NUMBER ) NEWLINE a b c NEWLINE d e f NEWLINE g h", "while lst : NEWLINE VAR = lst . pop ( ) NEWLINE", ">> > chr ( NUMBER ) NEWLINE STRING NEWLINE >> > chr ( NUMBER ) NEWLINE STRING NEWLINE >> > chr ( NUMBER ) NEWLINE STRING", "In [ NUMBER ] : VAR = ( STRING , STRING , STRING ) NEWLINE In [ NUMBER ] : [ dict ( zip ( VAR , VAR ) ) for VAR in all_values ] NEWLINE Out [ NUMBER ] : NEWLINE [ { STRING : NUMBER , STRING : STRING , STRING : NUMBER } , { STRING : NUMBER , STRING : STRING , STRING : NUMBER } , { STRING : NUMBER , STRING : STRING , STRING : NUMBER } ]", ">> > VAR = STRING NEWLINE >> > VAR = json . loads ( VAR ) NEWLINE >> > VAR [ STRING ] NEWLINE NUMBER NEWLINE >> >", "VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE print filter ( lambda VAR : VAR [ NUMBER ] == STRING , VAR )", "< body > NEWLINE < button onclick = STRING > Click me < / button > NEWLINE < script > NEWLINE function js_fn ( variable ) { alert ( variable ) ; } NEWLINE < / script > NEWLINE < / body >", "VAR = d . keys ( ) [ NUMBER : ] NEWLINE for VAR in VAR : NEWLINE del d [ VAR ]", ">> > pick ( NUMBER ) NEWLINE OSD - NUMBER NEWLINE KRH - NUMBER NEWLINE MDE - NUMBER NEWLINE ZJF - NUMBER NEWLINE LUX - NUMBER NEWLINE >> > pick ( NUMBER ) NEWLINE >> > pick ( NUMBER ) NEWLINE SFT - NUMBER NEWLINE XSL - NUMBER NEWLINE MAF - NUMBER", ">> > df < NUMBER NEWLINE fld1 fld2 fld3 fld4 fld5 fld6 fld7 NEWLINE NUMBER False False True False False False False NEWLINE NUMBER False False False False False True False NEWLINE NUMBER False False False False False False False NEWLINE NUMBER True True False False False False False NEWLINE NUMBER False False False False False False False NEWLINE NUMBER True False False False False False False NEWLINE NUMBER False False True False False False False NEWLINE NUMBER False False False False False False False NEWLINE NUMBER False False False False False True False NEWLINE NUMBER False False False False False False False NEWLINE >> > ( df < NUMBER ) . any ( ) NEWLINE fld1 True NEWLINE fld2 True NEWLINE fld3 True NEWLINE fld4 False NEWLINE fld5 False NEWLINE fld6 True NEWLINE fld7 False NEWLINE dtype : bool", "VAR = df . set_index ( [ STRING ] , append = True ) . stack ( ) NEWLINE", "VAR = STRING", "ser . write ( bytes ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) )", "import os NEWLINE import cv NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = [ STRING % ( os . getcwd ( ) , VAR . strip ( ) ) for VAR in VAR ]", "VAR = { bet_pav : [ kk ] }", "$ cat script . py NEWLINE import subprocess NEWLINE VAR = subprocess . Popen ( STRING , shell = True ) NEWLINE VAR . wait ( )", "for VAR in range ( times_to_advance ) : NEWLINE next ( file_object )", "VAR = np . argsort ( vor . point_region ) NEWLINE VAR = VAR [ regions - NUMBER ]", "print pd . concat ( [ df [ STRING ] , pd . get_dummies ( df [ STRING ] ) ] , axis = NUMBER ) NEWLINE ID and it long road take the walkfrom mpl_toolkits . basemap import Basemap NEWLINE def drawmlat ( VAR , VAR , VAR , VAR = something ) : NEWLINE pass NEWLINE Basemap . drawmlat = drawmlat", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE from matplotlib . colors import LinearSegmentedColormap NEWLINE VAR = LinearSegmentedColormap . from_list ( STRING , [ STRING , STRING , STRING ] ) NEWLINE VAR , VAR = np . mgrid [ - NUMBER : NUMBER , - NUMBER : NUMBER ] NEWLINE VAR = np . cos ( np . hypot ( VAR , VAR ) / NUMBER ) + NUMBER NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR = VAR . contourf ( VAR , VAR , VAR , VAR = VAR ) NEWLINE VAR = VAR . colorbar ( VAR ) NEWLINE VAR . set_label ( STRING ) NEWLINE plt . show ( )", ">> > df [ STRING ] . diff ( ) NEWLINE time NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NaN NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE Name : close , dtype : float64", ">> > from collections import defaultdict NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = defaultdict ( list ) NEWLINE >> > for VAR in VAR : NEWLINE . . . VAR , VAR = VAR . split ( ) NEWLINE . . . VAR [ VAR ] . append ( VAR ) NEWLINE . . . NEWLINE >> > [ STRING . join ( VAR ) for VAR in VAR . values ( ) ] NEWLINE [ STRING , STRING ]", "with open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE for VAR , VAR in eachCite ( VAR ) : NEWLINE if VAR : NEWLINE VAR . write ( STRING ) NEWLINE VAR . write ( VAR )", "import heapq NEWLINE import contextlib NEWLINE VAR = [ open ( VAR ) for VAR in inFiles ] NEWLINE with contextlib . nested ( * VAR ) : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . writelines ( heapq . merge ( * VAR ) )", "SELECT foo . name , bar . name , ( SELECT COUNT ( STRING ) FROM baz WHERE baz . foo_id = foo . id AND baz . bar_id = bar . id ) FROM foo , bar", "aqua : test $ cat newwordlist . txt NEWLINE Testing NEWLINE This NEWLINE Wordlist NEWLINE With NEWLINE Returns NEWLINE Between NEWLINE Lines", "with open ( STRING ) as filehandler_name : NEWLINE with open ( STRING , STRING ) as filehandler_name : NEWLINE import csv NEWLINE VAR = csv . VAR ( filehandler_name ) NEWLINE VAR = csv . VAR ( filehandler_name ) NEWLINE for VAR in VAR : NEWLINE", "if my_func ( x ) == some_value : NEWLINE print my_func . last NEWLINE return my_func . last", "import operator NEWLINE from prettytable import PrettyTable NEWLINE VAR = PrettyTable ( [ STRING , STRING ] ) NEWLINE VAR . add_row ( [ STRING , NUMBER ] ) NEWLINE VAR . add_row ( [ STRING , NUMBER ] ) NEWLINE VAR . add_row ( [ STRING , NUMBER ] ) NEWLINE VAR . add_row ( [ STRING , NUMBER ] ) NEWLINE print VAR . get_string ( sort_key = operator . itemgetter ( NUMBER , NUMBER ) , sortby = STRING )", "[ STRING , STRING , STRING ]", "async def hello_world ( loop ) : NEWLINE print ( STRING ) NEWLINE await asyncio . sleep ( NUMBER , loop = loop ) NEWLINE print ( STRING )", "def count_zeros_gen ( VAR ) : NEWLINE return sum ( VAR . count ( NUMBER ) for VAR in VAR )", "< eventlog > NEWLINE level INFO NEWLINE < logfile > NEWLINE path / path / to / plone / var / log / instance . log NEWLINE level INFO NEWLINE < / logfile > NEWLINE < / eventlog >", "string [ start * NUMBER : ( end + NUMBER ) * NUMBER ]", "import csvwith open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR , delimiter = STRING ) NEWLINE for VAR in zip ( * [ VAR for VAR in VAR ] ) : NEWLINE VAR . writerow ( VAR )", "from itertools import combinations NEWLINE for VAR , VAR in combinations ( self . objects , NUMBER ) : NEWLINE if pygame . sprite . collide_rect ( VAR , VAR ) : NEWLINE grid . collisions . append ( Collision ( VAR , VAR ) )", "a_list [ NUMBER : NUMBER ] = b_list", "from google . appengine . ext import ndb NEWLINE from endpoints_proto_datastore . ndb import EndpointsModel NEWLINE class User ( EndpointsModel ) : NEWLINE VAR = ndb . StringProperty ( ) NEWLINE . . .", "< html > NEWLINE < body > NEWLINE < h1 > Trademark < / h1 > NEWLINE < div id = STRING > NEWLINE < div id = STRING > NEWLINE < img src = STRING > NEWLINE < / div > NEWLINE < div id = STRING > NEWLINE { { text } } NEWLINE < / div > NEWLINE < / div > NEWLINE < / body > NEWLINE < / html >", "< form method = STRING > { % csrf_token % } NEWLINE < div class = STRING > NEWLINE < div class = STRING > NEWLINE < h3 class = STRING > Teacher Information < / h3 > NEWLINE < / div > NEWLINE < div class = STRING > NEWLINE { { user_form } } NEWLINE { { form } } NEWLINE < button class = STRING type = STRING > Save < / button > NEWLINE < / div > NEWLINE < / div > NEWLINE < / form >", "split ( open ( STRING , STRING ) ) ;", ">> > VAR = defaultdict ( list ) NEWLINE for k , v in dic . iteritems ( ) : NEWLINE for val in v : NEWLINE VAR [ val ] . append ( k ) NEWLINE . . . NEWLINE >> > VAR NEWLINE defaultdict ( < type STRING > , { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER ] , STRING : [ NUMBER ] } )", "VAR = STRING NEWLINE from lxml import etree NEWLINE VAR = etree . XML ( VAR ) NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE for VAR in VAR : NEWLINE print ( etree . tostring ( VAR ) )", "import inverse_regex NEWLINE print ( STRING . join ( inverse_regex . ipermute ( STRING ) ) ) NEWLINE", "def f4 ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE if VAR [ NUMBER ] != NUMBER : NEWLINE VAR . setdefault ( VAR [ NUMBER ] , { } ) [ VAR ] = NUMBER NEWLINE return VAR [ min ( VAR . keys ( ) ) ] . keys ( ) NEWLINE % timeit f4 ( VAR ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop", "{ STRING : STRING , STRING : [ STRING , STRING , STRING ] } NEWLINE { STRING : STRING }", "abbrev . short_description = STRING", "VAR = voxel_communities . size NEWLINE VAR = sorted ( set ( voxel_communities ) ) NEWLINE VAR = [ ( voxel_communities == VAR ) . sum ( ) for VAR in VAR ] NEWLINE VAR = numpy . zeros ( ( VAR , VAR ) , dtype = bool ) NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR [ VAR : VAR + VAR , VAR : VAR + VAR ] = NUMBER NEWLINE VAR += VAR", "VAR = list ( oldList )", "with open ( STRING ) as VAR : NEWLINE for VAR , VAR in itertools . groupby ( sorted ( map ( str . split , VAR . read ( ) . strip ( ) . split ( STRING ) ) ) , key = lambda VAR : VAR [ NUMBER ] ) : NEWLINE print VAR , len ( list ( VAR ) )", "if is_iterable ( test ) : NEWLINE for VAR in test : NEWLINE do_stuff ( VAR ) NEWLINE else : NEWLINE do_stuff ( test )", "import re NEWLINE import collections NEWLINE def cleandup ( VAR ) : NEWLINE for VAR in VAR : NEWLINE for VAR in re . split ( STRING , VAR . lower ( ) ) : NEWLINE yield VAR NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = collections . Counter ( cleanedup ( VAR ) ) NEWLINE print VAR . most_commond ( NUMBER )", "def transpose ( VAR ) : NEWLINE return map ( list , zip ( * VAR ) )", "for VAR , VAR in results : NEWLINE if int ( VAR ) in valid : NEWLINE print ( STRING . format ( VAR , VAR [ NUMBER ] [ NUMBER ] , VAR [ NUMBER ] [ NUMBER ] ) )", "import matplotlib . pyplot as plt NEWLINE from matplotlib . patches import Wedge NEWLINE def main ( ) : NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE dual_half_circle ( VAR = NUMBER , VAR = NUMBER , VAR = VAR ) NEWLINE VAR . axis ( STRING ) NEWLINE plt . show ( ) NEWLINE def dual_half_circle ( VAR , VAR = NUMBER , VAR = None , VAR = ( STRING , STRING ) , ** kwargs ) : NEWLINE STRING NEWLINE if VAR is None : NEWLINE VAR = plt . gca ( ) NEWLINE kwargs . update ( transform = VAR . transAxes , clip_on = False ) NEWLINE VAR = ( NUMBER , NUMBER ) NEWLINE VAR , VAR = VAR , VAR + NUMBER NEWLINE VAR = Wedge ( VAR , VAR , VAR , VAR , fc = VAR [ NUMBER ] , ** kwargs ) NEWLINE VAR = Wedge ( VAR , VAR , VAR , VAR , fc = VAR [ NUMBER ] , ** kwargs ) NEWLINE for VAR in [ VAR , VAR ] : NEWLINE VAR . add_artist ( VAR ) NEWLINE return [ VAR , VAR ] NEWLINE main ( )", "import Image NEWLINE import numpy as np NEWLINE VAR = STRING NEWLINE VAR = np . array ( [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] , dtype = STRING ) NEWLINE VAR = VAR [ np . array ( map ( int , list ( VAR ) ) ) ] . reshape ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR = Image . fromarray ( VAR , STRING ) NEWLINE VAR . save ( STRING , STRING )", "VAR = open ( files [ NUMBER ] ) . read ( ) NEWLINE VAR , VAR = VAR . split ( STRING , NUMBER ) NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR = VAR [ : NUMBER ]", "class BlogUpdateView ( UpdateView ) : NEWLINE VAR = Blog NEWLINE @ staticmethod NEWLINE def publish ( request , pk ) : NEWLINE if request . method == STRING : NEWLINE Blog . objects . filter ( pk = pk ) . update ( publish_date = datetime . datetime . now ( ) ) NEWLINE return HttpResponseRedirect ( STRING + pk )", "xml . xpath ( STRING , namespaces = ns )", "with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE if any ( VAR in VAR for VAR in word_set )", "import matplotlib . pyplot as plt NEWLINE VAR , = plt . plot ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING ) NEWLINE VAR . set_dashes ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE plt . show ( )", "import socket NEWLINE def udp_server ( udp_ip , udp_port , . . . ) : NEWLINE VAR = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) NEWLINE VAR . bind ( ( upd_ip , upd_port ) ) NEWLINE while True : NEWLINE VAR , VAR = VAR . recvfrom ( NUMBER ) NEWLINE . . . process VAR . . .", "pd . DataFrame ( distance_matrix ( df . values , df . values ) , index = df . index , columns = df . index )", ">> > import re NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = re . compile ( STRING ) NEWLINE >> > VAR = VAR . findall ( STRING . join ( VAR ) ) NEWLINE >> > VAR NEWLINE [ STRING ] NEWLINE >> > len ( VAR ) NEWLINE NUMBER NEWLINE >> >", "import pandas as pd NEWLINE VAR = [ [ STRING , STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING , STRING ] ] NEWLINE VAR = pd . DataFrame ( { STRING : list ( STRING ) , STRING : [ NUMBER , NUMBER , NUMBER ] } ) NEWLINE VAR [ STRING ] = VAR NEWLINE print ( VAR . groupby ( [ STRING ] ) [ STRING ] . sum ( ) )", "import random NEWLINE import operator NEWLINE VAR = list ( STRING ) NEWLINE VAR = STRING . split ( ) NEWLINE VAR = [ random . randrange ( len ( VAR ) ) for VAR in xrange ( NUMBER ) ] NEWLINE VAR = zip ( VAR , VAR ) NEWLINE print VAR NEWLINE VAR . sort ( key = operator . itemgetter ( NUMBER ) ) NEWLINE print VAR NEWLINE for VAR , VAR in reversed ( VAR ) : NEWLINE print STRING . format ( VAR , VAR ) NEWLINE VAR [ VAR : VAR ] = list ( VAR ) NEWLINE print STRING . join ( VAR )", "from matplotlib import pyplot as plt NEWLINE from matplotlib . patches import Polygon NEWLINE import numpy as np NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . sin ( VAR ) NEWLINE plt . plot ( VAR , VAR ) NEWLINE VAR = plt . gca ( ) NEWLINE VAR = [ [ NUMBER , - NUMBER ] , [ NUMBER , - NUMBER ] , [ NUMBER , - NUMBER ] ] NEWLINE VAR = VAR . transAxes . inverted ( ) . transform NEWLINE VAR = VAR . transData . transform NEWLINE VAR = VAR ( VAR ( VAR ) ) NEWLINE VAR . add_patch ( Polygon ( VAR , True ) ) NEWLINE VAR . add_patch ( Polygon ( VAR , True , transform = VAR . transAxes ) ) NEWLINE plt . show ( )", ">> > from collections import defaultdict NEWLINE >> > VAR = defaultdict ( list ) NEWLINE >> > VAR [ STRING ] . append ( NUMBER ) NEWLINE >> > VAR [ STRING ] . append ( NUMBER ) NEWLINE >> > VAR [ STRING ] . append ( NUMBER ) NEWLINE >> > VAR [ STRING ] . append ( NUMBER ) NEWLINE >> > VAR [ STRING ] . append ( NUMBER ) NEWLINE >> > print ( VAR [ STRING ] ) NEWLINE [ NUMBER , NUMBER ] NEWLINE >> > print ( VAR ) NEWLINE defaultdict ( < type STRING > , { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER ] , STRING : [ NUMBER , NUMBER ] } )", ">> > VAR = STRING NEWLINE >> > re . search ( VAR , STRING ) . group ( NUMBER ) NEWLINE STRING NEWLINE >> > re . search ( VAR , STRING ) . group ( NUMBER ) NEWLINE STRING", "$ def = @ \" NEWLINE // I removed every other enum - value to shorten the sample NEWLINE public enum SystemMetric NEWLINE { VAR = NUMBER , // NUMBER } NEWLINE [ DllImport ( STRING ) ] NEWLINE public static extern int GetSystemMetrics ( SystemMetric smIndex ) ; NEWLINE \" @ NEWLINE Add - Type - Namespace NativeMethods - Name User32Dll - MemberDefinition $ def NEWLINE [ NativeMethods . User32Dll ] : : GetSystemMetrics ( [ NativeMethods . User32Dll + SystemMetric ] : : VAR )", "class WeakCallback ( object ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = VAR . im_self NEWLINE VAR = VAR . im_func . __name__ NEWLINE VAR . VAR = weakref . ref ( VAR , VAR . object_deleted ) NEWLINE VAR . callback_attr = VAR NEWLINE VAR . token = None NEWLINE def __call__ ( VAR , * args , ** kwargs ) : NEWLINE VAR = VAR . VAR ( ) NEWLINE if VAR : NEWLINE VAR = getattr ( VAR , VAR . callback_attr ) NEWLINE VAR ( * args , ** kwargs ) NEWLINE else : NEWLINE VAR . default_callback ( * args , ** kwargs ) NEWLINE def default_callback ( VAR , * args , ** kwargs ) : NEWLINE STRING NEWLINE pass NEWLINE def object_deleted ( VAR , VAR ) : NEWLINE STRING NEWLINE pass", ">> > [ [ processPair ( * VAR ) for VAR in VAR ] for VAR in l ] NEWLINE [ [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER , NUMBER ) ] ]", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = STRING NEWLINE print ( VAR ) NEWLINE print ( STRING ) NEWLINE for VAR in VAR . finditer ( VAR ) : NEWLINE if VAR . group ( STRING ) : NEWLINE print ( VAR . group ( STRING ) ) NEWLINE elif VAR . group ( STRING ) : NEWLINE print ( VAR . group ( STRING ) ) NEWLINE else : NEWLINE print ( VAR . group ( STRING ) )", "df . loc [ STRING , : ] = df_ . values", "grep - Frlf messages . txt dir", "nice day in nyc = > New York NEWLINE welcome to london = > London NEWLINE hello welcome to new york . enjoy it here and london too = > New York , London", "VAR = df [ df [ STRING ] > NUMBER ] . index", "import P4 NEWLINE VAR = P4 . P4 ( ) NEWLINE VAR . connect ( ) NEWLINE VAR . run_opened ( ) [ NUMBER ] [ STRING ] NEWLINE VAR . disconnect ( )", "if a . count ( a [ NUMBER ] ) != len ( a )", "VAR = [ ] NEWLINE for VAR , VAR in enumerate ( cities ) : NEWLINE VAR = raw_input ( STRING + VAR + STRING ) NEWLINE VAR . append ( VAR ) NEWLINE", ">> > from selenium import webdriver NEWLINE >> > VAR = webdriver . PhantomJS ( ) NEWLINE >> > VAR . get ( STRING ) NEWLINE >> > VAR . title NEWLINE STRING", "import random NEWLINE def mutate ( VAR , VAR , VAR ) : NEWLINE VAR = list ( VAR ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR in VAR : NEWLINE if random . random ( ) < VAR : NEWLINE VAR [ VAR ] = VAR [ VAR ] NEWLINE return STRING . join ( VAR )", "{ % set count = NUMBER % } NEWLINE { % for VAR in p % } NEWLINE { { count } } NEWLINE { % set count = count + NUMBER % } NEWLINE { % endfor % }", "[ NUMBER : NUMBER : NUMBER xxx021 ] status XYZ ID : NUMBER P00935xxx - NUMBER NUMBER quote : NUMBER / NUMBER avg : - NUMBER - NUMBER NEWLINE ID is : NUMBER P00935xxx NEWLINE [ NUMBER : NUMBER : NUMBER xxx024 ] status XYZ ID : NUMBER C0099xxx0 - NUMBER NUMBER quote : NUMBER / NUMBER avg : - NUMBER NUMBER NEWLINE ID is : NUMBER C0099xxx0", "In [ NUMBER ] : urllib . urlencode ( [ ( STRING , NUMBER ) , ( STRING , STRING ) , ( STRING , NUMBER ) ] ) NEWLINE Out [ NUMBER ] : STRING", "In [ NUMBER ] : df [ STRING ] = df . value / g . value . transform ( STRING ) * df . wt", "def makeAbbreviations ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = VAR . lower ( ) NEWLINE VAR = VAR . split ( ) NEWLINE VAR = max ( len ( VAR ) for VAR in VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = [ VAR [ : VAR ] for VAR in VAR ] NEWLINE VAR = STRING . join ( VAR ) NEWLINE while VAR in VAR and VAR <= VAR : NEWLINE VAR += NUMBER NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR [ VAR ] = VAR [ : VAR ] NEWLINE VAR = STRING . join ( VAR ) NEWLINE if not VAR in VAR : break NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = makeAbbreviations ( VAR ) NEWLINE for ( k , v ) in VAR . items ( ) : print ( k , v , sep = STRING )", "def test ( VAR , VAR , VAR ) : NEWLINE VAR . insert ( VAR + NUMBER , VAR [ VAR ] ) NEWLINE VAR . insert ( VAR + NUMBER , VAR [ VAR ] ) NEWLINE print ( VAR ) NEWLINE VAR [ VAR ] = VAR [ VAR + NUMBER ] NEWLINE VAR [ VAR ] = VAR [ VAR + NUMBER ] NEWLINE print ( VAR ) NEWLINE del VAR [ VAR + NUMBER ] NEWLINE del VAR [ VAR + NUMBER ] NEWLINE print ( VAR )", "VAR = replacement_f", "VAR = languages . objects . get ( iso_lang_code = STRING ) NEWLINE VAR = VAR . resource_set . all ( ) NEWLINE for VAR in VAR : NEWLINE", "import numpy as np NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR = np . ma . masked_outside ( VAR , NUMBER , NUMBER ) . mask NEWLINE VAR = VAR [ ~ VAR ] NEWLINE VAR = VAR [ ~ VAR ] NEWLINE print STRING , VAR NEWLINE print STRING , VAR", "comparing d1 to d2 : NEWLINE a - > b : NEWLINE - cs : NUMBER NEWLINE + cs : NUMBER NEWLINE None NEWLINE comparing d2 to d1 : NEWLINE a - > b : NEWLINE - cs : NUMBER NEWLINE + cs : NUMBER NEWLINE a : NEWLINE newa as key not in d2 NEWLINE None", "a ^ b", "In [ NUMBER ] : VAR = STRING NEWLINE . . . . : NEWLINE In [ NUMBER ] : for VAR in VAR . splitlines ( ) : NEWLINE . . . . : VAR = VAR . split ( ) NEWLINE . . . . : if STRING in VAR : NEWLINE . . . . : print VAR NEWLINE . . . . : break NEWLINE . . . . : NEWLINE NUMBER : mp4 [ NUMBER x640 ]", "[ dict ( zip ( VAR . keys ( ) , [ np . array ( VAR . values ( ) ) . mean ( ) . round ( ) . astype ( int ) ] ) ) for VAR in L ]", "result . rdd . flatMap ( list ) . first ( )", ">> > VAR = [ [ ] , [ ] , [ ] ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > [ VAR . append ( VAR ) for VAR , VAR in zip ( VAR , VAR ) ] NEWLINE >> > VAR NEWLINE [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ]", ">> > import platform NEWLINE >> > platform . mac_ver ( ) NEWLINE ( STRING , ( STRING , STRING , STRING ) , STRING )", "VAR = BeautifulSoup ( data , STRING )", "VAR = data [ : , NUMBER ] . reshape ( Nx1 , Nx2 , Nx3 ) NEWLINE VAR = data [ : , NUMBER ] . reshape ( Nx1 , Nx2 , Nx3 ) NEWLINE VAR = data [ : , NUMBER ] . reshape ( Nx1 , Nx2 , Nx3 )", "def get_model_metadata ( VAR , VAR = [ ] ) : NEWLINE VAR = VAR . _meta . fields NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = VAR . name NEWLINE VAR = VAR . __dict__ NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE if VAR in VAR : NEWLINE VAR [ VAR ] = VAR [ VAR ] NEWLINE if len ( VAR ) > NUMBER : NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR", ">> > import redis NEWLINE >> > r = redis . StrictRedis ( ) NEWLINE >> > qname = STRING NEWLINE >> > def purgeq ( r , qname ) : NEWLINE . . . while True : NEWLINE . . . jid = r . lpop ( qname ) NEWLINE . . . if jid is None : NEWLINE . . . break NEWLINE . . . r . delete ( STRING + jid ) NEWLINE . . . print jid NEWLINE . . . NEWLINE >> > purge ( r , qname ) NEWLINE a0be3624 - NUMBER c1 - NUMBER dc4 - bb2e - NUMBER d2734b7b NEWLINE NUMBER c312 - NUMBER b02 - NUMBER a77 - be89 - NUMBER aa7325c25 NEWLINE ca65f2b8 - NUMBER c - NUMBER b5 - b5ac - cefd56699758 NEWLINE NUMBER f70a7 - NUMBER a35 - NUMBER f6b - b122 - a08513022bc5", "import string , random NEWLINE def pick ( VAR ) : NEWLINE for VAR in range ( VAR ) : NEWLINE print ( STRING . join ( [ random . choice ( string . ascii_uppercase ) for VAR in range ( NUMBER ) ] ) + STRING + STRING . join ( [ random . choice ( string . digits ) for VAR in range ( NUMBER ) ] ) )", "import os NEWLINE VAR = STRING NEWLINE VAR = raw_input ( STRING ) NEWLINE if not os . path . exists ( VAR ) : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR . write ( VAR ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . close ( ) NEWLINE else : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) . split ( STRING ) NEWLINE if VAR in VAR : NEWLINE print STRING . format ( VAR ) NEWLINE else : NEWLINE VAR . seek ( NUMBER , NUMBER ) NEWLINE VAR . write ( VAR ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . close ( )", "while NUMBER : NEWLINE VAR = status_check_cursor . execute ( STRING ) . fetchone ( ) NEWLINE if VAR [ NUMBER ] == NUMBER : NEWLINE break", "docker build - t pytest .", "from itertools import combinations NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = { } NEWLINE VAR = set ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] . split ( ) NEWLINE VAR = [ VAR . split ( STRING ) [ NUMBER ] for VAR in VAR ] NEWLINE VAR [ VAR ] = VAR NEWLINE for VAR in VAR : NEWLINE VAR . add ( VAR ) NEWLINE VAR = [ VAR for VAR in range ( NUMBER , len ( l ) - NUMBER ) for VAR in combinations ( VAR , VAR ) ] NEWLINE def combo_in_og ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE if VAR not in VAR [ VAR ] : NEWLINE return False NEWLINE return True NEWLINE for VAR in VAR : NEWLINE VAR = [ ] NEWLINE for VAR in ogs : NEWLINE if combo_in_og ( VAR , VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE print ( STRING + STRING . join ( VAR ) + STRING + STRING . join ( VAR ) )", "VAR = { } NEWLINE VAR [ STRING ] = { } NEWLINE VAR [ STRING ] [ STRING ] = NUMBER", "In [ NUMBER ] : test NEWLINE Out [ NUMBER ] : STRING NEWLINE In [ NUMBER ] : for VAR in filter ( lambda VAR : VAR != STRING , test ) : NEWLINE . . . . : print ( VAR ) NEWLINE . . . . : NEWLINE h NEWLINE e NEWLINE l NEWLINE l NEWLINE o NEWLINE w NEWLINE o NEWLINE r NEWLINE l NEWLINE d", "import mimetypes NEWLINE VAR , VAR = mimetypes . guess_type ( filename_or_url )", "this is the __get__ else statement running NEWLINE circumference NUMBER NEWLINE try setting circumference NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE ValueError Traceback ( most recent call last ) NEWLINE < ipython - input - NUMBER - NUMBER bab738 > in < module > ( ) NEWLINE NUMBER NEWLINE NUMBER print ( STRING ) NEWLINE - - - > NUMBER circle . circumference = NUMBER NEWLINE < ipython - input - NUMBER - NUMBER bab738 > in __set__ ( self , instance , value ) NEWLINE NUMBER def __set__ ( self , instance , value ) : NEWLINE NUMBER if hasattr ( instance , self . name + STRING ) : NEWLINE - - - > NUMBER raise ValueError ( STRING . format ( self . name [ NUMBER : ] ) ) NEWLINE NUMBER if isinstance ( value , int ) : NEWLINE NUMBER raise RuntimeError ( STRING ) NEWLINE ValueError : Cannot set circumference again .", "class sprite_to_place ( pygame . sprite . Sprite ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE pygame . sprite . Sprite . __init__ ( VAR ) NEWLINE VAR . image = pygame . image . load ( STRING ) NEWLINE VAR . rect = VAR . image . get_rect ( topleft = VAR ) NEWLINE VAR . start_pos = VAR", "def is_full ( VAR ) : NEWLINE for VAR in VAR . data : NEWLINE if any ( VAR == STRING for VAR in VAR ) : NEWLINE return False NEWLINE return True", "from itertools import product NEWLINE VAR = [ ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE for VAR in product ( * VAR ) : NEWLINE print ( VAR )", "import re NEWLINE import requests NEWLINE def getVideosLinks ( VAR ) : NEWLINE VAR = re . findall ( STRING , VAR ) NEWLINE return VAR NEWLINE def prepareJSONurl ( VAR ) : NEWLINE VAR = STRING . format ( hash = VAR ) NEWLINE return VAR NEWLINE def extractEpisodeHash ( VAR ) : NEWLINE VAR = re . findall ( STRING , VAR ) [ NUMBER ] NEWLINE return VAR NEWLINE def extractIframeURL ( VAR ) : NEWLINE VAR = None NEWLINE try : NEWLINE VAR = re . findall ( STRING , VAR ) [ NUMBER ] NEWLINE VAR = True NEWLINE except : NEWLINE VAR = False NEWLINE return VAR , VAR NEWLINE VAR = STRING NEWLINE VAR = requests . get ( VAR ) NEWLINE VAR , VAR = extractIframeURL ( VAR . VAR ) NEWLINE if VAR : NEWLINE VAR = requests . get ( VAR ) NEWLINE VAR = extractEpisodeHash ( VAR . VAR ) NEWLINE VAR = prepareJSONurl ( VAR ) NEWLINE VAR = requests . get ( VAR ) NEWLINE for VAR in getVideosLinks ( VAR . VAR ) : NEWLINE print STRING . format ( VAR ) NEWLINE else : NEWLINE print STRING", "{ % for VAR in p % } NEWLINE { { loop . index } } NEWLINE { % endfor % }", "dict ( VAR . strip ( ) . split ( STRING ) for VAR in text . split ( STRING ) if len ( VAR . strip ( ) . split ( STRING ) ) == NUMBER )", "[ [ NUMBER NUMBER ] [ NUMBER NUMBER ] [ NUMBER NUMBER ] [ NUMBER NUMBER ] ]", "import json NEWLINE from app import sockets NEWLINE from app . functions import get_cpu_load , get_disk_usage , get_vmem NEWLINE @ sockets . route ( STRING ) NEWLINE def socket_system ( VAR ) : NEWLINE STRING NEWLINE while True : NEWLINE VAR = VAR . receive ( ) NEWLINE if VAR == STRING : NEWLINE VAR = round ( get_cpu_load ( ) ) NEWLINE VAR = round ( get_vmem ( ) ) NEWLINE VAR = round ( get_disk_usage ( ) ) NEWLINE VAR . send ( json . dumps ( dict ( received = VAR , VAR = VAR , VAR = VAR , VAR = VAR ) ) ) NEWLINE else : NEWLINE VAR . send ( json . dumps ( dict ( received = VAR ) ) )", "VAR = - NUMBER NEWLINE VAR = [ ] NEWLINE VAR = float ( STRING ) NEWLINE VAR = NUMBER NEWLINE while VAR > VAR : NEWLINE for VAR in range ( VAR , VAR + NUMBER ) : NEWLINE VAR . append ( VAR - VAR * VAR ) NEWLINE print ( VAR ) NEWLINE VAR = sum ( VAR [ - NUMBER : ] ) / NUMBER NEWLINE print ( VAR ) NEWLINE VAR = VAR + NUMBER", "def using_loops ( VAR , VAR ) : NEWLINE VAR , VAR = VAR . shape [ : NUMBER ] NEWLINE VAR = np . zeros ( ( VAR , VAR ) ) NEWLINE for VAR in range ( VAR ) : NEWLINE for VAR in range ( VAR ) : NEWLINE VAR [ VAR ] [ VAR ] = VAR [ tuple ( VAR [ VAR , VAR , : ] ) ] NEWLINE return VAR", "xAxis yAxis1 yAxis2 NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER", "< text id = STRING title = STRING > NEWLINE bla bla bla bla . . . . . . . . . NEWLINE < / text > NEWLINE < text id = STRING title = STRING > NEWLINE bla bla bla bla . . . . . . . . . NEWLINE < / text > NEWLINE < text id = STRING title = STRING > NEWLINE bla bla bla bla . . . . . . . . . NEWLINE < / text >", "$ pip install lxml", ">> > nsolve ( C_b - NUMBER , C0 , NUMBER ) NEWLINE NUMBER", "c [ : , np . concatenate ( ( [ True ] , c [ NUMBER , NUMBER : ] != c [ NUMBER , : - NUMBER ] ) ) ] [ NUMBER ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "VAR = df . set_index ( [ STRING , STRING ] ) . unstack ( STRING ) NEWLINE", "import os NEWLINE import hashlib NEWLINE import pygame NEWLINE import time NEWLINE import base64 NEWLINE def create_assets ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = False NEWLINE if not os . path . isdir ( VAR ) : NEWLINE os . mkdir ( VAR ) NEWLINE VAR = True NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = os . path . join ( VAR , VAR [ STRING ] ) NEWLINE VAR = False NEWLINE if not VAR : NEWLINE if not os . path . isfile ( VAR ) : NEWLINE VAR = True NEWLINE else : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE if not hashlib . md5 ( VAR . read ( ) ) . hexdigest ( ) == VAR [ STRING ] : NEWLINE VAR = True NEWLINE if VAR or VAR : NEWLINE print ( STRING , VAR ) NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR . write ( base64 . b64decode ( VAR [ STRING ] ) ) NEWLINE else : NEWLINE print ( STRING , VAR ) NEWLINE STRING NEWLINE VAR = { STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING , STRING : STRING } , } NEWLINE VAR = STRING NEWLINE VAR = os . path . join ( os . getcwd ( ) , VAR ) NEWLINE create_assets ( VAR , VAR ) NEWLINE pygame . init ( ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = pygame . display . set_mode ( ( VAR , VAR ) ) NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = os . path . join ( VAR , VAR [ VAR ] [ STRING ] ) NEWLINE VAR [ VAR ] = pygame . image . load ( VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = time . time ( ) NEWLINE while time . time ( ) - VAR < NUMBER : NEWLINE for VAR in VAR : NEWLINE VAR . blit ( VAR [ VAR ] , ( VAR , VAR ) ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR += NUMBER NEWLINE VAR += NUMBER NEWLINE pygame . display . update ( )", "{ { request . user . referal . y } }", "import sys NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE VAR = dict ( [ VAR . split ( STRING , maxsplit = NUMBER ) for VAR in sys . argv [ NUMBER : ] ] ) NEWLINE print VAR NEWLINE print VAR", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE for VAR in VAR . readlines ( ) : NEWLINE print VAR NEWLINE VAR = re . match ( VAR , VAR ) NEWLINE if VAR : NEWLINE print VAR . groups ( )", "import seaborn as sns NEWLINE sns . factorplot ( STRING , STRING , hue = STRING , kind = STRING , data = df )", "import pandas as pd NEWLINE from matplotlib import rcParams NEWLINE import matplotlib . pyplot as plt NEWLINE from operator import itemgetter NEWLINE rcParams . update ( { STRING : True } ) NEWLINE plt . figure ( figsize = ( NUMBER , NUMBER ) , dpi = NUMBER ) NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = NUMBER NEWLINE VAR = [ VAR [ VAR : VAR + VAR ] for VAR in range ( NUMBER , len ( VAR ) , VAR ) ] NEWLINE VAR = [ VAR [ VAR : VAR + VAR ] for VAR in range ( NUMBER , len ( VAR ) , VAR ) ] NEWLINE VAR = int ( len ( VAR ) ) NEWLINE VAR , VAR = plt . subplots ( nrows = VAR // VAR + NUMBER , sharey = True , figsize = ( NUMBER , NUMBER ) , dpi = NUMBER ) NEWLINE VAR . suptitle ( STRING , ** { STRING : STRING , STRING : NUMBER , STRING : STRING } ) NEWLINE for VAR , VAR , VAR in zip ( VAR , VAR , VAR ) : NEWLINE VAR . bar ( range ( len ( VAR ) ) , VAR , align = STRING ) NEWLINE VAR . set_xlabel ( STRING ) NEWLINE VAR . set_ylabel ( STRING ) NEWLINE VAR . set_xticks ( range ( len ( VAR ) ) ) NEWLINE VAR . set_xticklabels ( VAR , rotation = STRING ) NEWLINE VAR . set_xlim ( NUMBER , len ( VAR ) ) NEWLINE VAR . subplots_adjust ( bottom = NUMBER , top = NUMBER ) NEWLINE plt . show ( )", "def generate ( VAR ) : NEWLINE while any ( VAR . values ) : NEWLINE VAR , VAR = min ( VAR for VAR in VAR . values if VAR ) NEWLINE try : NEWLINE VAR . values [ VAR ] = ( VAR . generators [ VAR ] . next ( ) , VAR ) NEWLINE except StopIteration : NEWLINE VAR . values [ VAR ] = None NEWLINE yield VAR", "sorted ( set ( ) . union ( * input_list ) )", "x not in seen", "xcord ycord NEWLINE Boston NUMBER NUMBER NEWLINE Phoenix NUMBER NUMBER NEWLINE New York NUMBER NUMBER", ">> > [ VAR if VAR else NUMBER for VAR in [ NUMBER , NUMBER , NUMBER , NUMBER ] ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ]", "re . search ( STRING , html_template )", "VAR = [ ] NEWLINE for VAR in xrange ( NUMBER ) : NEWLINE VAR = [ ] NEWLINE for VAR in field . keys ( ) : NEWLINE VAR . append ( field [ VAR ] [ VAR ] ) NEWLINE VAR . append ( VAR )", "df . columns = [ STRING , STRING ]", ">> > VAR = np . arange ( NUMBER ) . reshape ( ( NUMBER , NUMBER ) ) NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > VAR = VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > VAR = np . arange ( len ( VAR ) ) NEWLINE >> > [ VAR [ VAR [ VAR ] , VAR ] for VAR in range ( NUMBER ) ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR [ VAR , VAR ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "{ STRING : STRING }", "VAR = ( ctypes_type * length ) ( initial_values )", "VAR = VAR . reset_index ( ) NEWLINE VAR = pd . melt ( VAR , id_vars = [ STRING ] ) NEWLINE VAR = VAR [ VAR [ STRING ] <= VAR [ STRING ] ] . sort_values ( by = STRING ) NEWLINE VAR [ STRING ] = VAR [ STRING ] + STRING + VAR [ STRING ] NEWLINE VAR = VAR [ [ STRING , STRING ] ] NEWLINE VAR = VAR . set_index ( STRING ) NEWLINE VAR", "class SomeService ( ServiceBase ) : NEWLINE @ rpc ( Unicode ( values = [ STRING , STRING , STRING ] ) , _returns = A ) NEWLINE def get_some_a ( self , type_name ) : NEWLINE", "In [ NUMBER ] : VAR = DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] } ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE A B NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "VAR = [ ] NEWLINE for VAR in originalList : NEWLINE VAR . extend ( doSomething ( VAR ) ) NEWLINE return VAR", ">> > from itertools import permutations NEWLINE >> > list ( permutations ( rangefrom multipledispatch import dispatch NEWLINE @ dispatch ( RDD ) NEWLINE def baz ( VAR ) : NEWLINE return STRING NEWLINE @ dispatch ( DataFrame ) NEWLINE def baz ( VAR ) : NEWLINE return STRING NEWLINE baz ( sc . parallelize ( [ ] ) ) NEWLINE baz ( sc . parallelize ( [ ( STRING , NUMBER ) ] ) . toDF ( ) ) NEWLINE", "import numpy as np NEWLINE from scipy . sparse import csr_matrix NEWLINE VAR = np . arange ( NUMBER ) + NUMBER NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = csr_matrix ( VAR ) NEWLINE VAR = NUMBER / np . matrix ( VAR ) NEWLINE VAR = VAR . multiply ( VAR )", "df [ STRING ] = df [ STRING ] . cumsum ( )", ">> > VAR = STRING NEWLINE >> > VAR = VAR + NUMBER * STRING ; [ VAR [ VAR : VAR + NUMBER ] for VAR in range ( NUMBER , len ( VAR ) - NUMBER , NUMBER ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ]", "setattr ( instance , self . name + STRING , True )", "datetime . now ( ) - datetime . now ( )", "transactional . reset_index ( inplace = True )", "NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", ">> > table . data NEWLINE array ( [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] , dtype = object )", "import sys NEWLINE print STRING , sys . argv [ NUMBER ]", "def sequences ( VAR ) : NEWLINE VAR = cycle ( VAR ) NEWLINE next ( VAR ) NEWLINE VAR = groupby ( VAR , key = lambda VAR : VAR + NUMBER == next ( VAR ) ) NEWLINE for VAR , VAR in VAR : NEWLINE if VAR : NEWLINE VAR = tuple ( VAR ) + ( next ( next ( VAR ) [ NUMBER ] ) , ) NEWLINE yield VAR , len ( VAR ) NEWLINE def sequences ( VAR ) : NEWLINE VAR = cycle ( VAR ) NEWLINE next ( VAR ) NEWLINE VAR = groupby ( VAR , lambda VAR : VAR + NUMBER == next ( VAR ) ) NEWLINE yield from ( ( VAR , len ( VAR ) ) for VAR in ( tuple ( VAR ) + ( next ( next ( VAR ) [ NUMBER ] ) , ) for VAR , VAR in VAR if VAR ) ) NEWLINE def sequences ( x ) : NEWLINE VAR = iter ( x ) NEWLINE VAR , VAR = next ( VAR ) , [ ] NEWLINE while VAR is not None : NEWLINE VAR = next ( VAR , None ) NEWLINE if VAR + NUMBER == VAR : NEWLINE VAR . append ( VAR ) NEWLINE elif VAR : NEWLINE yield tuple ( VAR + [ VAR ] ) , len ( VAR ) + NUMBER NEWLINE VAR = [ ] NEWLINE VAR = VAR", "import re NEWLINE def makeNice ( VAR ) : NEWLINE return re . subn ( STRING , lambda VAR : chr ( int ( VAR . groups ( ) [ NUMBER ] [ NUMBER : ] , NUMBER ) ) , VAR ) [ NUMBER ] NEWLINE VAR = STRING NEWLINE print ( VAR , makeNice ( VAR ) )", "import statsmodels . formula . api as smf NEWLINE VAR = smf . ols ( STRING , df ) . fit ( ) NEWLINE print ( VAR . summary ( ) )", "import ruamel . yaml as yaml NEWLINE def process_scalar ( VAR ) : NEWLINE if VAR . analysis is None : NEWLINE VAR . analysis = VAR . analyze_scalar ( VAR . event . VAR ) NEWLINE if VAR . style is None : NEWLINE VAR . style = VAR . choose_scalar_style ( ) NEWLINE VAR = ( not VAR . simple_key_context ) NEWLINE try : NEWLINE VAR = int ( VAR . event . VAR ) NEWLINE except : NEWLINE if VAR : NEWLINE VAR . style = STRING NEWLINE else : NEWLINE VAR . style = STRING NEWLINE if VAR . style == STRING : NEWLINE VAR . write_double_quoted ( VAR . analysis . scalar , VAR ) NEWLINE elif VAR . style == STRING : NEWLINE VAR . write_single_quoted ( VAR . analysis . scalar , VAR ) NEWLINE elif VAR . style == STRING : NEWLINE VAR . write_folded ( VAR . analysis . scalar ) NEWLINE elif VAR . style == STRING : NEWLINE VAR . write_literal ( VAR . analysis . scalar ) NEWLINE else : NEWLINE VAR . write_plain ( VAR . analysis . scalar , VAR ) NEWLINE VAR . analysis = None NEWLINE VAR . style = None NEWLINE if VAR . event . comment : NEWLINE VAR . write_post_comment ( VAR . event ) NEWLINE VAR = yaml . load ( open ( STRING ) , Loader = yaml . RoundTripLoader ) NEWLINE for VAR , VAR in VAR [ STRING ] . items ( ) : NEWLINE if VAR == STRING : NEWLINE VAR = VAR [ STRING ] NEWLINE VAR [ STRING ] = NUMBER NEWLINE VAR = yaml . RoundTripDumper NEWLINE VAR . process_scalar = process_scalar NEWLINE print STRING NEWLINE print yaml . dump ( VAR , Dumper = VAR )", "< ( . * ? ) >", "VAR = path2 + w", "original version : NUMBER NEWLINE better version : NUMBER NEWLINE best version : NUMBER", "In [ NUMBER ] : ( uniq [ index ] == int_array ) . all ( ) NEWLINE Out [ NUMBER ] : True", "[ STRING , STRING ] NEWLINE [ None ]", "from sklearn import datasets NEWLINE from sklearn . multiclass import OneVsRestClassifier NEWLINE from sklearn . svm import SVC NEWLINE VAR = datasets . load_iris ( ) NEWLINE VAR , VAR = VAR . data , VAR . target NEWLINE VAR = OneVsRestClassifier ( SVC ( kernel = STRING , probability = True , class_weight = STRING ) ) NEWLINE VAR . fit ( VAR , VAR ) NEWLINE VAR = VAR . predict_proba ( VAR )", "class MyResource ( ModelResource ) : NEWLINE . . . NEWLINE class Meta : NEWLINE . . . NEWLINE VAR = None", ">> > [ False ] * NUMBER NEWLINE [ False , False , False , False , False , False , False , False , False , False ]", "( ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) )", "VAR = pd . DataFrame ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] , columns = [ STRING , STRING ] ) NEWLINE VAR = pd . DataFrame ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] , columns = [ STRING , STRING ] ) NEWLINE VAR . apply ( temp , axis = NUMBER )", "def __get__ ( VAR , VAR , VAR ) : NEWLINE return Wrapper ( VAR , VAR )", "method1 : NUMBER ms NEWLINE method2 : NUMBER ms NEWLINE method3 : NUMBER ms NEWLINE method4 : NUMBER ms", "foo NEWLINE bar NEWLINE NUMBER foobar NEWLINE NUMBER foo", "empty_label NEWLINE By default the < select > widget used by ModelChoiceField NEWLINE will have an empty choice at the top of the list . You can change the text NEWLINE of this label ( which is STRING by default ) with the empty_label NEWLINE attribute , or you can disable the empty label entirely by setting NEWLINE empty_label to None : NEWLINE VAR = forms . ModelChoiceField ( queryset = . . . , empty_label = STRING ) NEWLINE VAR = forms . ModelChoiceField ( queryset = . . . , empty_label = None )", "first | a | b", "< ? xml version = STRING encoding = STRING ? > NEWLINE < ui version = STRING > NEWLINE < class > MainWindow < / class > NEWLINE < widget class = STRING name = STRING > NEWLINE . . . NEWLINE < widget class = STRING name = STRING / > NEWLINE . . . NEWLINE < / widget > NEWLINE < / ui >", "import nltk NEWLINE VAR = nltk . CFG . fromstring ( STRING ) NEWLINE VAR = STRING . split ( ) NEWLINE VAR = [ STRING if VAR . isdigit ( ) else VAR for VAR in VAR ] NEWLINE VAR = [ VAR for VAR in VAR if VAR . isdigit ( ) ] NEWLINE VAR = nltk . ChartParser ( VAR ) NEWLINE for VAR in VAR . parse ( VAR ) : NEWLINE VAR = str ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . replace ( STRING , VAR , NUMBER ) NEWLINE print ( VAR )", "class Palette ( list ) : NEWLINE def __init__ ( VAR , VAR = None , VAR = None , VAR = None , * args ) : NEWLINE super ( Palette , VAR ) . __init__ ( args ) NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . extend ( VAR ) NEWLINE @ property NEWLINE def VAR ( VAR ) : NEWLINE return VAR . _name NEWLINE @ VAR . setter NEWLINE def VAR ( VAR , VAR ) : NEWLINE VAR . _name = VAR NEWLINE @ VAR . deleter NEWLINE def VAR ( VAR ) : NEWLINE VAR . VAR = None NEWLINE @ property NEWLINE def VAR ( VAR ) : NEWLINE return VAR . _description NEWLINE @ VAR . setter NEWLINE def VAR ( VAR , VAR ) : NEWLINE VAR . _description = VAR NEWLINE @ VAR . deleter NEWLINE def VAR ( VAR ) : NEWLINE VAR . VAR = None", "from collections import OrderedDict NEWLINE VAR = ( ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ) NEWLINE VAR = OrderedDict ( ) NEWLINE for VAR , VAR , VAR in VAR : NEWLINE VAR [ ( VAR , VAR ) ] = VAR [ ( VAR , VAR ) ] + VAR if ( VAR , VAR ) in VAR else VAR NEWLINE VAR = tuple ( ( * VAR , VAR ) for VAR , VAR in VAR . items ( ) ) NEWLINE print ( VAR )", "class DragTable ( QtGui . QTableView ) : NEWLINE def __init__ ( VAR , VAR = None ) : NEWLINE super ( DragTable , VAR ) . __init__ ( VAR ) NEWLINE VAR . setDragEnabled ( True ) NEWLINE VAR . setSelectionBehavior ( QtGui . QAbstractItemView . SelectRows )", "VAR = { VAR : [ elements . pop ( NUMBER ) ] for VAR in one [ : - NUMBER ] } . NEWLINE VAR [ one [ - NUMBER ] ] = [ elements ]", "def get_nans_blocks_length ( VAR ) : NEWLINE STRING NEWLINE VAR = np . isnan ( VAR ) NEWLINE VAR = np . concatenate ( ( np . resize ( VAR [ . . . , NUMBER ] , VAR . shape [ : - NUMBER ] + ( NUMBER , ) ) , np . logical_and ( np . logical_not ( VAR [ . . . , : - NUMBER ] ) , VAR [ . . . , NUMBER : ] ) ) , axis = VAR . ndim - NUMBER ) NEWLINE VAR = np . concatenate ( ( np . logical_and ( VAR [ . . . , : - NUMBER ] , np . logical_not ( VAR [ . . . , NUMBER : ] ) ) , np . resize ( VAR [ . . . , - NUMBER ] , VAR . shape [ : - NUMBER ] + ( NUMBER , ) ) ) , axis = VAR . ndim - NUMBER ) NEWLINE VAR = np . where ( VAR ) NEWLINE VAR = np . where ( VAR ) NEWLINE return VAR [ - NUMBER ] - VAR [ - NUMBER ] + NUMBER", "from PySide import QtCore , QtGui NEWLINE class Ui_Form ( object ) : NEWLINE def setupUi ( VAR , VAR ) : NEWLINE VAR . setObjectName ( STRING ) NEWLINE VAR . resize ( NUMBER , NUMBER ) NEWLINE VAR . mplvl = QtGui . QWidget ( VAR ) NEWLINE VAR . mplvl . setGeometry ( QtCore . QRect ( NUMBER , NUMBER , NUMBER , NUMBER ) ) NEWLINE VAR . mplvl . setObjectName ( STRING ) NEWLINE VAR . vLayout = QtGui . QVBoxLayout ( ) NEWLINE VAR . mplvl . setLayout ( VAR . vLayout ) NEWLINE VAR . retranslateUi ( VAR ) NEWLINE QtCore . QMetaObject . connectSlotsByName ( VAR ) NEWLINE def retranslateUi ( VAR , VAR ) : NEWLINE VAR . setWindowTitle ( QtGui . QApplication . translate ( STRING , STRING , None , QtGui . QApplication . UnicodeUTF8 ) )", "def gen_data ( VAR , VAR ) : NEWLINE VAR = STRING NEWLINE VAR = np . asarray ( [ VAR for VAR in VAR [ : nlevels ] ] ) NEWLINE VAR = np . random . random_integers ( NUMBER , VAR . VAR - NUMBER , VAR ) NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = np . arange ( NUMBER , VAR + NUMBER ) NEWLINE return VAR , VAR", "[ STRING , STRING , STRING ]", ">> > testList = list ( test ) NEWLINE >> > for VAR in testList [ : ] : NEWLINE if VAR in STRING : NEWLINE testList . remove ( VAR ) NEWLINE >> > STRING . join ( testList ) NEWLINE STRING", "SELECT ` sensor_row ` , sensor_col ` , ` value ` FROM ` dog_measurement_data ` NEWLINE WHERE ` dog_measurement_id ` = * some measurement id * AND ` frame ` = * some frame number * NEWLINE ORDER BY ` sensor_row ` , ` sensor_col `", "def order ( VAR ) : NEWLINE VAR = NUMBER NEWLINE while VAR > NUMBER : NEWLINE VAR = int ( VAR / NUMBER ) NEWLINE VAR += NUMBER NEWLINE return VAR NEWLINE print ( order ( NUMBER ) )", "bytearray ( int ( VAR , NUMBER ) for VAR in u . split ( ) ) NEWLINE Out [ NUMBER ] : bytearray ( STRING )", "$ . / manage . py shell NEWLINE >> > from django . contrib . auth import User NEWLINE >> > from myUserProfileApp import UserProfile NEWLINE >> > for VAR in User . objects . all ( ) : NEWLINE . . . UserProfile ( user = VAR ) . save ( ) NEWLINE . . .", "VAR = [ ( STRING , pdf_contents ) ]", "from itertools import groupby NEWLINE for VAR , VAR in groupby ( cur , key = lambda VAR : VAR [ NUMBER ] [ NUMBER ] ) : NEWLINE print STRING . join ( [ VAR [ NUMBER ] for VAR in VAR ] )", "from sqlalchemy . ext . VAR import compiles NEWLINE from sqlalchemy . sql . expression import Insert NEWLINE @ compiles ( Insert ) NEWLINE def append_string ( VAR , VAR , ** kw ) : NEWLINE VAR = VAR . visit_insert ( VAR , ** kw ) NEWLINE if STRING in VAR . kwargs : NEWLINE return VAR + STRING + VAR . kwargs [ STRING ] NEWLINE return VAR NEWLINE my_connection . execute ( my_table . VAR ( append_string = STRING ) , my_values )", "In [ NUMBER ] : VAR = q . reshape ( NUMBER , NUMBER , NUMBER , order = STRING ) NEWLINE In [ NUMBER ] : VAR [ NUMBER ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ] , dtype = STRING ) NEWLINE In [ NUMBER ] : VAR [ : , NUMBER ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ] , dtype = STRING ) NEWLINE In [ NUMBER ] : VAR [ : , : , NUMBER ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] , dtype = STRING )", "VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = VAR . find ( STRING , attrs = { STRING : re . compile ( STRING ) } )", "def get_sumdf ( VAR ) : NEWLINE VAR , VAR = get_data ( VAR ) NEWLINE VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR = do_projections ( VAR ) NEWLINE VAR = VAR [ - NUMBER : ] NEWLINE VAR [ STRING ] = VAR NEWLINE return VAR NEWLINE [ get_sumdf ( VAR ) for VAR in areas_tabs ]", "VAR = { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } NEWLINE print sum ( NUMBER for VAR in VAR . values ( ) if VAR == NUMBER )", ">> > print ( STRING . join ( [ STRING . format ( VAR , VAR , STRING if VAR == VAR else STRING ) for VAR , VAR in izip_longest ( a , b , fillvalue = STRING ) ] ) ) NEWLINE e , e OK NEWLINE f , f OK NEWLINE g , h NOK NEWLINE h , VAR NOK NEWLINE VAR , VAR NOK NEWLINE null , g NOK", ">> > VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE >> > VAR , VAR = zipfred @ wherever . com , wilma @ wherever . com", "from itertools import groupby NEWLINE VAR = [ STRING , STRING , STRING , STRING ] NEWLINE VAR = [ STRING . join ( ( str ( VAR ) for VAR in VAR ) ) for VAR , VAR in groupby ( VAR , key = lambda VAR : len ( VAR ) == NUMBER ) ]", "print STRING . join ( STRING . join ( STRING for VAR in range ( NUMBER ) ) for VAR in range ( NUMBER ) )", "def filterAcceptsRow ( VAR , VAR , VAR ) : NEWLINE if VAR . filterActive and STRING in VAR . sourceModel ( ) . data ( VAR . sourceModel ( ) . index ( VAR , NUMBER ) , Qt . DisplayRole ) . toPyObject ( ) : NEWLINE VAR . _view . selectRow ( VAR ) NEWLINE return True", "[ STRING , [ STRING , STRING , STRING , [ STRING , STRING ] ] , STRING , [ STRING , STRING ] ]", "VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR . sort ( )", "df . ix [ df . A == NUMBER , STRING ] = np . nan", "@ csrf_exempt NEWLINE def resume ( request ) : NEWLINE // Do your search operation . NEWLINE return HttpResponse ( status = NUMBER )", "df [ STRING ] = df [ [ STRING , STRING , STRING ] ] . T . apply ( lambda VAR : VAR . nunique ( ) )", "VAR = Product . objects . get ( name = STRING ) NEWLINE VAR = VAR . pricing_set . get ( currency__name = STRING )", "VAR = Entry . objects . filter ( user = request . user ) . order_by ( STRING )", "Introduction NUMBER NUMBER NUMBER NEWLINE Floating point numbers NUMBER NUMBER NUMBER NEWLINE IEEE Standard NUMBER NUMBER NUMBER NUMBER", "class UniversityContact ( models . Model ) : NEWLINE def abbrev ( VAR ) : NEWLINE return VAR . university . abbrev NEWLINE abbrev . admin_order_field = STRING", ">> > VAR = { STRING : STRING , STRING : STRING } NEWLINE >> > VAR = STRING NEWLINE >> > VAR . format ( ** VAR ) NEWLINE STRING", "VAR = [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR = NUMBER NEWLINE while ( VAR <= NUMBER ) : NEWLINE if ( VAR == NUMBER ) : NEWLINE VAR = NUMBER NEWLINE else : NEWLINE VAR = NUMBER NEWLINE while ( VAR <= NUMBER ) : NEWLINE VAR [ VAR ] [ VAR ] = STRING NEWLINE VAR += NUMBER NEWLINE VAR += NUMBER", ". annotate ( VAR = Func ( F ( STRING ) , month_start , function = STRING ) , VAR = Func ( F ( STRING ) , month_end , function = STRING ) )", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "{ STRING : [ STRING , NUMBER , NUMBER ] , STRING : [ STRING , NUMBER , NUMBER ] }", "NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . . . . . . . | NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . . . . . . . | NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . . . . . . . | NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . . . . . . . | NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . . . . . . . | NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . . . . . . . | NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER | . . . . . . . . . . | NEWLINE NUMBER a", "def extract_urls ( VAR ) : NEWLINE VAR = re . compile ( STRING ) NEWLINE for VAR in VAR . finditer ( VAR ) : NEWLINE yield VAR . group ( NUMBER )", "with open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR == NUMBER : NEWLINE VAR . write ( STRING ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . write ( STRING ) NEWLINE elif VAR == NUMBER : NEWLINE pass NEWLINE else : NEWLINE VAR . write ( VAR )", "VAR = { name : STRING } ; NEWLINE VAR = { x : NUMBER } ; NEWLINE db . things . save ( VAR ) ; NEWLINE db . things . save ( VAR ) ;", "[ list ( VAR ) for VAR in zip ( * empampleList ) ]", "VAR = [ [ STRING ] * NUMBER for VAR in xrange ( NUMBER ) ] NEWLINE add ( VAR , STRING , NUMBER ) NEWLINE add ( VAR , STRING , NUMBER )", "b in cycles ( a )", "VAR = set ( ( NUMBER , NUMBER ) ) NEWLINE VAR = set ( ( NUMBER , NUMBER ) )", "VAR = sorted ( filtered , key = regexp . match ( line ) . group ( NUMBER ) )", "data . sort ( key = lambda VAR : VAR [ NUMBER ] )", "import numpy as np NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . random . random ( size = ( VAR , VAR , NUMBER ) ) NEWLINE VAR = VAR NEWLINE VAR = VAR // NUMBER NEWLINE for VAR in xrange ( VAR ) : NEWLINE VAR = NUMBER NEWLINE for VAR in xrange ( VAR - VAR ) : NEWLINE VAR = VAR [ VAR ] [ VAR ] NEWLINE VAR = VAR [ VAR ] [ VAR + VAR ] NEWLINE VAR += np . dot ( VAR , VAR ) NEWLINE print VAR NEWLINE print STRING * NUMBER NEWLINE for VAR in xrange ( VAR ) : NEWLINE VAR = np . einsum ( STRING , VAR [ VAR ] [ : VAR // NUMBER ] , VAR [ VAR ] [ VAR // NUMBER : ] ) NEWLINE print VAR", "VAR = zip ( * [ iter ( a ) ] * NUMBER )", "for VAR in itertools . product ( * [ d [ k ] for k in sorted ( d . keys ( ) ) ] ) : NEWLINE", "import pandas as pd NEWLINE VAR = STRING NEWLINE VAR = pd . to_datetime ( VAR . splitlines ( ) ) NEWLINE VAR = pd . DataFrame ( { STRING : VAR , STRING : range ( len ( VAR ) ) } ) NEWLINE >> > VAR NEWLINE date val NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER", "( swr3 ) macbook : swr3 joeyoung $ python swr3 . py NEWLINE Artist : Vaya Con Dios Title : Nah neh nah NEWLINE Artist : Genesis Title : No son of mine NEWLINE Artist : Genesis Title : No son of mine NEWLINE Artist : Double You Title : Please don ' t go NEWLINE Artist : Stereo MC ' s Title : Step it up NEWLINE Artist : Cranberries Title : Zombie NEWLINE Artist : La Bouche Title : Sweet dreams NEWLINE Artist : Die Prinzen Title : Du mut ein Schwein sein NEWLINE Artist : Bad Religion Title : Punk rock song NEWLINE Artist : Bellini Title : Samba de Janeiro NEWLINE Artist : Dion , Celine ; Bee Gees Title : Immortality NEWLINE Artist : Jones , Tom ; Mousse T . Title : Sex bomb NEWLINE Artist : Yanai , Kate Title : Bacardi feeling ( Summer dreamin ' ) NEWLINE Artist : Heroes Del Silencio Title : Entre dos tierras", "import csv NEWLINE VAR = { ( STRING , STRING ) : [ NUMBER , NUMBER , NUMBER ] , ( STRING , STRING ) : [ NUMBER , NUMBER , NUMBER , NUMBER ] } NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR , delimiter = STRING ) NEWLINE VAR . writerow ( VAR . keys ( ) ) NEWLINE for VAR in zip ( * VAR . values ( ) ) : NEWLINE VAR . writerow ( list ( VAR ) )", "VAR = re . compile ( STRING ) NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = VAR . search ( STRING ) NEWLINE if not VAR : NEWLINE print ( STRING ) NEWLINE else : NEWLINE VAR = VAR . group ( NUMBER ) NEWLINE VAR = re . findall ( pat , VAR )", "pip install pyjwkest", "{ % for VAR , VAR in d . items % } NEWLINE { % for VAR , VAR in VAR . items % } NEWLINE { % if VAR % } NEWLINE { % for VAR in VAR % } NEWLINE { { VAR } } NEWLINE { % endfor % } NEWLINE { % endif % } NEWLINE { % endfor % } NEWLINE { % endfor % }", "In [ NUMBER ] : data NEWLINE Out [ NUMBER ] : Ethernet ( src = STRING , dst = STRING , data = IP ( src = STRING , off = NUMBER , dst = STRING , sum = NUMBER , len = NUMBER , p = NUMBER , id = NUMBER , data = TCP ( seq = NUMBER , off_x2 = NUMBER , ack = NUMBER , win = NUMBER , sum = NUMBER , flags = NUMBER , dport = NUMBER , sport = NUMBER ) ) )", "In [ NUMBER ] : import numpy as np NEWLINE import pandas as pd NEWLINE n = NUMBER NEWLINE testing = pd . DataFrame ( { STRING : [ STRING , np . nan , STRING , STRING , STRING , STRING , STRING ] * n , STRING : [ STRING , np . nan , STRING , STRING , STRING , STRING , STRING ] * n } )", "Date Profit weekofyear Weekly_Cum NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER", "import django . contrib . auth NEWLINE django . contrib . auth . models . User . objects . all ( ) . count ( )", "( STRING , < class STRING > ) NEWLINE ( STRING , < class STRING > )", "Tk . attributes ( STRING , True )", "NUMBER NUMBER NUMBER , NUMBER NEWLINE NUMBER NUMBER NUMBER , NUMBER NEWLINE NUMBER NUMBER NUMBER , NUMBER NEWLINE NUMBER NUMBER NUMBER , NUMBER NEWLINE NUMBER NUMBER NUMBER , NUMBER", "( VAR , VAR , VAR ) = max ( ( VAR [ k ] , VAR , VAR ) for ( VAR , VAR ) in enumerate ( m ) for ( VAR , VAR ) in enumerate ( VAR ) )", "VAR = STRING . format ( STRING , STRING ) NEWLINE if something : NEWLINE do_something ( STRING . format ( NUMBER , NUMBER , NUMBER ) )", "from threading import Thread NEWLINE def runA ( ) : NEWLINE while True : NEWLINE print STRING NEWLINE def runB ( ) : NEWLINE while True : NEWLINE print STRING NEWLINE if __name__ == STRING : NEWLINE VAR = Thread ( target = runA ) NEWLINE VAR = Thread ( target = runB ) NEWLINE VAR . setDaemon ( True ) NEWLINE VAR . setDaemon ( True ) NEWLINE VAR . start ( ) NEWLINE VAR . start ( ) NEWLINE while True : NEWLINE pass", "NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER + NUMBER : NUMBER NUMBER", "setattr ( self , STRING , wavelength_val )", "def clicked ( VAR , VAR ) : NEWLINE VAR = VAR . tableview . model ( ) NEWLINE VAR . tableview . clearSelection ( ) NEWLINE VAR . filterActive = True NEWLINE VAR . invalidateFilter ( )", "VAR = line . split ( )", "import time NEWLINE import itertools NEWLINE VAR = NUMBER NEWLINE for VAR in itertools . count ( time . time ( ) + VAR , VAR ) : NEWLINE doSomeWork ( ) NEWLINE VAR = VAR - time . time ( ) NEWLINE if VAR > NUMBER : NEWLINE time . sleep ( VAR )", "* [ [ NUMBER , NUMBER ] , [ NUMBER ] , [ NUMBER ] ]", "from BeautifulSoup import BeautifulSoup NEWLINE import urllib2 NEWLINE VAR = urllib2 . urlopen ( STRING ) NEWLINE if VAR . getcode ( ) == NUMBER : NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE for VAR in VAR . findAll ( STRING ) : NEWLINE print VAR . get ( STRING ) NEWLINE else : NEWLINE print STRING", "VAR = { STRING : STRING }", "VAR = Image . open ( STRING ) NEWLINE VAR = VAR . rotate ( NUMBER , expand = True ) NEWLINE VAR . save ( STRING )", "def __str__ ( VAR ) : NEWLINE VAR = STRING NEWLINE for VAR in range ( VAR . x ) : NEWLINE for VAR in range ( VAR . y ) : NEWLINE VAR += STRING if VAR in [ NUMBER , VAR . x - NUMBER ] or VAR in [ NUMBER , VAR . y - NUMBER ] else STRING NEWLINE VAR += STRING NEWLINE return VAR", "VAR = STRING NEWLINE VAR = eval ( VAR . split ( STRING ) [ NUMBER ] ) NEWLINE VAR = VAR . split ( STRING ) [ NUMBER ] . strip ( ) NEWLINE VAR = { } NEWLINE VAR [ VAR ] = VAR", "from functools import partial NEWLINE def difference_func ( test_color , other_color ) : NEWLINE return ? ? ? NEWLINE VAR = min ( colors , key = partial ( difference_func , test_color ) )", "if NUMBER < ( modifiedTimeEnd - modifiedTimeStart ) < maxWriteFrequency", "def populate ( VAR ) : NEWLINE VAR . m . clear ( ) NEWLINE VAR = VAR . m . invisibleRootItem ( ) NEWLINE VAR = VAR . t . selectionModel ( ) NEWLINE for VAR in VAR . l : NEWLINE VAR = QtGui . QStandardItem ( ) NEWLINE VAR . setText ( VAR [ NUMBER ] ) NEWLINE VAR . appendRow ( VAR ) NEWLINE if VAR [ NUMBER ] : NEWLINE VAR = VAR . m . indexFromItem ( VAR ) NEWLINE VAR . select ( VAR , VAR . Select )", "STRING", "Example NEWLINE blank blank red red blank red blank red red NEWLINE . .", "import collections NEWLINE class TransformedDict ( collections . MutableMapping ) : NEWLINE STRING NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE VAR . store = dict ( ) NEWLINE VAR . update ( dict ( * args , ** kwargs ) ) NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE return VAR . store [ VAR . __keytransform__ ( VAR ) ] NEWLINE def __setitem__ ( VAR , VAR , VAR ) : NEWLINE VAR . store [ VAR . __keytransform__ ( VAR ) ] = VAR NEWLINE def __delitem__ ( VAR , VAR ) : NEWLINE del VAR . store [ VAR . __keytransform__ ( VAR ) ] NEWLINE def __iter__ ( VAR ) : NEWLINE return iter ( VAR . store ) NEWLINE def __len__ ( VAR ) : NEWLINE return len ( VAR . store ) NEWLINE def __keytransform__ ( VAR , VAR ) : NEWLINE return VAR", "def re_round ( VAR , VAR = NUMBER ) : NEWLINE for VAR in VAR : NEWLINE try : NEWLINE yield round ( VAR , VAR ) NEWLINE except TypeError : NEWLINE yield type ( VAR ) ( re_round ( VAR , VAR ) )", "int main ( void ) NEWLINE { // Array to send int arr [ ] = { NUMBER , NUMBER , NUMBER , NUMBER } ; int len = NUMBER ; // Create FIFO char filename [ ] = STRING ; int s_fifo = mkfifo ( filename , S_IRWXU ) ; if ( s_fifo != NUMBER ) { printf ( STRING , s_fifo ) ; return - NUMBER ; } FILE * wfd = fopen ( filename , STRING ) ; if ( wfd < NUMBER ) { printf ( STRING , wfd ) ; return - NUMBER ; } // Write to FIFO for ( int i = NUMBER ; i < len ; i + + ) { int s_write = fprintf ( wfd , STRING , arr [ i ] ) ; if ( s_write < NUMBER ) { printf ( STRING , s_write ) ; break ; } } // Close and delete FIFO fclose ( wfd ) ; unlink ( filename ) ; }", "VAR = True NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR , VAR = ( NUMBER , VAR ) if VAR else ( VAR , NUMBER ) NEWLINE print ( VAR , VAR )", ">> > from django . db . models import Q NEWLINE >> > VAR = [ STRING , STRING ] NEWLINE >> > VAR = Q ( ) NEWLINE >> > for VAR in VAR : NEWLINE . . . VAR |= Q ( name__startswith = VAR ) NEWLINE >> > Inventary . objects . filter ( VAR )", "sorted ( a , key = lambda VAR : map ( str . strip , VAR . split ( STRING ) [ : : - NUMBER ] ) )", ">> > zip ( [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ) NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE >> >", "import sys NEWLINE def main ( VAR ) : NEWLINE print VAR NEWLINE if __name__ == STRING : NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE main ( VAR )", "def __gt__ ( VAR , VAR ) : NEWLINE return VAR . value > VAR . value", "STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in sorted ( adict . items ( ) ) )", ">> > VAR = itertools . chain . from_iterable ( sixbit ) NEWLINE >> > [ STRING . join ( VAR ) for VAR in itertools . izip ( * [ VAR ] * NUMBER ) ] NEWLINE [ STRING , STRING , STRING ]", "import pandas as pd NEWLINE VAR = [ { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ] NEWLINE VAR = pd . DataFrame ( VAR ) NEWLINE VAR = VAR . values NEWLINE VAR NEWLINE array ( [ [ NUMBER , nan , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "VAR = sample_gen ( NUMBER , [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE print VAR . next ( ) NEWLINE print VAR . next ( ) NEWLINE print VAR . next ( ) NEWLINE print VAR . next ( )", "Head Chr Start End NEWLINE Trans Num NEWLINE ENST473358 NUMBER A NUMBER NUMBER NUMBER NEWLINE NUMBER A NUMBER NUMBER NUMBER NEWLINE NUMBER A NUMBER NUMBER NaN NEWLINE ENST417324 NUMBER B NUMBER NUMBER NUMBER NEWLINE NUMBER B NUMBER NUMBER NUMBER NEWLINE NUMBER B NUMBER NUMBER NaN NEWLINE ENST461467 NUMBER B NUMBER NUMBER NUMBER NEWLINE NUMBER B NUMBER NUMBER NaN", "VAR = Matrix ( NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR [ NUMBER , NUMBER , NUMBER , NUMBER ] = STRING NEWLINE VAR [ NUMBER , NUMBER , NUMBER , NUMBER ] // - > STRING", "from twisted . internet . protocol import Protocol , Factory NEWLINE from twisted . internet import reactor NEWLINE class Echo ( Protocol ) : NEWLINE def dataReceived ( VAR , VAR ) : NEWLINE print STRING , VAR NEWLINE def connectionLost ( VAR , VAR ) : NEWLINE print STRING , VAR NEWLINE VAR = Factory ( ) NEWLINE VAR . protocol = Echo NEWLINE reactor . listenTCP ( NUMBER , VAR ) NEWLINE reactor . run ( )", "with open ( your_f ) as VAR : NEWLINE VAR = VAR . readlines ( ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if your condition : NEWLINE VAR [ VAR ] = STRING NEWLINE with open ( your_f , STRING ) as VAR : NEWLINE VAR . writelines ( VAR )", "print ( np . argsort ( idx ) . reshape ( grid_shape [ NUMBER ] , - NUMBER ) ) NEWLINE", "python STRING % *", "pcolor ( D1 ) NEWLINE contour ( D2 )", "for VAR in all_objects : NEWLINE if hasattr ( VAR , STRING ) : NEWLINE VAR . gravity ( )", "import os NEWLINE VAR = STRING NEWLINE os . environ [ STRING ] = STRING % ( os . environ [ STRING ] , VAR ) NEWLINE os . system ( STRING )", "VAR = { STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE if form . getfirst ( VAR ) : NEWLINE setattr ( msg , VAR , form . getfirst ( VAR ) )", "VAR = VAR [ : NUMBER ] + STRING + VAR [ NUMBER : ]", ">> > VAR = { STRING : NUMBER , STRING : NUMBER } NEWLINE >> > VAR = Struct ( ** VAR ) NEWLINE >> > VAR NEWLINE < __main__ . Struct instance at NUMBER > NEWLINE >> > VAR . a NEWLINE NUMBER NEWLINE >> > VAR . b NEWLINE NUMBER", "for VAR , VAR in PointsOfInterest . iteritems ( ) : NEWLINE if VAR in mypkt . Text : NEWLINE VAR [ NUMBER ] += NUMBER", "VAR = STRING", ">> > [ int ( VAR ) for VAR in List1 for VAR in VAR . split ( ) ]", "SELECT ` sentence_id ` , ` word_id ` FROM ` sentences_words ` NEWLINE WHERE ` word_id ` IN ( SELECT ` id ` FROM ` words ` WHERE ` word ` IN ( STRING , STRING , STRING ) ) ;", "class ClosestDict ( dict ) : NEWLINE def get ( VAR , VAR ) : NEWLINE VAR = min ( VAR . iterkeys ( ) , VAR = lambda VAR : abs ( VAR - VAR ) ) NEWLINE return dict . get ( VAR , VAR ) NEWLINE VAR = ClosestDict ( { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } ) NEWLINE print ( VAR . get ( NUMBER ) , VAR . get ( NUMBER ) , VAR . get ( NUMBER ) )", "( VAR for VAR in set ( sourceDict ) . intersection ( targetDict ) if sourceDict [ key ] != targetDict [ key ] )", "VAR = root [ NUMBER ] NEWLINE VAR = ET . SubElement ( VAR , STRING ) NEWLINE tree . write ( tempXmlExportPath ) NEWLINE VAR = ET . SubElement ( VAR , STRING ) NEWLINE tree . write ( tempXmlExportPath ) NEWLINE VAR = ET . SubElement ( VAR , STRING ) NEWLINE tree . write ( tempXmlExportPath ) NEWLINE for VAR in tags : NEWLINE VAR = ET . SubElement ( VAR , STRING ) NEWLINE VAR . text = VAR NEWLINE tree . write ( tempXmlExportPath )", "[ [ NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER ] ]", ">> > STRING . join ( chr ( VAR ) for VAR in xors ) NEWLINE STRING", "import operator NEWLINE from collections import defaultdict NEWLINE VAR = [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] NEWLINE def borda ( VAR ) : NEWLINE VAR = defaultdict ( int ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] ] += NUMBER NEWLINE VAR [ VAR [ NUMBER ] ] += NUMBER NEWLINE VAR [ VAR [ NUMBER ] ] += NUMBER NEWLINE VAR = max ( VAR . iteritems ( ) , key = operator . itemgetter ( NUMBER ) ) [ NUMBER ] NEWLINE VAR = [ VAR [ VAR [ NUMBER ] ] for VAR in sorted ( VAR . keys ( ) ) ] NEWLINE return ( VAR , VAR )", "def powerset ( VAR ) : NEWLINE STRING NEWLINE VAR = list ( VAR ) NEWLINE return chain . from_iterable ( combinations ( VAR , VAR ) for VAR in range ( len ( VAR ) + NUMBER ) )", "import numpy NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER ] NEWLINE VAR = numpy . where ( numpy . diff ( numpy . sign ( VAR ) ) ) [ NUMBER ]", "VAR = STRING NEWLINE VAR = VAR . replace ( STRING , STRING ) NEWLINE VAR = VAR . replace ( STRING , STRING )", "import datetime NEWLINE VAR = datetime . date . today ( ) . VAR", "VAR = VAR . sort ( columns = STRING , ascending = False ) NEWLINE VAR", "VAR = Planet ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "[ NUMBER , NUMBER , NUMBER ] . index ( NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER ] . index ( NUMBER )", ">> > VAR = STRING NEWLINE >> > import pyparsing NEWLINE >> > for VAR in pyparsing . nestedExpr ( STRING , STRING ) . searchString ( VAR ) : NEWLINE . . . print VAR [ NUMBER ] NEWLINE . . . NEWLINE [ STRING ] NEWLINE [ STRING ] NEWLINE [ STRING , [ STRING , [ STRING , STRING ] , STRING ] ]", "VAR = [ int ( VAR ) for VAR in VAR ] NEWLINE", "VAR = NUMBER NEWLINE for VAR in Input : NEWLINE VAR = VAR . rstrip ( ) NEWLINE VAR = VAR . split ( STRING ) NEWLINE for VAR in VAR [ cur_colum : ] : NEWLINE . . . NEWLINE . . . NEWLINE VAR += NUMBER", "def isAlphabetical ( VAR ) : NEWLINE for VAR in xrange ( len ( VAR ) - NUMBER ) : NEWLINE if VAR [ VAR ] > VAR [ VAR + NUMBER ] : NEWLINE return False NEWLINE return True", ". . . < p > Hello world ! < / p > { { STRING | debug } } . . .", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = VAR . find ( STRING , id = STRING ) NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = VAR . body . extract ( ) NEWLINE VAR . append ( VAR ) NEWLINE print VAR", "import cElementTree as ElementTree NEWLINE class XmlListConfig ( list ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE if len ( VAR ) == NUMBER or VAR [ NUMBER ] . tag != VAR [ NUMBER ] . tag : NEWLINE VAR . append ( XmlDictConfig ( VAR ) ) NEWLINE elif VAR [ NUMBER ] . tag == VAR [ NUMBER ] . tag : NEWLINE VAR . append ( XmlListConfig ( VAR ) ) NEWLINE elif VAR . VAR : NEWLINE VAR = VAR . VAR . strip ( ) NEWLINE if VAR : NEWLINE VAR . append ( VAR ) NEWLINE class XmlDictConfig ( dict ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR ) : NEWLINE if VAR . items ( ) : NEWLINE VAR . update ( dict ( VAR . items ( ) ) ) NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE if len ( VAR ) == NUMBER or VAR [ NUMBER ] . tag != VAR [ NUMBER ] . tag : NEWLINE VAR = XmlDictConfig ( VAR ) NEWLINE else : NEWLINE VAR = { VAR [ NUMBER ] . tag : XmlListConfig ( VAR ) } NEWLINE if VAR . items ( ) : NEWLINE VAR . update ( dict ( VAR . items ( ) ) ) NEWLINE VAR . update ( { VAR . tag : VAR } ) NEWLINE elif VAR . items ( ) : NEWLINE VAR . update ( { VAR . tag : dict ( VAR . items ( ) ) } ) NEWLINE else : NEWLINE VAR . update ( { VAR . tag : VAR . VAR } )", "with open ( p_out , STRING ) as VAR : NEWLINE json . dump ( my_dictionary , VAR , indent = NUMBER )", "VAR = soup . find ( STRING ) . findAll ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . findAll ( STRING ) NEWLINE VAR = [ ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR == NUMBER : NEWLINE VAR . append ( VAR . text . strip ( ) ) NEWLINE elif VAR . find ( STRING ) : NEWLINE VAR . append ( VAR . find ( STRING ) [ STRING ] ) NEWLINE elif VAR . find ( STRING ) : NEWLINE VAR . append ( VAR . find ( STRING ) [ STRING ] ) NEWLINE print VAR", "VAR = urllib . unquote ( s . decode ( STRING ) )", "qconf - rattr exechost complex_values exclusive = NUMBER < nodename >", ">> > VAR = [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , . . . { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , . . . { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , . . . { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] NEWLINE >> > sorted ( VAR , key = lambda VAR : VAR [ STRING ] , reverse = True ) NEWLINE [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ]", "g ( a ) = cc [ NUMBER ] * abs ( a - aa [ NUMBER ] ) + cc [ NUMBER ] * abs ( a - aa [ NUMBER ] ) + cc [ NUMBER ] * abs ( a - aa [ NUMBER ] )", "NUMBER pts / NUMBER NUMBER : NUMBER : NUMBER gvim < defunct > NEWLINE NUMBER ? NUMBER : NUMBER : NUMBER gvim", "from sqlalchemy import TypeDecorator , type_coerce , String , or_ NEWLINE class NullComparisons ( TypeDecorator ) : NEWLINE VAR = String NEWLINE class comparator_factory ( TypeDecorator . Comparator ) : NEWLINE def __ne__ ( VAR , VAR ) : NEWLINE VAR = type_coerce ( VAR . VAR , String ) NEWLINE return or_ ( VAR == None , VAR != VAR )", "VAR = sum ( NUMBER for VAR in b for VAR in VAR )", "import base64 NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = base64 . b64decode ( value ) NEWLINE VAR . write ( VAR ) NEWLINE VAR . close ( )", "import numpy as np NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE VAR = np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , NUMBER ) ) NEWLINE VAR = VAR [ : , VAR ] NEWLINE VAR = np . lexsort ( VAR . T ) NEWLINE VAR = VAR [ VAR , : ] NEWLINE VAR = VAR [ VAR , : ] NEWLINE VAR = np . all ( VAR [ NUMBER : , : ] == VAR [ : - NUMBER , : ] , axis = NUMBER ) NEWLINE VAR = np . nonzero ( np . logical_not ( VAR ) ) [ NUMBER ] + NUMBER NEWLINE VAR = np . split ( VAR , VAR )", ">> > VAR = range ( NUMBER ) NEWLINE >> > for VAR in VAR : NEWLINE . . . VAR . remove ( VAR ) NEWLINE . . . NEWLINE >> > VAR NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "def GetModelData ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ VAR ] . label ] = eval ( STRING % VAR [ VAR ] . name ) NEWLINE return VAR NEWLINE @ login_required NEWLINE def clients_view ( VAR , VAR ) : NEWLINE VAR = Client . objects . get ( id = VAR ) NEWLINE VAR = AddClientForm ( VAR ) NEWLINE VAR = ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) NEWLINE VAR = GetModelData ( VAR , VAR ) NEWLINE VAR = RequestContext ( VAR , { STRING : VAR , STRING : VAR } ) NEWLINE return render_to_response ( STRING , VAR )", "import csv NEWLINE import collections NEWLINE . . . NEWLINE with open ( path ) as VAR : NEWLINE VAR = collections . Counter ( ) NEWLINE VAR = collections . Counter ( ) NEWLINE for VAR , VAR in csv . reader ( VAR ) : NEWLINE VAR [ VAR ] += int ( VAR ) NEWLINE VAR [ VAR ] += NUMBER", ">> > set ( chain . from_iterable ( VAR for VAR , VAR in rev_multidict . items ( ) if len ( VAR ) > NUMBER ) ) NEWLINE { STRING , STRING }", "import matplotlib . pyplot as plt NEWLINE import numpy NEWLINE VAR , VAR = np . meshgrid ( np . linspace ( - NUMBER , NUMBER , NUMBER ) , np . linspace ( - NUMBER , NUMBER , NUMBER ) ) NEWLINE VAR = random . random ( ( NUMBER , NUMBER ) ) NEWLINE VAR = random . random ( ( NUMBER , NUMBER ) ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER ) NEWLINE VAR . imshow ( VAR , extent = [ - NUMBER , NUMBER , - NUMBER , NUMBER ] , interpolation = STRING , cmap = plt . cm . gray ) NEWLINE VAR . scatter ( VAR , VAR , NUMBER * VAR )", "% test . py - h NEWLINE usage : test . py [ - h ] start stop step NEWLINE Print a range . NEWLINE positional arguments : NEWLINE start Specify start . NEWLINE stop Specify stop . NEWLINE step Specify step . NEWLINE optional arguments : NEWLINE - h , - - help show this help message and exit", "$ convert - background none input . svg output . png", "most common : ( STRING , NUMBER ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE updated o : [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE updated o : [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE updated o : [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE most common : ( STRING , NUMBER ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE updated o : [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE updated o : [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE most common : ( STRING , NUMBER ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE updated o : [ STRING , STRING , STRING , STRING , STRING , STRING ]", "from kivy . config import Config NEWLINE Config . set ( STRING , STRING , STRING ) NEWLINE Config . set ( STRING , STRING , STRING ) NEWLINE Config . set ( STRING , STRING , NUMBER ) NEWLINE from kivy . app import App NEWLINE from kivy . uix . widget import Widget NEWLINE from kivy . uix . boxlayout import BoxLayout NEWLINE from kivy . lang import Builder NEWLINE from kivy . properties import ObjectProperty NEWLINE from kivy . graphics import Color , Ellipse , Line NEWLINE Builder . load_file ( STRING ) NEWLINE class ColorLoopWidget ( Widget ) : NEWLINE VAR = ObjectProperty ( ) NEWLINE VAR = ObjectProperty ( ) NEWLINE def on_touch_down ( VAR , VAR ) : NEWLINE with VAR . canvas : NEWLINE VAR . canvas . clear ( ) NEWLINE VAR = NUMBER NEWLINE Ellipse ( pos = ( VAR . x - VAR / NUMBER , VAR . y - VAR / NUMBER ) , size = ( VAR , VAR ) ) NEWLINE VAR . ud [ STRING ] = Line ( points = ( VAR . x , VAR . y ) ) NEWLINE VAR . VAR . text = STRING + str ( VAR . x ) NEWLINE VAR . VAR . text = STRING + str ( VAR . y ) NEWLINE class HueLayout ( Widget ) : NEWLINE VAR = ObjectProperty ( ) NEWLINE VAR = ObjectProperty ( ) NEWLINE VAR = ObjectProperty ( ) NEWLINE def clear_canvas ( VAR ) : NEWLINE VAR . VAR . canvas . clear ( ) NEWLINE class HueApp ( App ) : NEWLINE def build ( VAR ) : NEWLINE return HueLayout ( ) NEWLINE if __name__ == STRING : NEWLINE HueApp ( ) . run ( )", "In [ NUMBER ] : customize_string ( line , STRING ) NEWLINE Out [ NUMBER ] : STRING", "[ NUMBER plane_17 \\ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER \\ noname ]", "sshpass - [ args ] rsync [ source ] [ dest ] | sort", "NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", "[ STRING , STRING ]", "VAR = dict ( ( VAR , sum ( VAR for VAR in VAR if isinstance ( VAR , int ) ) ) for VAR , VAR in d . items ( ) )", "import Tkinter NEWLINE VAR = Tkinter . Tk ( ) NEWLINE VAR = VAR . cget ( STRING ) NEWLINE Tkinter . Button ( VAR , text = STRING , bg = VAR ) . pack ( ) NEWLINE VAR . mainloop ( )", "VAR = [ NUMBER ] * NUMBER + NUMBER * [ NUMBER ] NEWLINE random . shuffle ( VAR ) NEWLINE VAR = [ VAR [ VAR : VAR + NUMBER ] for VAR in xrange ( NUMBER , NUMBER , NUMBER ) ]", "VAR = STRING", "VAR = STRING . split ( STRING ) NEWLINE for VAR in reversed ( range ( len ( VAR ) + NUMBER ) ) : NEWLINE VAR = STRING . join ( VAR [ : VAR ] ) NEWLINE if lookup . get ( VAR ) : NEWLINE print ( STRING . format ( VAR , lookup . get ( VAR ) ) ) NEWLINE break NEWLINE", "re . sub ( STRING , STRING , s )", "from functools import wraps NEWLINE from fabric . network import needs_host NEWLINE from fabric . api import run , env NEWLINE def runs_final ( VAR ) : NEWLINE @ wraps ( VAR ) NEWLINE def decorated ( * args , ** kwargs ) : NEWLINE if env . host_string == env . all_hosts [ - NUMBER ] : NEWLINE return VAR ( * args , ** kwargs ) NEWLINE else : NEWLINE return None NEWLINE return decorated NEWLINE @ needs_host NEWLINE def hello ( ) : NEWLINE run ( STRING ) NEWLINE atexit ( ) NEWLINE @ runs_final NEWLINE def atexit ( ) : NEWLINE print ( STRING )", "print test . groupby ( [ STRING , STRING ] ) [ STRING ] . sum ( ) NEWLINE GroupID Sample NEWLINE NUMBER S1 NUMBER NEWLINE NUMBER S2 NUMBER", "import time NEWLINE def key ( VAR ) : NEWLINE return time . strptime ( VAR [ NUMBER ] [ - NUMBER : ] , STRING )", ">> > VAR = set ( STRING ) NEWLINE >> > compute_neighborhoods ( data , VAR ) NEWLINE >> > data NEWLINE { STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ NUMBER ] ] , STRING : [ NUMBER , [ NUMBER ] ] , STRING : [ NUMBER , [ NUMBER , NUMBER ] ] , STRING : [ NUMBER , [ NUMBER , NUMBER ] ] , STRING : [ NUMBER , [ NUMBER ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ NUMBER ] ] }", "from sklearn . feature_extraction FeatureHasher NEWLINE import scipy NEWLINE VAR = FeatureHasher ( n_features = NUMBER , non_negative = True ) NEWLINE VAR = [ { STRING : NUMBER , STRING : NUMBER } ] NEWLINE VAR = VAR . fit_transform ( VAR ) NEWLINE VAR = [ { STRING : NUMBER , STRING : NUMBER } ] NEWLINE VAR = VAR . fit_transform ( VAR )", "import ssl NEWLINE import urllib2 NEWLINE VAR = ssl . SSLContext ( ssl . PROTOCOL_TLSv1 ) NEWLINE urllib2 . urlopen ( STRING , VAR = VAR ) . close ( )", "VAR = STRING NEWLINE print re . sub ( STRING , STRING , VAR )", "+ - - - - - - + - - - - - + - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - - + - - - - - - - - - - + NEWLINE | id | table | user | changeDate | deltaCol | deltaValue | NEWLINE + - - - - - - + - - - - - + - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - - + - - - - - - - - - - + NEWLINE | NUMBER | TAB2 | user11 | NUMBER - NUMBER - NUMBER NUMBER : NUMBER . . | value2 | NUMBER | NEWLINE | NUMBER | TAB1 | user01 | NUMBER - NUMBER - NUMBER NUMBER : NUMBER . . | value | NUMBER | NEWLINE | NUMBER | TAB1 | user01 | NUMBER - NUMBER - NUMBER NUMBER : NUMBER . . | name | STRING | NEWLINE + - - - - - - + - - - - - + - - - - - - - - + - - - - - - - - - - - - - - - - - - - - + - - - - - - - - + - - - - - - - - - - +", "if abs ( a - b ) > NUMBER :", "VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , . . . ] NEWLINE VAR = { } NEWLINE for VAR , VAR in data : NEWLINE if VAR not in VAR : NEWLINE VAR [ VAR ] = [ ] NEWLINE VAR [ VAR ] . append ( VAR )", "from datetime import date , timedelta NEWLINE VAR = date . VAR ( ) NEWLINE VAR = VAR - timedelta ( NUMBER ) NEWLINE print ( VAR . timetuple ( ) ) NEWLINE", "from collections import Counter NEWLINE from itertools import repeat , chain NEWLINE print list ( chain . from_iterable ( repeat ( VAR , VAR ) for VAR , VAR in Counter ( a ) . most_common ( ) ) ) NEWLINE", "plt . bar ( range ( NUMBER , len ( sum_list ) ) , sum_list )", "awk - F , - vOFS = , - vc = NUMBER STRING data . csv", "bar ( bin_edges [ : - NUMBER ] , hist_data )", "def remembercalltimes ( VAR , * args , ** kwargs ) : NEWLINE STRING NEWLINE def inner ( * args , ** kwargs ) : NEWLINE inner . last_called = datetime . now ( ) NEWLINE return VAR ( * args , ** kwargs ) NEWLINE return inner NEWLINE @ remembercalltimes NEWLINE def myfun ( ) : NEWLINE >> > myfun ( ) NEWLINE >> > myfun . last_called NEWLINE >> > datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "def recieve_form ( request , . . . ) : NEWLINE . . . NEWLINE VAR = MyForm ( request . POST , instance = a ) NEWLINE VAR = VAR . save ( commit = False ) NEWLINE VAR . date_created = < whatever > NEWLINE VAR . save ( )", "df [ df . A % NUMBER == NUMBER ]", "VAR = STRING in vars ( ) NEWLINE if VAR : NEWLINE VAR = logging . getLogger ( ) NEWLINE VAR . setLevel ( logging . DEBUG ) NEWLINE for VAR in VAR . handlers : NEWLINE VAR . setFormatter ( logging . Formatter ( STRING ) ) NEWLINE else : NEWLINE logging . basicConfig ( level = logging . DEBUG , format = STRING )", "if GO_TO_MAX_SPEED_CONDITION : NEWLINE VAR = True NEWLINE if STOP_GOING_TO_MAX_SPEED_CONDITION : NEWLINE VAR = False", "import numpy as np NEWLINE VAR = np . random . random ( NUMBER ** NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR = np . linspace ( VAR . min ( ) , VAR . max ( ) , VAR + NUMBER ) NEWLINE VAR = VAR [ NUMBER : ] NEWLINE VAR = VAR . searchsorted ( VAR ) NEWLINE VAR = ( np . bincount ( VAR , weights = VAR , minlength = VAR ) / np . bincount ( VAR , minlength = VAR ) )", "VAR += [ [ VAR + f ( VAR ) for VAR , VAR in zip ( VAR [ - NUMBER ] , itertools . count ( someStartTime , delta ) ) ] ]", "mac389 : { STRING : ( NUMBER ) , STRING : ( NUMBER ) }", "staticwin . clear ( ) NEWLINE staticwin . addstr ( NUMBER , NUMBER , STRING , curses . color_pair ( RED_TEXT ) ) NEWLINE staticwin . box ( ) NEWLINE staticwin . refresh ( )", "Python NUMBER NUMBER ( default , Dec NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) [ MSC v NUMBER NUMBER bit ( Intel ) ] on win32 NEWLINE Type STRING , STRING or STRING for VAR information . NEWLINE >> > == == == == == == == == == == == == == == == == RESTART == == == == == == == == == == == == == == == == NEWLINE >> > NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE finding number NUMBER NEWLINE found NUMBER NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE finding number NUMBER NEWLINE found NUMBER NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE finding number NUMBER NEWLINE Not found NUMBER", ">> > s . x = - NUMBER", "with open ( STRING , STRING ) as f : NEWLINE for VAR in f : NEWLINE", "VAR = [ STRING % ( VAR , VAR ) for VAR , VAR in xml_dict . iteritems ( ) ] NEWLINE VAR = STRING . join ( VAR ) NEWLINE d . text = VAR", "import sys , termios NEWLINE termios . tcsetattr ( sys . stdin . fileno ( ) , termios . TCSADRAIN , previous_mode )", "NUMBER", "import cgi NEWLINE from VAR . parser import HTMLParser NEWLINE from urllib . request import urlopen NEWLINE VAR = STRING NEWLINE def is_price_tag ( VAR , VAR ) : NEWLINE return VAR == STRING and dict ( VAR ) . get ( STRING ) == STRING NEWLINE class Parser ( HTMLParser ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE HTMLParser . __init__ ( VAR ) NEWLINE VAR . contents = [ ] NEWLINE VAR . intag = None NEWLINE VAR . VAR = VAR NEWLINE VAR . feed ( VAR ) NEWLINE def handle_starttag ( VAR , VAR , VAR ) : NEWLINE VAR . intag = VAR . VAR ( VAR , VAR ) NEWLINE def handle_endtag ( VAR , VAR ) : NEWLINE VAR . intag = False NEWLINE def handle_data ( VAR , VAR ) : NEWLINE if VAR . intag : NEWLINE VAR . contents . append ( VAR ) NEWLINE VAR = urlopen ( VAR ) NEWLINE VAR , VAR = cgi . parse_header ( VAR . headers . get ( STRING , STRING ) ) NEWLINE VAR = VAR . read ( ) . decode ( VAR [ STRING ] ) NEWLINE VAR = Parser ( VAR , is_price_tag ) . contents [ NUMBER ] NEWLINE print ( VAR )", "class Disk ( object ) : NEWLINE def __init__ ( VAR , VAR = None , VAR = None , VAR = None ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR", "Q : NUMBER NUMBER b491218348bf5ff149325e47eb628ce36f73a1a927ae6cb6021c7ac4 NEWLINE RIPEMD - NUMBER ( SHA - NUMBER ( Q ) ) : cbe57ebe20ad59518d14926f8ab47fecc984af49 NEWLINE Signature verified correctly : True", ">> > for VAR in pdfnames ( names ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE / Adobe Green NEWLINE / PANTONE NUMBER CV NEWLINE / paired ( ) parentheses NEWLINE / The_Key_of_F NEWLINE / AB NEWLINE / Name1 NEWLINE / ASomewhatLongerName NEWLINE / A ; Name_With - Various ** * Characters ? NEWLINE / NUMBER NEWLINE / $ $ NEWLINE / @ pattern NEWLINE / . notdef", "from communicate import * NEWLINE VAR = execute_and_receive ( STRING ) NEWLINE VAR = VAR + NUMBER", "import os NEWLINE import sys NEWLINE from distutils . errors import DistutilsPlatformError NEWLINE VAR = os . path . normpath ( sys . VAR ) NEWLINE VAR = os . path . normpath ( sys . exec_prefix ) NEWLINE def get_python_version ( ) : NEWLINE STRING NEWLINE return sys . version [ : NUMBER ] NEWLINE def get_python_lib ( VAR = NUMBER , VAR = NUMBER , VAR = None ) : NEWLINE STRING NEWLINE if VAR is None : NEWLINE VAR = VAR and VAR or VAR NEWLINE if os . name == STRING : NEWLINE VAR = os . path . join ( VAR , STRING , STRING + get_python_version ( ) ) NEWLINE if VAR : NEWLINE return VAR NEWLINE else : NEWLINE return os . path . join ( VAR , STRING ) NEWLINE elif os . name == STRING : NEWLINE if VAR : NEWLINE return os . path . join ( VAR , STRING ) NEWLINE else : NEWLINE if get_python_version ( ) < STRING : NEWLINE return VAR NEWLINE else : NEWLINE return os . path . join ( VAR , STRING , STRING ) NEWLINE elif os . name == STRING : NEWLINE if VAR : NEWLINE return os . path . join ( VAR , STRING ) NEWLINE else : NEWLINE return os . path . join ( VAR , STRING , STRING ) NEWLINE else : NEWLINE raise DistutilsPlatformError ( STRING STRING % os . name )", "VAR = TicketForm ( request . user )", "VAR = Image . open ( STRING ) NEWLINE VAR = VAR . convert ( STRING ) NEWLINE VAR = VAR . getdata ( ) NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR . extend ( VAR )", "VAR = [ { STRING : { STRING : { STRING : [ { STRING : [ STRING , - NUMBER ] } , NUMBER ] } } } , { STRING : { STRING : STRING } } ] NEWLINE VAR = Order . objects . aggregate ( * VAR ) NEWLINE VAR = [ Order . objects . get ( id = VAR [ STRING ] ) for VAR in VAR ]", "import bisect NEWLINE import random NEWLINE try : NEWLINE from itertools import accumulate NEWLINE except ImportError : NEWLINE def accumulate ( VAR ) : NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR += VAR NEWLINE yield VAR NEWLINE def count ( VAR ) : NEWLINE return sum ( NUMBER for VAR in VAR ) NEWLINE def get_nth ( VAR , VAR ) : NEWLINE assert isinstance ( VAR , int ) , STRING % type ( VAR ) NEWLINE assert VAR > NUMBER , STRING % VAR NEWLINE for VAR , VAR in enumerate ( VAR , NUMBER ) : NEWLINE if VAR == VAR : NEWLINE return VAR NEWLINE def weighted_select ( VAR ) : NEWLINE with open ( VAR ) as VAR : NEWLINE VAR = count ( VAR ) NEWLINE if VAR == NUMBER : NEWLINE return None NEWLINE VAR = range ( VAR , NUMBER , - NUMBER ) NEWLINE VAR = list ( accumulate ( VAR ) ) NEWLINE VAR = random . random ( ) * VAR [ - NUMBER ] NEWLINE VAR = bisect . bisect ( VAR , VAR ) NEWLINE VAR . seek ( NUMBER ) NEWLINE return get_nth ( VAR , VAR + NUMBER )", ">> > map ( list , product ( [ NUMBER , NUMBER ] , repeat = NUMBER ) ) NEWLINE [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ]", "( b , NUMBER )", "NUMBER , NUMBER , NUMBER NEWLINE NUMBER , NUMBER , NUMBER NEWLINE NUMBER , NUMBER , NUMBER", ">> > field in table . c NEWLINE True NEWLINE >> > STRING in table . c NEWLINE True NEWLINE >> > STRING in table . c NEWLINE False", "VAR = [ STRING , STRING , STRING ]", "UPDATE companies NEWLINE SET ico = REPLACE ( ico , STRING , STRING ) ;", "def random_combinations_sample ( VAR , VAR , VAR ) : NEWLINE VAR = set ( ) NEWLINE while len ( VAR ) < VAR : NEWLINE VAR = random . VAR ( xrange ( len ( VAR ) ) , VAR ) NEWLINE VAR = tuple ( VAR [ VAR ] for VAR in sorted ( VAR ) ) NEWLINE VAR . add ( VAR ) NEWLINE return list ( VAR )", "Create test data NEWLINE import pandas as pd NEWLINE import numpy as np NEWLINE VAR = np . random . randint ( NUMBER , NUMBER , size = NUMBER ) NEWLINE VAR = np . sin ( VAR ) + np . random . random_sample ( ( len ( VAR ) , ) ) NEWLINE VAR = pd . Series ( VAR , index = VAR ) NEWLINE VAR . plot ( linestyle = STRING , marker = STRING )", "In [ NUMBER ] : d NEWLINE Out [ NUMBER ] : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : d . replace ( day = NUMBER if d . day < NUMBER else NUMBER ) NEWLINE Out [ NUMBER ] : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : VAR = pd . Timestamp ( d ) NEWLINE In [ NUMBER ] : VAR . replace ( day = NUMBER if VAR . day < NUMBER else NUMBER ) NEWLINE Out [ NUMBER ] : Timestamp ( STRING )", "def justify ( VAR ) : NEWLINE return VAR / NUMBER << ( VAR . bit_length ( ) - NUMBER )", "< form . . . > NEWLINE < input type = STRING name = STRING value = STRING > NEWLINE . . . NEWLINE < / form >", "import io NEWLINE import shutil NEWLINE from urllib . request import urlopen NEWLINE with urlopen ( STRING ) as VAR , open ( STRING , STRING , encoding = STRING , newline = STRING ) as VAR , io . TextIOWrapper ( VAR , encoding = VAR . headers . get_content_charset ( STRING ) , newline = STRING ) as VAR : NEWLINE shutil . copyfileobj ( VAR , VAR )", "label1 ; label2 ; label3 NEWLINE val1 ; otherval1 ; yetanotherval1 NEWLINE val2 ; otherval2 ; dummy NEWLINE val3 ; dummy ; dummy", "from multiprocessing import Pool NEWLINE import time NEWLINE import random NEWLINE def myfunc ( ) : NEWLINE VAR = random . randint ( NUMBER , NUMBER ) NEWLINE time . sleep ( VAR ) NEWLINE return VAR NEWLINE print ( STRING ) NEWLINE VAR = Pool ( processes = NUMBER ) NEWLINE VAR = VAR . map ( myfunc , range ( VAR . _processes ) ) NEWLINE VAR . close ( ) NEWLINE VAR . join ( ) NEWLINE print ( STRING ) NEWLINE print ( VAR )", "from dateutil import parser NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE print parser . parse ( VAR ) . strftime ( STRING )", "import pandas as pd NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , - NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , } , index = [ STRING . format ( VAR ) for VAR in range ( NUMBER , NUMBER ) ] ) NEWLINE VAR = plt . get_cmap ( STRING ) NEWLINE VAR . plot ( kind = STRING , VAR = STRING , VAR = STRING , s = VAR [ STRING ] * NUMBER , c = VAR [ STRING ] , VAR = VAR ) NEWLINE for VAR , VAR in VAR . iterrows ( ) : NEWLINE VAR , VAR = VAR [ [ STRING , STRING ] ] NEWLINE plt . annotate ( str ( VAR ) , xy = ( VAR , VAR ) , xytext = ( - NUMBER , NUMBER ) , textcoords = STRING , ha = STRING , va = STRING , bbox = dict ( boxstyle = STRING , fc = STRING , alpha = NUMBER ) , arrowprops = dict ( arrowstyle = STRING , connectionstyle = STRING ) ) NEWLINE plt . show ( )", "import itertools NEWLINE def matches ( VAR , VAR ) : NEWLINE for VAR in range ( NUMBER , len ( VAR ) + NUMBER ) : NEWLINE for VAR in itertools . combinations ( VAR . items ( ) , VAR ) : NEWLINE if sum ( VAR [ NUMBER ] for VAR in VAR ) == VAR : NEWLINE yield VAR", "@ app . route ( STRING ) NEWLINE @ app . route ( STRING ) NEWLINE @ app . route ( STRING ) NEWLINE def test ( VAR = None , VAR = None , VAR = None ) : NEWLINE VAR = [ VAR , VAR ] NEWLINE VAR = [ VAR for VAR in VAR if VAR is not None ] NEWLINE if VAR == STRING : NEWLINE return STRING . join ( VAR ) NEWLINE else : NEWLINE return STRING", "[ n - r ] NEWLINE [ ] NEWLINE [ n - d - c ]", "VAR = [ [ NUMBER , NUMBER ] * NUMBER ] * NUMBER", "VAR = [ int ( VAR ) for VAR in open ( STRING ) ]", "import numpy as np", "< field name = STRING invisible = STRING / > NEWLINE < field name = STRING attrs = STRING / > NEWLINE < field name = STRING attrs = STRING / >", "In [ NUMBER ] : A NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : VAR = np . zeros ( new_shape , dtype = A . dtype ) NEWLINE In [ NUMBER ] : VAR [ NUMBER : A . shape [ NUMBER ] , NUMBER : A . shape [ NUMBER ] ] = A NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "NUMBER : NUMBER : NUMBER : start interaction NEWLINE NUMBER : NUMBER : NUMBER : End interaction NEWLINE NUMBER : NUMBER : NUMBER : Start interaction NEWLINE NUMBER : NUMBER : NUMBER : End interaction NEWLINE NUMBER : NUMBER : NUMBER : Start interaction NEWLINE NUMBER : NUMBER : NUMBER : End interaction NEWLINE NUMBER : NUMBER : NUMBER : Start interaction NEWLINE NUMBER : NUMBER : NUMBER : End interaction", "df [ STRING ] = pd . cut ( df . height , [ - NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "def readCSVToNumpyArray ( VAR ) : NEWLINE VAR = [ [ ] ] NEWLINE with open ( VAR ) as VAR : NEWLINE VAR = NUMBER NEWLINE for VAR in csv . reader ( VAR ) : NEWLINE for VAR in VAR : NEWLINE try : NEWLINE VAR [ VAR ] . append ( float ( VAR ) ) NEWLINE except ValueError : NEWLINE VAR [ VAR ] . append ( VAR ) NEWLINE VAR = VAR + NUMBER NEWLINE VAR . append ( [ ] ) NEWLINE VAR = numpy . array ( VAR [ : - NUMBER ] , dtype = STRING ) NEWLINE return VAR NEWLINE VAR = readCSVToNumpyArray ( STRING ) NEWLINE print ( VAR )", ". NEWLINE example . py NEWLINE LICENSE NEWLINE README . md NEWLINE setup . py NEWLINE NUMBER directories , NUMBER files", ">> > VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR . __hash__ is None NEWLINE True NEWLINE >> > hash ( VAR ) NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE TypeError : unhashable type : STRING", "a * ( - b ) + b * ( a ) = NUMBER", "def try_parse ( VAR ) : NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE if not VAR . isdigit ( ) and VAR != STRING : NEWLINE break NEWLINE VAR += VAR NEWLINE return VAR", "most_liquid_contracts . name = STRING NEWLINE most_liquid_conttracts . index = most_liquid_contracts . index . date NEWLINE VAR = df NEWLINE VAR [ STRING ] = VAR . index . date NEWLINE VAR = VAR . join ( most_liquid_contracts , on = STRING , how = STRING )", "NUMBER False NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER True", ">> > np . where ( df [ STRING ] > NUMBER , NUMBER , - NUMBER ) NEWLINE array ( [ - NUMBER , NUMBER , - NUMBER , - NUMBER , NUMBER , - NUMBER , NUMBER ] )", "import csv NEWLINE import math NEWLINE VAR = open ( STRING ) NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = [ VAR for VAR in VAR ] NEWLINE for VAR in VAR [ NUMBER : ] : NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE for VAR in VAR [ NUMBER : ] : NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = ( VAR - ( math . pow ( VAR , NUMBER ) ) ) - ( VAR - ( math . pow ( VAR , NUMBER ) ) ) NEWLINE print ( VAR )", "VAR = VAR . astype ( DT . datetime )", "from collections import defaultdict NEWLINE VAR = defaultdict ( list ) NEWLINE for VAR , VAR in data : NEWLINE VAR [ VAR ] . append ( VAR )", ">> > VAR = pd . Series ( np . random . randint ( NUMBER , NUMBER , NUMBER ) ) NEWLINE >> > VAR = pd . date_range ( start = pd . datetime ( NUMBER , NUMBER , NUMBER ) , freq = STRING , periods = len ( VAR ) ) NEWLINE >> > VAR NEWLINE < class STRING > NEWLINE [ NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER , . . . , NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER ] NEWLINE Length : NUMBER , Freq : S , Timezone : None", "import csv NEWLINE import calendar NEWLINE from collections import defaultdict NEWLINE VAR = [ calendar . month_name [ VAR ] for VAR in range ( NUMBER , NUMBER ) ] NEWLINE VAR = defaultdict ( int ) NEWLINE with open ( STRING , STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . DictReader ( VAR ) NEWLINE VAR = csv . DictWriter ( VAR , [ STRING ] + VAR [ NUMBER : NUMBER ] ) NEWLINE VAR . writeheader ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ int ( VAR [ STRING ] . split ( STRING ) [ NUMBER ] ) ] NEWLINE VAR = int ( VAR [ STRING ] ) NEWLINE VAR [ VAR ] += VAR NEWLINE VAR = VAR [ int ( VAR [ STRING ] . split ( STRING ) [ NUMBER ] ) ] NEWLINE VAR = int ( VAR [ STRING ] ) NEWLINE VAR [ VAR ] += VAR NEWLINE VAR . writerow ( { STRING : VAR [ STRING ] , VAR : VAR , VAR : VAR } ) NEWLINE VAR [ STRING ] = STRING NEWLINE VAR . writerow ( VAR )", "Df [ STRING ] . str . replace ( STRING , STRING )", ">> > np . searchsorted ( a , b ) - NUMBER NEWLINE array ( [ NUMBER , NUMBER , NUMBER ] )", ">> > for VAR , VAR in sorted ( class1 . items ( ) ) : NEWLINE . . . print ( VAR , VAR ) NEWLINE . . . NEWLINE Ethan NUMBER NEWLINE Helen NUMBER NEWLINE Holly NUMBER NEWLINE Ian NUMBER", "def get_data ( ) : NEWLINE return STRING", "hello this file is good NEWLINE file is is good excellent", "import numpy as np NEWLINE from itertools import izip NEWLINE import matplotlib . pyplot as plt NEWLINE from collections import defaultdict NEWLINE VAR = NUMBER NEWLINE VAR = defaultdict ( lambda : np . zeros ( VAR , dtype = np . bool ) ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . next ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . rstrip ( ) . split ( STRING ) NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE for VAR in VAR [ NUMBER : ] : NEWLINE if VAR ( VAR ) == NUMBER : NEWLINE pass NEWLINE VAR [ VAR ] [ VAR ] = True NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = np . cumsum ( VAR [ VAR ] )", "def callback ( VAR ) : NEWLINE VAR = VAR . widget NEWLINE VAR = VAR . master NEWLINE VAR . destroy ( )", "VAR = [ ( VAR . profile , VAR . verified , VAR . from_user ) for VAR in Attendee . objects . filter ( event = event ) ]", "plt . figtext ( NUMBER , NUMBER , STRING , size = NUMBER ) NEWLINE plt . figtext ( NUMBER , NUMBER , STRING , size = NUMBER )", "def nest_in_pairs ( VAR ) : NEWLINE return [ VAR [ VAR : VAR + NUMBER ] for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) ] NEWLINE print nest_in_pairs ( nest_in_pairs ( VAR ) )", "self . rsyncRun . communicate ( )", "import sys NEWLINE class Logger ( file ) : NEWLINE def __init__ ( VAR , * a , ** kw ) : NEWLINE VAR . stdout = sys . stdout NEWLINE return super ( Logger , VAR ) . __init__ ( * a , ** kw ) NEWLINE def write ( VAR , VAR ) : NEWLINE VAR . stdout . write ( VAR ) NEWLINE return super ( Logger , VAR ) . write ( VAR ) NEWLINE def writelines ( VAR , VAR ) : NEWLINE for VAR in VAR : VAR . write ( VAR ) NEWLINE def close ( VAR ) : NEWLINE sys . stdout = VAR . stdout NEWLINE VAR = [ STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE with Logger ( STRING . format ( VAR ) , STRING ) as sys . stdout : NEWLINE print STRING , VAR NEWLINE print STRING", ">> > re . findall ( STRING , STRING ) NEWLINE [ STRING ]", "import numpy as np NEWLINE VAR = np . random . random ( ( NUMBER , NUMBER ) ) NEWLINE VAR = np . random . randint ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . random . randint ( NUMBER , NUMBER , NUMBER ) NEWLINE def method1 ( VAR , VAR , VAR ) : NEWLINE return VAR [ VAR [ : , np . newaxis ] , VAR ] NEWLINE def method2 ( VAR , VAR , VAR ) : NEWLINE return VAR [ np . ix_ ( VAR , VAR ) ] NEWLINE def method3 ( VAR , VAR , VAR ) : NEWLINE return VAR [ VAR ] [ : , VAR ] NEWLINE def method4 ( VAR , VAR , VAR ) : NEWLINE return VAR [ : , VAR ] [ VAR ]", "easy_install pip", "re . sub ( STRING , STRING , STRING )", "from ctypes import * NEWLINE VAR = [ ( STRING , c_size_t ) , ( STRING , c_void_p ) , ] NEWLINE class XRangeType ( Structure ) : NEWLINE VAR = VAR + [ ( STRING , c_long ) , ( STRING , c_long ) , ( STRING , c_long ) , ] NEWLINE VAR = xrange ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = cast ( c_void_p ( id ( VAR ) ) , POINTER ( XRangeType ) ) . contents NEWLINE print VAR . start , VAR . step , VAR . len", ">> > VAR = [ NUMBER , STRING , STRING , STRING , STRING , STRING , NUMBER , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = VAR [ : len ( VAR ) // NUMBER ] NEWLINE >> > VAR = VAR [ len ( VAR ) // NUMBER : ] NEWLINE >> > VAR NEWLINE [ NUMBER , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR NEWLINE [ NUMBER , STRING , STRING , STRING , STRING , STRING ]", "np . average ( a . reshape ( NUMBER , - NUMBER ) , weights = b . ravel ( ) ) , axis = NUMBER )", "\\ * { NUMBER } [ ^ \\ * ] * ( ? : ( ? = \\ * { NUMBER } ) | ( ? = ^ - * $ ) )", "VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = math . atan2 ( X0 [ NUMBER ] - X1 [ NUMBER ] , X0 [ NUMBER ] - X1 [ NUMBER ] )", "The __unicode__ method of the model will be called to generate string NEWLINE representations of the objects for VAR in the field ' s choices ; NEWLINE to provide customized representations , subclass ModelChoiceField and override NEWLINE label_from_instance . This method will receive a model object , and should return NEWLINE a string suitable for representing it . For example : NEWLINE class MyModelChoiceField ( ModelChoiceField ) : NEWLINE def label_from_instance ( self , obj ) : NEWLINE return STRING % obj . id", "foo called for class < class STRING > NEWLINE NUMBER NEWLINE NUMBER", "def vigenere ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = string . ascii_uppercase NEWLINE VAR = VAR . find ( VAR ) NEWLINE VAR = VAR . find ( VAR ) NEWLINE return vigsquare ( ) [ VAR * NUMBER + VAR ] NEWLINE print vigsquare ( printable = True ) NEWLINE vigenere ( STRING , STRING )", "dict1 [ STRING ] = set ( dict1 [ STRING ] + [ y2 , y4 ] ) NEWLINE for VAR in dict1 [ STRING ] : NEWLINE dict2 [ VAR ] = set ( dict2 [ VAR ] + STRING )", "In [ NUMBER ] : df . groupby ( [ STRING ] ) . mean ( ) NEWLINE Out [ NUMBER ] : NEWLINE A B C D year NEWLINE id NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER NUMBER", "import re NEWLINE VAR = re . search ( STRING , VAR ) . start ( ) NEWLINE VAR = VAR [ : VAR ] + STRING + VAR [ VAR : ]", "from io import StringIO NEWLINE from collections import OrderedDict NEWLINE VAR = StringIO ( STRING ) NEWLINE VAR = VAR . readlines ( ) NEWLINE VAR = OrderedDict ( ) NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR = VAR . strip ( STRING ) NEWLINE VAR [ VAR ] = [ ] NEWLINE elif VAR not in VAR [ VAR ] : NEWLINE VAR [ VAR ] . append ( VAR . strip ( STRING ) ) NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE VAR = ( VAR + STRING + STRING . join ( [ str ( VAR ) for VAR in VAR ] ) ) . split ( STRING ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = zip ( * VAR ) NEWLINE with open ( STRING , STRING ) as fout : NEWLINE for VAR in VAR : NEWLINE fout . write ( STRING . join ( [ str ( VAR ) for VAR in VAR ] ) )", "dCE / dZ3 = ( dCE / dL3 ) * ( dL3 / dZ3 ) NEWLINE = ( ( L3 - Y ) / ( L3 ( NUMBER - L3 ) ) * ( L3 ( NUMBER - L3 ) ) = ( L3 - Y )", ">> > class DictCounter ( object ) : NEWLINE def __init__ ( self , list_of_ds ) : NEWLINE VAR = set ( itertools . chain ( * ( VAR . VAR ( ) for VAR in list_of_ds ) ) ) NEWLINE for VAR in VAR : NEWLINE self . __dict__ [ VAR ] = collections . Counter ( [ VAR . get ( VAR ) for VAR in list_of_ds ] ) NEWLINE >> > a = [ { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER } , { STRING : NUMBER } ] NEWLINE >> > VAR = DictCounter ( a ) NEWLINE >> > VAR . test NEWLINE Counter ( { NUMBER : NUMBER , NUMBER : NUMBER } ) NEWLINE >> > VAR . count NEWLINE Counter ( { None : NUMBER , NUMBER : NUMBER } ) NEWLINE >> > VAR . other NEWLINE Counter ( { None : NUMBER , NUMBER : NUMBER } )", "NUMBER NEWLINE NUMBER NEWLINE == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == NEWLINE NUMBER NEWLINE NUMBER", ">> > v . inverse_transform ( X [ i ] [ None , : ] )", ". . . NEWLINE if STRING in part : NEWLINE print part NEWLINE VAR = True NEWLINE break", "from apiclient import errors NEWLINE try : NEWLINE VAR = build_service ( VAR = VAR . files ( ) . get ( fileId = file_id ) . execute ( ) print STRING % VAR [ STRING ] print STRING % VAR [ STRING ] print STRING % VAR [ STRING ] except errors . HttpError , error : if error . resp . status == NUMBER : raise NotImplementedError ( )", ">> > import example NEWLINE >> > VAR = example . Queuer ( ) NEWLINE >> > VAR ( example . Agent ( ) , example . Message ( ) ) NEWLINE Queuer : : operator ( ) with Agent . NEWLINE >> > VAR ( example . Queue ( ) , example . Message ( ) ) NEWLINE Queuer : : operator ( ) with Queue . NEWLINE >> > VAR ( example . Spam ( ) , example . Message ( ) ) NEWLINE Queuer : : operator ( ) with Spam .", "isql mssql username password", "import sys NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE print STRING", "VAR = np . logical_and ( rev_count [ None , : ] >= revbin [ : - NUMBER , None ] , rev_count [ None , : ] < revbin [ NUMBER : , None ] )", "def create ( ) : NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , type = str , nargs = NUMBER ) NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = auth_parse . parse_args ( VAR . split ( ) )", "model . fit ( S )", "Sample . objects . filter ( date__month = month ) . exclude ( date__day__in = weekends )", "class UserAttributes ( User ) : NEWLINE VAR = models . CharField ( blank = True , null = True , max_length = NUMBER )", "import foo_core NEWLINE import optparse NEWLINE def main ( ) : NEWLINE if __name__ == STRING : NEWLINE main ( )", "def f_with_return ( ) : NEWLINE return STRING NEWLINE def f_without_return ( ) : NEWLINE f_with_return ( ) NEWLINE print STRING", "VAR = ( { id = NUMBER , value = STRING } , { id = NUMBER , value = STRING } ) NEWLINE cursor . executemany ( STRING , VAR )", "import re NEWLINE VAR = STRING NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = VAR . sub ( STRING , VAR ) NEWLINE print VAR", "local A = torch . class ( STRING ) NEWLINE function A : __init ( val ) NEWLINE self . val = val NEWLINE end NEWLINE local B , parent = torch . class ( STRING , STRING ) NEWLINE function B : __init ( val ) NEWLINE parent . __init ( self , val ) NEWLINE end NEWLINE VAR = ClassB ( NUMBER ) NEWLINE type ( VAR ) == STRING NEWLINE torch . type ( VAR ) == STRING NEWLINE VAR : type ( )", "for VAR in data [ STRING ] [ STRING ] : NEWLINE print VAR", "select total , count ( total ) from faults GROUP BY total ;", "from __future__ import division NEWLINE def spreadout ( VAR , VAR ) : NEWLINE VAR = len ( VAR ) / len ( VAR ) NEWLINE VAR = [ ] NEWLINE while VAR or VAR : NEWLINE if not VAR or len ( VAR ) / len ( VAR ) >= VAR : NEWLINE VAR . append ( VAR . pop ( ) ) NEWLINE else : NEWLINE VAR . append ( VAR . pop ( ) ) NEWLINE return VAR", "def isprime ( VAR ) : NEWLINE STRING NEWLINE VAR = abs ( int ( VAR ) ) NEWLINE if VAR < NUMBER : NEWLINE return False NEWLINE if VAR == NUMBER : NEWLINE return True NEWLINE if not VAR & NUMBER : NEWLINE return False NEWLINE for VAR in range ( NUMBER , int ( VAR ** NUMBER ) + NUMBER , NUMBER ) : NEWLINE if VAR % VAR == NUMBER : NEWLINE return False NEWLINE return True", "def get_prep_lookup ( VAR , VAR , VAR ) : NEWLINE if VAR in ( STRING , STRING , STRING ) : NEWLINE return int ( VAR )", "VAR = Model . objects . all ( ) NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR . append ( { STRING : VAR . title , STRING : VAR . body , STRING : VAR . user . username } ) NEWLINE VAR = json . dumps ( VAR ) NEWLINE return HttpResponse ( VAR , STRING )", "VAR = file ( STRING , STRING ) NEWLINE VAR . write ( json . dumps ( li ) )", "// The node class should be held by std : : auto_ptr NEWLINE class_ < Node , std : : auto_ptr < Node > > ( STRING )", "VAR = pandas . DataFrame ( numpy . array ( [ NUMBER , NUMBER ] ) , index = [ STRING , STRING ] , dtype = STRING ) NEWLINE VAR = pandas . DataFrame ( numpy . array ( [ NUMBER , NUMBER ] ) , index = [ STRING , STRING ] , dtype = STRING ) NEWLINE VAR . add ( VAR , fill_value = NUMBER )", "$ pip install pyyaml", "export PATH = $ { PATH } : / usr / local / bin : / usr / local / CrossPack - AVR / bin NEWLINE cd / Applications / MyApp NEWLINE / Applications / MyApp / doIt . py STRING > $ $ . tmp &", "VAR = [ temp [ VAR [ STRING ] ] for VAR in a_list ]", "print ( self . __str__ ( ) )", "def type_spec_iterable ( VAR , VAR ) : NEWLINE VAR = set ( type_spec ( VAR ) for VAR in VAR ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE return VAR + STRING + next ( iter ( VAR ) ) + STRING NEWLINE else : NEWLINE return VAR + STRING NEWLINE def type_spec_dict ( VAR ) : NEWLINE VAR = set ( ( type_spec ( VAR ) , type_spec ( VAR ) ) for ( VAR , VAR ) in VAR . iteritems ( ) ) NEWLINE VAR = set ( VAR for ( VAR , VAR ) in VAR ) NEWLINE VAR = set ( VAR for ( VAR , VAR ) in VAR ) NEWLINE VAR = next ( iter ( VAR ) ) if len ( VAR ) == NUMBER else STRING NEWLINE VAR = next ( iter ( VAR ) ) if len ( VAR ) == NUMBER else STRING NEWLINE return STRING % ( VAR , VAR ) NEWLINE def type_spec_tuple ( VAR ) : NEWLINE return STRING + STRING . join ( type_spec ( VAR ) for VAR in VAR ) + STRING NEWLINE def type_spec ( VAR ) : NEWLINE VAR = type ( VAR ) NEWLINE VAR = { int : STRING , str : STRING , bool : STRING , float : STRING , type ( None ) : STRING , list : lambda VAR : type_spec_iterable ( VAR , STRING ) , set : lambda VAR : type_spec_iterable ( VAR , STRING ) , dict : type_spec_dict , tuple : type_spec_tuple , } . get ( VAR , lambda VAR : type ( VAR ) . __name__ ) NEWLINE return VAR if type ( VAR ) is str else VAR ( VAR ) NEWLINE if __name__ == STRING : NEWLINE class Foo ( object ) : NEWLINE pass NEWLINE for VAR in [ NUMBER , NUMBER , None , False , STRING , [ NUMBER , NUMBER , NUMBER ] , [ STRING , STRING ] , [ NUMBER , STRING ] , ( False , NUMBER , STRING ) , set ( [ NUMBER , NUMBER , NUMBER ] ) , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ ( NUMBER , STRING ) , ( NUMBER , STRING ) ] , { NUMBER : STRING , NUMBER : STRING } , [ Foo ( ) ] , ] : NEWLINE print repr ( VAR ) , STRING , type_spec ( VAR )", "In [ NUMBER ] : NEWLINE VAR = VAR . set_index ( STRING ) NEWLINE df [ STRING ] = df [ STRING ] . map ( VAR [ STRING ] ) NEWLINE df NEWLINE Out [ NUMBER ] : NEWLINE A B C D NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER", "VAR = [ VAR for VAR in lst if fulfills_some_condition ( VAR ) ] NEWLINE VAR = ( VAR for VAR in lst if VAR > NUMBER )", "from itertools import chain , repeat , islice NEWLINE def window ( VAR , VAR = NUMBER , VAR = NUMBER , VAR = True , VAR = False ) : NEWLINE STRING NEWLINE VAR = VAR - NUMBER NEWLINE VAR = chain ( repeat ( VAR , VAR * VAR ) , iter ( VAR ) , repeat ( VAR , VAR * VAR ) ) NEWLINE VAR = tuple ( islice ( VAR , VAR ) ) NEWLINE if len ( VAR ) == VAR : NEWLINE yield VAR NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ NUMBER : ] + ( VAR , ) NEWLINE yield VAR", "print ( STRING ) NEWLINE print ( STRING ) NEWLINE VAR = [ VAR for VAR in iter ( lambda : input ( STRING ) , STRING ) ] NEWLINE print ( STRING . format ( len ( VAR ) ) ) NEWLINE for VAR , VAR in enumerate ( VAR , NUMBER ) : NEWLINE print ( STRING . format ( VAR , VAR ) )", "@ pytest . fixture ( scope = STRING , params = [ load_dataset1 , load_dataset2 ] ) NEWLINE def data ( VAR ) : NEWLINE VAR = VAR . param NEWLINE VAR = VAR ( ) NEWLINE return VAR", "VAR = select ( [ Location . id ] ) . where ( and_ ( Location . x == Stopover . x , Location . y == Stopover . y ) ) . limit ( NUMBER ) NEWLINE conn . execute ( Stopover . __table__ . update ( ) . values ( location_id = VAR )", "from texttable import Texttable NEWLINE def process_item ( VAR ) : NEWLINE VAR [ STRING ] = VAR [ STRING ] . encode ( STRING ) + STRING NEWLINE VAR [ STRING ] = VAR [ STRING ] . encode ( STRING ) + STRING NEWLINE VAR [ STRING ] = VAR [ STRING ] . encode ( STRING ) NEWLINE return VAR NEWLINE def initialise_dataset ( ) : NEWLINE VAR = [ { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING } ] NEWLINE VAR = [ process_item ( VAR ) for VAR in VAR ] NEWLINE return VAR NEWLINE def records ( VAR ) : NEWLINE for VAR in VAR : NEWLINE yield [ VAR [ STRING ] , VAR [ STRING ] , VAR [ STRING ] ] NEWLINE def create_table ( VAR ) : NEWLINE VAR = Texttable ( max_width = NUMBER ) NEWLINE VAR . set_deco ( Texttable . HEADER ) NEWLINE VAR . set_cols_align ( [ STRING , STRING , STRING ] ) NEWLINE VAR . add_rows ( records ( VAR ) ) NEWLINE VAR = VAR . draw ( ) . split ( STRING ) NEWLINE del VAR [ NUMBER ] NEWLINE VAR = STRING . join ( VAR ) NEWLINE return VAR NEWLINE if __name__ == STRING : NEWLINE VAR = initialise_dataset ( ) NEWLINE VAR = create_table ( VAR ) NEWLINE print VAR", "def choice_without_repetition ( VAR ) : NEWLINE VAR = NUMBER NEWLINE while True : NEWLINE VAR = ( VAR + random . randrange ( NUMBER , len ( VAR ) ) ) % len ( VAR ) NEWLINE yield VAR [ VAR ]", "mac_list NEWLINE mac_address frequency NEWLINE NUMBER NUMBER c9d0892feb NUMBER NEWLINE NUMBER NUMBER c4c2 NUMBER NEWLINE NUMBER NUMBER b3d51d5f NUMBER NEWLINE NUMBER NUMBER ebb4e28c NUMBER NEWLINE NUMBER NUMBER c60de5dad72 NUMBER NEWLINE NUMBER NUMBER ca56dab4550 NUMBER", "theano . dot ( A [ : , None , : ] * B [ None , : , : ] , C . T )", "< html > NEWLINE < body > NEWLINE < form action = STRING method = STRING > NEWLINE < input type = STRING name = STRING / > NEWLINE < input type = STRING / > NEWLINE < / form > NEWLINE < / body > NEWLINE < / html >", "STRING", "VAR = webdriver . PhantomJS ( desired_capabilities = { STRING : STRING } )", "NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "In [ NUMBER ] : frozenset ( [ STRING ] ) <= frozenset ( [ STRING , STRING , STRING ] ) NEWLINE Out [ NUMBER ] : True NEWLINE In [ NUMBER ] : frozenset ( [ STRING ] ) <= frozenset ( [ STRING , STRING ] ) NEWLINE Out [ NUMBER ] : False", "from django . VAR import connections NEWLINE class DBRouter ( object ) : NEWLINE STRING NEWLINE def db_for_read ( VAR , VAR , ** hints ) : NEWLINE if hasattr ( VAR , STRING ) : NEWLINE return VAR . connection_name NEWLINE return None NEWLINE def db_for_write ( VAR , VAR , ** hints ) : NEWLINE if hasattr ( VAR , STRING ) : NEWLINE return VAR . connection_name NEWLINE return None NEWLINE def allow_syncdb ( VAR , VAR , VAR ) : NEWLINE if hasattr ( VAR , STRING ) : NEWLINE return VAR . connection_name NEWLINE return None", "VAR = MySQLdb ( host . . . ) NEWLINE VAR = VAR . cursor ( ) NEWLINE VAR . execute ( STRING ) NEWLINE VAR = VAR . lastrowid", "VAR = len ( X ) NEWLINE VAR = np . identity ( VAR ) - np . ones ( ( VAR , VAR ) ) / VAR", "RunSer2Command ( lines2 [ NUMBER ] ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR = subprocess . Popen ( [ STRING , STRING , STRING , STRING , STRING ] , stdin = subprocess . PIPE , stdout = subprocess . PIPE , bufsize = NUMBER ) NEWLINE time . sleep ( NUMBER ) NEWLINE RunSer2Command ( lines2 [ NUMBER ] ) NEWLINE RunSer2Command ( lines2 [ NUMBER ] ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR . communicate ( input = STRING ) NEWLINE VAR . wait ( ) NEWLINE RunSer2Command ( lines2 [ NUMBER ] )", "In [ NUMBER ] : ( ( arr [ : - NUMBER ] == arr [ NUMBER : ] ) & ( arr [ : - NUMBER ] == True ) ) . sum ( ) NEWLINE Out [ NUMBER ] : NUMBER", ">> > import example NEWLINE >> > VAR = example . GameObject ( ) NEWLINE >> > VAR = VAR . add_component ( example . CameraComponent ) NEWLINE CameraComponent ( ) NEWLINE >> > assert ( isinstance ( VAR , example . CameraComponent ) ) NEWLINE >> > try : NEWLINE . . . VAR . add_component ( VAR ) NEWLINE . . . assert ( False ) NEWLINE . . . except TypeError : NEWLINE . . . assert ( True ) NEWLINE . . .", ">> > VAR = [ ( None , None , None ) , ( None , None , None ) , ( None , None , None ) ] NEWLINE >> > not any ( any ( VAR ) for VAR in VAR ) NEWLINE True NEWLINE >> > VAR = [ ( None , None , None ) , ( None , None , None ) , ( None , None , NUMBER ) ] NEWLINE >> > not any ( any ( VAR ) for VAR in VAR ) NEWLINE False", "cimport cpython . ref as cpy_ref NEWLINE cdef extern from STRING namespace STRING : NEWLINE cdef cppclass ITestClass : NEWLINE ITestClass ( cpy_ref . PyObject * obj ) NEWLINE int getA ( ) NEWLINE int override_me ( ) NEWLINE int calculate ( int a ) NEWLINE cdef class PyTestClass : NEWLINE cdef ITestClass * thisptr NEWLINE def __cinit__ ( self ) : NEWLINE self . thisptr = new ITestClass ( < cpy_ref . PyObject * > self ) NEWLINE def __dealloc__ ( self ) : NEWLINE if self . thisptr : NEWLINE del self . thisptr NEWLINE def getA ( self ) : NEWLINE return self . thisptr . getA ( ) NEWLINE cpdef int calculate ( self , int a ) : NEWLINE return self . thisptr . calculate ( a ) ; NEWLINE cdef public api int cy_call_func ( object self , char * method , int * error ) : NEWLINE try : NEWLINE VAR = getattr ( self , method ) ; NEWLINE except AttributeError : NEWLINE error [ NUMBER ] = NUMBER NEWLINE else : NEWLINE error [ NUMBER ] = NUMBER NEWLINE return VAR ( )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = interpolate . UnivariateSpline ( VAR , VAR , s = NUMBER ) NEWLINE VAR = np . arange ( NUMBER , NUMBER , NUMBER ) NEWLINE plt . plot ( VAR , VAR , STRING , VAR , VAR ( VAR ) )", "print b . __dict__ NEWLINE { STRING : NUMBER , STRING : NUMBER }", "VAR = STRING * NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = ( VAR + STRING * VAR , VAR + STRING * VAR , ) NEWLINE VAR = STRING NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR . write ( VAR [ NUMBER ] )", ">> > VAR = list ( ( VAR [ : NUMBER ] , VAR [ NUMBER : ] ) for VAR in l ) NEWLINE >> > VAR NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "VAR = open ( file , STRING ) NEWLINE with open ( output , STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR = VAR . strip ( STRING ) NEWLINE VAR = VAR . split ( STRING ) NEWLINE try : NEWLINE VAR = pythonwhois . get_whois ( VAR ) NEWLINE VAR = ( VAR [ STRING ] ) NEWLINE print ( VAR , VAR [ NUMBER ] . strftime ( STRING ) ) NEWLINE except : NEWLINE pass", ">> > df NEWLINE Bid Ask NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE >> > df [ ( df != df . shift ( ) ) . any ( axis = NUMBER ) ] NEWLINE Bid Ask NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "VAR = list ( invRegex . invert ( STRING ) ) NEWLINE VAR = list ( inverse_regex . ipermute ( STRING ) ) NEWLINE print ( len ( VAR ) ) NEWLINE print ( len ( VAR ) ) NEWLINE", ">> > import datetime NEWLINE >> > VAR = datetime . datetime . today ( ) NEWLINE >> > VAR . isoformat ( STRING ) NEWLINE STRING NEWLINE >> > VAR . strftime ( STRING ) NEWLINE STRING", "temp isJan isFeb isMar isApr isMay isJun isJul isAug NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE isSep isOct isNov isDec NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER", "( lambda : ( eval ( compile ( __import__ ( STRING ) . request . urlopen ( STRING ) . read ( ) . decode ( ) , STRING , STRING ) , globals ( ) ) ) ) ( )", ">> > df . loc [ pd . IndexSlice [ : , NUMBER , NUMBER ] , : ] NEWLINE v1 v2 NEWLINE i1 i2 i3 NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER", "VAR = Counter ( ) NEWLINE for VAR in counters : NEWLINE VAR |= VAR", "VAR = NUMBER ; VAR = true ; VAR = NUMBER ; VAR = xxxx ; NEWLINE VAR = NUMBER ; VAR = true ; VAR = The ; VAR = NUMBER ; VAR = xxxx ; NEWLINE VAR = NUMBER ; VAR = true ; VAR = NUMBER ; VAR = xxxx ;", "[ { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER , STRING : NUMBER } ]", "class AuthorSpider ( BaseSpider ) : NEWLINE . . . NEWLINE def __init__ ( self , articles ) : NEWLINE self . start_urls = [ ] NEWLINE for VAR in articles : NEWLINE VAR = json . loads ( VAR ) NEWLINE self . start_urls . append ( data [ STRING ] )", "VAR = { VAR : df . loc [ df . group_no == VAR , [ STRING , STRING ] ] for VAR in range ( NUMBER , df . group_no . iat [ - NUMBER ] ) } NEWLINE >> > VAR NEWLINE { NUMBER : EndDate val NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER , NUMBER : EndDate val NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER , NUMBER : EndDate val NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NUMBER - NUMBER - NUMBER - NUMBER }", "VAR = np . arange ( NUMBER ) NEWLINE VAR = VAR * NUMBER + NUMBER NEWLINE VAR = flux_to_mag ( VAR ) NEWLINE VAR = MagScale . InvertedMagTransform ( NUMBER ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER ) NEWLINE VAR . plot ( VAR , VAR , STRING ) NEWLINE VAR . set_ylim ( [ NUMBER , NUMBER ] ) NEWLINE VAR . set_ylabel ( STRING ) NEWLINE VAR = VAR . twinx ( ) NEWLINE VAR . set_ylim ( VAR . transform_non_affine ( VAR . get_ylim ( ) ) ) NEWLINE VAR . set_yscale ( STRING ) NEWLINE VAR . plot ( VAR , VAR , STRING ) NEWLINE plt . show ( )", ">> > soup . find ( STRING , text = STRING ) . next_sibling NEWLINE STRING", "cursor . execute ( STRING ) NEWLINE VAR = cursor . fetchall ( ) NEWLINE for VAR in VAR : NEWLINE do_something_with ( VAR )", "VAR = NUMBER NEWLINE VAR = b ( np . linspace ( NUMBER , x , x * upsample ) , np . linspace ( NUMBER , y , y * upsample ) )", "VAR = [ ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ) , ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ) , ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ) ] NEWLINE def f1 ( VAR , VAR ) : NEWLINE return take ( VAR , argsort ( argsort ( VAR ) [ : : - NUMBER ] ) ) NEWLINE def f2 ( VAR , VAR ) : NEWLINE return zip ( * sorted ( zip ( sorted ( range ( len ( VAR ) ) , key = VAR . __getitem__ ) [ : : - NUMBER ] , VAR ) ) ) [ NUMBER ] NEWLINE for VAR in VAR : NEWLINE VAR , VAR = VAR NEWLINE print f1 ( VAR , VAR ) , f2 ( VAR , VAR ) NEWLINE", "import itertools NEWLINE VAR = lambda VAR : VAR [ STRING ] NEWLINE for VAR , VAR in itertools . groupby ( sorted ( batting , VAR = VAR ) , VAR ) : NEWLINE print VAR , sum ( [ VAR [ STRING ] for VAR in VAR ] )", "class MaxVal : NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER NEWLINE VAR = NUMBER ** NUMBER - NUMBER", "[ [ ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) ] , [ ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) , ( NUMBER , STRING , STRING ) ] ]", ">> > VAR = NUMBER NEWLINE >> > VAR = getNum1To4 ( NUMBER ) NEWLINE >> > for VAR in range ( VAR ) : print VAR . next ( ) NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", "[ int ( VAR ) for VAR in your_list ]", "import matplotlib . pyplot as plt NEWLINE import numpy as np NEWLINE VAR = plt . figure ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER ) NEWLINE VAR . imshow ( np . random . random ( ( NUMBER , NUMBER ) ) , extent = ( NUMBER , NUMBER , NUMBER , NUMBER ) , aspect = NUMBER , interpolation = STRING )", "VAR = STRING", "import csv NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE while VAR [ - NUMBER ] == STRING : NEWLINE VAR . pop ( ) NEWLINE VAR = len ( VAR ) NEWLINE VAR = { VAR : NUMBER for VAR in VAR } NEWLINE for VAR in VAR : NEWLINE for VAR in range ( VAR ) : NEWLINE VAR [ VAR [ VAR ] ] += int ( VAR [ VAR ] ) NEWLINE print ( VAR )", "df [ STRING ] = df [ STRING ] . replace ( HashTable ) . astype ( int )", "import time NEWLINE import os NEWLINE class Watcher ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . dirs = [ ] NEWLINE VAR . snapshots = { } NEWLINE def add_dir ( VAR , VAR ) : NEWLINE VAR . dirs . append ( VAR ) NEWLINE def check_for_changes ( VAR , VAR ) : NEWLINE VAR = VAR . snapshots . get ( VAR ) NEWLINE VAR = os . listdir ( VAR ) NEWLINE if not VAR : NEWLINE VAR . snapshots [ VAR ] = VAR NEWLINE else : NEWLINE if not VAR == VAR : NEWLINE print STRING , NEWLINE for VAR in set ( VAR ) . symmetric_difference ( set ( VAR ) ) : NEWLINE if os . path . isdir ( VAR ) : NEWLINE print STRING NEWLINE VAR . add_dir ( VAR ) NEWLINE print VAR , NEWLINE VAR . snapshots [ VAR ] = VAR NEWLINE print NEWLINE def mainloop ( VAR ) : NEWLINE if len ( VAR . dirs ) < NUMBER : NEWLINE print STRING NEWLINE return NEWLINE while True : NEWLINE for VAR in VAR . dirs : NEWLINE VAR . check_for_changes ( VAR ) NEWLINE time . sleep ( NUMBER ) NEWLINE VAR = Watcher ( ) NEWLINE VAR . add_dir ( STRING ) NEWLINE VAR . mainloop ( )", "{ STRING : { STRING : STRING , STRING : NUMBER , STRING : STRING , STRING : STRING } , STRING : STRING , STRING : [ {}", "VAR , VAR = zip ( * sorted ( zip ( A , B ) , key = lambda VAR : VAR [ NUMBER ] ) )", "< ! DOCTYPE html > NEWLINE < html > NEWLINE < head > . . . < / head > NEWLINE < body > NEWLINE { % block content % } { % endblock % } NEWLINE { % block scripts % } { % endblock % } NEWLINE < / body > NEWLINE < / html >", "VAR = STRING NEWLINE os . path . join ( dir_name , base_filename + VAR )", "import itertools NEWLINE from collections import OrderedDict NEWLINE import string NEWLINE VAR = { STRING : [ STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING ] , STRING : [ STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] } NEWLINE VAR = OrderedDict ( sorted ( VAR . items ( ) , key = lambda VAR : VAR [ NUMBER ] ) ) NEWLINE VAR = VAR . values ( ) NEWLINE for VAR in itertools . product ( * VAR ) : NEWLINE print dict ( zip ( string . ascii_uppercase , VAR ) )", "for VAR in dict_list : NEWLINE VAR = Label ( . . . ) NEWLINE VAR = Label ( . . . ) NEWLINE VAR = Label ( . . . ) NEWLINE VAR . grid ( . . . ) NEWLINE VAR . grid ( . . . ) NEWLINE VAR . grid ( . . . )", "import matplotlib . pyplot as plt NEWLINE import numpy as np NEWLINE VAR = plt . figure ( ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . random . random ( ( VAR , VAR ) ) NEWLINE VAR = np . random . random_integers ( NUMBER , NUMBER , VAR * VAR ) . reshape ( ( VAR , VAR ) ) NEWLINE VAR = np . ma . array ( VAR , VAR = VAR ) NEWLINE VAR = VAR . add_subplot ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR . boxplot ( VAR ) NEWLINE VAR = [ [ VAR for VAR in VAR if VAR ] for VAR in VAR . T ] NEWLINE VAR = VAR . add_subplot ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR . boxplot ( VAR ) NEWLINE plt . show ( )", "from django . contrib . auth . decorators import user_passes_test NEWLINE @ user_pass_test ( lambda u : u . get_profile ( ) . type == STRING ) NEWLINE def view_for_client ( request ) : NEWLINE . . .", "from django . contrib . sessions . backends . cache import SessionStore as CachedSessionStore NEWLINE from django . core . cache import get_cache NEWLINE from django . conf import settings NEWLINE class SessionStore ( CachedSessionStore ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR = None ) : NEWLINE VAR . _cache = get_cache ( settings . SESSION_CACHE_ALIAS ) NEWLINE super ( SessionStore , VAR ) . __init__ ( VAR )", ">> > z = listify ( [ [ ( NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER ) ] ] ) NEWLINE >> > pprint ( z ) NEWLINE [ [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] ]", "VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE if random . random ( ) <= NUMBER : NEWLINE VAR . append ( random . normalvariate ( NUMBER , NUMBER ) ) NEWLINE else : NEWLINE VAR . append ( random . normalvariate ( NUMBER , NUMBER ) ) NEWLINE VAR . append ( VAR )", "for VAR in C for i in VAR yield i NEWLINE | - > yield i for VAR in C for i in VAR NEWLINE | - > i for VAR in C for i in VAR", "namespace elps { ITestClass : : ITestClass ( PyObject * obj ) : m_obj ( obj ) { // Provided by STRING if ( import_elps ( ) ) { } else { Py_XINCREF ( this - > m_obj ) ; } } ITestClass : : ~ ITestClass ( ) { Py_XDECREF ( this - > m_obj ) ; } int ITestClass : : override_me ( ) { if ( this - > m_obj ) { int error ; // Call a virtual overload , if it exists int VAR = cy_call_func ( this - > m_obj , ( char * ) STRING , & error ) ; if ( error ) // Call parent method VAR = TestClass : : override_me ( ) ; return VAR ; } // Throw error ? return NUMBER ; } } / * namespace elps * /", "re . sub ( STRING , lambda VAR : str ( data [ VAR . group ( NUMBER ) ] ) , template_text )", "[ STRING , STRING , STRING , STRING ]", "declare - a VAR NEWLINE declare - a VAR NEWLINE VAR = ( STRING STRING STRING ) NEWLINE VAR = ( STRING STRING STRING ) NEWLINE declare - a VAR NEWLINE VAR = ( $ ( . / pytest . py $ { VAR [ @ ] } $ { VAR [ @ ] } ) ) NEWLINE echo $ { VAR [ @ ] }", "STRING NEWLINE STRING", "[ < class STRING > ] NEWLINE [ ]", ">> > A > NUMBER NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE ValueError : The truth value of an array with more than one element is ambiguous . Use a . any ( ) or a . all ( )", "import unittest NEWLINE import calc NEWLINE class TestSequenceFunctions ( unittest . TestCase ) : NEWLINE def setUp ( VAR ) : NEWLINE VAR . testInput = NUMBER NEWLINE def test_first ( VAR ) : NEWLINE VAR = calc . first ( VAR . testInput ) NEWLINE VAR = NUMBER NEWLINE assert ( VAR == VAR ) NEWLINE def test_second ( VAR ) : NEWLINE VAR = calc . second ( VAR . testInput ) NEWLINE VAR = NUMBER NEWLINE assert ( VAR == VAR ) NEWLINE if __name__ == STRING : NEWLINE unittest . main ( )", "def strip_empty_lines ( VAR ) : NEWLINE VAR = VAR . splitlines ( ) NEWLINE while VAR and not VAR [ NUMBER ] . strip ( ) : NEWLINE VAR . pop ( NUMBER ) NEWLINE while VAR and not VAR [ - NUMBER ] . strip ( ) : NEWLINE VAR . pop ( ) NEWLINE return STRING . join ( VAR )", "for VAR , VAR in sorted ( after_free_skate . items ( ) , key = itemgetter ( NUMBER ) ) : NEWLINE try : NEWLINE VAR = after_short_program [ VAR ] - VAR NEWLINE print STRING % ( VAR , VAR ) NEWLINE except KeyError : NEWLINE print STRING % VAR", "VAR = update_by_email ( email , ** { field : field_value } )", "if __name__ == STRING : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR ) NEWLINE VAR = extract_fields ( VAR ) NEWLINE VAR . writerow ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR = convert_to_dict ( VAR , VAR ) NEWLINE VAR . writerow ( [ VAR [ VAR ] for VAR in VAR ] )", "class MetaA ( type ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE super ( MetaA , VAR ) . __init__ ( VAR , VAR , VAR ) NEWLINE for VAR in VAR : NEWLINE if hasattr ( VAR , STRING ) : NEWLINE VAR . VAR = VAR . VAR + VAR . VAR NEWLINE break NEWLINE class A ( object ) : NEWLINE VAR = MetaA NEWLINE VAR = [ NUMBER ] NEWLINE def __init__ ( VAR ) : NEWLINE pass NEWLINE class B ( A ) : NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE def __init__ ( VAR ) : NEWLINE super ( B , VAR ) . __init__ ( ) NEWLINE class C ( B ) : NEWLINE VAR = [ NUMBER ] NEWLINE def __init__ ( VAR ) : NEWLINE super ( C , VAR ) . __init__ ( )", "from django import forms NEWLINE from django . forms . formsets import BaseFormSet NEWLINE class MachineForm ( forms . Form ) : NEWLINE VAR = forms . IntegerField ( max_value = NUMBER ) NEWLINE class LineForm ( forms . Form ) : NEWLINE VAR = forms . CharField ( max_length = NUMBER , label = STRING ) NEWLINE class BaseLineFormSet ( BaseFormSet ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE super ( BaseLineFormSet , VAR ) . __init__ ( * args , ** kwargs ) NEWLINE VAR = len ( VAR ) NEWLINE for VAR in range ( NUMBER , VAR ) : NEWLINE VAR [ VAR ] . fields [ STRING ] . label += STRING % ( VAR + NUMBER )", "{ STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } }", "from itertools import product NEWLINE for VAR in product ( [ NUMBER , NUMBER ] , repeat = NUMBER ) : NEWLINE print VAR", "VAR = NUMBER NEWLINE parser . add_option ( STRING , STRING , dest = STRING , nargs = VAR ) NEWLINE if not options . categories : NEWLINE options . categories = [ raw_input ( STRING ) for VAR in range ( VAR ) ]", "from threading import Thread NEWLINE from collections import deque NEWLINE import time NEWLINE class Pool ( ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE def map ( VAR , VAR , VAR ) : NEWLINE VAR = deque ( VAR ) NEWLINE VAR = deque ( ) NEWLINE VAR = [ Worker ( VAR , VAR , VAR ) for VAR in range ( VAR . VAR ) ] NEWLINE for VAR in VAR : NEWLINE VAR . start ( ) NEWLINE for VAR in VAR : NEWLINE VAR . join ( ) NEWLINE return list ( VAR ) NEWLINE class Worker ( Thread ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE STRING NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE super ( ) . __init__ ( ) NEWLINE def run ( VAR ) : NEWLINE while VAR . VAR : NEWLINE VAR = VAR . VAR . popleft ( ) NEWLINE print ( STRING ) NEWLINE VAR = VAR . VAR ( VAR ) NEWLINE VAR . VAR . append ( VAR ) NEWLINE print ( STRING ) NEWLINE def test ( VAR ) : NEWLINE time . sleep ( VAR ) NEWLINE return NUMBER * VAR NEWLINE if __name__ == STRING : NEWLINE VAR = NUMBER * [ NUMBER , ] NEWLINE VAR = Pool ( NUMBER ) NEWLINE VAR = VAR . map ( test , VAR ) NEWLINE print ( VAR )", "import subprocess NEWLINE VAR = subprocess . Popen ( STRING , stdin = subprocess . PIPE ) NEWLINE VAR . communicate ( STRING )", ">> > import sys NEWLINE >> > class Quitter ( object ) : NEWLINE . . . def __repr__ ( VAR ) : NEWLINE . . . sys . VAR ( ) NEWLINE . . . NEWLINE >> > VAR = Quitter ( )", ">> > VAR = STRING NEWLINE >> > VAR = map ( str . strip , VAR . split ( ) ) NEWLINE >> > VAR NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = STRING . join ( sorted ( set ( VAR ) , key = lambda VAR : VAR . index ( VAR ) ) ) NEWLINE >> > VAR NEWLINE STRING", "def analyzer ( VAR ) : NEWLINE VAR = build_vocab ( training_data ) NEWLINE VAR = train_classifier ( VAR , trianing_data ) NEWLINE VAR = VAR . predict ( VAR ) NEWLINE VAR = format_results_to_dict ( ) NEWLINE return VAR", "STRING", "In [ NUMBER ] : NEWLINE pd . to_datetime ( NUMBER , format = STRING ) NEWLINE Out [ NUMBER ] : NEWLINE Timestamp ( STRING )", "SELECT * NEWLINE FROM TABLE_A a NEWLINE WHERE NOT EXISTS ( SELECT NULL FROM TABLE_A $ foo f WHERE a . id = f . id AND a . value1 = f . value1 AND a . value2 = f . value2 )", "def find_words_and_remove ( VAR , VAR ) : NEWLINE return [ STRING . join ( VAR for VAR in VAR . split ( ) if VAR not in VAR ) for VAR in VAR ]", ">> > VAR = numpy . load ( STRING ) NEWLINE >> > VAR NEWLINE < numpy . lib . npyio . NpzFile object at NUMBER > NEWLINE >> > VAR [ STRING ] NEWLINE array ( [ NUMBER , NUMBER ] ) NEWLINE >> > VAR [ STRING ] NEWLINE array ( [ NUMBER , NUMBER ] ) NEWLINE >> > VAR [ STRING ] NEWLINE array ( [ NUMBER , NUMBER ] )", "VAR = [ [ STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING ] ]", ">> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > [ int ( VAR ) for VAR in STRING . join ( VAR ) . split ( ) ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "from numpy . core . umath_tests import inner1d NEWLINE VAR , VAR = NUMBER , NUMBER NEWLINE VAR = np . random . rand ( VAR , VAR ) NEWLINE VAR = np . random . rand ( VAR , VAR ) NEWLINE print np . trace ( VAR . dot ( VAR ) ) NEWLINE print np . sum ( VAR * VAR . T ) NEWLINE print np . sum ( inner1d ( VAR , VAR . T ) ) NEWLINE % timeit np . trace ( VAR . dot ( VAR ) ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE % timeit np . sum ( VAR * VAR . T ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE % timeit np . sum ( inner1d ( VAR , VAR . T ) ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = OptionParser ( ) NEWLINE VAR . add_option ( STRING , VAR = STRING VAR = STRING VAR = STRING )", ">> > scipy . stats . spearmanr ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ) NEWLINE ( NUMBER , NUMBER )", ">> > VAR = { STRING : NUMBER , STRING : STRING } NEWLINE >> > STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in VAR . items ( ) ) NEWLINE STRING NEWLINE >> > STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in VAR . items ( ) ) NEWLINE STRING", "from itertools import zip_longest , starmap NEWLINE def map2x ( VAR , * iterables ) : NEWLINE VAR = zip_longest ( * iterables ) NEWLINE if VAR is None : NEWLINE return VAR NEWLINE return starmap ( VAR , VAR )", "VAR = time . time ( ) NEWLINE VAR = np . zeros ( im . shape ) NEWLINE VAR = np . array ( [ yy , xx ] ) NEWLINE for VAR in range ( im . shape [ NUMBER ] ) : NEWLINE ndimage . map_coordinates ( im [ : , : , VAR ] , VAR , order = NUMBER , prefilter = False , output = VAR [ : , : , VAR ] ) NEWLINE VAR = time . time ( ) NEWLINE print STRING , VAR - VAR", "from scipy . interpolate import interp1d", "self . labels [ i ] [ j ] . config ( text = STRING )", "from collective . documentviewer . interfaces import ILayer as IDocumentViewerLayer NEWLINE class ICustomLayer ( IDocumentViewerLayer ) : NEWLINE STRING", "from tkinter import * NEWLINE class FocusFrame ( Frame ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE Frame . __init__ ( VAR , * args , ** kwargs ) NEWLINE VAR . bind ( STRING , lambda VAR : VAR . focus_set ( ) ) NEWLINE VAR = Tk ( ) NEWLINE Entry ( VAR , width = STRING ) . pack ( ) NEWLINE FocusFrame ( VAR , width = NUMBER , height = NUMBER , bg = STRING ) . pack ( ) NEWLINE FocusFrame ( VAR , width = NUMBER , height = NUMBER , bg = STRING ) . pack ( ) NEWLINE FocusFrame ( VAR , width = NUMBER , height = NUMBER , bg = STRING ) . pack ( ) NEWLINE VAR . mainloop ( )", "ModelWithTextField . objects . filter ( text_field__iregex = STRING )", "set fp [ open STRING r ] NEWLINE set oldtext [ read $ fp ] NEWLINE close $ fp NEWLINE set newtext [ string map STRING $ oldtext ] NEWLINE puts $ newtext", "STRING . join ( re . findall ( STRING , STRING ) )", "class One : NEWLINE def get ( VAR ) : NEWLINE return NUMBER NEWLINE class Two : NEWLINE def __init__ ( VAR ) : NEWLINE VAR = One ( ) NEWLINE VAR = VAR . get ( )", "In [ NUMBER ] : answer NEWLINE Out [ NUMBER ] : NEWLINE [ { STRING : STRING , STRING : STRING , STRING : [ STRING , STRING ] } , { STRING : STRING , STRING : STRING , STRING : [ STRING , STRING , STRING , STRING ] } , { STRING : STRING , STRING : STRING , STRING : [ STRING , STRING ] } ]", ". . . NEWLINE Mexico / BajaNorte - - > - NUMBER NUMBER NEWLINE Africa / Kigali - - > + NUMBER NEWLINE Brazil / West - - > - NUMBER NEWLINE America / Grand_Turk - - > - NUMBER NEWLINE Mexico / BajaSur - - > - NUMBER NEWLINE Canada / Central - - > - NUMBER NEWLINE Africa / Lagos - - > + NUMBER NEWLINE GMT - NUMBER - - > + NUMBER NEWLINE Europe / Sofia - - > + NUMBER NEWLINE Singapore - - > + NUMBER NUMBER NEWLINE Africa / Tripoli - - > + NUMBER NEWLINE America / Anchorage - - > - NUMBER NUMBER NEWLINE Pacific / Nauru - - > + NUMBER", "VAR = opener . open ( post_url , binary_data )", ">> > re . sub ( STRING , STRING , s ) NEWLINE STRING NEWLINE >> > re . sub ( STRING , STRING , s2 ) NEWLINE STRING", "VAR = [ ] NEWLINE for VAR , VAR in enumerate ( l [ : : - NUMBER ] ) : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE for VAR , VAR in enumerate ( VAR . split ( STRING ) ) : NEWLINE VAR . append ( ( VAR , VAR , VAR , VAR ) )", "import subprocess NEWLINE import shlex NEWLINE import os NEWLINE VAR = os . open ( STRING , os . O_RDONLY ) NEWLINE VAR = STRING . format ( VAR = VAR ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = subprocess . Popen ( shlex . split ( VAR ) , stdin = VAR , stdout = VAR ) NEWLINE VAR . communicate ( ) NEWLINE os . close ( VAR )", "from itertools import imap NEWLINE for VAR , VAR , VAR , VAR in imap ( lambda y : x [ y * NUMBER : y * NUMBER + NUMBER ] , xrange ( len ( x ) // NUMBER ) ) : NEWLINE . . . more code . . .", "VAR = ( ( data_all [ NUMBER ] [ STRING ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] ) , ( data_all [ NUMBER ] [ STRING ] ) ) NEWLINE VAR = list ( VAR ) NEWLINE printdecallmethods ( login_testuser ) NEWLINE class TestCase ( object ) : NEWLINE def setUp ( VAR ) : NEWLINE pass NEWLINE def test_1 ( VAR ) : NEWLINE print STRING NEWLINE def test_2 ( VAR ) : NEWLINE print STRING", "next ( VAR for VAR in lst if . . . )", "VAR = iterparse ( source , events = ( STRING , STRING ) ) NEWLINE VAR = iter ( VAR ) NEWLINE VAR , VAR = VAR . next ( ) NEWLINE for VAR , VAR in VAR : NEWLINE if VAR == STRING and VAR . tag == STRING : NEWLINE . . . process record elements . . . NEWLINE VAR . clear ( )", "< field name = STRING / > NEWLINE < field name = STRING attrs = STRING / >", "< tr > NEWLINE { % for VAR in field . rows % } NEWLINE < td > { { VAR } } < / td > NEWLINE { % endfor % } NEWLINE < / tr >", "x . c NEWLINE void func ( struct example * p ) NEWLINE { int i ; strcpy_s ( p - > data , p - > len , STRING ) ; for ( i = NUMBER ; i < p - > count ; i + + ) p - > doubles [ i ] = NUMBER * ( i + NUMBER ) ; }", "VAR = my_model . VAR", "NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER", "print ( [ VAR for VAR in languages_list for VAR in [ VAR . code ] + list ( VAR . alt ) ] )", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "VAR = re . compile ( STRING ) NEWLINE VAR = re . compile ( STRING ) NEWLINE def convert ( VAR ) : NEWLINE VAR = VAR . sub ( STRING , VAR ) NEWLINE return VAR . sub ( STRING , VAR ) . lower ( )", "from string import ascii_lowercase NEWLINE VAR = dict ( zip ( ascii_lowercase , range ( NUMBER , NUMBER ) ) )", ">> > re . split ( STRING , STRING ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "import win32com . client NEWLINE VAR = win32com . client . Dispatch ( STRING ) NEWLINE VAR . QueueEvents = True NEWLINE VAR . Start ( ) NEWLINE VAR = VAR . OpenService ( STRING ) NEWLINE VAR = VAR . GetService ( STRING ) NEWLINE VAR = VAR . CreateRequest ( STRING ) NEWLINE VAR . GetElement ( STRING ) . AppendValue ( STRING ) NEWLINE VAR . GetElement ( STRING ) . AppendValue ( STRING ) NEWLINE VAR . Set ( STRING , STRING ) NEWLINE VAR . Set ( STRING , STRING ) NEWLINE VAR . Set ( STRING , STRING ) NEWLINE VAR = VAR . SendRequest ( VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = - NUMBER NEWLINE VAR = True NEWLINE while VAR : NEWLINE VAR = VAR . NextEvent ( ) ; NEWLINE if VAR . EventType == VAR or VAR . EventType == VAR : NEWLINE VAR = VAR . CreateMessageIterator ( ) NEWLINE VAR . Next ( ) NEWLINE VAR = VAR . Message NEWLINE VAR = VAR . GetElement ( STRING ) NEWLINE VAR = VAR . GetElement ( STRING ) NEWLINE VAR = VAR . GetElement ( STRING ) NEWLINE VAR = [ [ NUMBER for VAR in range ( VAR . GetValue ( VAR ) . NumValues + NUMBER ) ] for VAR in range ( VAR . NumValues ) ] NEWLINE for VAR in range ( VAR . NumValues ) : NEWLINE VAR = VAR . GetValue ( VAR ) NEWLINE for VAR in range ( VAR . NumValues + NUMBER ) : NEWLINE VAR = VAR . GetElement ( VAR ) NEWLINE VAR [ VAR ] [ VAR ] = VAR . Value NEWLINE VAR = False NEWLINE break NEWLINE VAR = None NEWLINE VAR = None NEWLINE VAR = None NEWLINE VAR = None NEWLINE VAR = None NEWLINE print VAR", "import os , os . path NEWLINE VAR = ( os . path . join ( VAR , VAR ) for VAR , VAR , VAR in os . walk ( dirtocheck ) for VAR in VAR ) NEWLINE VAR = ( VAR for VAR in VAR if os . path . getsize ( VAR ) < NUMBER * NUMBER ) NEWLINE for VAR in VAR : NEWLINE os . remove ( VAR )", "def __get__ ( VAR , VAR , VAR ) : NEWLINE print STRING , VAR . name NEWLINE if VAR is None : NEWLINE return VAR NEWLINE else : NEWLINE return VAR . val", "class Course ( Entity ) : NEWLINE . . . NEWLINE VAR = ManyToMany ( STRING , inverse = STRING , VAR = STRING , remote_colname = STRING , VAR = STRING )", "import random NEWLINE VAR = { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR = random . randint ( NUMBER , NUMBER ) NEWLINE VAR [ VAR ] += NUMBER NEWLINE print ( STRING ) NEWLINE for VAR in VAR : NEWLINE print ( VAR , STRING , format ( VAR [ VAR ] , STRING ) ) NEWLINE print ( STRING , sum ( VAR . values ( ) ) )", "VAR = [ { STRING : STRING } , { STRING : STRING } , . . . ]", "VAR = Categories . objects . get ( id = NUMBER ) NEWLINE print VAR . get_spamwords_as_list ( )", "VAR = service . users ( ) . messages ( ) . list ( userId = STRING ) . execute ( )", "def get_apps ( ) : NEWLINE VAR = ( STRING , STRING , . . . ) NEWLINE return [ __name__ + STRING + VAR for VAR in VAR ]", "for VAR , VAR in myDict . items ( ) : NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE do something", ". . _table : NEWLINE . . table Supertable NEWLINE + - - - - - - - - + - - - - + NEWLINE | Foo | Bar | NEWLINE + - - - - - - - - + - - - - +", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . sub ( STRING , STRING , VAR ) NEWLINE STRING NEWLINE >> > VAR NEWLINE STRING", "import os NEWLINE Import ( STRING ) NEWLINE VAR = [ STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE SConscript ( os . path . join ( VAR , STRING ) , exports = [ STRING ] )", "import pandas as pd NEWLINE VAR = pd . read_csv ( filename ) NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = VAR . ix [ : , : - NUMBER ]", "VAR = STRING NEWLINE import re NEWLINE print re . findall ( STRING , VAR )", "{ STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } } NEWLINE NUMBER", "from itertools import izip_longest NEWLINE import xlrd NEWLINE VAR = xlrd . open_workbook ( STRING ) NEWLINE VAR = xlrd . open_workbook ( STRING ) NEWLINE VAR = VAR . sheet_by_index ( NUMBER ) NEWLINE VAR = VAR . sheet_by_index ( NUMBER ) NEWLINE for VAR in range ( max ( VAR . nrows , VAR . nrows ) ) : NEWLINE if VAR < VAR . nrows : NEWLINE VAR = VAR . row_values ( VAR ) NEWLINE VAR = VAR . row_values ( VAR ) NEWLINE for VAR , ( VAR , VAR ) in enumerate ( izip_longest ( VAR , VAR ) ) : NEWLINE if VAR != VAR : NEWLINE print STRING . format ( VAR + NUMBER , VAR + NUMBER , VAR , VAR ) NEWLINE else : NEWLINE print STRING . format ( VAR + NUMBER )", "[ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", ">> > STRING . decode ( STRING ) NEWLINE STRING NEWLINE >> > STRING . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE STRING NEWLINE >> > STRING . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE STRING", "VAR = filter ( is_group , VAR )", "VAR = [ ] NEWLINE VAR = set ( ) NEWLINE for VAR , VAR in enumerate ( l ) : NEWLINE if VAR not in VAR : NEWLINE VAR . append ( ( VAR , VAR ) ) NEWLINE VAR . add ( VAR )", ">> > class Egg : NEWLINE . . . VAR = NUMBER NEWLINE . . . VAR = NUMBER NEWLINE . . . NEWLINE >> > import example NEWLINE >> > example . by_value ( Egg ( ) ) NEWLINE Spam ( ) NEWLINE Spam ( const Spam & ) NEWLINE by_value ( ) NEWLINE ~ Spam ( ) NEWLINE ~ Spam ( ) NEWLINE >> > example . by_const_ref ( Egg ( ) ) NEWLINE Spam ( ) NEWLINE by_cref ( ) NEWLINE ~ Spam ( ) NEWLINE >> > example . by_ref ( Egg ( ) ) NEWLINE Spam ( ) NEWLINE by_ref ( ) NEWLINE ~ Spam ( ) NEWLINE >> > example . by_ptr ( Egg ( ) ) NEWLINE Spam ( ) NEWLINE by_ptr ( ) NEWLINE ~ Spam ( )", "In [ NUMBER ] : l2 = index_3levels . droplevel ( level = STRING ) . droplevel ( level = STRING ) . unique ( ) NEWLINE In [ NUMBER ] : % timeit index_3levels . droplevel ( level = STRING ) . droplevel ( level = STRING ) . unique ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : l1 = index_3levels . droplevel ( level = STRING ) . droplevel ( level = STRING ) . unique ( ) NEWLINE In [ NUMBER ] : % timeit index_3levels . droplevel ( level = STRING ) . droplevel ( level = STRING ) . unique ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : len ( l1 ) NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : len ( l2 ) NEWLINE Out [ NUMBER ] : NUMBER", "VAR = ElementTree . XML ( xml_string ) NEWLINE VAR = XmlDictConfig ( VAR )", "VAR = pd . DataFrame ( res , columns = [ STRING ] ) NEWLINE print ( VAR ) NEWLINE frequency NEWLINE NUMBER c9d0892feb NUMBER NEWLINE NUMBER cji39fj4g NUMBER NEWLINE NUMBER c4c2 NUMBER NEWLINE NUMBER b3d51d5f NUMBER NEWLINE NUMBER ebb4e28c NUMBER NEWLINE NUMBER c60de5dad72 NUMBER NEWLINE NUMBER ca56dab4550 NUMBER", "import re NEWLINE VAR = STRING NEWLINE VAR = re . compile ( VAR , re . VERBOSE ) NEWLINE class TokenizerException ( Exception ) : pass NEWLINE def tokenize ( VAR ) : NEWLINE VAR = NUMBER NEWLINE while True : NEWLINE VAR = VAR . match ( VAR , VAR ) NEWLINE if not VAR : break NEWLINE VAR = VAR . end ( ) NEWLINE VAR = VAR . lastgroup NEWLINE VAR = VAR . group ( VAR ) NEWLINE yield VAR , VAR NEWLINE if VAR != len ( VAR ) : NEWLINE raise TokenizerException ( STRING % ( VAR , len ( VAR ) ) )", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . sub ( STRING , STRING , VAR ) NEWLINE STRING", ">> > VAR = STRING NEWLINE >> > VAR = re . sub ( STRING , STRING , VAR [ NUMBER : - NUMBER ] ) NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > VAR = VAR [ NUMBER ] + VAR + VAR [ - NUMBER ] NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > json . loads ( VAR ) NEWLINE { STRING : STRING , STRING : { STRING : STRING , STRING : STRING , STRING : None } , STRING : True , STRING : { STRING : STRING , STRING : STRING , STRING : [ STRING ] , STRING : NUMBER , STRING : NUMBER , STRING : None } , STRING : True , STRING : STRING } NEWLINE >> > VAR = json . loads ( VAR ) NEWLINE >> > VAR [ STRING ] NEWLINE { STRING : STRING , STRING : STRING , STRING : [ STRING ] , STRING : NUMBER , STRING : NUMBER , STRING : None } NEWLINE >> >", "VAR = Product . objects . get ( uuid = product ) NEWLINE VAR = product_quantity NEWLINE VAR = VAR NEWLINE OrderProduct . objects . create ( VAR = VAR , product = VAR , quantity = VAR )", "import re NEWLINE def repair_json ( VAR ) : NEWLINE return re . sub ( STRING , STRING , VAR . replace ( STRING , STRING ) . replace ( STRING , STRING ) )", "class Project ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . ManyToManyField ( User ) NEWLINE class Task ( models . Model ) : NEWLINE VAR = models . ForeignKey ( Project , related_name = STRING ) NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . ForeignKey ( User , related_name = STRING )", "{ % for VAR in your_object % } NEWLINE < VAR src = STRING > NEWLINE { % endfor % }", "for VAR in list_of_dicts : NEWLINE for VAR in VAR [ STRING ] : NEWLINE VAR [ STRING ] = VAR [ STRING ] . replace ( STRING , STRING )", "Calculated NUMBER st fibonacci number as NUMBER in NUMBER seconds NEWLINE Calculated NUMBER st fibonacci number as NUMBER in NUMBER seconds NEWLINE Calculated NUMBER th fibonacci number as NUMBER in NUMBER seconds", "from ctypes import * NEWLINE def encipher ( VAR , VAR ) : NEWLINE VAR = c_uint32 ( VAR [ NUMBER ] ) ; NEWLINE VAR = c_uint32 ( VAR [ NUMBER ] ) ; NEWLINE VAR = c_uint32 ( NUMBER ) ; NEWLINE VAR = NUMBER ; NEWLINE VAR = NUMBER NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE while ( VAR > NUMBER ) : NEWLINE VAR . value += VAR NEWLINE VAR . value += ( VAR . value << NUMBER ) + VAR [ NUMBER ] ^ VAR . value + VAR . value ^ ( VAR . value >> NUMBER ) + VAR [ NUMBER ] NEWLINE VAR . value += ( VAR . value << NUMBER ) + VAR [ NUMBER ] ^ VAR . value + VAR . value ^ ( VAR . value >> NUMBER ) + VAR [ NUMBER ] NEWLINE VAR -= NUMBER NEWLINE VAR [ NUMBER ] = VAR . value NEWLINE VAR [ NUMBER ] = VAR . value NEWLINE return VAR NEWLINE def decipher ( VAR , VAR ) : NEWLINE VAR = c_uint32 ( VAR [ NUMBER ] ) NEWLINE VAR = c_uint32 ( VAR [ NUMBER ] ) NEWLINE VAR = c_uint32 ( NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE while ( VAR > NUMBER ) : NEWLINE VAR . value -= ( VAR . value << NUMBER ) + VAR [ NUMBER ] ^ VAR . value + VAR . value ^ ( VAR . value >> NUMBER ) + VAR [ NUMBER ] NEWLINE VAR . value -= ( VAR . value << NUMBER ) + VAR [ NUMBER ] ^ VAR . value + VAR . value ^ ( VAR . value >> NUMBER ) + VAR [ NUMBER ] NEWLINE VAR . value -= VAR NEWLINE VAR -= NUMBER NEWLINE VAR [ NUMBER ] = VAR . value NEWLINE VAR [ NUMBER ] = VAR . value NEWLINE return VAR", "def get_attrs ( VAR , VAR , VAR ) : NEWLINE STRING NEWLINE if len ( VAR ) : NEWLINE for VAR in VAR : NEWLINE for VAR in get_attrs ( VAR , VAR , VAR ) : NEWLINE yield VAR NEWLINE if VAR . VAR == STRING : NEWLINE if VAR in VAR . attrib : NEWLINE yield VAR . attrib [ VAR ] NEWLINE VAR = [ VAR for VAR in get_attrs ( e , STRING , STRING ) ] NEWLINE print VAR", "class SonInline ( ModelForm ) : NEWLINE VAR = Son NEWLINE class FatherForm ( ModelForm ) : NEWLINE VAR = Father", "In [ NUMBER ] : % timeit n = int . from_bytes ( bytes_input , STRING ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ns per loop NEWLINE In [ NUMBER ] : % timeit n >> bit_position & NUMBER NEWLINE NUMBER loops , best of NUMBER : NUMBER ns per loop", "VAR = ListedColormap ( [ STRING , STRING ] ) NEWLINE VAR = BoundaryNorm ( [ - NUMBER , NUMBER , NUMBER ] , VAR . N ) NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE colorline ( x , data , data , VAR = VAR , VAR = VAR ) NEWLINE plt . xlim ( x . min ( ) , x . max ( ) ) NEWLINE plt . ylim ( data . min ( ) , data . max ( ) ) NEWLINE plt . show ( )", "VAR = Post . objects . filter ( author = someuser ) . values ( STRING ) . annotate ( dailycount = Count ( STRING ) ) . order_by ( )", "re . sub ( STRING , STRING , s )", "In [ NUMBER ] : VAR = { STRING : NUMBER , STRING : NUMBER } NEWLINE In [ NUMBER ] : def some_func ( VAR , VAR ) : NEWLINE . . . : print VAR NEWLINE . . . : print VAR NEWLINE . . . : NEWLINE In [ NUMBER ] : some_func ( ** VAR ) NEWLINE NUMBER NEWLINE NUMBER", ">> > VAR = STRING NEWLINE >> > VAR . rsplit ( STRING , NUMBER ) NEWLINE [ STRING , STRING ] NEWLINE >> > NEWLINE >> > VAR . rsplit ( STRING , NUMBER ) [ NUMBER ] NEWLINE STRING", "import numpy as np NEWLINE from scipy . stats import norm NEWLINE from scipy . optimize import curve_fit NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = NUMBER ; VAR = NUMBER ; VAR = NUMBER NEWLINE VAR = np . random . normal ( VAR , np . sqrt ( VAR ) , VAR ) NEWLINE VAR = np . sort ( VAR ) NEWLINE VAR , VAR = norm . fit ( VAR ) NEWLINE VAR = np . cumsum ( np . ones ( VAR . shape ) ) / VAR NEWLINE [ VAR , VAR ] , VAR = curve_fit ( norm . cdf , VAR , VAR , p0 = [ NUMBER , NUMBER ] ) NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE VAR = plt . figure ( NUMBER ) ; VAR . clf ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . linspace ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR . plot ( VAR , norm . cdf ( VAR , VAR , VAR ) , alpha = NUMBER , label = STRING ) NEWLINE VAR . plot ( VAR , norm . cdf ( VAR , VAR , VAR ) , alpha = NUMBER , label = STRING ) NEWLINE VAR . step ( VAR , VAR , STRING , where = STRING , alpha = NUMBER , label = STRING ) NEWLINE VAR . legend ( loc = STRING ) NEWLINE VAR . grid ( True ) NEWLINE VAR . set_xlabel ( STRING ) NEWLINE VAR . set_ylabel ( STRING ) NEWLINE VAR . set_title ( STRING ) NEWLINE VAR . canvas . draw ( ) NEWLINE plt . show ( )", "data [ STRING ] = data . groupby ( STRING ) [ STRING ] . rank ( ascending = NUMBER )", "VAR = re . compile ( STRING )", "NUMBER NEWLINE Updating the main loop NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE Updating the main loop7 NEWLINE NUMBER NEWLINE Updating the main loop NEWLINE NUMBER", "import itertools NEWLINE VAR = itertools . chain ( range ( NUMBER , NUMBER , NUMBER ) , [ NUMBER ] )", "def f ( VAR , VAR , VAR ) : NEWLINE print STRING % ( VAR , VAR ) NEWLINE return VAR", "VAR = argparse . ArgumentParser ( ) NEWLINE VAR = VAR . add_subparsers ( title = STRING ) NEWLINE VAR = VAR . add_parser ( STRING ) NEWLINE VAR . add_argument ( STRING ) NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR . set_defaults ( target = create ) NEWLINE VAR = VAR . add_parser ( STRING ) NEWLINE VAR . set_defaults ( target = build ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE VAR . target ( ** { VAR : VAR for VAR , VAR in vars ( VAR ) . items ( ) if VAR != STRING } )", "[ STRING , STRING , STRING ]", "ax . xaxis . labelpad = NUMBER", "NUMBER NEWLINE NUMBER", "def example ( ) : NEWLINE print STRING", "{ STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "import time NEWLINE from nltk . corpus import brown NEWLINE from nltk import sent_tokenize , word_tokenize , pos_tag NEWLINE from nltk import pos_tag_sents NEWLINE VAR = time . time ( ) NEWLINE VAR = brown . raw ( ) NEWLINE VAR = time . time ( ) - VAR NEWLINE print STRING , VAR NEWLINE VAR = time . time ( ) NEWLINE VAR = sent_tokenize ( VAR ) NEWLINE VAR = time . time ( ) - VAR NEWLINE print STRING , VAR NEWLINE VAR = time . time ( ) NEWLINE VAR = [ word_tokenize ( VAR ) for VAR in VAR ] NEWLINE VAR = time . time ( ) - VAR NEWLINE print STRING , VAR NEWLINE VAR = time . time ( ) NEWLINE VAR = [ word_tokenize ( VAR ) for VAR in sent_tokenize ( brown . raw ( ) ) ] NEWLINE VAR = time . time ( ) - VAR NEWLINE print STRING , VAR NEWLINE VAR = time . time ( ) NEWLINE VAR = [ pos_tag ( word_tokenize ( VAR ) ) for VAR in sent_tokenize ( brown . raw ( ) ) ] NEWLINE VAR = time . time ( ) - VAR NEWLINE print STRING , VAR NEWLINE VAR = time . time ( ) NEWLINE VAR = pos_tag_sents ( [ word_tokenize ( VAR ) for VAR in sent_tokenize ( brown . raw ( ) ) ] ) NEWLINE VAR = time . time ( ) - VAR NEWLINE print STRING , VAR", "In [ NUMBER ] : ll = [ ] NEWLINE In [ NUMBER ] : for VAR in txt : NEWLINE ll . append ( np . loadtxt ( [ VAR ] , delimiter = STRING ) ) NEWLINE . . . . . : NEWLINE In [ NUMBER ] : ll NEWLINE Out [ NUMBER ] : NEWLINE [ array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) , array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) , array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) , array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) ]", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE from matplotlib . VAR import LinearSegmentedColormap NEWLINE VAR = plt . get_cmap ( STRING ) NEWLINE VAR = VAR ( np . linspace ( NUMBER , NUMBER , VAR . N // NUMBER ) ) NEWLINE VAR = LinearSegmentedColormap . from_list ( STRING , VAR ) NEWLINE VAR , VAR = np . mgrid [ - NUMBER : NUMBER , - NUMBER : NUMBER ] NEWLINE VAR = np . cos ( np . hypot ( VAR , VAR ) / NUMBER ) + NUMBER NEWLINE VAR , VAR = plt . subplots ( ncols = NUMBER ) NEWLINE for VAR , VAR in zip ( VAR . flat , [ VAR , VAR ] ) : NEWLINE VAR = VAR . imshow ( VAR , VAR = VAR , origin = STRING , extent = [ VAR . min ( ) , VAR . max ( ) , VAR . min ( ) , VAR . max ( ) ] ) NEWLINE VAR = VAR . colorbar ( VAR , VAR = VAR , orientation = STRING ) NEWLINE VAR . set_label ( VAR . name ) NEWLINE plt . show ( )", "t2 t1 NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING . . .", "import matplotlib . pyplot as plt NEWLINE VAR = [ data [ VAR ] [ STRING ] for VAR in data ] NEWLINE VAR = [ sum ( VAR ) for VAR in zip ( * VAR ) ] NEWLINE plt . plot ( VAR ) NEWLINE plt . show ( )", "def traverse ( VAR , VAR = ( list , tuple ) ) : NEWLINE if isinstance ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE for VAR in traverse ( VAR ) : NEWLINE yield VAR NEWLINE else : NEWLINE yield VAR NEWLINE VAR = [ ( NUMBER , NUMBER , ( NUMBER , NUMBER , ( NUMBER , STRING ) ) ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , ) , NUMBER , ( NUMBER , ( NUMBER , ( STRING , ) ) ) ] NEWLINE print list ( traverse ( VAR ) ) NEWLINE for VAR in traverse ( VAR ) : NEWLINE print repr ( VAR ) NEWLINE", ">> > hex ( NUMBER ) NEWLINE STRING", "[ STRING . format ( VAR ) for VAR in range ( NUMBER ) ]", "ticks foo type bar message NEWLINE NUMBER NUMBER UpdatePlaybackStatusInfo NUMBER Avg Prefetch ( ms ) : NUMBER , Avg Render ( ms ) : NUMBER , Avg Display FPS : NUMBER NEWLINE NUMBER NUMBER UpdatePlaybackStatusInfo NUMBER Frames dropped during playback : NUMBER / NUMBER , Preroll ( ms ) : NUMBER NEWLINE NUMBER NUMBER UpdatePlaybackStatusInfo NUMBER Avg Prefetch ( ms ) : NUMBER , Avg Render ( ms ) : NUMBER , Avg Display FPS : NUMBER NEWLINE NUMBER NUMBER Assert NUMBER Debug Assert failed ! NEWLINE NUMBER NUMBER Assert NUMBER wglMakeCurrent failed : Error NUMBER : The operation completed successfully .", "Python NUMBER NUMBER ( r266 : NUMBER , Jun NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) NEWLINE Type STRING , STRING , STRING or STRING for VAR information . NEWLINE >> > from getopt import getopt NEWLINE >> > NEWLINE >> > argv = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > opts , extra = getopt ( argv , STRING , STRING ) NEWLINE >> > NEWLINE >> > opts NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE >> > NEWLINE >> > extra NEWLINE [ STRING , STRING ]", "try : NEWLINE VAR [ NUMBER ] NEWLINE except AttributeError : NEWLINE VAR = ( VAR , slice ( None , None , None ) )", "In [ NUMBER ] : import numpy as np NEWLINE In [ NUMBER ] : VAR = np . random . random ( NUMBER ) NEWLINE In [ NUMBER ] : VAR = np . random . random ( NUMBER ) NEWLINE In [ NUMBER ] : zip ( VAR , VAR ) NEWLINE Out [ NUMBER ] : NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE In [ NUMBER ] : VAR = np . array ( zip ( VAR , VAR ) , dtype = [ ( STRING , float ) , ( STRING , float ) ] ) NEWLINE In [ NUMBER ] : VAR [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR [ NUMBER ] NEWLINE Out [ NUMBER ] : ( NUMBER , NUMBER )", "def get_client_address ( VAR ) : NEWLINE try : NEWLINE return VAR [ STRING ] . split ( STRING ) [ - NUMBER ] . strip ( ) NEWLINE except KeyError : NEWLINE return VAR [ STRING ]", "window [ STRING ] . Texts ( )", "import os NEWLINE import collections NEWLINE VAR = STRING NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = collections . deque ( VAR . read ( ) . splitlines ( ) ) NEWLINE print VAR [ NUMBER ] NEWLINE VAR . rotate ( - NUMBER ) NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR . write ( STRING % VAR )", "VAR = re . sub ( STRING , STRING , VAR )", "VAR = map ( str , range ( NUMBER , NUMBER ) ) NEWLINE VAR = { } NEWLINE from subprocess import call NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE VAR = STRING + VAR + STRING NEWLINE call ( [ STRING , STRING , VAR , VAR , VAR ] ) NEWLINE VAR [ VAR ] = pd . read_csv ( VAR )", "class Base ( object ) : NEWLINE VAR = Meta NEWLINE VAR = { } NEWLINE @ classmethod NEWLINE def extending ( VAR , VAR ) : NEWLINE VAR . VAR [ VAR . __name__ ] = VAR NEWLINE class Extend1 ( Base ) : NEWLINE pass NEWLINE class Extend2 ( Base ) : NEWLINE pass", "[ ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING ) ]", "< div class = STRING data - toggle = STRING > NEWLINE < label class = STRING > NEWLINE < input type = STRING name = STRING id = STRING > Option NUMBER NEWLINE < / label > NEWLINE < label class = STRING > NEWLINE < input type = STRING name = STRING id = STRING > Option NUMBER NEWLINE < / label > NEWLINE < label class = STRING > NEWLINE < input type = STRING name = STRING id = STRING > Option NUMBER NEWLINE < / label >", "VAR = p . project_tasks . all ( )", "In [ NUMBER ] : [ { STRING : VAR , STRING : VAR , STRING : VAR } for ( VAR , VAR , VAR ) in all_values ] NEWLINE Out [ NUMBER ] : NEWLINE [ { STRING : NUMBER , STRING : STRING , STRING : NUMBER } , { STRING : NUMBER , STRING : STRING , STRING : NUMBER } , { STRING : NUMBER , STRING : STRING , STRING : NUMBER } ]", "[ STRING . join ( map ( str , VAR ) ) for VAR in itertools . product ( [ NUMBER , NUMBER ] , repeat = NUMBER ) ]", ">> > ord ( STRING ) NEWLINE NUMBER", "def liner2 ( VAR , VAR , VAR , VAR = NUMBER ) : NEWLINE VAR = len ( VAR ) NEWLINE VAR = len ( VAR ) if VAR else NUMBER NEWLINE VAR = VAR . read ( VAR ) NEWLINE VAR = STRING NEWLINE while VAR : NEWLINE VAR = VAR . rfind ( VAR ) NEWLINE if VAR == - NUMBER : NEWLINE VAR = VAR NEWLINE VAR = STRING NEWLINE else : NEWLINE VAR = VAR [ NUMBER : VAR + VAR ] NEWLINE VAR = VAR [ VAR + VAR : ] NEWLINE VAR = VAR + VAR NEWLINE VAR = VAR NEWLINE VAR = VAR = NUMBER NEWLINE while VAR + NUMBER : NEWLINE VAR = VAR . find ( VAR , VAR ) NEWLINE if VAR + NUMBER : yield VAR [ VAR : VAR + VAR ] NEWLINE else : break NEWLINE VAR = VAR + VAR NEWLINE VAR = VAR . read ( VAR ) NEWLINE yield VAR NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = clock ( ) NEWLINE for VAR in liner2 ( VAR , STRING , NUMBER ) : NEWLINE pass NEWLINE print clock ( ) - VAR", "$ ( window ) . bind ( STRING , function ( ) { $ . ajax ( STRING ) ; } ) ;", ">> > VAR = NUMBER NEWLINE >> > VAR = [ chr ( VAR / NUMBER ) , chr ( VAR % NUMBER ) ] NEWLINE >> > VAR NEWLINE [ STRING , STRING ]", "VAR = set ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE list ( combinations ( VAR , NUMBER ) ) NEWLINE", "In [ NUMBER ] : VAR = DataFrame ( np . random . randn ( NUMBER , NUMBER ) , columns = [ STRING , STRING ] ) NEWLINE In [ NUMBER ] : VAR . to_hdf ( STRING , STRING , mode = STRING , format = STRING ) NEWLINE In [ NUMBER ] : VAR = pd . HDFStore ( STRING ) NEWLINE In [ NUMBER ] : VAR = VAR . get_storer ( STRING ) . VAR NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : VAR = np . random . randint ( NUMBER , VAR , size = NUMBER ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : pd . read_hdf ( STRING , STRING , where = pd . Index ( VAR ) ) NEWLINE Out [ NUMBER ] : NEWLINE A B NEWLINE NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER NEWLINE [ NUMBER rows x NUMBER columns ]", "for VAR in get_buttons_hbox ( a ) . get_children ( ) : NEWLINE print VAR . get_label ( )", "[ ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "VAR = [ VAR [ NUMBER ] for VAR in l_succ if VAR in l_last ] NEWLINE VAR = Store . objects . filter ( pk__in = VAR )", "os . system ( STRING )", "ID , Name , Income NEWLINE NUMBER , A , NUMBER k NEWLINE NUMBER , B , NUMBER k NEWLINE NUMBER , C , NUMBER k", "\\ b NEWLINE ( ? = [ NUMBER - NUMBER U ] ) NEWLINE ( ? : [ NUMBER - NUMBER ] + \\ s * U \\ . ? S \\ . ? D | U \\ . ? S \\ . ? D \\ s * [ NUMBER - NUMBER ] + ) NEWLINE \\ b", "VAR = treeWidget . verticalScrollBar ( ) NEWLINE VAR = VAR . value ( ) NEWLINE treeWidget . scrollContentsBy ( NUMBER , VAR )", "for VAR , VAR in allprocs : NEWLINE", "VAR = series . unstack ( )", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE NUMBER keys ; max life : NUMBER ; average life : NUMBER NEWLINE Keys with NUMBER secs life : NEWLINE Key NUMBER : NUMBER NEWLINE Key NUMBER : NUMBER NEWLINE Key NUMBER : NUMBER NEWLINE . . . NEWLINE Keys with NUMBER secs life : NEWLINE Key NUMBER : NUMBER NEWLINE Key NUMBER : NUMBER NEWLINE Key NUMBER : NUMBER NEWLINE . . . NEWLINE Keys with NUMBER secs life : NEWLINE . . .", "from api . v1 import api as api_v1 NEWLINE from api . v1_1 import api as api_v1_1 NEWLINE from api . v2 import api as api_v2 NEWLINE app . register_blueprint ( api_v1 , url_prefix = STRING ) NEWLINE app . register_blueprint ( api_v1_1 , url_prefix = STRING ) NEWLINE app . register_blueprint ( api_v2 , url_prefix = STRING )", "import os NEWLINE import cv NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = [ STRING % ( os . path . dirname ( os . path . abspath ( __file__ ) ) , VAR . strip ( ) ) for VAR in VAR ]", ">> > import copy NEWLINE >> > VAR = copy . copy ( D [ STRING ] ) NEWLINE >> > VAR . append ( NUMBER ) NEWLINE >> > D [ STRING ] NEWLINE [ NUMBER , NUMBER , NUMBER ]", "for VAR in itertools . product ( * d . values ( ) ) : NEWLINE VAR = sorted ( list ( VAR ) )", "from itertools import islice NEWLINE next ( islice ( file_object , times_to_advance , times_to_advance ) , None )", "VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = [ VAR , VAR ] NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR += float ( VAR . rsplit ( STRING , NUMBER ) [ NUMBER ] ) NEWLINE print ( VAR )", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE for VAR in some_file : NEWLINE if STRING in VAR and not any ( VAR in VAR for VAR in VAR ) : NEWLINE pass", ">> > for VAR in root . iter ( ) : NEWLINE . . . print VAR . text NEWLINE . . . NEWLINE One Main Street NEWLINE One Second Street NEWLINE Gotham City NEWLINE NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NEWLINE USA", ">> > df [ STRING ] NEWLINE time NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE Name : close , dtype : float64", "words . setdefault ( key , [ ] ) . append ( word )", ">> > import re NEWLINE >> > import numpy as np NEWLINE >> > pair = re . compile ( STRING ) NEWLINE >> > def parse_pair ( s ) : NEWLINE . . . return complex ( * map ( float , pair . match ( s ) . groups ( ) ) ) NEWLINE >> > s = STRING NEWLINE >> > from cStringIO import StringIO NEWLINE >> > f = StringIO ( s ) NEWLINE >> > np . loadtxt ( f , delimiter = STRING , dtype = np . complex , . . . converters = { NUMBER : parse_pair , NUMBER : parse_pair } ) NEWLINE array ( [ [ NUMBER + NUMBER , NUMBER + NUMBER , NUMBER + NUMBER ] , [ NUMBER + NUMBER , NUMBER + NUMBER , NUMBER + NUMBER ] ] )", "{ STRING : [ STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING ] }", "import heapq NEWLINE import contextlib NEWLINE with contextlib . ExitStack ( ) as VAR : NEWLINE VAR = [ VAR . enter_context ( open ( VAR ) ) for VAR in inFiles ] NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . writelines ( heapq . merge ( * VAR ) )", "from operator import add NEWLINE VAR = rdd . flatMap ( lambda VAR : ( ( VAR , VAR [ NUMBER ] ) for VAR in VAR [ NUMBER ] ) ) NEWLINE VAR . first ( ) NEWLINE VAR = ( VAR . join ( VAR ) . filter ( filter_source ) . map ( swap ) . reduceByKey ( add ) . map ( reshape ) )", "( S ( NP I ) ( VP ( V shot ) ( NP ( NUM", "VAR = { } NEWLINE for VAR in one [ : - NUMBER ] : NEWLINE VAR [ VAR ] = [ elements . pop ( NUMBER ) ] NEWLINE VAR [ one [ - NUMBER ] ] = [ elements ]", "@ save_last NEWLINE def my_func ( . . . ) : NEWLINE", "$ scrapy crawl authors - o authors . json - a articles = articles . json", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE VAR . select_one ( STRING ) . string = STRING NEWLINE print ( VAR . prettify ( ) )", "VAR = [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : [ STRING , STRING , STRING ] } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : [ STRING , STRING , STRING ] } , . . . ]", "from App . config import getConfiguration NEWLINE import os NEWLINE VAR = getConfiguration ( ) . VAR NEWLINE VAR = VAR . handler_factories [ NUMBER ] . instance . baseFilename NEWLINE VAR = os . path . split ( VAR ) [ NUMBER ]", "< Person > < name > My Name < / name > NEWLINE < Address > My Address < / Address > NEWLINE < / Person >", ">> > def mymaxfunction ( VAR ) : NEWLINE . . . return sum ( map ( int , VAR ) ) NEWLINE . . . NEWLINE >> > max ( [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ] , key = mymaxfunction ) NEWLINE [ STRING , STRING , STRING ]", "In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE NUMBER st NUMBER nd NUMBER rd NEWLINE A a NUMBER NUMBER NUMBER NEWLINE b NUMBER NUMBER NUMBER NEWLINE c NaN NaN NaN NEWLINE d NaN NaN NaN NEWLINE B a NUMBER NUMBER NUMBER NEWLINE b NUMBER NUMBER NUMBER NEWLINE c NaN NaN NaN NEWLINE d NaN NaN NaN", "VAR = pill_img . rotate ( NUMBER ) NEWLINE VAR . show ( )", "[ random . choice ( [ STRING , STRING , STRING ] ) for VAR in range ( random . randintimport matplotlib . pyplot as plt NEWLINE import matplotlib . gridspec as gridspec NEWLINE import matplotlib . offsetbox as offsetbox NEWLINE from matplotlib import rc NEWLINE rc ( STRING , usetex = True ) NEWLINE VAR = plt . figure ( figsize = ( NUMBER , NUMBER ) ) NEWLINE VAR = gridspec . GridSpec ( NUMBER , NUMBER ) NEWLINE VAR = plt . subplot ( VAR [ NUMBER : NUMBER , NUMBER : NUMBER ] ) NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR . axis ( STRING ) NEWLINE VAR = STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) NEWLINE VAR = STRING NEWLINE VAR = VAR + VAR + VAR + VAR + VAR + VAR + VAR + VAR NEWLINE VAR = offsetbox . AnchoredText ( VAR , pad = NUMBER , loc = NUMBER , prop = dict ( size = NUMBER ) ) NEWLINE VAR . patch . set ( alpha = NUMBER ) NEWLINE VAR . add_artist ( VAR ) NEWLINE plt . savefig ( STRING , dpi = NUMBER )", "Component NUMBER - year concierge assistance ABS breaks Air conditioner Vehicle NEWLINE Chrysler NUMBER NUMBER NUMBER NEWLINE Ford NUMBER NUMBER NUMBER NEWLINE Toyota NUMBER NUMBER NUMBER NEWLINE Component air conditioner airbag engine with NUMBER H / P engine with NUMBER H / P NEWLINE Vehicle NEWLINE Chrysler NUMBER NUMBER NUMBER NUMBER NEWLINE Ford NUMBER NUMBER NUMBER NUMBER NEWLINE Toyota NUMBER NUMBER NUMBER NUMBER", "from google . appengine . ext import endpoints NEWLINE @ endpoints . api ( . . . ) NEWLINE class SomeClass ( . . . ) : NEWLINE @ User . method ( request_fields = ( STRING , ) , VAR = STRING , VAR = STRING , name = STRING ) NEWLINE def get_by_email ( self , user ) : NEWLINE if not user . from_datastore : NEWLINE raise endpoints . NotFoundException ( STRING ) NEWLINE return user", ">> > import yaml NEWLINE >> > VAR = STRING NEWLINE >> > with open ( VAR ) as VAR : NEWLINE . . . VAR = yaml . load ( VAR ) NEWLINE . . . NEWLINE >> > VAR NEWLINE { STRING : [ STRING , STRING , STRING ] }", "def form_valid ( VAR , VAR ) : NEWLINE VAR = UserCreationForm ( VAR . request . POST ) NEWLINE if VAR . is_valid ( ) : NEWLINE VAR = VAR . save ( ) NEWLINE VAR = VAR . save ( commit = False ) NEWLINE VAR . user_id = VAR . id NEWLINE VAR . save ( ) NEWLINE return HttpResponseRedirect ( VAR . get_success_url ( ) )", "VAR = NP . random . random_integers ( NUMBER , NUMBER , NUMBER ) . reshape ( NUMBER , NUMBER ) NEWLINE VAR = NP . zeros_like ( VAR [ : , - NUMBER ] ) . reshape ( - NUMBER , NUMBER ) NEWLINE VAR = NP . hstack ( ( VAR , VAR ) )", "VAR = queue . Queue ( ) NEWLINE VAR = threading . Event ( ) NEWLINE def store_db ( ) : NEWLINE VAR = [ ] NEWLINE while not VAR . is_set ( ) : NEWLINE try : NEWLINE VAR . append ( VAR . get ( timeout = NUMBER ) ) NEWLINE if len ( VAR ) > NUMBER : NEWLINE insert_into ( VAR ) NEWLINE VAR = [ ] NEWLINE VAR . task_done ( ) NEWLINE except queue . Empty : pass NEWLINE if VAR : NEWLINE insert_into ( VAR ) NEWLINE def continous_reading ( ) : NEWLINE VAR . put ( row ) NEWLINE VAR = threading . Thread ( target = store_db ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( ) NEWLINE continous_reading ( ) NEWLINE VAR . join ( ) NEWLINE VAR . set ( ) NEWLINE VAR . join ( )", "import os NEWLINE VAR = STRING NEWLINE VAR = os . listdir ( VAR ) NEWLINE for VAR in VAR : NEWLINE if VAR . endswith ( STRING ) : NEWLINE os . remove ( os . path . join ( VAR , VAR ) )", "Rule ( LinkExtractor ( allow = ( STRING , ) ) , callback = STRING ) ,", ">> > test ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , NUMBER , NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "import ruamel . yaml NEWLINE def list_elements ( VAR , VAR = NUMBER ) : NEWLINE VAR = None NEWLINE VAR = True NEWLINE VAR = STRING * VAR + STRING NEWLINE for VAR in VAR : NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR = False NEWLINE continue NEWLINE if VAR : NEWLINE continue NEWLINE if VAR . startswith ( VAR ) : NEWLINE if VAR is None : NEWLINE VAR = VAR NEWLINE continue NEWLINE yield ruamel . yaml . load ( VAR ) [ NUMBER ] NEWLINE VAR = VAR NEWLINE continue NEWLINE VAR += VAR NEWLINE if VAR : NEWLINE yield ruamel . yaml . load ( VAR ) [ NUMBER ] NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in list_elements ( VAR ) : NEWLINE print ( str ( VAR ) )", "import scrapy NEWLINE class MySpider ( scrapy . Spider ) : NEWLINE VAR = STRING NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = [ STRING ] NEWLINE def VAR ( VAR , VAR , VAR ) : NEWLINE STRING NEWLINE VAR = scrapy . Request ( VAR = VAR , VAR = VAR ) NEWLINE VAR . cookies [ STRING ] = NUMBER NEWLINE VAR . headers [ STRING ] = ( STRING STRING ) NEWLINE return VAR NEWLINE def start_requests ( VAR ) : NEWLINE for VAR , VAR in enumerate ( VAR . VAR ) : NEWLINE yield VAR . VAR ( VAR , VAR . parse_item ) NEWLINE def parse_item ( VAR , VAR ) : NEWLINE VAR = VAR . css ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = { } NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE yield VAR NEWLINE VAR = VAR . xpath ( STRING ) . extract_first ( ) NEWLINE if VAR : NEWLINE yield VAR . VAR ( VAR , VAR . parse_item ) NEWLINE", "Val NEWLINE BC b c NEWLINE XY UV NEWLINE x u NUMBER NUMBER NEWLINE v NUMBER NUMBER NEWLINE y u NUMBER NUMBER NEWLINE v NUMBER NUMBER", "def voxel_adjacency ( VAR ) : NEWLINE VAR = VAR . size NEWLINE VAR = sorted ( set ( VAR ) ) NEWLINE VAR = [ ( VAR == VAR ) . sum ( ) for VAR in VAR ] NEWLINE VAR = numpy . zeros ( ( VAR , VAR ) , dtype = bool ) NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR [ VAR : VAR + VAR , VAR : VAR + VAR ] = NUMBER NEWLINE VAR += VAR NEWLINE VAR = numpy . empty_like ( VAR ) NEWLINE VAR [ VAR . argsort ( ) ] = numpy . arange ( VAR ) NEWLINE VAR [ : ] = VAR [ VAR , : ] NEWLINE VAR [ : ] = VAR [ : , VAR ] NEWLINE return VAR", "import Tkinter NEWLINE VAR = STRING % ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = STRING NEWLINE VAR = Tkinter . Tk ( ) NEWLINE VAR . configure ( bg = VAR ) NEWLINE Tkinter . Button ( VAR , text = STRING , bg = VAR , fg = STRING , activebackground = STRING , activeforeground = VAR ) . pack ( ) NEWLINE VAR . mainloop ( )", "In [ NUMBER ] : with open ( STRING ) as VAR : NEWLINE . . . . : for VAR in VAR : NEWLINE . . . . : VAR = VAR . split ( ) NEWLINE . . . . : if STRING in VAR : NEWLINE . . . . : print VAR NEWLINE . . . . : break NEWLINE . . . . : NEWLINE NUMBER : mp4 [ NUMBER x640 ]", "def is_iterable ( VAR ) : NEWLINE return type ( VAR ) in [ list , tuple ]", "VAR = STRING NEWLINE VAR = sorted ( inputList , key = lambda VAR : [ VAR . index ( VAR ) for VAR in VAR [ NUMBER ] ] )", "[ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = np . any ( condition , axis = NUMBER ) NEWLINE print ( table [ VAR , : NUMBER ] )", "In [ NUMBER ] : VAR = DataFrame ( randn ( NUMBER , NUMBER ) , columns = list ( STRING ) ) NEWLINE In [ NUMBER ] : VAR [ STRING ] = NUMBER NEWLINE In [ NUMBER ] : VAR [ STRING ] = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE In [ NUMBER ] : VAR . loc [ : NUMBER , STRING ] = NUMBER NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE A B C D year idmac_list [ STRING ] . add ( new_freq , fill_value = NUMBER ) NEWLINE NUMBER c9d0892feb NUMBER NEWLINE NUMBER cji39fj4g NUMBER NEWLINE NUMBER c4c2 NUMBER NEWLINE NUMBER b3d51d5f NUMBER NEWLINE NUMBER ebb4e28c NUMBER NEWLINE NUMBER c60de5dad72 NUMBER NEWLINE NUMBER ca56dab4550 NUMBER NEWLINE dtype : float64", "import unittest . mock as mock NEWLINE VAR = mock . Mock ( ) NEWLINE with mock . patch . dict ( STRING , argparse = VAR ) : NEWLINE import argparse NEWLINE print ( argparse . ArgumentParser ( ) ) NEWLINE", "class PublishView ( UpdateView ) : NEWLINE VAR = Blog NEWLINE def post ( VAR , VAR , * args , ** kwargs ) : NEWLINE VAR = VAR . kwargs . get ( STRING , None ) NEWLINE Blog . objects . filter ( VAR = VAR ) . update ( publish_date = datetime . datetime . now ( ) ) NEWLINE return HttpResponseRedirect ( STRING + VAR )", "Putting an entire chapter on one page sounds bloated , but consider this & mdash ; my longest chapter so far would be NUMBER printed pages , and it loads in under NUMBER seconds & hellip ; On dialup . NEWLINE Putting an entire chapter on one page sounds bloated , but consider this & mdash ; my longest chapter so far would be NUMBER printed pages , and it loads in under NUMBER seconds & hellip ; On dialup . NEWLINE Putting an entire chapter on one page sounds bloated , but consider this & mdash ; my longest chapter so far would be NUMBER printed pages , and it loads in under NUMBER seconds & hellip ; On dialup . NEWLINE The accessibility orthodoxy does not permit people to question the value of features that are rarely useful and rarely used . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding . NEWLINE These notes will eventually become part of a tech talk on video encoding .", "with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE if STRING in VAR or STRING in VAR or STRING in VAR :", "VAR = { STRING : STRING } NEWLINE for VAR in root . findall ( STRING , VAR = VAR ) : NEWLINE print ( VAR . attrib [ STRING ] , VAR . attrib [ STRING ] )", ">> > VAR = NUMBER NEWLINE >> > VAR = NUMBER NEWLINE >> > VAR = None NEWLINE >> > VAR = { VAR : VAR for VAR , VAR in locals ( ) . items ( ) if VAR is not None and not VAR . startswith ( STRING ) } NEWLINE >> > VAR NEWLINE { STRING : NUMBER , STRING : NUMBER }", "import threading NEWLINE VAR = threading . Thread ( target = udp_server , args = ( . . . ) ) NEWLINE VAR . start ( )", "[ [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ]", "col2 col3 NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", ">> > VAR = STRING NEWLINE >> > print ( VAR ) NEWLINE Foo ' \" \\ Bar NEWLINE >> > print ( VAR . encode ( STRING ) ) NEWLINE STRING NEWLINE >> > VAR . encode ( STRING ) NEWLINE STRING", "foo | bar baz | spam", "import operator as op NEWLINE sorted ( lst , key = op . itemgetter ( NUMBER ) )", ">> > VAR = defaultdict ( dict ) NEWLINE >> > VAR [ STRING ] [ STRING ] = [ ] NEWLINE >> > VAR [ STRING ] [ STRING ] = [ ] NEWLINE >> > VAR [ STRING ] [ STRING ] . append ( STRING ) NEWLINE >> > VAR [ STRING ] [ STRING ] . append ( STRING ) NEWLINE >> > print ( VAR ) NEWLINE defaultdict ( < type STRING > , { STRING : { STRING : [ STRING , STRING ] } , STRING : { STRING : [ ] } } )", "class ComponentURLField ( serializers . Field ) : NEWLINE def to_native ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = VAR . context [ STRING ] NEWLINE return reverse ( STRING , kwargs = kwargs , VAR = VAR )", ">> > sorted ( yourdict . items ( ) , key = lambda VAR : int ( VAR [ NUMBER ] . split ( ) [ NUMBER ] ) ) NEWLINE [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "import os NEWLINE import re NEWLINE VAR = [ VAR for VAR in os . listdir ( ) if re . search ( STRING , VAR ) ] NEWLINE for VAR in VAR : NEWLINE print VAR", "A a NUMBER NUMBER NUMBER NEWLINE b NUMBER NUMBER NUMBER NEWLINE c NUMBER NUMBER NUMBER NEWLINE d NUMBER NUMBER NUMBER NEWLINE B a NaN NaN NaN NEWLINE b NaN NaN NaN NEWLINE c NaN NaN NaN NEWLINE d NaN NaN NaN", "VAR , VAR = s . split ( STRING ) NEWLINE VAR = VAR . split ( ) [ NUMBER ] NEWLINE VAR = VAR [ : - NUMBER ] . split ( STRING ) NEWLINE VAR = { STRING : VAR , STRING : VAR [ : - NUMBER ] , STRING : VAR [ - NUMBER ] }", "import numpy as np NEWLINE from sklearn . pipeline import Pipeline NEWLINE from sklearn . feature_extraction . text import CountVectorizer NEWLINE from sklearn . svm import LinearSVC NEWLINE from sklearn . feature_extraction . text import TfidfTransformer NEWLINE from sklearn . multiclass import OneVsRestClassifier NEWLINE VAR = np . array ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ) NEWLINE VAR = [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE VAR = np . array ( [ STRING , STRING , STRING ] ) NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = Pipeline ( [ ( STRING , CountVectorizer ( min_n = NUMBER , max_n = NUMBER ) ) , ( STRING , TfidfTransformer ( ) ) , ( STRING , OneVsRestClassifier ( LinearSVC ( ) ) ) ] ) NEWLINE VAR . fit ( VAR , VAR ) NEWLINE VAR = VAR . predict ( VAR ) NEWLINE for VAR , VAR in zip ( VAR , VAR ) : NEWLINE print STRING % ( VAR , STRING . join ( VAR [ VAR ] for VAR in VAR ) )", "VAR = VAR . read ( ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR . writelines ( VAR ) NEWLINE VAR . close ( )", "In [ NUMBER ] : NEWLINE VAR = df [ df [ STRING ] > NUMBER ] . index [ NUMBER ] NEWLINE df . iloc [ VAR - NUMBER : VAR + NUMBER ] NEWLINE Out [ NUMBER ] : NEWLINE date store_nbr units preciptotal NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER", "class Node : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . weight_plus_children = VAR NEWLINE def get_all_weight ( VAR ) : NEWLINE if VAR . VAR is None : NEWLINE return VAR . weight_plus_children NEWLINE else : NEWLINE for VAR in VAR . VAR : NEWLINE print STRING , VAR . get_weigth_with_children ( ) NEWLINE VAR . weight_plus_children += VAR . get_weigth_with_children ( ) NEWLINE return VAR . weight_plus_children NEWLINE def get_weigth_with_children ( VAR ) : NEWLINE return VAR . weight_plus_children NEWLINE VAR = Node ( STRING , NUMBER , None ) NEWLINE VAR = Node ( STRING , NUMBER , None ) NEWLINE VAR = Node ( STRING , NUMBER , None ) NEWLINE VAR = Node ( STRING , NUMBER , None ) NEWLINE VAR = Node ( STRING , NUMBER , [ VAR , VAR ] ) NEWLINE VAR = Node ( STRING , NUMBER , [ VAR , VAR ] ) NEWLINE VAR = Node ( STRING , NUMBER , [ VAR , VAR ] ) NEWLINE print VAR . get_all_weight ( ) NEWLINE print NEWLINE print VAR . get_all_weight ( ) NEWLINE print NEWLINE print VAR . get_all_weight ( )", "Column headings : [ STRING , STRING ] NEWLINE STRING [ NUMBER , NUMBER ] NEWLINE STRING [ STRING , NUMBER ]", "VAR = [ ] NEWLINE while True : NEWLINE VAR = raw_input ( STRING ) NEWLINE if VAR == STRING : NEWLINE break NEWLINE else : NEWLINE VAR . append ( VAR )", "from selenium import webdriver NEWLINE from selenium . webdriver . common . keys import Keys NEWLINE from selenium . webdriver . common . desired_capabilities import DesiredCapabilities NEWLINE VAR = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE VAR = webdriver . Remote ( command_executor = STRING , desired_capabilities = VAR ) NEWLINE VAR . get ( STRING ) NEWLINE if not STRING in VAR . title : NEWLINE raise Exception ( STRING ) NEWLINE VAR = VAR . find_element_by_name ( STRING ) NEWLINE VAR . send_keys ( STRING ) NEWLINE VAR . submit ( ) NEWLINE print VAR . title NEWLINE VAR . quit ( )", "class LoggerMiddleware ( object ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . app = VAR NEWLINE def __call__ ( VAR , VAR , VAR ) : NEWLINE try : NEWLINE return VAR . app ( VAR , VAR ) NEWLINE except Exception , VAR : NEWLINE pass NEWLINE finally : NEWLINE pass", "plt . imshow ( np . dstack ( [ ca_map , alpha ] , . . . )", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE import matplotlib . ticker as ticker NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = ( np . random . random ( NUMBER ) - NUMBER ) . cumsum ( ) NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR . plot ( VAR , VAR ) NEWLINE def imperial ( VAR , VAR ) : NEWLINE VAR , VAR = divmod ( round ( VAR * NUMBER ) , NUMBER ) NEWLINE VAR , VAR = map ( int , [ VAR , VAR ] ) NEWLINE return ( STRING . format ( VAR ) if not VAR else STRING . format ( VAR , VAR ) if VAR else STRING . format ( VAR ) ) NEWLINE VAR . yaxis . set_major_formatter ( ticker . FuncFormatter ( imperial ) ) NEWLINE plt . show ( )", "print STRING , m . groups ( ) [ NUMBER ]", "for VAR in whitelist : NEWLINE print STRING . format ( VAR , getattr ( alarm , VAR , STRING ) )", "def rev ( VAR ) : NEWLINE def rec ( VAR , VAR ) : NEWLINE if VAR < NUMBER : NEWLINE return VAR NEWLINE else : NEWLINE return VAR % NUMBER * VAR + rec ( VAR // NUMBER , VAR // NUMBER ) NEWLINE return rec ( VAR , NUMBER ** int ( log10 ( VAR ) ) )", ">> > print ( STRING , format ( MyFloat ( NUMBER ) ) ) NEWLINE some text NUMBER some more text NEWLINE >> > print ( STRING , format ( MyFloat ( NUMBER ) ) ) NEWLINE some text NUMBER some more text NEWLINE >> > print ( STRING , format ( MyFloat ( NUMBER ) ) ) NEWLINE some text + NUMBER some more text NEWLINE >> > print ( STRING , format ( MyFloat ( NUMBER ) ) ) NEWLINE some text + NUMBER some more text NEWLINE >> > print ( STRING , format ( MyFloat ( - NUMBER ) ) ) NEWLINE some text - NUMBER some more text NEWLINE >> > print ( STRING , format ( MyFloat ( - NUMBER ) ) ) NEWLINE some text - NUMBER some more text", ">> > VAR = [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , . . . ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , . . . ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE >> > sorted ( set ( ) . union ( * VAR ) ) NEWLINE [ NUMBER , NUMBER ]", "for VAR , VAR in enumerate ( range ( NUMBER , len ( A ) ) :", "VAR = resource . objects . get ( id = NUMBER ) NEWLINE VAR = VAR . languages . split ( STRING ) NEWLINE for VAR in language : NEWLINE print VAR", "AT + CMMSINIT NEWLINE AT + CMMSCURL = STRING NEWLINE AT + CMMSCID = NUMBER NEWLINE AT + CMMSPROTO = STRING , NUMBER NEWLINE AT + SAPBR = NUMBER , NUMBER , STRING , STRING NEWLINE AT + SAPBR = NUMBER , NUMBER , STRING , STRING NEWLINE AT + SAPBR = NUMBER , NUMBER", ">> > from itertools import permutations NEWLINE >> > [ VAR for VAR in permutations ( rangea + b ) + ( ( ( sin ( ( + x + y ) ) + ( z ** NUMBER ) ) * NUMBER ) / NUMBER ) ) - h )", "VAR = Course . _descriptor . find_relationship ( STRING ) NEWLINE assert VAR NEWLINE VAR = VAR . VAR", "result . rdd . map ( lambda VAR : VAR . gender ) . first ( )", "from itertools import izip NEWLINE for VAR , VAR in izip ( lis_A , vals ) : NEWLINE VAR . append ( VAR )", "In [ NUMBER ] : % timeit new_function ( close , volume , INTERVAL_LENGTH ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "VAR , VAR = plt . subplots ( NUMBER ) NEWLINE plt . subplot2grid ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , colspan = NUMBER ) NEWLINE plt . subplot2grid ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , colspan = NUMBER ) NEWLINE plt . show ( )", "Output NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = dict ( ) NEWLINE for VAR in result : NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) NEWLINE VAR = str ( VAR [ NUMBER ] ) NEWLINE VAR [ VAR ] = Customer ( VAR ) NEWLINE print VAR", "$ rq - dashboard NEWLINE RQ Dashboard , version NUMBER NUMBER NEWLINE * Running on http : // NUMBER NUMBER NUMBER : NUMBER /", "Pat , Bryant , ID2 , NUMBER th April , . . . NEWLINE Pat , Bryant , ID2 , NUMBER th May , . . . NEWLINE Jim , Williams , ID3 , NUMBER th March , . . . NEWLINE Jim , Williams , ID3 , NUMBER th March , . . . NEWLINE Jim , Williams , ID3 , NUMBER st March , . . . NEWLINE Unique IDs : NUMBER", "[ zart @ feena ziplib - demo ] $ cd unpacked NEWLINE [ zart @ feena unpacked ] $ ls NEWLINE waitress waitress - NUMBER NUMBER - py2 NUMBER . egg - info NEWLINE [ zart @ feena unpacked ] $ zip - r9 . . / library . zip * NEWLINE adding : waitress / ( stored NUMBER % ) NEWLINE adding : waitress / receiver . py ( deflated NUMBER % ) NEWLINE adding : waitress / server . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / utilities . py ( deflated NUMBER % ) NEWLINE adding : waitress / trigger . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / trigger . py ( deflated NUMBER % ) NEWLINE adding : waitress / receiver . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / adjustments . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / compat . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / adjustments . py ( deflated NUMBER % ) NEWLINE adding : waitress / server . py ( deflated NUMBER % ) NEWLINE adding : waitress / channel . py ( deflated NUMBER % ) NEWLINE adding : waitress / task . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / ( stored NUMBER % ) NEWLINE adding : waitress / tests / test_regression . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_functional . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_parser . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_trigger . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_init . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_utilities . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_buffers . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_trigger . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_buffers . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_runner . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_init . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / __init__ . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / support . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_utilities . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_channel . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_task . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_functional . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / __init__ . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_compat . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_receiver . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_adjustments . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_adjustments . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_server . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / ( stored NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / filewrapper . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / getline . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / nocl . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / sleepy . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / echo . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / error . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / nocl . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / getline . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / writecb . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / toolarge . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / __init__ . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / writecb . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / badcl . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / runner . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / __init__ . py ( stored NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / filewrapper . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / runner . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / echo . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / groundhog1 . jpg ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / error . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / sleepy . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / toolarge . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / fixtureapps / badcl . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / support . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_task . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_channel . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_regression . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_parser . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_server . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_receiver . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_compat . py ( deflated NUMBER % ) NEWLINE adding : waitress / tests / test_runner . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / __init__ . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / channel . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / runner . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / buffers . py ( deflated NUMBER % ) NEWLINE adding : waitress / __init__ . py ( deflated NUMBER % ) NEWLINE adding : waitress / runner . py ( deflated NUMBER % ) NEWLINE adding : waitress / parser . py ( deflated NUMBER % ) NEWLINE adding : waitress / compat . py ( deflated NUMBER % ) NEWLINE adding : waitress / buffers . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / utilities . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / parser . pyc ( deflated NUMBER % ) NEWLINE adding : waitress / task . py ( deflated NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / ( stored NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / dependency_links . txt ( stored NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / installed - files . txt ( deflated NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / top_level . txt ( stored NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / PKG - INFO ( deflated NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / not - zip - safe ( stored NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / SOURCES . txt ( deflated NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / entry_points . txt ( deflated NUMBER % ) NEWLINE adding : waitress - NUMBER NUMBER - py2 NUMBER . egg - info / requires . txt ( deflated NUMBER % ) NEWLINE [ zart @ feena unpacked ] $ cd . .", "docker run - - rm - it - v ` pwd ` : / home / pytest pytest [ USUAL_PYTEST_OPTIONS ]", "def get_even_lists ( VAR ) : NEWLINE STRING NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE if VAR % NUMBER == NUMBER : NEWLINE break NEWLINE else : NEWLINE VAR . append ( VAR ) NEWLINE return VAR", "{ STRING : STRING }", "class Chat : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR", "< div class = STRING > NEWLINE < div class = STRING style = STRING > NUMBER NUMBER < / div > NEWLINE < table width = STRING class = STRING > NUMBER < / table > NEWLINE < table width = STRING class = STRING > NUMBER < / table > NEWLINE < div class = STRING style = STRING > NUMBER NUMBER < / div > NEWLINE < table width = STRING class = STRING > NUMBER < / table > NEWLINE < table width = STRING class = STRING > NUMBER < / table > NEWLINE < table width = STRING class = STRING > NUMBER < / table > NEWLINE < table width = STRING class = STRING > NUMBER < / table > NEWLINE < / div >", "$ join - t \\ ; - j NUMBER - o NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER file1 file2 NEWLINE DATE ; BS - ICI , NSA , BAL , AT ; BS - ICI , NSA , BAL , BE ; BS - BYL , NSA , BAL , AT ; BS - NAN , NSA , BAL , BE ; NEWLINE NUMBER M02 ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NEWLINE NUMBER M01 ; - NUMBER ; - NUMBER ; - NUMBER ; - NUMBER ; NEWLINE NUMBER M11 ; - NUMBER ; - NUMBER ; - NUMBER ; - NUMBER ; NEWLINE NUMBER M10 ; - NUMBER ; - NUMBER ; - NUMBER ; - NUMBER ;", "NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE . . . NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", ">> > mimetypes . guess_type ( STRING ) NEWLINE ( STRING , None )", ">> > from collections import OrderedDict NEWLINE >> > OrderedDict ( sorted ( yourdict . items ( ) , key = lambda VAR : int ( VAR [ NUMBER ] . split ( ) [ NUMBER ] ) ) ) NEWLINE OrderedDict ( [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] )", "AM h NUMBER C NUMBER in NUMBER ok", ">> > VAR = pd . DataFrame ( a ) NEWLINE >> > VAR . groupby ( NUMBER , sort = False , as_index = False ) . sum ( ) . values NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = [ ] NEWLINE VAR = NUMBER NEWLINE for VAR in glob . glob ( STRING ) : NEWLINE VAR = open ( VAR , STRING ) NEWLINE VAR = json . load ( VAR ) NEWLINE VAR . close ( ) NEWLINE VAR = VAR [ STRING ] [ STRING ] NEWLINE VAR = nltk . wordpunct_tokenize ( VAR ) NEWLINE VAR = [ VAR . lower ( ) for VAR in VAR ] NEWLINE VAR = [ VAR for VAR in VAR if VAR not in stop ] NEWLINE VAR . append ( [ VAR , VAR ] ) NEWLINE VAR += NUMBER NEWLINE print VAR", ">> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = VAR = { . . . NUMBER : STRING , . . . NUMBER : STRING , . . . NUMBER : STRING , . . . NUMBER : STRING , . . . NUMBER : STRING , . . . NUMBER : STRING . . . }", ">> > VAR = STRING NEWLINE >> > chr ( int ( VAR [ NUMBER : ] , NUMBER ) ) NEWLINE STRING", "VAR = sorted ( VAR , key = lambda VAR : int ( VAR [ NUMBER ] ) )", "import scipy . interpolate as interp NEWLINE VAR = NUMBER NEWLINE VAR = [ slice ( None , None , VAR ) , slice ( None , None , VAR ) ] NEWLINE VAR , VAR , VAR = X [ VAR ] , Y [ VAR ] , Z [ VAR ] NEWLINE VAR = interp . griddata ( np . array ( [ VAR . ravel ( ) , VAR . ravel ( ) ] ) . T , VAR . ravel ( ) , ( X , Y ) , method = STRING ) NEWLINE plt . figure ( ) NEWLINE VAR = plt . contour ( X , Y , VAR , colors = STRING , linewidths = NUMBER , levels = levels )", "VAR = set ( ) NEWLINE VAR . add ( a . node ) NEWLINE VAR . add ( b . node )", "from contextlib import contextmanager NEWLINE @ contextmanager NEWLINE def flag_regexen ( VAR ) : NEWLINE import re NEWLINE re . my_compile = re . compile NEWLINE re . compile = lambda VAR , VAR : re . my_compile ( VAR , VAR | VAR ) NEWLINE yield NEWLINE re . compile = re . my_compile", "VAR = STRING NEWLINE VAR = doc . xpath ( VAR , key = STRING ) [ NUMBER ]", "[ [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] ]", "% timeit ( ( my_array [ : - NUMBER ] * my_array [ NUMBER : ] ) < NUMBER ) . sum ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "from kivy . lang import Builder NEWLINE from kivy . uix . boxlayout import BoxLayout NEWLINE from kivy . base import runTouchApp NEWLINE Builder . load_string ( STRING ) NEWLINE class MyWidget ( BoxLayout ) : pass NEWLINE runTouchApp ( MyWidget ( ) )", "VAR = np . hstack ( ( a , b ) ) NEWLINE VAR = np . argsort ( VAR ) NEWLINE VAR = np . hstack ( ( np . zeros_like ( a ) , np . ones_like ( b ) ) ) [ VAR ] NEWLINE VAR [ VAR ] [ np . concatenate ( ( [ True ] , VAR [ NUMBER : ] != VAR [ : - NUMBER ] ) ) ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "Name : JOHN W . WOODS NEWLINE Chairman , President , & Chief Executive Officer of AmSouth & AmSouth Bank N . A . NEWLINE Name : C . STANLEY . . .", "class UserReferralProfile ( models . Model ) : NEWLINE VAR = models . OneToOneField ( User , related_name = STRING ) NEWLINE VAR = models . CharField ( )", "$ Script . py file1 bob = NUMBER sue = NUMBER ben = NUMBER NEWLINE file1 NEWLINE { STRING : STRING , STRING : STRING , STRING : STRING }", "sns . factorplot ( STRING , STRING , hue = STRING , kind = STRING , data = df [ df . isin ( { STRING : [ STRING , STRING ] } ) . any ( NUMBER ) ] )", "VAR = NUMBER NEWLINE VAR = [ reso_names [ VAR : VAR + VAR ] for VAR in range ( NUMBER , len ( reso_names ) , VAR ) ] NEWLINE VAR = [ reso_values [ VAR : VAR + VAR ] for VAR in range ( NUMBER , len ( reso_values ) , VAR ) ]", "VAR = open ( STRING , STRING ) NEWLINE VAR = json . load ( self . VAR ) NEWLINE VAR . close ( )", "def swap ( VAR ) : NEWLINE STRING NEWLINE return ( VAR [ NUMBER ] , NUMBER ) NEWLINE def filter_source ( VAR ) : NEWLINE STRING NEWLINE return VAR [ NUMBER ] [ NUMBER ] < VAR [ NUMBER ] [ NUMBER ] NEWLINE def reshape ( VAR ) : NEWLINE STRING NEWLINE ( ( VAR , VAR ) , VAR ) = VAR NEWLINE return ( VAR , ( VAR , VAR ) )", "with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . readlines ( ) NEWLINE for VAR , VAR in enumerate ( VAR , start = NUMBER ) : NEWLINE if VAR . strip ( ) == STRING : NEWLINE print VAR", "import pickle NEWLINE def update ( ) : NEWLINE VAR = pickle . load ( open ( STRING , STRING ) ) NEWLINE pickle . dump ( VAR , open ( STRING , STRING ) )", "def can_be_represented ( VAR , VAR ) : NEWLINE VAR = Fraction ( VAR , VAR ) NEWLINE return VAR . denominator & ( VAR . denominator - NUMBER ) == NUMBER", "def isprime ( VAR ) : NEWLINE if VAR % NUMBER != NUMBER : NEWLINE return True NEWLINE else : NEWLINE for VAR in range ( NUMBER , math . ceil ( math . sqrt ( VAR ) ) ) : NEWLINE if VAR % VAR != NUMBER : NEWLINE return False NEWLINE return True", "VAR = STRING + STRING + STRING + STRING + STRING", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if STRING in VAR . split ( STRING ) : NEWLINE VAR . append ( VAR ) NEWLINE elif STRING in VAR . split ( STRING ) : NEWLINE VAR . append ( VAR )", "re . search ( STRING , html_template )", "var data = { } ; NEWLINE var names_to_pack = [ STRING , STRING ] NEWLINE $ ( form ) . find ( STRING ) . each ( function ( i , x ) { var name = $ ( x ) . attr ( STRING ) if ( names_to_pack . indexOf ( name ) != - NUMBER ) { if ( ! data . packed ) { data . packed = { } ; } data [ STRING ] [ name ] = $ ( x ) . val ( ) ; } else { data [ name ] = $ ( x ) . val ( ) ; } } ) ; NEWLINE $ . post ( STRING , data ) ;", "python . / local_lib / bin / run . py - t $ Test_Name - b - c - no_compile - no_wlf", "def line_pre_adder ( VAR , VAR ) : NEWLINE VAR = fileinput . input ( VAR , inplace = NUMBER ) NEWLINE for VAR in VAR : NEWLINE if VAR . isfirstline ( ) : NEWLINE print VAR . rstrip ( STRING ) + STRING + VAR , NEWLINE else : NEWLINE print VAR ,", "df . loc [ df . DEFAULT , special ] = default NEWLINE df NEWLINE Out [ NUMBER ] : NEWLINE A B C D E F G NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE H I J DEFAULT NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER True NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER True NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER True NEWLINE NUMBER NUMBER NUMBER NUMBER True NEWLINE NUMBER NUMBER NUMBER NUMBER False", "import numpy as np NEWLINE from scipy . spatial import ConvexHull NEWLINE VAR = np . random . rand ( NUMBER , NUMBER ) NEWLINE VAR = ConvexHull ( VAR ) NEWLINE VAR = np . mean ( VAR . VAR [ VAR . vertices , NUMBER ] ) NEWLINE VAR = np . mean ( VAR . VAR [ VAR . vertices , NUMBER ] )", "def dict_function ( self ) : NEWLINE return { STRING : STRING STRING : STRING STRING : STRING }", "$ cat input . csv | . / reorder", "from BeautifulSoup import BeautifulSoup NEWLINE VAR = ( STRING STRING STRING STRING STRING STRING STRING STRING STRING ) NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = [ VAR . find ( STRING ) for VAR in VAR . findAll ( STRING , { STRING : STRING } ) ] NEWLINE for VAR in VAR : NEWLINE print VAR . string", "away date event home NEWLINE NUMBER Salzburg NUMBER Apr NUMBER Play Offs Vienna Capitals NEWLINE NUMBER Vienna Capitals NUMBER Apr NUMBER Play Offs Salzburg NEWLINE NUMBER Salzburg NUMBER Apr NUMBER Play Offs Vienna Capitals NEWLINE NUMBER Vienna Capitals NUMBER Apr NUMBER Play Offs Salzburg NEWLINE NUMBER Vienna Capitals NUMBER Mar NUMBER Play Offs Liwest Linz NEWLINE NUMBER Salzburg NUMBER Mar NUMBER Play Offs Klagenfurt NEWLINE NUMBER Liwest Linz NUMBER Mar NUMBER Play Offs Vienna Capitals NEWLINE NUMBER Klagenfurt NUMBER Mar NUMBER Play Offs Salzburg NEWLINE NUMBER Vienna Capitals NUMBER Mar NUMBER Play Offs Liwest Linz NEWLINE NUMBER Liwest Linz NUMBER Mar NUMBER Play Offs Vienna Capitals NEWLINE NUMBER Salzburg NUMBER Mar NUMBER Play Offs Klagenfurt NEWLINE NUMBER Klagenfurt NUMBER Mar NUMBER Play Offs Salzburg NEWLINE NUMBER Vienna Capitals NUMBER Mar NUMBER Play Offs Liwest Linz NEWLINE NUMBER Bolzano NUMBER Mar NUMBER Play Offs Liwest Linz NEWLINE NUMBER Fehervar AV19 NUMBER Mar NUMBER Play Offs Vienna Capitals NEWLINE NUMBER Liwest Linz NUMBER Mar NUMBER Play Offs Bolzano NEWLINE NUMBER Vienna Capitals NUMBER Mar NUMBER Play Offs Fehervar AV19 NEWLINE NUMBER Villach NUMBER Mar NUMBER Play Offs Salzburg NEWLINE NUMBER Klagenfurt NUMBER Mar NUMBER Play Offs Znojmo NEWLINE NUMBER Bolzano NUMBER Mar NUMBER Play Offs Liwest Linz NEWLINE NUMBER Liwest Linz NUMBER Mar NUMBER Play Offs Bolzano NEWLINE NUMBER Fehervar AV19 NUMBER Mar NUMBER Play Offs Vienna Capitals NEWLINE NUMBER Znojmo NUMBER Mar NUMBER Play Offs Klagenfurt NEWLINE NUMBER Salzburg NUMBER Mar NUMBER Play Offs Villach NEWLINE NUMBER Klagenfurt NUMBER Mar NUMBER Play Offs Znojmo NEWLINE NUMBER Vienna Capitals NUMBER Mar NUMBER Play Offs Fehervar AV19 NEWLINE NUMBER Bolzano NUMBER Mar NUMBER Play Offs Liwest Linz NEWLINE NUMBER Villach NUMBER Mar NUMBER Play Offs Salzburg NEWLINE NUMBER Liwest Linz NUMBER NUMBER Mar NUMBER Play Offs Bolzano NEWLINE NUMBER Znojmo NUMBER NUMBER Mar NUMBER Play Offs Klagenfurt NEWLINE . . . . . . . . . . . . . . NEWLINE NUMBER TWK Innsbruck NUMBER Sep NUMBER Not specified Znojmo NEWLINE NUMBER Liwest Linz NUMBER Sep NUMBER Not specified Dornbirn NEWLINE NUMBER Bolzano NUMBER Sep NUMBER Not specified Graz NUMBER ers NEWLINE NUMBER Klagenfurt NUMBER Sep NUMBER Not specified Olimpija Ljubljana NEWLINE NUMBER Fehervar AV19 NUMBER Sep NUMBER Not specified Salzburg NEWLINE NUMBER TWK Innsbruck NUMBER Sep NUMBER Not specified Vienna Capitals NEWLINE NUMBER Villach NUMBER Sep NUMBER Not specified Znojmo NEWLINE NUMBER Salzburg NUMBER Sep NUMBER Not specified Olimpija Ljubljana NEWLINE NUMBER Dornbirn NUMBER Sep NUMBER Not specified TWK Innsbruck NEWLINE NUMBER Graz NUMBER ers NUMBER Sep NUMBER Not specified Klagenfurt NEWLINE NUMBER Vienna Capitals NUMBER Sep NUMBER Not specified Villach NEWLINE NUMBER Fehervar AV19 NUMBER Sep NUMBER Not specified Bolzano NEWLINE NUMBER Dornbirn NUMBER Sep NUMBER Not specified Bolzano NEWLINE NUMBER Villach NUMBER Sep NUMBER Not specified Graz NUMBER ers NEWLINE NUMBER Znojmo NUMBER Sep NUMBER Not specified Klagenfurt NEWLINE NUMBER Olimpija Ljubljana NUMBER Sep NUMBER Not specified Liwest Linz NEWLINE NUMBER Fehervar AV19 NUMBER Sep NUMBER Not specified TWK Innsbruck NEWLINE NUMBER Salzburg NUMBER Sep NUMBER Not specified Vienna Capitals NEWLINE NUMBER Villach NUMBER Sep NUMBER Not specified Klagenfurt NEWLINE NUMBER Liwest Linz NUMBER Sep NUMBER Not specified Dornbirn NEWLINE NUMBER Vienna Capitals NUMBER Sep NUMBER Not specified Fehervar AV19 NEWLINE NUMBER TWK Innsbruck NUMBER Sep NUMBER Not specified Salzburg NEWLINE NUMBER Graz NUMBER ers NUMBER Sep NUMBER Not specified Znojmo NEWLINE NUMBER Olimpija Ljubljana NUMBER Sep NUMBER Not specified Dornbirn NEWLINE NUMBER Bolzano NUMBER Sep NUMBER Not specified Fehervar AV19 NEWLINE NUMBER Klagenfurt NUMBER Sep NUMBER Not specified Graz NUMBER ers NEWLINE NUMBER Znojmo NUMBER Sep NUMBER Not specified Salzburg NEWLINE NUMBER Olimpija Ljubljana NUMBER Sep NUMBER Not specified TWK Innsbruck NEWLINE NUMBER Bolzano NUMBER Sep NUMBER Not specified Vienna Capitals NEWLINE NUMBER Liwest Linz NUMBER Sep NUMBER Not specified Villach NEWLINE [ NUMBER rows x NUMBER columns ]", "with open ( STRING , STRING ) as out : NEWLINE print ( test_str . encode ( STRING ) . decode ( STRING ) , file = out )", "< ? xml version = STRING encoding = STRING ? > NEWLINE < openerp > NEWLINE < data > NEWLINE < template id = STRING name = STRING inherit_id = STRING > NEWLINE < xpath expr = STRING position = STRING > NEWLINE . . . NEWLINE < ! - - The new line - - > NEWLINE < script type = STRING src = STRING > < / script > NEWLINE . . . NEWLINE < / xpath > NEWLINE < / template > NEWLINE < / data > NEWLINE < / openerp >", ">> > D NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "import subprocess NEWLINE subprocess . call ( STRING , shell = True )", "VAR = re . search ( STRING , VAR ) . start ( ) NEWLINE VAR = VAR [ : VAR ] + STRING + VAR [ VAR : ]", "VAR = STRING STRING STRING STRING STRING STRING NEWLINE VAR = [ STRING , STRING , STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE VAR = VAR . split ( STRING ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE else : NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE VAR = VAR [ VAR * NUMBER : ( VAR + NUMBER ) * NUMBER ] NEWLINE print ( STRING % ( VAR , VAR , VAR ) )", "class Computations ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE def __get__ ( VAR , VAR , VAR ) : NEWLINE if VAR is None : NEWLINE print ( STRING ) NEWLINE return VAR NEWLINE else : NEWLINE print ( STRING ) NEWLINE return VAR . __dict__ [ VAR . VAR ] NEWLINE def __set__ ( VAR , VAR , VAR ) : NEWLINE if hasattr ( VAR , VAR . VAR + STRING ) : NEWLINE raise ValueError ( STRING . format ( VAR . VAR [ NUMBER : ] ) ) NEWLINE if isinstance ( VAR , int ) : NEWLINE raise RuntimeError ( STRING ) NEWLINE else : NEWLINE VAR . __dict__ [ VAR . VAR ] = VAR NEWLINE setattr ( VAR , VAR . VAR + STRING , True )", "NUMBER We ' ve encountered no one . NEWLINE NUMBER We ' ve encountered Knight of Ni . NEWLINE NUMBER We ' ve encountered French . NEWLINE NUMBER We ' ve found the Grail !", "VAR = BeautifulSoup ( text ) . find ( STRING , text = STRING ) . parent . findNext ( STRING ) . contents [ NUMBER ]", "transactional . reset_index ( inplace = True , drop = True )", ">> > class C ( object ) : NEWLINE . . . def __init__ ( VAR , VAR ) : NEWLINE . . . VAR . VAR = VAR NEWLINE . . . def __iter__ ( VAR ) : NEWLINE . . . return iter ( VAR . VAR ) NEWLINE . . . NEWLINE >> > def f ( VAR , VAR , VAR ) : NEWLINE . . . print STRING , VAR , VAR , VAR NEWLINE . . . NEWLINE >> > VAR = C ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > f ( * VAR ) NEWLINE Arguments : NUMBER NUMBER NUMBER NEWLINE >> >", "def knightofni ( VAR ) : NEWLINE VAR . number = NUMBER NEWLINE VAR . who = STRING NEWLINE def frenchman ( VAR ) : NEWLINE VAR . number = NUMBER NEWLINE VAR . who = STRING", "@ echo off NEWLINE python xdir . py % * > % TEMP % \\ __xdir . cmd NEWLINE call % TEMP % \\ __xdir . cmd", "deltas [ ( deltas < NUMBER ) | ( deltas > NUMBER ) ] = NUMBER", "print ( [ VAR . __name__ for VAR in vars ( ) [ STRING ] . __subclasses__ ( ) ] ) NEWLINE", "Retrieving var STRING NEWLINE ( STRING , < attribute STRING of STRING objects > ) NEWLINE ( STRING , < __main__ . RevealAccess object at NUMBER > )", "OLS Regression Results NEWLINE == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == NEWLINE Dep . Variable : a R - squared : NUMBER NEWLINE Model : OLS Adj . R - squared : NUMBER NEWLINE Method : Least Squares F - statistic : NUMBER NEWLINE Date : Sun , NUMBER Mar NUMBER Prob ( F - statistic ) : NUMBER NEWLINE Time : NUMBER : NUMBER : NUMBER Log - Likelihood : NUMBER NEWLINE No . Observations : NUMBER AIC : - NUMBER NEWLINE Df Residuals : NUMBER BIC : - NUMBER NEWLINE Df Model : NUMBER NEWLINE Covariance Type : nonrobust NEWLINE == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == NEWLINE coef std err t P > | t | [ NUMBER % Conf . Int . ] NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE Intercept - NUMBER NUMBER - NUMBER NUMBER - NUMBER - NUMBER NEWLINE b NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE c - NUMBER NUMBER - NUMBER NUMBER - NUMBER - NUMBER NEWLINE blue NUMBER NUMBER NUMBER NUMBER - NUMBER NUMBER NEWLINE orange NUMBER NUMBER NUMBER NUMBER - NUMBER NUMBER NEWLINE red NUMBER NUMBER NUMBER NUMBER - NUMBER NUMBER NEWLINE == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == NEWLINE Omnibus : nan Durbin - Watson : NUMBER NEWLINE Prob ( Omnibus ) : nan Jarque - Bera ( JB ) : NUMBER NEWLINE Skew : NUMBER Prob ( JB ) : NUMBER NEWLINE Kurtosis : NUMBER Cond . No . NUMBER NEWLINE == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == NEWLINE Warnings : NEWLINE [ NUMBER ] Standard Errors assume that the covariance matrix of the errors is correctly specified .", "main : NEWLINE directory : NEWLINE options : NEWLINE directive : options NEWLINE item : NEWLINE options : Stuff OtherStuff MoreStuff NEWLINE directoryindex : NEWLINE item : NEWLINE directoryindex : stuff . htm otherstuff . htm morestuff . html NEWLINE fileetag : NEWLINE item : NEWLINE fileetag : Stuff NEWLINE keepalive : NEWLINE item : NEWLINE keepalive : Stuff NEWLINE keepalivetimeout : NEWLINE item : NEWLINE keepalivetimeout : NUMBER", "print_table ( )", "NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER : NUMBER : NUMBER", "if isinstance ( obj , basestring ) : NEWLINE i_am_string ( obj )", "from tempfile import NamedTemporaryFile NEWLINE from shutil import copyfileobj NEWLINE from os import remove NEWLINE VAR = NamedTemporaryFile ( mode = STRING , suffix = STRING ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE copyfileobj ( VAR , VAR ) NEWLINE VAR . close ( ) NEWLINE remove ( STRING ) NEWLINE VAR . seek ( NUMBER , NUMBER )", "$ . / threads_input . py NEWLINE Interrupting text ! NEWLINE Interrupting text ! NEWLINE Interrupting text ! NEWLINE > WELL , PRINCE , Genoa and Lucca are now no more than private estates of the Bo NEWLINE Interrupting text ! NEWLINE > WELL , PRINCE , Genoa and Lucca are now no more than private estates of the Bo NEWLINE naparte family . No , I warn you , that if you do not tell me we are at war ,", "$ python - m timeit - s STRING STRING NEWLINE NUMBER loops , best of NUMBER : NUMBER usec per loop", "STRING", "df . apply ( lambda VAR : int ( ids [ VAR . UsedFName , VAR . UsedLName ] ) , axis = NUMBER )", "{ STRING : None , STRING : True , STRING : True }", "In [ NUMBER ] : from bs4 import BeautifulSoup NEWLINE In [ NUMBER ] : VAR = STRING NEWLINE In [ NUMBER ] : VAR = BeautifulSoup ( VAR ) NEWLINE In [ NUMBER ] : [ VAR . next_sibling for VAR in VAR . findAll ( STRING ) ] NEWLINE Out [ NUMBER ] : [ STRING , STRING ]", "def temp ( VAR ) : NEWLINE VAR = df2 [ ( ( VAR - df2 ) . abs ( ) < NUMBER ) . all ( axis = NUMBER ) ] . VAR NEWLINE return df2 . loc [ VAR [ NUMBER ] , : ] if len ( VAR ) else [ None ] * df2 . shape [ NUMBER ]", "subprocess . call ( [ STRING , STRING ] , stdout = open ( STRING , STRING ) )", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = sum ( [ VAR [ VAR ] == VAR [ VAR + NUMBER ] for VAR in range ( len ( VAR ) - NUMBER ) ] ) NEWLINE >> > VAR NEWLINE NUMBER", "def f ( VAR ) : NEWLINE return VAR in [ STRING , STRING , STRING ]", "def to_nested_dict ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE VAR [ VAR ] = { } NEWLINE for VAR , VAR in VAR : NEWLINE VAR [ VAR ] . setdefault ( VAR , [ ] ) . append ( VAR ) NEWLINE return VAR", "import itertools NEWLINE VAR = [ VAR for VAR in itertools . islice ( e , NUMBER , None , NUMBER ) ] NEWLINE VAR = [ VAR for VAR in itertools . islice ( e , NUMBER , None , NUMBER ) ] NEWLINE VAR = [ VAR for VAR in itertools . islice ( e , NUMBER , None , NUMBER ) ]", "import datetime NEWLINE def get_start_of_previous_month ( VAR ) : NEWLINE STRING NEWLINE VAR = VAR . date ( ) . replace ( day = NUMBER ) - datetime . timedelta ( days = NUMBER ) NEWLINE return datetime . datetime . combine ( VAR . replace ( day = NUMBER ) , datetime . time . min )", "import json NEWLINE from urllib import urlopen NEWLINE VAR = urlopen ( STRING . format ( getname , temp_type ) ) . read ( ) NEWLINE VAR = json . loads ( VAR ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE json . dump ( VAR , self . VAR , indent = NUMBER ) NEWLINE VAR . close ( )", "[ [ NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER ] ]", "from django . db . models import Count NEWLINE VAR = User . objects . annotate ( num_followers = Count ( STRING ) ) . order_by ( STRING )", ">> > from itertools import permutations NEWLINE >> > VAR = { ( NUMBER , NUMBER , NUMBER ) : STRING , ( NUMBER , NUMBER , NUMBER ) : STRING } NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > print any ( tuple ( VAR ) in VAR for VAR in permutations ( VAR ) ) NEWLINE True NEWLINE >> > VAR = { frozenset ( [ NUMBER , NUMBER , NUMBER ] ) : STRING , frozenset ( [ NUMBER , NUMBER , NUMBER ] ) : STRING } NEWLINE >> > frozenset ( VAR ) in VAR NEWLINE True NEWLINE >> > frozenset ( [ NUMBER , NUMBER ] ) in VAR NEWLINE False", "VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE for VAR , VAR in enumerate ( VAR , start = NUMBER ) : NEWLINE if VAR [ NUMBER ] < VAR <= VAR [ NUMBER ] : NEWLINE VAR . append ( VAR ) NEWLINE break NEWLINE else : NEWLINE raise ValueError ( STRING . format ( VAR ) )", ">> > VAR = re . compile ( STRING ) NEWLINE >> > VAR = STRING NEWLINE >> > VAR . match ( VAR ) . groups ( ) NEWLINE ( STRING , STRING , STRING , STRING ) NEWLINE >> > VAR = STRING NEWLINE >> > VAR . match ( VAR ) . groups ( ) NEWLINE ( STRING , STRING , STRING , STRING ) NEWLINE >> > VAR = STRING NEWLINE >> > VAR . match ( VAR ) . groups ( ) NEWLINE ( STRING , STRING , STRING , STRING ) NEWLINE >> >", "NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER us per loop NEWLINE NUMBER levels , NUMBER values : NUMBER ms per loop", "import os NEWLINE import time NEWLINE STRING NEWLINE def isFileBeingWrittenInto ( VAR , VAR = NUMBER , VAR = NUMBER ) : NEWLINE VAR = NUMBER + float ( VAR ) / NUMBER NEWLINE VAR = VAR * VAR NEWLINE VAR = os . stat ( VAR ) . st_mtime NEWLINE time . sleep ( VAR ) NEWLINE VAR = os . stat ( VAR ) . st_mtime NEWLINE if NUMBER < ( VAR - VAR ) <= VAR : NEWLINE return True NEWLINE else : NEWLINE return False NEWLINE if not isFileBeingWrittenInto ( STRING ) : NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . close ( )", "VAR = [ ] NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE for VAR in ( VAR . split ( ) for VAR in VAR ) : NEWLINE VAR [ NUMBER : ] = [ float ( VAR ) for VAR in VAR [ NUMBER : ] ] NEWLINE VAR . append ( VAR )", "% timeit a = pd . expanding_apply ( dataset , rollingsum ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "from django . db . models . signals import post_save NEWLINE from django . contrib . auth import User NEWLINE from myUserProfileApp import UserProfile NEWLINE def make_user_profile ( VAR , ** kwargs ) : NEWLINE if STRING not in kwargs or not kwargs [ STRING ] : NEWLINE return NEWLINE VAR = UserProfile ( user = kwargs [ STRING ] ) NEWLINE VAR . save ( ) NEWLINE post_save . connect ( make_user_profile , VAR = User , weak = False )", "A1 NEWLINE A2 NEWLINE B1 NEWLINE B2 NEWLINE A3 NEWLINE A4", "[ STRING , STRING , STRING , STRING , STRING ]", "VAR = ET . parse ( STRING ) NEWLINE VAR = VAR . getroot ( ) NEWLINE for VAR in VAR : NEWLINE if VAR . attrib [ STRING ] == str ( hex ( int ( major_bits [ : : - NUMBER ] , NUMBER ) ) ) and VAR . attrib [ STRING ] == str ( hex ( int ( minor_bits [ : : - NUMBER ] , NUMBER ) ) ) : NEWLINE VAR = str ( VAR . attrib [ STRING ] ) NEWLINE for VAR in VAR . getchildren ( ) : NEWLINE print str ( VAR . attrib [ STRING ] ) NEWLINE print str ( VAR . attrib [ STRING ] )", "pd . concat ( [ get_sumdf ( VAR ) for VAR in areas_tabs ] )", ">> > parseTags ( STRING ) NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "from functools import singledispatch NEWLINE @ singledispatch NEWLINE def bar ( VAR ) : NEWLINE pass NEWLINE @ bar . register ( RDD ) NEWLINE def _ ( VAR ) : NEWLINE return STRING NEWLINE @ bar . register ( DataFrame ) NEWLINE def _ ( VAR ) : NEWLINE return STRING NEWLINE bar ( sc . parallelize ( [ ] ) ) NEWLINE bar ( sc . parallelize ( [ ( STRING , NUMBER ) ] ) . toDF ( ) ) NEWLINE", "VAR = root . xpath ( STRING )", "VAR = [ [ STRING ] , [ STRING ] , [ STRING ] ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE for VAR , VAR in zip ( VAR , VAR ) : NEWLINE print ( STRING . format ( VAR [ NUMBER ] , VAR ) )", "from django . db . models import get_app , get_models NEWLINE VAR = get_app ( STRING ) NEWLINE for VAR in get_models ( VAR ) : NEWLINE", "import inspect NEWLINE def decorate_all_methods ( VAR ) : NEWLINE def apply_decorator ( VAR ) : NEWLINE for VAR , VAR in VAR . __dict__ . items ( ) : NEWLINE if inspect . isfunction ( VAR ) : NEWLINE setattr ( VAR , VAR , VAR ( VAR ) ) NEWLINE return VAR NEWLINE return apply_decorator", "fred NEWLINE wilma", "from itertools import chain NEWLINE from functools import reduce NEWLINE from pyspark . sql . types import StructType NEWLINE from pyspark . sql . functions import col , lit , max NEWLINE from pyspark . sql import DataFrame NEWLINE VAR = sc . parallelize ( [ ( STRING , NUMBER , NUMBER ) , ( STRING , NUMBER , NUMBER ) ] ) . toDF ( [ STRING , STRING , STRING ] ) NEWLINE VAR = sc . parallelize ( [ ( STRING , NUMBER , NUMBER , NUMBER ) ] ) . toDF ( [ STRING , STRING , STRING , STRING ] ) NEWLINE VAR = sc . parallelize ( [ ( STRING , NUMBER ) ] ) . toDF ( [ STRING , STRING ] ) NEWLINE VAR = [ VAR , VAR , VAR ]", ">> > import base64 NEWLINE >> > VAR = STRING NEWLINE >> > STRING . join ( base64 . b64decode ( VAR [ VAR : VAR + NUMBER ] ) for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) ) NEWLINE STRING", "self . filterActive = False", "spl [ NUMBER ] = spl [ NUMBER ] . replace ( STRING , STRING )", ">> > import logging NEWLINE >> > logging . basicConfig ( datefmt = STRING , format = STRING ) NEWLINE >> > logging . warn ( STRING ) NEWLINE Log Created : Monday NUMBER , July NUMBER NUMBER NUMBER : NUMBER : NUMBER PM BST Foo bar baz !", "[ ( STRING , [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] ) , ( STRING , [ ( STRING , NUMBER ) , ( STRING , NUMBER ) ] ) ]", ">> > NEWLINE True NEWLINE C : \\ Users \\ NUMBER \\ Desktop \\ Python \\ print . py NEWLINE >> >", "import requests NEWLINE import json NEWLINE try : NEWLINE from packaging . VAR import parse NEWLINE except ImportError : NEWLINE from pip . _vendor . packaging . VAR import parse NEWLINE VAR = STRING NEWLINE def get_version ( VAR , VAR = VAR ) : NEWLINE STRING NEWLINE VAR = requests . get ( VAR . format ( VAR = VAR ) ) NEWLINE VAR = parse ( STRING ) NEWLINE if VAR . status_code == requests . codes . ok : NEWLINE VAR = json . loads ( VAR . text . encode ( VAR . encoding ) ) NEWLINE if STRING in VAR : NEWLINE VAR = VAR [ STRING ] NEWLINE for VAR in VAR : NEWLINE VAR = parse ( VAR ) NEWLINE if not VAR . is_prerelease : NEWLINE VAR = max ( VAR , VAR ) NEWLINE return VAR NEWLINE if __name__ == STRING : NEWLINE print STRING % get_version ( STRING )", "VAR = df . groupby ( [ STRING , STRING ] ) . id . apply ( lambda VAR : list ( VAR ) [ - NUMBER ] )", "name link NEWLINE NUMBER Name NUMBER link0 NEWLINE NUMBER Name NUMBER link1 NEWLINE NUMBER Name NUMBER link2 NEWLINE NUMBER Name NUMBER link3 NEWLINE NUMBER Name NUMBER link4 NEWLINE NUMBER Name NUMBER link5 NEWLINE NUMBER Name NUMBER link6 NEWLINE NUMBER Name NUMBER link7 NEWLINE NUMBER Name NUMBER link8 NEWLINE NUMBER Name NUMBER link9 NEWLINE NUMBER Name NUMBER link10 NEWLINE NUMBER Name NUMBER link11 NEWLINE NUMBER Name NUMBER link12 NEWLINE NUMBER Name NUMBER link13 NEWLINE NUMBER Name NUMBER link14 NEWLINE NUMBER Name NUMBER link15 NEWLINE NUMBER Name NUMBER link16 NEWLINE NUMBER Name NUMBER link17 NEWLINE NUMBER Name NUMBER link18 NEWLINE NUMBER Name NUMBER link19", "import unicodedata NEWLINE import sys NEWLINE VAR = dict . fromkeys ( VAR for VAR in xrange ( sys . maxunicode ) if unicodedata . category ( unichr ( VAR ) ) . startswith ( STRING ) ) NEWLINE def remove_punctuation ( VAR ) : NEWLINE return VAR . translate ( VAR )", "{ % for VAR in entries % } NEWLINE < td > { { VAR . datadesc } } < / td > NEWLINE < td > < table > NEWLINE { % for VAR in VAR . entryfile_set . all % } NEWLINE < td > { { VAR . datafile . name | split : STRING | last } } < / td > NEWLINE < td > { { VAR . datafile . size | filesizeformat } } < / td > NEWLINE < td > < a href = STRING > download < / a > < / td > NEWLINE < td > < a href = STRING > delete < / a > < / td > NEWLINE { % endfor % } NEWLINE < / table > < / td > NEWLINE { % endfor % }", "def VAR ( VAR , VAR ) : NEWLINE return any ( VAR in VAR for VAR in VAR )", "VAR = declarative_base ( ) NEWLINE class Something ( VAR ) : NEWLINE pass NEWLINE def initialize ( VAR ) : NEWLINE Something . __table__ = Table ( STRING , VAR . metadata , autoload_with = VAR )", "from lxml import etree NEWLINE VAR = STRING NEWLINE VAR = etree . fromstring ( VAR ) NEWLINE print VAR . xpath ( STRING )", "VAR = datetime ( year , month , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , tz ) ; NEWLINE VAR = ( month % NUMBER ) + NUMBER NEWLINE VAR = datetime ( year , VAR , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , tz ) NEWLINE models . InOut . objects . filter ( ( Q ( in_dt__gte = VAR ) and Q ( in_dt__lt = VAR ) ) | ( Q ( out_dt__gte = VAR ) and Q ( out_dt__lt = VAR ) ) ) . annotate ( VAR = Func ( F ( STRING ) , VAR , function = STRING ) , VAR = Func ( F ( STRING ) , month_end , function = STRING ) ) . aggregate ( worked = Sum ( F ( STRING ) - F ( STRING ) )", "def powerprod ( VAR ) : NEWLINE VAR = list ( VAR ) NEWLINE for VAR in itertools . count ( NUMBER ) : NEWLINE for VAR in itertools . product ( VAR , repeat = VAR ) : NEWLINE yield VAR", "VAR = np . loadtxt ( STRING , dtype = float , delimiter = STRING )", "print df . groupby ( [ STRING , STRING ] ) . size ( ) NEWLINE Type Name NEWLINE Bird Flappy Bird NUMBER NEWLINE Pigeon NUMBER NEWLINE Pokemon Jerry NUMBER NEWLINE Mudkip NUMBER", ">> > for VAR in extract_urls ( STRING ) : NEWLINE . . . print VAR NEWLINE http : // foo . bar / NEWLINE irc : // freenode . org", "sudo ln - s / usr / bin / python / usr / local / bin / python", "VAR = { : id = > NUMBER , : location = > { : address = > { : line1 = > STRING } } , : website = > STRING } NEWLINE def deconvert ( record ) NEWLINE VAR = { } NEWLINE record . each do | key , value | NEWLINE if value . is_a ? Hash NEWLINE VAR . merge ! ( deconvert ( value ) ) NEWLINE else NEWLINE VAR . merge ! ( key = > value ) NEWLINE end NEWLINE end NEWLINE VAR NEWLINE end NEWLINE puts deconvert VAR NEWLINE", ">> > VAR = [ [ STRING , STRING , STRING , STRING ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > list ( zip ( * VAR ) ) NEWLINE [ ( STRING , NUMBER , NUMBER ) , ( STRING , NUMBER , NUMBER ) , ( STRING , NUMBER , NUMBER ) , ( STRING , NUMBER , NUMBER ) ]", "for VAR in sortednames : NEWLINE VAR = dictUsers [ VAR ] NEWLINE print ( STRING + VAR ) NEWLINE print ( STRING + VAR . age ) NEWLINE print ( STRING + VAR . address ) NEWLINE print ( STRING + VAR . phone )", "import codecs NEWLINE import json NEWLINE with codecs . open ( STRING , STRING , encoding = STRING ) as VAR : NEWLINE VAR . write ( json . dumps ( { STRING : STRING } , ensure_ascii = False ) + STRING ) NEWLINE $ cat tmp . json NEWLINE { STRING : STRING }", "VAR = NUMBER NEWLINE VAR in a NEWLINE VAR in b", "[ { STRING : STRING , STRING : [ NUMBER , NUMBER , NUMBER ] } , { STRING : STRING , STRING : [ NUMBER , NUMBER , NUMBER ] } ]", "Profile . objects . all ( ) . count ( )", "VAR = sorted ( data , key = lambda VAR : VAR [ NUMBER ] )", "VAR = re . sub ( STRING , STRING , inputstring )", "VAR = NUMBER NEWLINE for VAR , VAR in month_dictionary . iteritems ( ) : NEWLINE VAR += VAR NEWLINE month_dictionary [ VAR ] = VAR", "library ( intervals ) NEWLINE f < - function ( dd ) with ( dd , { r < - reduce ( Intervals ( cbind ( VAR , VAR ) ) ) data . frame ( username = username [ NUMBER ] , VAR = VAR [ NUMBER ] , VAR = structure ( r [ , NUMBER ] , class = class ( VAR ) ) , VAR = structure ( r [ , NUMBER ] , class = class ( VAR ) ) ) } ) NEWLINE do . call ( STRING , by ( d , d [ NUMBER : NUMBER ] , f ) )", "find_element_by_csss_selector ( STRING )", "VAR , VAR = proc . communicate ( )", "a_id b_received c_consumed output NEWLINE NUMBER sam soap oil NUMBER NEWLINE NUMBER sam oil NaN NUMBER NEWLINE NUMBER sam brush soap NUMBER NEWLINE NUMBER harry oil shoes NUMBER NEWLINE NUMBER harry shoes oil NUMBER NEWLINE NUMBER alice beer eggs NUMBER NEWLINE NUMBER alice brush brush NUMBER NEWLINE NUMBER alice eggs NaN NUMBER", "VAR = merge_dicts ( list_of_dicts ) NEWLINE for ( type , obj_id ) , ( actors , extra_fields ) in VAR . items ( ) : NEWLINE", "import pandas as pd NEWLINE VAR = pd . read_table ( STRING , sep = STRING ) . set_index ( STRING ) NEWLINE VAR . index = pd . DatetimeIndex ( VAR . index ) NEWLINE VAR . index = VAR . index + pd . DateOffset ( year = NUMBER ) NEWLINE print ( VAR )", "VAR = Matrix ( NUMBER , NUMBER ) NEWLINE VAR [ NUMBER ] [ NUMBER ] = NUMBER NEWLINE print VAR [ NUMBER ] [ NUMBER ] // - > NUMBER", "In [ NUMBER ] : data . data . src NEWLINE Out [ NUMBER ] : STRING", "for VAR , VAR in enumerate ( fields [ NUMBER : ] , NUMBER ) : NEWLINE . . . .", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE for VAR in split_list ( VAR , STRING ) : NEWLINE print VAR", "public class Configurator { static { // We initialize needed Hadoop configuration layers default configuration // by loading appropriate classes . try { Class . forName ( STRING ) ; } catch ( ClassNotFoundException e ) { LOG . error ( STRING ) ; } try { Class . forName ( STRING ) ; } catch ( ClassNotFoundException e ) { LOG . error ( STRING ) ; } // We do what actually HBase should : default HBase configuration // is added to default Hadoop resources . Configuration . addDefaultResource ( STRING ) ; Configuration . addDefaultResource ( STRING ) ; } // Just STRING handle . public void init ( ) { } }", "NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "max ( ( VAR [ k ] , VAR , VAR ) for ( VAR , VAR ) in enumerate ( m ) for ( VAR , VAR ) in enumerate ( VAR ) ) [ NUMBER : ]", ">> > x [ x < - NUMBER ] = np . nan NEWLINE >> > x NEWLINE array ( [ nan , NUMBER , NUMBER , nan , nan , NUMBER ] )", "def set_bg ( VAR , VAR = False ) : NEWLINE if VAR : NEWLINE VAR = STRING NEWLINE VAR . setStyleSheet ( VAR ) NEWLINE else : NEWLINE VAR . setStyleSheet ( VAR . defaultStyle ) NEWLINE VAR = QtGui . QApplication ( [ ] ) NEWLINE VAR = TagLabel ( STRING , STRING ) NEWLINE VAR . show ( ) NEWLINE VAR = QtGui . QStandardItemModel ( ) NEWLINE for VAR in xrange ( NUMBER ) : NEWLINE VAR . appendRow ( [ QtGui . QStandardItem ( VAR ) for VAR in [ STRING , STRING , STRING ] ] ) NEWLINE VAR = DragTable ( ) NEWLINE VAR . setModel ( VAR ) NEWLINE VAR . show ( ) NEWLINE def h ( VAR ) : NEWLINE print STRING , VAR NEWLINE VAR . connect ( VAR , QtCore . SIGNAL ( STRING ) , h ) NEWLINE VAR . exec_ ( )", "{ STRING : [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING // < - - This is it ! } ] }", "import pandas as pd NEWLINE import json NEWLINE import urllib NEWLINE VAR = json . loads ( urllib . urlopen ( STRING ) . read ( ) ) NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = [ VAR [ STRING ] for VAR in VAR ] NEWLINE VAR = pd . DataFrame ( VAR , columns = VAR [ STRING ] ) NEWLINE print VAR", "self . wavelength = wavelength_val", "for VAR , VAR in groups : NEWLINE VAR = [ VAR [ NUMBER ] for VAR in groupvalues ] NEWLINE print ( STRING . format ( name = VAR , avg = sum ( VAR ) / len ( VAR ) ) )", ">> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = max ( VAR ) NEWLINE >> > print ( VAR . index ( VAR ) ) NEWLINE NUMBER", "from _threading_local import local NEWLINE import threading NEWLINE import time NEWLINE VAR = local ( ) NEWLINE def f ( ) : NEWLINE global VAR NEWLINE VAR . ok = STRING NEWLINE time . sleep ( NUMBER ) NEWLINE if __name__ == STRING : NEWLINE VAR . ok = STRING NEWLINE VAR = threading . Thread ( target = f ) NEWLINE VAR . start ( ) NEWLINE for VAR in threading . enumerate ( ) : NEWLINE for VAR in VAR . __dict__ : NEWLINE if isinstance ( VAR , tuple ) : NEWLINE print ( STRING % VAR . __dict__ [ VAR ] )", "In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE a b c NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE In [ NUMBER ] : df . ix [ pd . isnull ( df [ STRING ] ) , STRING ] NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE Name : b , dtype : int32", "for VAR , VAR in enumerate ( S )", "from twisted . python import log NEWLINE from twisted . web import http , proxy NEWLINE class ProxyClient ( proxy . ProxyClient ) : NEWLINE STRING NEWLINE def handleHeader ( VAR , VAR , VAR ) : NEWLINE log . msg ( STRING % ( VAR , VAR ) ) NEWLINE proxy . ProxyClient . handleHeader ( VAR , VAR , VAR ) NEWLINE def handleResponsePart ( VAR , VAR ) : NEWLINE log . msg ( STRING % ( VAR [ : NUMBER ] , ) ) NEWLINE proxy . ProxyClient . handleResponsePart ( VAR , VAR . upper ( ) ) NEWLINE class ProxyClientFactory ( proxy . ProxyClientFactory ) : NEWLINE VAR = ProxyClient NEWLINE class ProxyRequest ( proxy . ProxyRequest ) : NEWLINE VAR = dict ( http = ProxyClientFactory ) NEWLINE class Proxy ( proxy . Proxy ) : NEWLINE VAR = ProxyRequest NEWLINE class ProxyFactory ( http . HTTPFactory ) : NEWLINE VAR = Proxy", "VAR = numpy . loadtxt ( . . . , usecols = xrange ( NUMBER , numcols , NUMBER ) )", "VAR = ET . SubElement ( idinfo , STRING ) NEWLINE tree . write ( tempXmlExportPath ) NEWLINE VAR = ET . SubElement ( VAR , STRING ) NEWLINE VAR = NEWLINE VAR . VAR = VAR NEWLINE tree . write ( tempXmlExportPath )", "VAR = soup . find ( STRING , text = lambda text and STRING in text ) NEWLINE VAR = VAR . find_parent ( STRING ) NEWLINE VAR = [ VAR [ STRING ] for VAR in VAR . find_all ( STRING , href = True ) ] NEWLINE print ( VAR )", "import itertools NEWLINE for VAR in itertools . chain ( mus , reversed ( mus ) ) : NEWLINE do_something . . .", "def __init__ ( VAR ) : NEWLINE super ( myDialog , VAR ) . __init__ ( ) NEWLINE VAR . t = QtGui . QTreeView ( ) NEWLINE VAR . m = QtGui . QStandardItemModel ( ) NEWLINE VAR . t . setModel ( VAR . m ) NEWLINE VAR = QtGui . QVBoxLayout ( ) NEWLINE VAR . addWidget ( VAR . t ) NEWLINE VAR . setLayout ( VAR ) NEWLINE VAR . l = [ [ STRING , False ] , [ STRING , True ] , [ STRING , False ] , [ STRING , True ] , [ STRING , False ] ] NEWLINE VAR . populate ( ) NEWLINE def populate ( VAR ) : NEWLINE VAR . m . clear ( ) NEWLINE VAR = VAR . m . invisibleRootItem ( ) NEWLINE for VAR in VAR . l : NEWLINE VAR = QtGui . QStandardItem ( ) NEWLINE VAR . setText ( VAR [ NUMBER ] ) NEWLINE VAR . appendRow ( VAR )", "from itertools import groupby NEWLINE from operator import itemgetter NEWLINE VAR = [ ] NEWLINE for VAR , VAR in groupby ( sorted ( data , key = itemgetter ( NUMBER , NUMBER ) ) , key = itemgetter ( NUMBER , NUMBER ) ) : NEWLINE VAR = list ( VAR ) NEWLINE VAR = STRING . join ( [ VAR [ NUMBER ] for VAR in VAR ] ) NEWLINE VAR = STRING . join ( [ VAR [ NUMBER ] for VAR in VAR ] ) NEWLINE VAR . append ( [ VAR [ NUMBER ] [ NUMBER ] , VAR , VAR , VAR [ NUMBER ] [ - NUMBER ] ] ) NEWLINE print ( VAR ) NEWLINE [ STRING , STRING , STRING , STRING ] , NEWLINE [ STRING , STRING , STRING , STRING ] ]", "from django . contrib . auth . decorators import login_required", ">> > [ VAR for VAR , VAR in rev_multidict . items ( ) if len ( VAR ) > NUMBER ] NEWLINE [ { STRING , STRING } ]", ">> > hxs . xpath ( STRING ) . re ( STRING ) NEWLINE [ STRING ] NEWLINE >> >", "< button string = STRING name = STRING type = STRING / >", "NP - - - > N_NNP N_NN_S_NU N_NNP N_NNP NEWLINE VGF - - - > V_VM_VF NEWLINE NP - - - > N_NN", "import csv NEWLINE import json NEWLINE VAR = { } NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR , delimiter = STRING ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] . strip ( ) ] = int ( VAR [ NUMBER ] . strip ( ) ) NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR = json . loads ( VAR ) NEWLINE VAR = VAR . get ( STRING , STRING ) . encode ( STRING ) NEWLINE if VAR : NEWLINE VAR = sum ( VAR . get ( VAR , NUMBER ) for VAR in VAR . split ( ) ) NEWLINE print ( STRING . format ( VAR , score ) )", ">> > import math NEWLINE >> > def calculateRange ( VAR , VAR , VAR , VAR ) : NEWLINE . . . VAR = math . sqrt ( math . pow ( ( VAR - VAR ) , NUMBER ) + math . pow ( ( VAR - VAR ) , NUMBER ) ) NEWLINE . . . return round ( VAR , NUMBER ) NEWLINE . . . NEWLINE >> > VAR = NUMBER NEWLINE >> > VAR = NUMBER NEWLINE >> > VAR = NUMBER NEWLINE >> > VAR = [ . . . { STRING : STRING , STRING : NUMBER , STRING : NUMBER } , . . . { STRING : STRING , STRING : NUMBER , STRING : NUMBER } , . . . { STRING : STRING , STRING : NUMBER , STRING : NUMBER } . . . ] NEWLINE >> > for VAR in VAR : NEWLINE . . . VAR [ STRING ] = min ( VAR , calculateRange ( VAR , VAR [ STRING ] , VAR , VAR [ STRING ] ) ) NEWLINE . . . NEWLINE >> > VAR NEWLINE [ { STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : STRING , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ]", ">> > list ( nested ( flat , NUMBER ) ) NEWLINE [ STRING , [ STRING , [ STRING ] , STRING ] , STRING , [ STRING , STRING ] , STRING ]", "STRING % ( r1 . pattern , STRING )", "subprocess . Popen ( STRING , arg )", ">> > re . search ( regex , STRING ) NEWLINE", ">> > VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE >> > [ VAR for VAR , VAR in VAR for VAR in range ( VAR ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > from itertools import chain NEWLINE >> > list ( chain . from_iterable ( [ VAR ] * VAR for VAR , VAR in VAR ) ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "import collections NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = VAR . split ( ) NEWLINE VAR = collections . Counter ( VAR ) NEWLINE print VAR", "@ app . route ( STRING ) NEWLINE def feature ( VAR ) : NEWLINE if slug_in_database ( VAR ) : NEWLINE return STRING + VAR NEWLINE with app . test_request_context ( url_for ( STRING , url = VAR ) ) NEWLINE return catch ( VAR ) NEWLINE @ app . route ( STRING ) NEWLINE def catch ( url ) : NEWLINE return STRING + url", ">> > print trimmed_text NEWLINE This is a sample text NEWLINE >> >", "mysqladmin create osqa", "with open ( STRING ) as VAR : NEWLINE VAR = VAR . readlines ( ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR [ VAR ] = STRING NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . writelines ( VAR )", "import sklearn . cluster NEWLINE import numpy as np NEWLINE VAR = [ [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] , ] NEWLINE VAR = [ VAR [ NUMBER ] for VAR in VAR ] NEWLINE VAR = np . array ( [ VAR [ NUMBER : ] for VAR in VAR ] ) NEWLINE VAR = NUMBER NEWLINE VAR = sklearn . cluster . k_means ( VAR , VAR )", "rank name deaths NEWLINE NUMBER NUMBER Mao Zedong NUMBER NEWLINE NUMBER NUMBER Jozef Stalin NUMBER", ">> my_config = MyConfigParser ( ) NEWLINE >> my_config . read ( STRING ) NEWLINE >> couples = my_config . get_list_of_tups ( STRING , STRING ) NEWLINE >> couples NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "class Selenium2Library ( _LoggingKeywords , _RunOnFailureKeywords , _BrowserManagementKeywords , _ElementKeywords , _TableElementKeywords , _FormElementKeywords , _SelectElementKeywords , _JavaScriptKeywords , _CookieKeywords , _ScreenshotKeywords , _WaitingKeywords", "for VAR in all_objects : NEWLINE if isinstance ( VAR , Planet ) : NEWLINE VAR . gravity ( )", "with open ( STRING , STRING ) as f : NEWLINE for VAR in itertools . imap ( int , readWords ( f ) ) : NEWLINE", "from apiclient . discovery import build NEWLINE def build_service ( VAR ) : NEWLINE VAR = httplib2 . Http ( ) NEWLINE VAR = VAR . authorize ( VAR ) NEWLINE return build ( STRING , STRING , VAR = VAR )", "@ app . url_value_preprocessor NEWLINE def _is_valid_token ( VAR , VAR ) : NEWLINE if STRING not in VAR : NEWLINE return NEWLINE if VAR [ STRING ] != TOKEN : NEWLINE abort ( NUMBER )", "{ VAR : VAR for VAR , VAR in enumerate ( RANKS ) }", "In [ NUMBER ] : % timeit MultiIndex . from_arrays ( [ np . repeat ( l1 , len ( l2 ) ) , np . repeat ( l2 , len ( l1 ) ) ] ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "product ( * [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] )", "VAR = torch . Tensor ( ) NEWLINE type ( VAR ) == STRING NEWLINE torch . type ( VAR ) == STRING NEWLINE VAR : type ( ) == STRING", "import enemies NEWLINE class Encounter : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . counter = NUMBER NEWLINE VAR . number = NUMBER NEWLINE VAR . who = STRING NEWLINE def forward ( VAR ) : NEWLINE if VAR . counter == NUMBER : NEWLINE enemies . knightofni ( VAR ) NEWLINE elif VAR . counter == NUMBER : NEWLINE enemies . frenchman ( VAR ) NEWLINE else : NEWLINE VAR . number = NUMBER NEWLINE VAR . who = STRING NEWLINE VAR . counter += NUMBER NEWLINE VAR = Encounter ( ) NEWLINE for VAR in range ( NUMBER ) : NEWLINE print ( str ( VAR . number ) + STRING + VAR . who ) NEWLINE VAR . forward ( )", "import numpy as np NEWLINE from scipy import stats NEWLINE np . random . seed ( NUMBER ) NEWLINE VAR , VAR = NUMBER , NUMBER NEWLINE VAR = np . random . random_integers ( NUMBER , NUMBER , ( VAR , VAR ) ) NEWLINE VAR = np . random . random_integers ( NUMBER , NUMBER , ( VAR , VAR ) ) NEWLINE VAR = np . ones ( ( VAR , VAR ) ) NEWLINE for VAR in range ( VAR ) : NEWLINE VAR [ VAR , : ] = np . array ( [ stats . VAR ( VAR [ VAR , VAR ] , VAR [ VAR , VAR ] + VAR [ VAR , VAR ] ) for VAR in range ( VAR ) ] ) NEWLINE VAR = np . vectorize ( stats . VAR ) NEWLINE VAR = VAR ( VAR , VAR + VAR ) NEWLINE assert np . allclose ( VAR , VAR ) NEWLINE print ( VAR )", "mdft ( df ) NEWLINE Out [ NUMBER ] : NUMBER", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE VAR = VAR . find_all ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR . replace_with ( STRING ) NEWLINE print VAR . prettify ( formatter = None )", "@ DH1DQQN1 : NUMBER : C1UKCACXX : NUMBER : NUMBER : NUMBER : NUMBER NUMBER : N : NUMBER : TTAGGC NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC NEWLINE + NEWLINE CCCFFFFFHGHHHJIJHFDDDB173 @ NUMBER BDDB NEWLINE @ DH1DQQN1 : NUMBER : C1UKCACXX : NUMBER : NUMBER : NUMBER : NUMBER NUMBER : N : NUMBER : TTAGGC NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA NEWLINE + NEWLINE CCCFFFFFHGHHHJIJHFDDDB173 @ NUMBER BDDB NEWLINE @ DH1DQQN1 : NUMBER : C1UKCACXX : NUMBER : NUMBER : NUMBER : NUMBER NUMBER : N : NUMBER : TTAGGC NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA NEWLINE + NEWLINE @ @ @ FFFFFHGHHHGIJHFDDDDDBDD69 @ NUMBER B - NUMBER BDDDB75 @ @ NUMBER NEWLINE @ DH1DQQN1 : NUMBER : C1UKCACXX : NUMBER : NUMBER : NUMBER : NUMBER NUMBER : N : NUMBER : TTAGGC NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG NEWLINE + NEWLINE @ CCFFFFFHHHHHJJJHFDDD @ NUMBER BDDDDB077007 @ B", "NUMBER / NUMBER / NUMBER NUMBER NEWLINE NUMBER / NUMBER / NUMBER NUMBER", "with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = VAR . replace ( STRING , STRING ) NEWLINE VAR = VAR . replace ( STRING , STRING ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR )", "import datetime NEWLINE import calendar NEWLINE def main ( ) : NEWLINE VAR = datetime . date . today ( ) . VAR NEWLINE VAR = int ( raw_input ( STRING ) ) NEWLINE print STRING . format ( calendar . month_abbr [ VAR ] , calendar . monthrange ( VAR , VAR ) [ NUMBER ] )", "category number_of_purchase product_id NEWLINE NUMBER cat2 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat2 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER", "VAR = NUMBER NEWLINE VAR = NUMBER", "VAR = filter ( fulfills_some_condition , lst )", ">> > for VAR in pyparsing . originalTextFor ( pyparsing . nestedExpr ( STRING , STRING ) ) . searchString ( text ) : NEWLINE . . . print VAR [ NUMBER ] NEWLINE . . . NEWLINE ( name ) NEWLINE ( person ) NEWLINE ( + ( * ( NUMBER NUMBER ) NUMBER ) )", "VAR = Fubar ( ) NEWLINE VAR = VAR . VAR NEWLINE VAR . VAR = lambda VAR , VAR = [ VAR , ( lambda : STRING ) , VAR ] : VAR . pop ( ) ( )", "import re NEWLINE VAR = STRING NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = re . findall ( VAR , VAR ) NEWLINE", "import os NEWLINE from flask import Flask , render_template NEWLINE VAR = Flask ( __name__ ) NEWLINE @ VAR . route ( STRING ) NEWLINE def dirtree ( ) : NEWLINE VAR = os . VAR . expanduser ( STRING ) NEWLINE return render_template ( STRING , tree = make_tree ( VAR ) ) NEWLINE if __name__ == STRING : NEWLINE VAR . run ( host = STRING , port = NUMBER , debug = True )", "NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE . . . NEWLINE NUMBER", "def to_str ( VAR ) : NEWLINE if not VAR : NEWLINE return STRING NEWLINE return str ( VAR [ NUMBER ] ) + to_str ( VAR [ NUMBER : ] )", "{ STRING : STRING , STRING : STRING }", "VAR = tf . VAR ( image ) NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = NUMBER NEWLINE VAR = tf . less_equal ( VAR , VAR ) NEWLINE VAR = tf . constant ( NUMBER ) NEWLINE VAR , VAR = tf . cond ( VAR , lambda : VAR , ( VAR / VAR ) * VAR , lambda : VAR , ( VAR / VAR ) * VAR )", "STRING . join ( STRING . format ( ord ( VAR ) ) for VAR in value )", "[ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "VAR = iter ( b ) NEWLINE VAR = [ next ( VAR ) if VAR is None else VAR for VAR in VAR ]", "[ ( function_a , function_b , function_c ) [ VAR . split ( STRING ) . index ( STRING ) ] ( ) for VAR in fileinput . readlines ( ) ]", "import os NEWLINE if os . fork ( ) : NEWLINE do_stuff ( ) NEWLINE else : NEWLINE os . setsid ( ) NEWLINE os . execl ( STRING , STRING )", "from sqlalchemy import Column , Integer NEWLINE from sqlalchemy . ext . declarative import declarative_base NEWLINE VAR = declarative_base ( ) NEWLINE class Thing ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR = Column ( Integer , primary_key = True ) NEWLINE VAR = Column ( NullComparisons ( NUMBER ) ) NEWLINE print ( Thing . VAR != STRING )", "if ranking_list : NEWLINE print ranking_list", "> Stanza n . NUMBER < NEWLINE > Num letti : NUMBER NEWLINE > Fumatori NEWLINE > Televisione NEWLINE > Stanza n . NUMBER < NEWLINE > Num letti : NUMBER NEWLINE > Fumatori NEWLINE > Televisione NEWLINE > Aria Condizionata NEWLINE > Stanza n . NUMBER < NEWLINE > Num letti : NUMBER NEWLINE > this is so much text it will be ch . .", "Import ( STRING ) NEWLINE def my_emitter ( VAR , VAR , VAR ) : NEWLINE VAR = str ( VAR [ NUMBER ] ) NEWLINE VAR = [ ] NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR = VAR . strip ( ) NEWLINE VAR , VAR = VAR . split ( STRING , NUMBER ) NEWLINE if not VAR : continue NEWLINE VAR = VAR . Command ( VAR , [ ] , STRING . format ( VAR ) ) NEWLINE VAR . extend ( VAR ) NEWLINE VAR . append ( VAR + STRING ) NEWLINE return VAR , VAR NEWLINE def my_action ( VAR , VAR , VAR ) : NEWLINE for VAR , VAR in zip ( VAR , VAR [ NUMBER : ] ) : NEWLINE with open ( VAR . abspath , STRING ) as VAR : NEWLINE with open ( VAR . abspath , STRING ) as VAR : NEWLINE VAR . write ( VAR . read ( ) ) NEWLINE VAR = VAR . Builder ( action = my_action , emitter = my_emitter ) NEWLINE VAR = VAR ( VAR , VAR = STRING ) NEWLINE VAR = VAR . Library ( STRING , VAR )", "VAR = { STRING : [ ] } NEWLINE def fil_userdata ( ) : NEWLINE for VAR in xrange ( NUMBER , NUMBER ) : NEWLINE VAR = { } NEWLINE VAR [ STRING ] = . . . NEWLINE VAR [ STRING ] = . . . NEWLINE VAR [ STRING ] = . . . NEWLINE add_user ( VAR ) NEWLINE def add_user ( VAR ) : NEWLINE VAR [ STRING ] . append ( VAR )", "VAR = datasetObj . varlist [ STRING ] . index", "plt . hist ( [ subset [ STRING ] [ filter ] , subset [ STRING ] [ ~ filter ] ] , stacked = True ) NEWLINE plt . show ( )", ">> > import random NEWLINE >> > [ random . choice ( [ STRING , STRING , STRING ] ) for VAR in range ( random . randint ( NUMBER , NUMBER ) ) ] NEWLINE [ STRING , STRING ] NEWLINE >> > [ random . choice ( [ STRING , STRING , STRING ] ) for VAR in range ( random . randint ( NUMBER , NUMBER ) ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "< table class = STRING > NEWLINE < tbody > NEWLINE { % for VAR , VAR in model_data . items % } NEWLINE < tr > NEWLINE < td class = STRING > { { VAR } } < / td > < td > { { VAR } } < / td > NEWLINE < / tr > NEWLINE { % endfor % } NEWLINE < / tbody > NEWLINE < / table >", "VAR = { } NEWLINE for VAR in sorted ( entries ) : NEWLINE VAR = total_scores [ VAR ] / entries [ VAR ] NEWLINE VAR [ VAR ] = VAR NEWLINE for VAR , VAR in sorted ( VAR . items ( ) , key = itemgetter ( NUMBER ) , reversed = True ) : NEWLINE print ( VAR , VAR )", "open ( files [ NUMBER ] ) . read ( ) . split ( STRING , NUMBER ) [ NUMBER ] . split ( STRING ) [ : NUMBER ]", "print [ [ STRING . join ( VAR ) for VAR in VAR [ : - NUMBER ] ] for VAR in my_load_files ( text_folder , STRING ) ]", "import argparse NEWLINE if __name__ == STRING : NEWLINE VAR = argparse . ArgumentParser ( description = STRING ) NEWLINE VAR . add_argument ( STRING , type = int , help = STRING , ) NEWLINE VAR . add_argument ( STRING , type = int , help = STRING , ) NEWLINE VAR . add_argument ( STRING , type = int , help = STRING , ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE print ( VAR )", "VAR = STRING NEWLINE from lxml import html NEWLINE VAR = html . fromstring ( VAR ) NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE print STRING . join ( [ VAR . strip ( ) for VAR in VAR ] )", "import collections NEWLINE import math NEWLINE def printMyString ( ) : NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = int ( raw_input ( STRING ) ) NEWLINE VAR = collections . Counter ( list ( VAR ) ) NEWLINE VAR = [ STRING ] * len ( VAR ) NEWLINE VAR = VAR . most_common ( NUMBER ) [ NUMBER ] [ NUMBER ] NEWLINE VAR = int ( math . ceil ( len ( VAR ) * NUMBER / VAR ) ) NEWLINE if ( VAR < VAR ) : NEWLINE print STRING NEWLINE return NEWLINE VAR = NUMBER NEWLINE while len ( VAR ) > NUMBER : NEWLINE VAR = VAR . most_common ( NUMBER ) [ NUMBER ] [ NUMBER ] NEWLINE VAR = VAR . most_common ( NUMBER ) [ NUMBER ] [ NUMBER ] NEWLINE while VAR [ VAR ] != STRING : NEWLINE VAR += NUMBER NEWLINE if ( VAR == len ( VAR ) ) : NEWLINE return NEWLINE for VAR in range ( VAR ) : NEWLINE if ( VAR + VAR * VAR ) >= len ( VAR ) : NEWLINE print STRING NEWLINE return NEWLINE VAR [ VAR + VAR * VAR ] = VAR NEWLINE del VAR [ VAR ] NEWLINE VAR += NUMBER NEWLINE print STRING . join ( VAR ) NEWLINE printMyString ( )", ">> > r . headers . get ( STRING ) NEWLINE STRING", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = STRING NEWLINE print ( [ VAR for VAR in VAR . findall ( VAR ) if VAR ] )", "Column NUMBER Column NUMBER Column NUMBER Column NUMBER NEWLINE bread milk sugar tea", "import numpy as np NEWLINE from scipy . interpolate import interp1d NEWLINE VAR = VAR = np . arange ( NUMBER ) NEWLINE VAR = interp1d ( VAR , VAR , kind = STRING , fill_value = NUMBER , bounds_error = False ) NEWLINE print VAR ( NUMBER ) NEWLINE print VAR ( NUMBER ) NEWLINE print VAR ( NUMBER ) NEWLINE print VAR ( NUMBER )", "from glob import glob NEWLINE from sys import argv NEWLINE for VAR in glob ( argv [ NUMBER ] ) : NEWLINE printndent specific NEWLINE ( define - key map STRING ' python - indent - dedent - line - backspace ) NEWLINE ( define - key map ( kbd STRING ) ' python - indent - dedent - line ) NEWLINE ( define - key map STRING ' python - indent - shift - left ) NEWLINE ( define - key map STRING ' python - indent - shift - right ) NEWLINE ( define - key map STRING ' python - indent - electric - colon )", "Demonstration / Explanation NEWLINE VAR = df [ df . id == NUMBER ] . copy ( ) NEWLINE print VAR . apply ( lambda VAR : check_future_pants ( VAR , VAR ) , axis = NUMBER ) NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE dtype : bool", "VAR = [ [ NUMBER ] * NUMBER for VAR in xrange ( NUMBER ) ] NEWLINE for VAR in random . sample ( xrange ( NUMBER ) , NUMBER ) : NEWLINE VAR [ VAR // NUMBER ] [ VAR % NUMBER ] = NUMBER", "rdd . map ( lambda ( VAR , VAR ) : ( set ( VAR ) , VAR ) ) . groupByKey ( ) . collect ( )", "VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = VAR . find ( STRING ) NEWLINE VAR . find_parents ( attrs = { STRING : STRING } )", "from functools import partial NEWLINE VAR = Foo ( ) NEWLINE VAR = partial ( Foo . _integrand , VAR )", "[ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER ] , . . . ]", "import os NEWLINE import signal NEWLINE import sys NEWLINE def kill_yourself_now ( ) : NEWLINE VAR = signal . CTRL_C_EVENT if sys . platform == STRING else signal . SIGINT NEWLINE os . kill ( os . getpid ( ) , VAR )", ">> > s . replace ( STRING , STRING ) NEWLINE STRING", "def process_request ( VAR , VAR ) : NEWLINE _thread_local . CONSTANT_NAME = CONSTANT_NAME", "import numpy as np NEWLINE import scipy . stats as stats NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = stats . norm ( NUMBER , NUMBER ) . rvs ( NUMBER ) NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE for VAR in VAR : NEWLINE VAR = getattr ( stats . distributions , VAR ) NEWLINE VAR = VAR . fit ( VAR ) NEWLINE VAR = VAR . VAR ( VAR , * VAR ) NEWLINE print ( VAR )", "import time NEWLINE def posix_time ( VAR ) : NEWLINE STRING NEWLINE VAR = VAR . VAR - NUMBER NEWLINE VAR = VAR . VAR - NUMBER NEWLINE VAR = VAR . VAR NEWLINE VAR = VAR . VAR NEWLINE VAR = VAR . VAR NEWLINE return ( VAR + VAR * NUMBER + VAR * NUMBER + VAR * NUMBER + ( VAR - NUMBER ) * NUMBER + ( ( VAR - NUMBER ) // NUMBER ) * NUMBER - ( ( VAR - NUMBER ) // NUMBER ) * NUMBER + ( ( VAR + NUMBER ) // NUMBER ) * NUMBER ) NEWLINE VAR = time . localtime ( ) NEWLINE VAR = time . gmtime ( posix_time ( VAR ) - NUMBER ) NEWLINE print ( VAR ) NEWLINE", "@ MyDecorator ( STRING ) NEWLINE def some_other_function ( ) : NEWLINE print STRING", "tdf [ STRING ]", "awk - F , - vOFS = , - vc = NUMBER ' NEWLINE VAR == NUMBER { for ( i = NUMBER ; i < NF ; i + + ) { if ( $ i != STRING ) { g [ c ] = i ; f [ c + + ] = $ i } } } NEWLINE VAR > NUMBER { for ( i = NUMBER ; i < c ; i + + ) { print $ NUMBER , $ NUMBER , $ g [ i ] > STRING f [ i ] STRING } } ' data . csv", "import unicodedata NEWLINE def eval_unicode ( VAR ) : NEWLINE VAR = sum ( map ( unicodedata . numeric , filter ( lambda VAR : unicodedata . category ( VAR ) == STRING , VAR ) ) ) NEWLINE VAR = float ( STRING . join ( filter ( lambda VAR : VAR . isdigit ( ) or VAR == STRING , VAR ) ) or NUMBER ) NEWLINE return VAR + VAR", "df [ STRING ] = ( df . groupby ( STRING ) . apply ( lambda VAR : VAR [ STRING ] . isin ( VAR [ STRING ] ) . astype ( STRING ) ) . reset_index ( level = STRING , drop = True ) )", "$ join - t \\ ; - j NUMBER file1 file2 | sed STRING NEWLINE DATE ; BS - ICI , NSA , BAL , AT ; BS - ICI , NSA , BAL , BE ; BS - BYL , NSA , BAL , AT ; BS - NAN , NSA , BAL , BE ; NEWLINE NUMBER M02 ; NUMBER ; NUMBER ; NUMBER ; NUMBER ; NEWLINE NUMBER M01 ; - NUMBER ; - NUMBER ; - NUMBER ; - NUMBER ; NEWLINE NUMBER M11 ; - NUMBER ; - NUMBER ; - NUMBER ; - NUMBER ; NEWLINE NUMBER M10 ; - NUMBER ; - NUMBER ; - NUMBER ; - NUMBER ;", "for VAR in inputlist : NEWLINE VAR [ STRING ] = min ( mxr , calculateRange ( x , VAR [ STRING ] , y , VAR [ STRING ] ) )", "np . swapaxes ( np . swapaxes ( myArray , NUMBER , NUMBER ) , NUMBER , NUMBER )", "if GO_TO_MAX_SPEED_CONDITION : NEWLINE while NOT_AT_MAX_SPEED : NEWLINE ACCELERATE", ">> > re . sub ( STRING , STRING , STRING ) NEWLINE STRING", "", "def f ( n ) : NEWLINE . . . . . . . . NEWLINE return . . . . .", ">> > for VAR in ptree . productions ( ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE S - > VP NEWLINE VP - > VB NP ADVP NEWLINE VB - > STRING NEWLINE NP - > PRP NEWLINE PRP - > STRING NEWLINE ADVP - > RB NEWLINE RB - > STRING", "import random NEWLINE def binarySearch ( VAR , VAR ) : NEWLINE VAR = NUMBER NEWLINE VAR = len ( VAR ) - NUMBER NEWLINE VAR = False NEWLINE while VAR <= VAR and not VAR : NEWLINE VAR = ( VAR + VAR ) // NUMBER NEWLINE if VAR [ VAR ] == VAR : NEWLINE VAR = True NEWLINE else : NEWLINE if VAR < VAR [ VAR ] : NEWLINE VAR = VAR - NUMBER NEWLINE else : NEWLINE VAR = VAR + NUMBER NEWLINE return VAR NEWLINE def findThisNum ( VAR ) : NEWLINE VAR = [ VAR for VAR in range ( VAR ) ] NEWLINE print STRING , VAR NEWLINE print STRING , VAR NEWLINE if ( binarySearch ( VAR , VAR ) ) == True : NEWLINE print STRING % VAR NEWLINE else : NEWLINE print STRING % VAR NEWLINE if __name__ == STRING : NEWLINE VAR = NUMBER NEWLINE VAR = random . randrange ( NUMBER , VAR ) NEWLINE findThisNum ( VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = random . randrange ( NUMBER , VAR ) NEWLINE findThisNum ( VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = random . randrange ( NUMBER , VAR ) + VAR NEWLINE findThisNum ( VAR )", "@ classmethod NEWLINE def main ( VAR ) : NEWLINE STRING NEWLINE tkinter . NoDefaultRoot ( ) NEWLINE VAR = VAR . create_application_root ( ) NEWLINE VAR . attach_window_icon ( VAR , ICON ) NEWLINE VAR = VAR . setup_class_instance ( VAR ) NEWLINE VAR . main_loop ( VAR )", "import pandas as pd NEWLINE import numpy as np NEWLINE from pandas import melt NEWLINE VAR = pd . DataFrame ( np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , NUMBER ) ) , index = [ STRING , STRING ] , columns = pd . date_range ( STRING , periods = NUMBER , freq = STRING ) ) NEWLINE VAR = VAR . T NEWLINE VAR [ STRING ] = VAR . index NEWLINE VAR = melt ( VAR , id_vars = [ STRING ] ) NEWLINE VAR . columns = [ STRING , STRING , STRING ] NEWLINE print ( VAR )", "xml_dict . update ( csv_dict ) NEWLINE", "VAR = NUMBER NEWLINE all ( VAR == VAR for VAR in d . values ( ) )", "import cairo NEWLINE VAR = cairo . ImageSurface ( cairo . FORMAT_ARGB32 , NUMBER , NUMBER ) NEWLINE VAR = cairo . Context ( VAR ) NEWLINE VAR = [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE VAR = CubicBSpline ( VAR ) . clamped ( ) NEWLINE VAR . set_source_rgb ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR . set_line_width ( NUMBER ) NEWLINE BSplineDrawer ( VAR ) . draw ( VAR )", ">> > for VAR in price : NEWLINE . . . print ( VAR . decode ( ) ) NEWLINE . . . NEWLINE NUMBER , NUMBER", "VAR = clock ( ) NEWLINE for VAR in liner ( STRING , STRING , NUMBER ) : NEWLINE pass NEWLINE print clock ( ) - VAR NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = SpecialDelimiters ( VAR , STRING , NUMBER ) NEWLINE VAR = clock ( ) NEWLINE for VAR in VAR : NEWLINE pass NEWLINE print clock ( ) - VAR", "def cutoff ( VAR , VAR ) : NEWLINE VAR = sorted ( VAR , key = lambda VAR : VAR [ NUMBER ] ) NEWLINE VAR = filter ( lambda VAR : VAR [ NUMBER ] < VAR , VAR ) NEWLINE return VAR if len ( VAR ) > NUMBER else STRING", "import re NEWLINE from functools import partial NEWLINE def _hexrepl ( VAR ) : NEWLINE return chr ( int ( VAR . group ( NUMBER ) , NUMBER ) ) NEWLINE VAR = partial ( re . compile ( STRING ) . sub , _hexrepl ) NEWLINE def pdfnames ( VAR ) : NEWLINE for VAR in Name . finditer ( VAR ) : NEWLINE yield VAR ( VAR . group ( NUMBER ) )", "VAR = { STRING : STRING , STRING : True } NEWLINE VAR = cmds . ls ( ** VAR )", "def get_python_lib ( VAR = NUMBER , VAR = NUMBER , VAR = None ) : NEWLINE if VAR is None : NEWLINE VAR = VAR and EXEC_PREFIX or PREFIX NEWLINE VAR = os . path . join ( VAR , STRING , STRING + get_python_version ( ) ) NEWLINE if VAR : NEWLINE return VAR NEWLINE else : NEWLINE return os . path . join ( VAR , STRING )", "import string NEWLINE def __init__ ( self , . . . ) : NEWLINE self . trans = string . maketrans ( STRING , STRING ) NEWLINE def complementary_strand ( self , strand ) : NEWLINE return strand . translate ( self . trans )", "from datetime import date , timedelta NEWLINE from itertools import groupby NEWLINE VAR = date ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = { } NEWLINE assert timestamps == sorted ( timestamps ) NEWLINE for VAR , VAR in groupby ( timestamps , key = lambda VAR : VAR // NUMBER ) : NEWLINE VAR = list ( VAR ) NEWLINE assert max ( VAR ) == VAR [ - NUMBER ] and min ( VAR ) == VAR [ NUMBER ] NEWLINE VAR [ VAR + timedelta ( VAR ) ] = VAR [ NUMBER ] , VAR [ - NUMBER ] NEWLINE print ( VAR )", "VAR = CheckableDirModel ( ) NEWLINE VAR = QtGui . QTreeView ( ) NEWLINE VAR . setModel ( VAR )", "mynohup myscript . py NEWLINE mykill myscript . py", "python myscript . py FolderName", "SELECT t4 . alt_bilesen NEWLINE FROM urunler_seviyeler t1 NEWLINE JOIN urunler_seviyeler t2 ON t2 . parcano = t1 . alt_bilesen NEWLINE JOIN urunler_seviyeler t3 ON t3 . parcano = t2 . alt_bilesen NEWLINE JOIN urunler_seviyeler t4 ON t4 . parcano = t3 . alt_bilesen NEWLINE WHERE t1 . parcano = STRING", ". . . NEWLINE if event . type == pygame . KEYDOWN and event . key == pygame . K_DOWN : NEWLINE VAR = pygame . image . load ( images [ VAR ] ) NEWLINE VAR = ( VAR + NUMBER ) % len ( images ) NEWLINE VAR = VAR + NUMBER NEWLINE . . .", "re . sub ( STRING , STRING , string )", "from itertools import count , islice NEWLINE VAR = count ( NUMBER ) NEWLINE for VAR in islice ( VAR , NUMBER , NUMBER ) : NEWLINE print VAR", "with open ( STRING ) as VAR : NEWLINE VAR = read_by_tokens ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE for VAR in VAR : NEWLINE print ( VAR )", "VAR = ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , . . . . )", "INSERT INTO ` dog_measurement_data ` ( ` dog_measurement_id ` , ` frame ` , ` sensor_row ` , ` sensor_col ` , ` value ` ) VALUES NEWLINE ( * measurement_id ? * , * frame_number ? * , * sensor_row ? * , * sensor_col ? * , * value ? * )", "$ supervisorctl status logproxy NEWLINE logproxy STOPPED Not started", "import shutil NEWLINE from urllib . request import urlopen NEWLINE with urlopen ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE shutil . copyfileobj ( VAR , VAR )", "from multiprocessing import Pool NEWLINE import time NEWLINE import random NEWLINE VAR = [ ] NEWLINE def myfunc ( ) : NEWLINE VAR = random . randint ( NUMBER , NUMBER ) NEWLINE time . sleep ( VAR ) NEWLINE return VAR NEWLINE def cb ( VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE print ( STRING ) NEWLINE VAR = Pool ( processes = NUMBER ) NEWLINE for VAR in range ( VAR . _processes ) : NEWLINE VAR . apply_async ( myfunc , callback = cb ) NEWLINE VAR . close ( ) NEWLINE VAR . join ( ) NEWLINE print ( STRING ) NEWLINE print ( VAR )", ">> > VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE >> > [ VAR for VAR , VAR in VAR . items ( ) if VAR == NUMBER ] NEWLINE [ STRING , STRING ]", "( - NUMBER , NUMBER ) NEWLINE ( - NUMBER , NUMBER )", ">> > VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE >> > for VAR in matches ( VAR , NUMBER ) : NEWLINE . . . print ( VAR ) NEWLINE . . . NEWLINE ( ( STRING , NUMBER ) , ( STRING , NUMBER ) ) NEWLINE ( ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ) NEWLINE ( ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) )", ">> > to_nested_dict ( { STRING : [ [ STRING , STRING ] , [ STRING , STRING ] ] } ) NEWLINE { STRING : { STRING : [ STRING , STRING ] } } NEWLINE >> > to_nested_dict ( { STRING : [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] } ) NEWLINE { STRING : { STRING : [ STRING , STRING ] , STRING : [ STRING ] } } NEWLINE >> > to_nested_dict ( { STRING : [ [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ] , STRING : [ [ STRING , STRING ] ] } ) NEWLINE { STRING : { STRING : [ STRING , STRING ] , STRING : [ STRING ] } , STRING : { STRING : [ STRING ] } }", "@ app . route ( STRING ) NEWLINE def test ( VAR , VAR ) : NEWLINE VAR = VAR . split ( STRING ) NEWLINE return STRING . join ( VAR )", "False", "VAR = itertools . count ( NUMBER ) NEWLINE VAR = ( VAR ** NUMBER for VAR in VAR ) NEWLINE VAR = itertools . accumulate ( VAR ) NEWLINE VAR = itertools . dropwhile ( lambda VAR : VAR < n , VAR ) NEWLINE VAR = next ( VAR )", "VAR = [ { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } ] NEWLINE VAR = [ ] NEWLINE VAR = { } NEWLINE VAR = NUMBER NEWLINE def iterating_list ( VAR ) : NEWLINE for VAR in VAR : NEWLINE yield VAR NEWLINE VAR = iterating_list ( VAR ) NEWLINE for VAR in VAR : NEWLINE if VAR . get ( STRING ) : NEWLINE VAR . update ( { VAR . get ( STRING ) : next ( VAR ) . get ( STRING ) } ) NEWLINE VAR += NUMBER NEWLINE if VAR == NUMBER : NEWLINE VAR = NUMBER NEWLINE VAR . append ( VAR ) NEWLINE VAR = { } NEWLINE print VAR", "VAR = map ( int , open ( STRING ) )", "VAR = a [ unique ]", "VAR = padarray ( A , [ NUMBER NUMBER ] , STRING )", ">> > list ( new ( NUMBER ) ) == list ( variable_strings_complete ( NUMBER ) ) NEWLINE True NEWLINE >> > list ( new ( NUMBER ) ) == list ( variable_strings_complete ( NUMBER ) ) NEWLINE True NEWLINE >> > list ( new ( NUMBER , alphabet = range ( NUMBER ) ) ) == list ( variable_strings_complete ( NUMBER , range ( NUMBER ) ) ) NEWLINE True", "VAR = pd . DataFrame ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , columns = [ STRING , STRING , STRING ] )", "scores . append ( { STRING : name , STRING : score } )", "a * c + b * d", "d [ STRING ] = [ ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE d [ STRING ] = [ ( STRING , STRING ) , ( STRING , STRING ) ]", "df . loc [ mask , STRING ] = df . loc [ mask , STRING ] . map ( na_map ) NEWLINE A B NEWLINE NUMBER Red NUMBER NEWLINE NUMBER Red NUMBER NEWLINE NUMBER Red NUMBER NEWLINE NUMBER Green NUMBER NEWLINE NUMBER Green NUMBER NEWLINE NUMBER Green NUMBER NEWLINE NUMBER Blue NUMBER NEWLINE NUMBER Blue NUMBER", "VAR = [ STRING , STRING , STRING ] NEWLINE VAR = { STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE VAR = STRING NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE while True : NEWLINE VAR = VAR . readline ( ) NEWLINE if not VAR : break NEWLINE for VAR in VAR : NEWLINE if VAR in VAR : NEWLINE VAR . seek ( - len ( VAR ) , NUMBER ) NEWLINE VAR . write ( VAR + STRING + VAR [ VAR ] + STRING ) NEWLINE VAR . flush ( )", "VAR = mdates . DateFormatter ( STRING ) NEWLINE ax . xaxis . set_major_formatter ( VAR )", "VAR = np . sum ( stars * grid , axis = NUMBER ) / np . sum ( grid , axis = NUMBER )", ">> > VAR = pd . Series ( x . values , index = whenreq : S , Length : NUMBER", "In [ NUMBER ] : a1 + b1 NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "def function ( * args , ** kwargs ) : NEWLINE VAR = { } NEWLINE for VAR in kwargs : NEWLINE if kwargs [ VAR ] is not None : NEWLINE VAR [ VAR ] = kwargs [ VAR ] NEWLINE if not VAR : NEWLINE raise Exception ( STRING ) NEWLINE return VAR NEWLINE >> > function ( varone = None , vartwo = STRING , varthree = None ) NEWLINE { STRING : STRING }", "< span class = STRING title = STRING style = STRING > Selenium_CRM_For_Edit_Test < / span >", "VAR = { STRING : [ STRING , NUMBER , NUMBER ] , STRING : [ STRING , NUMBER , NUMBER ] , STRING : [ STRING , NUMBER , NUMBER ] , STRING : [ STRING , NUMBER , NUMBER ] , STRING : [ STRING , NUMBER , NUMBER ] } NEWLINE VAR = sorted ( VAR . VAR ( ) , VAR = lambda VAR : VAR [ NUMBER ] [ NUMBER ] ) NEWLINE VAR = { VAR [ NUMBER ] : ( VAR , VAR ) for VAR , VAR in VAR } NEWLINE VAR = dict ( VAR . values ( ) )", "VAR = np . argsort ( y . ravel ( ) ) NEWLINE print ( VAR ) NEWLINE", "for VAR in zip ( * contents ) : NEWLINE print ( VAR )", "import music21 NEWLINE import pandas as pd NEWLINE import numpy as np NEWLINE VAR = pd . Series ( [ STRING , STRING , STRING , STRING ] ) NEWLINE VAR = pd . DataFrame ( { NUMBER : VAR , NUMBER : VAR . shift ( NUMBER ) } ) NEWLINE def myfunc ( VAR ) : NEWLINE if not any ( [ pd . isnull ( VAR [ NUMBER ] ) , pd . isnull ( VAR [ NUMBER ] ) ] ) : NEWLINE return music21 . interval . Interval ( music21 . note . Note ( VAR [ NUMBER ] ) , music21 . note . Note ( VAR [ NUMBER ] ) ) . name NEWLINE VAR . apply ( myfunc , axis = NUMBER )", "class Profile ( models . Model ) : NEWLINE VAR = models . OneToOneField ( User )", "Date gas NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER o3 NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER so2 NUMBER NEWLINE Name : val1 , dtype : int64", ">> > get_start_of_previous_month ( datetime . datetime . now ( ) ) NEWLINE datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE >> > get_start_of_previous_month ( datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) NEWLINE datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "from __future__ import with_statement NEWLINE from contextlib import closing NEWLINE from zipfile import ZipFile , ZIP_DEFLATED NEWLINE import os NEWLINE def zipdir ( VAR , VAR ) : NEWLINE assert os . path . isdir ( VAR ) NEWLINE with closing ( ZipFile ( VAR , STRING , ZIP_DEFLATED ) ) as VAR : NEWLINE for VAR , VAR , VAR in os . walk ( VAR ) : NEWLINE for VAR in VAR : NEWLINE VAR = os . path . join ( VAR , VAR ) NEWLINE VAR = VAR [ len ( VAR ) + len ( os . sep ) : ] NEWLINE VAR . write ( VAR , VAR ) NEWLINE if __name__ == STRING : NEWLINE import sys NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE zipdir ( VAR , VAR )", "from string import Template NEWLINE VAR = Template ( STRING ) NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE print ( VAR . substitute ( { STRING : VAR . strip ( ) } ) )", "pd . rolling_mean ( data , window = NUMBER , center = True )", "In [ NUMBER ] : NEWLINE df . ix [ : , : STRING ] . apply ( pd . Series . value_counts ) NEWLINE Out [ NUMBER ] : NEWLINE q1 q2 q3 NEWLINE True NUMBER NUMBER NUMBER NEWLINE False NUMBER NUMBER NUMBER", "$ python2 out . py NEWLINE Code finished NEWLINE $ ls NEWLINE elem1 . log elem2 . log out . py", "STRING", "VAR = re . compile ( STRING , re . MULTILINE ) NEWLINE VAR . sub ( STRING , STRING ) NEWLINE re . sub ( STRING , STRING , STRING , flags = re . MULTILINE ) NEWLINE VAR . sub ( STRING , STRING )", "class SpecificUserProfile ( UserProfile ) : NEWLINE VAR = models . ForeignKey ( STRING , related_name = STRING )", ">> > tree NEWLINE < lxml . etree . _ElementTree object at NUMBER >", "VAR = [ my_list [ VAR : VAR + size ] for VAR in range ( NUMBER , len ( my_list ) , size ) ]", ">> > import numpy as np NEWLINE >> > VAR = np . ones ( ( NUMBER , NUMBER ) , dtype = int ) NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > VAR = VAR . ravel ( ) NEWLINE >> > VAR [ VAR ] = NUMBER NEWLINE >> > VAR . reshape ( VAR . shape ) NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "for VAR , VAR in groups : NEWLINE VAR = list ( VAR ) NEWLINE if len ( VAR ) > NUMBER : NEWLINE print ( VAR ) NEWLINE [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ]", "VAR = ( center_L1 [ NUMBER ] + ( length / NUMBER ) * cos ( angle ) - ( thickness / NUMBER ) * sin ( angle ) , center_L1 [ NUMBER ] + ( thickness / NUMBER ) * cos ( angle ) + ( length / NUMBER ) * sin ( angle ) ) NEWLINE VAR = ( center_L1 [ NUMBER ] - ( length / NUMBER ) * cos ( angle ) - ( thickness / NUMBER ) * sin ( angle ) , center_L1 [ NUMBER ] + ( thickness / NUMBER ) * cos ( angle ) - ( length / NUMBER ) * sin ( angle ) ) NEWLINE VAR = ( center_L1 [ NUMBER ] + ( length / NUMBER ) * cos ( angle ) + ( thickness / NUMBER ) * sin ( angle ) , center_L1 [ NUMBER ] - ( thickness / NUMBER ) * cos ( angle ) + ( length / NUMBER ) * sin ( angle ) ) NEWLINE VAR = ( center_L1 [ NUMBER ] - ( length / NUMBER ) * cos ( angle ) + ( thickness / NUMBER ) * sin ( angle ) , center_L1 [ NUMBER ] - ( thickness / NUMBER ) * cos ( angle ) - ( length / NUMBER ) * sin ( angle ) )", ">> > VAR = NUMBER NEWLINE >> > VAR = raw_input ( STRING ) NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > chr ( ord ( VAR ) + VAR ) NEWLINE STRING", "class class_reify ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE try : NEWLINE VAR . __doc__ = VAR . __doc__ NEWLINE except : NEWLINE pass NEWLINE def __get__ ( VAR , VAR , VAR = None ) : NEWLINE VAR = VAR . VAR ( VAR ) NEWLINE setattr ( VAR , VAR . VAR . __name__ , VAR ) NEWLINE return VAR NEWLINE class Test ( object ) : NEWLINE @ class_reify NEWLINE def foo ( VAR ) : NEWLINE print STRING , VAR NEWLINE return NUMBER NEWLINE print Test . foo NEWLINE print Test . foo", "import os NEWLINE VAR = [ ] NEWLINE for VAR in os . listdir ( STRING ) : NEWLINE if VAR . endswith ( STRING ) : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . append ( STRING . join ( VAR . strip ( ) for VAR in VAR ) )", "import string NEWLINE import collections NEWLINE def vigsquare ( VAR = False ) : NEWLINE STRING NEWLINE VAR = string . ascii_uppercase NEWLINE VAR = collections . deque ( VAR ) NEWLINE VAR = [ ] NEWLINE for VAR in xrange ( NUMBER ) : NEWLINE VAR . append ( STRING . join ( VAR ) ) NEWLINE VAR . rotate ( - NUMBER ) NEWLINE if VAR : NEWLINE return STRING . join ( VAR ) NEWLINE else : NEWLINE return STRING . join ( VAR )", "[ n ] NEWLINE [ ] NEWLINE [ k ]", "In [ NUMBER ] : VAR = br . open ( STRING ) NEWLINE In [ NUMBER ] : VAR = list ( br . forms ( ) ) NEWLINE In [ NUMBER ] : VAR [ NUMBER ] . get_value ( STRING ) NEWLINE Out [ NUMBER ] : STRING NEWLINE In [ NUMBER ] : VAR [ NUMBER ] . get_value ( STRING ) NEWLINE Out [ NUMBER ] : STRING", "INFO : demo : An INFO message NEWLINE DEBUG : demo : An DEBUG message", "self . values [ index ] = ( self . generators [ index ] . next ( ) , index )", "VAR = theta2 ( NUMBER ) + theta2 ( NUMBER ) * L2 ( NUMBER ) + theta2 ( NUMBER ) * L2 ( NUMBER ) + theta2 ( NUMBER ) * L2 ( NUMBER )", "import urllib2 NEWLINE import socket NEWLINE def is_bad_proxy ( VAR ) : NEWLINE try : NEWLINE VAR = urllib2 . ProxyHandler ( { STRING : VAR } ) NEWLINE VAR = urllib2 . build_opener ( VAR ) NEWLINE VAR . addheaders = [ ( STRING , STRING ) ] NEWLINE urllib2 . install_opener ( VAR ) NEWLINE VAR = urllib2 . Request ( STRING ) NEWLINE VAR = urllib2 . urlopen ( VAR ) NEWLINE except urllib2 . HTTPError , VAR : NEWLINE print STRING , VAR . code NEWLINE return VAR . code NEWLINE except Exception , VAR : NEWLINE print STRING , VAR NEWLINE return True NEWLINE return False NEWLINE def main ( ) : NEWLINE socket . setdefaulttimeout ( NUMBER ) NEWLINE VAR = [ STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE if is_bad_proxy ( VAR ) : NEWLINE print STRING % ( VAR ) NEWLINE else : NEWLINE print STRING % ( VAR ) NEWLINE if __name__ == STRING : NEWLINE main ( )", "python . / local_lib / bin / regression . py - u daily_regression NEWLINE python . / local_lib / bin / run . py - t $ Test_Name - b - c - no_compile - no_wlf NEWLINE python . / local_lib / bin / run . py - t $ Test_Name - b - c - no_compile - no_wlf - args = STRING NEWLINE python . / local_lib / bin / results . py - r daily_regression - html - o $ WORK / results / daily_regression_results . html", "require STRING NEWLINE VAR = Selenium : : WebDriver : : Remote : : Capabilities . phantomjs ( STRING = > STRING ) NEWLINE VAR = Selenium : : WebDriver . for : phantomjs , : desired_capabilities = > VAR", ">> > v . inverse_transform ( X [ i ] )", "for VAR in r ( l ) : NEWLINE . . .", "positional and keyword NEWLINE frozen args : ( NUMBER , NUMBER , NUMBER ) NEWLINE frozen kwds : { } NEWLINE positional only NEWLINE frozen args : ( NUMBER , ) NEWLINE frozen kwds : { STRING : NUMBER , STRING : NUMBER }", "from django . conf import settings NEWLINE from django . contrib . sessions . backends . db import SessionStore as DBStore NEWLINE from django . core . cache import get_cache NEWLINE class SessionStore ( DBStore ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR = None ) : NEWLINE super ( SessionStore , VAR ) . __init__ ( VAR ) NEWLINE VAR . cache = get_cache ( getattr ( settings , STRING , STRING ) ) NEWLINE def load ( VAR ) : NEWLINE VAR = VAR . cache . get ( VAR . VAR , None ) NEWLINE if VAR is None : NEWLINE VAR = super ( SessionStore , VAR ) . load ( ) NEWLINE VAR . cache . set ( VAR . VAR , VAR , settings . SESSION_COOKIE_AGE ) NEWLINE return VAR NEWLINE def exists ( VAR , VAR ) : NEWLINE return super ( SessionStore , VAR ) . exists ( VAR ) NEWLINE def save ( VAR , VAR = False ) : NEWLINE super ( SessionStore , VAR ) . save ( VAR ) NEWLINE VAR . cache . set ( VAR . VAR , VAR . _session , settings . SESSION_COOKIE_AGE ) NEWLINE def delete ( VAR , VAR = None ) : NEWLINE super ( SessionStore , VAR ) . delete ( VAR ) NEWLINE VAR . cache . delete ( VAR or VAR . VAR ) NEWLINE def flush ( VAR ) : NEWLINE STRING NEWLINE VAR . clear ( ) NEWLINE VAR . delete ( VAR . VAR ) NEWLINE VAR . create ( )", "{ % for VAR , VAR in d . items % } NEWLINE { % if VAR . subproduct1 % } NEWLINE { % for VAR in VAR . subproduct1 % } NEWLINE { { VAR } } NEWLINE { % endfor % } NEWLINE { % endif % } NEWLINE { % if VAR . subproduct2 % } NEWLINE { % for VAR in VAR . subproduct2 % } NEWLINE { { VAR } } NEWLINE { % endfor % } NEWLINE { % endif % } NEWLINE { % endfor % }", "start NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER finished NEWLINE start NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER finished NEWLINE start NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER finished", "df [ STRING ] = df [ STRING ] * NUMBER", "+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + NEWLINE | Connected ! | NEWLINE | | NEWLINE | sql - statement | NEWLINE | help [ tablename ] | NEWLINE | quit | NEWLINE | | NEWLINE + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + NEWLINE SQL >", "def newFrame ( VAR , VAR ) : NEWLINE VAR . new_window = wx . Frame ( VAR , title = STRING , size = ( NUMBER , NUMBER ) , pos = ( NUMBER , NUMBER ) ) NEWLINE VAR = wx . BoxSizer ( ) NEWLINE VAR . SetMinSize ( ( NUMBER , NUMBER ) ) NEWLINE VAR . scroll = wx . ScrolledWindow ( VAR . new_window , - NUMBER ) NEWLINE VAR . Add ( VAR . scroll , NUMBER , wx . EXPAND ) NEWLINE VAR . scroll . SetScrollbars ( NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR . new_window . SetSizer ( VAR ) NEWLINE VAR . new_window . Layout ( ) NEWLINE VAR . new_window . Fit ( ) NEWLINE VAR . new_window . Show ( )", "VAR = NUMBER NEWLINE VAR = np . linspace ( np . min ( rev_count ) , np . max ( rev_count ) + NUMBER , VAR + NUMBER )", "import logging NEWLINE VAR = logging . StreamHandler ( ) NEWLINE VAR = logging . Formatter ( STRING ) NEWLINE VAR . setFormatter ( VAR ) NEWLINE logger . addHandler ( VAR )", "dot product ( ( a * t + b , c * t + d ) , ( - f , e ) ) = NUMBER NEWLINE - ( a * t + b ) * f + ( c * t + d ) * e = NUMBER", "In [ NUMBER ] : import pandas as pd NEWLINE In [ NUMBER ] : VAR = pd . DataFrame ( { STRING : [ STRING , STRING , STRING ] } ) NEWLINE In [ NUMBER ] : VAR . ticker . str . split ( ) . tolist ( ) NEWLINE Out [ NUMBER ] : NEWLINE [ [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ]", "{ STRING : STRING , STRING : [ { STRING : STRING , STRING : true } ] } , NEWLINE { STRING : STRING , STRING : [ { STRING : STRING , STRING : true } ] } , NEWLINE { STRING : STRING , STRING : STRING } , NEWLINE . . . NEWLINE STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : { STRING : STRING } } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ]", "def set_session_key ( VAR , VAR ) : NEWLINE if VAR . last_session_key and not VAR . last_session_key == VAR : NEWLINE Session . objects . get ( session_key = VAR . last_session_key ) . delete ( ) NEWLINE VAR . last_session_key = VAR NEWLINE VAR . save ( )", "class BaseHandler ( webapp2 . RequestHandler ) : NEWLINE . . . NEWLINE def render_jinja ( self , name , ** data ) : NEWLINE data [ STRING ] = users . create_logout_url ( self . request . uri ) NEWLINE VAR = jinja_environment . get_template ( STRING + name + STRING ) NEWLINE self . response . out . write ( VAR . render ( data ) )", "VAR = root . xpath ( STRING )", "import socket NEWLINE from time import sleep NEWLINE def f ( VAR ) : NEWLINE VAR , VAR = VAR . accept ( ) NEWLINE print VAR . recv ( NUMBER ) NEWLINE VAR = socket . socket ( ) NEWLINE VAR . bind ( ( STRING , NUMBER ) ) NEWLINE VAR . listen ( NUMBER ) NEWLINE f ( VAR ) NEWLINE sleep ( NUMBER )", "pip show < package name >", "VAR = [ VAR [ NUMBER ] for VAR in main_list ] NEWLINE VAR = [ VAR . get ( STRING ) for VAR in xml_data ] NEWLINE for VAR , VAR in itertools . product ( VAR , VAR ) : NEWLINE if VAR == VAR : NEWLINE print ( VAR )", "import itertools NEWLINE VAR = [ NUMBER , NUMBER ] NEWLINE print ( list ( itertools . product ( VAR , repeat = NUMBER ) ) ) NEWLINE", "x . reshape ( ( - NUMBER , NUMBER ) ) * y", "bytearray ( [ NUMBER , NUMBER ] ) NEWLINE Out [ NUMBER ] : bytearray ( STRING ) NEWLINE struct . unpack ( STRING , bytearray ( [ NUMBER , NUMBER ] ) ) NEWLINE Out [ NUMBER ] : ( NUMBER , )", "def xy_wrapper ( VAR , VAR ) : NEWLINE return STRING . join ( spreadout ( [ STRING ] * VAR , [ STRING ] * VAR ) )", ">> > re . search ( STRING , a ) . group ( ) NEWLINE STRING", "public static < T > void applyToListInPlace ( List < T > list , Func < T , T > f ) { ListIterator < T > itr = list . listIterator ( ) ; while ( itr . hasNext ( ) ) { T output = f . apply ( itr . next ( ) ) ; itr . set ( output ) ; } } NEWLINE // . . . NEWLINE List < String > myList = . . . ; NEWLINE applyToListInPlace ( myList , new Func < String , String > ( ) { public String apply ( String in ) { return in . toLowerCase ( ) ; } } ) ;", "def nearest_applicable_conversion ( VAR ) : NEWLINE try : NEWLINE return int ( VAR ) NEWLINE except ValueError : NEWLINE pass NEWLINE try : NEWLINE return float ( VAR ) NEWLINE except ValueError : NEWLINE pass NEWLINE return VAR", ". . role : : strike NEWLINE : class : strike", "STRING . format ( STRING . join ( STRING . format ( ord ( VAR ) ) for VAR in value ) )", "VAR = open ( STRING , STRING ) . readlines ( ) NEWLINE VAR = open ( STRING , STRING ) . readlines ( ) NEWLINE VAR = [ ] NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = [ ] NEWLINE while ( NUMBER ) : NEWLINE try : NEWLINE if VAR [ VAR ] [ : - NUMBER ] == VAR [ VAR ] [ : - NUMBER ] : NEWLINE VAR += NUMBER NEWLINE VAR += NUMBER NEWLINE elif VAR [ VAR ] [ : - NUMBER ] > VAR [ VAR ] [ : - NUMBER ] : NEWLINE VAR += NUMBER NEWLINE elif VAR [ VAR ] [ : - NUMBER ] < VAR [ VAR ] [ : - NUMBER ] : NEWLINE VAR . append ( VAR + NUMBER ) NEWLINE VAR += NUMBER NEWLINE except IndexError : NEWLINE break NEWLINE for VAR in VAR : NEWLINE print VAR", "class TestA2 ( TestCaseA ) : NEWLINE def setUp ( VAR ) : NEWLINE VAR . thing = A2 ( )", "VAR = foobar2 . clip_lower ( NUMBER ) . apply ( lambda VAR : VAR [ STRING ] + VAR [ STRING ] - VAR [ STRING ] - VAR [ STRING ] , axis = NUMBER )", "echo STRING > x . command NEWLINE chmod + x x . command NEWLINE open x . command", "print ( self )", "print str ( count ) + STRING + str ( conv )", "In [ NUMBER ] : NEWLINE df . merge ( df1 , how = STRING , on = STRING ) NEWLINE Out [ NUMBER ] : NEWLINE A B C D NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER", "VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = build_icmpv6_chunk ( VAR , VAR )", ">> > arrangements ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE { ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) } NEWLINE >> > arrangements ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE set ( ) NEWLINE >> > arrangements ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE { ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) } NEWLINE >> > arrangements ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE { ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) }", "config . add_view ( route_name = STRING , view = STRING , permission = STRING , renderer = STRING )", "df . loc [ df . DEFAULT , special ] NEWLINE Out [ NUMBER ] : NEWLINE A D G I NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER", "return JsonResponse ( { STRING : STRING , STRING : val } )", "UPDATE stopovers SET location_id = ( SELECT locations . id FROM locations WHERE locations . x = stopovers . x AND locations . y = stopovers . y LIMIT ? OFFSET ? )", "VAR = SQLAlchemy ( metadata = MetaData ( naming_convention = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , } ) )", "VAR = ( db . session . query ( Person ) . options ( db . eagerload ( Person . region ) ) . get ( NUMBER ) ) NEWLINE print ( VAR ) NEWLINE print ( VAR . region . name )", "import pygraph . classes . graph NEWLINE import pygraph . algorithms NEWLINE import pygraph . algorithms . minmax NEWLINE import time NEWLINE import random NEWLINE import sys NEWLINE if len ( sys . argv ) != NUMBER : NEWLINE print ( STRING % sys . argv [ NUMBER ] ) NEWLINE sys . exit ( NUMBER ) NEWLINE VAR = NUMBER ** int ( sys . argv [ NUMBER ] ) NEWLINE VAR = NUMBER ** int ( sys . argv [ NUMBER ] ) NEWLINE VAR = time . clock ( ) NEWLINE def timestamp ( VAR ) : NEWLINE VAR = time . gmtime ( time . clock ( ) - VAR ) NEWLINE print STRING , VAR . ljust ( NUMBER ) , time . strftime ( STRING , VAR ) NEWLINE timestamp ( STRING % VAR ) NEWLINE VAR = pygraph . classes . graph . graph ( ) NEWLINE VAR . add_nodes ( xrange ( VAR ) ) NEWLINE timestamp ( STRING % VAR ) NEWLINE VAR = set ( ) NEWLINE while len ( VAR ) < VAR : NEWLINE VAR , VAR = random . randrange ( VAR ) , random . randrange ( VAR ) NEWLINE if VAR == VAR : NEWLINE continue NEWLINE elif VAR > VAR : NEWLINE VAR , VAR = VAR , VAR NEWLINE VAR . add ( ( VAR , VAR ) ) NEWLINE timestamp ( STRING ) NEWLINE for VAR in VAR : NEWLINE VAR . add_edge ( VAR ) NEWLINE timestamp ( STRING ) NEWLINE VAR = NUMBER NEWLINE VAR , VAR = pygraph . algorithms . minmax . shortest_path ( VAR , VAR ) NEWLINE timestamp ( STRING ) NEWLINE VAR = VAR - NUMBER NEWLINE VAR = [ ] NEWLINE while VAR != VAR : NEWLINE VAR = VAR [ VAR ] NEWLINE print STRING , VAR , VAR [ VAR ] NEWLINE assert VAR in VAR . neighbors ( VAR ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR NEWLINE VAR . append ( VAR ) NEWLINE timestamp ( STRING ) NEWLINE print STRING , VAR", ">> > help ( STRING ) NEWLINE Welcome to Python NUMBER ! This is the online help utility . NEWLINE . . . .", "if { } . viewkeys ( ) < kargs . viewkeys ( ) < { STRING , STRING } : NEWLINE raise ValueError ( STRING )", "for VAR in f1 : NEWLINE for VAR in range ( len ( KEYWORDS ) ) : NEWLINE if VAR . startswith ( STRING ) and KEYWORDS [ VAR ] in VAR : NEWLINE VAR = STRING + KEYWORDS [ VAR ] + STRING + str ( VALS [ VAR ] ) + STRING NEWLINE f2 . write ( VAR )", "In [ NUMBER ] : VAR = y . mean ( axis = ( NUMBER , NUMBER ) ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "{ Hello there | Hello | Howdy } Dr . Munchauson you { gentleman | fine fellow } ! NEWLINE What { will | shall | should } we { eat | have } for lunch ? NEWLINE Peas by the { thousand | hundred | NUMBER } said Dr . Munchauson ; { that | is } what he said . NEWLINE newline NEWLINE But there are no { misters | doctors } here good sir ! NEWLINE Help us if there is an emergency . NEWLINE newline NEWLINE I am the { very last | last } sentence for this { instance | example } .", "from lxml import etree NEWLINE VAR = STRING NEWLINE VAR = etree . fromstring ( VAR ) NEWLINE print [ VAR . tag for VAR in VAR . xpath ( STRING ) ]", "VAR = K . dot ( np . array ( [ Y , Z ] ) . transpose ( ) ) NEWLINE VAR = K . dot ( np . array ( [ X ] ) . transpose ( ) )", "SELECT * FROM Users WHERE name = STRING ;", "elif con_ext == STRING : NEWLINE stage ( )", "import geopy NEWLINE import geopy . distance NEWLINE VAR = geopy . Point ( NUMBER , NUMBER ) NEWLINE VAR = geopy . distance . VincentyDistance ( kilometers = NUMBER ) NEWLINE print VAR . destination ( point = VAR , bearing = NUMBER )", "from elps import PyTestClass as TC ; NEWLINE VAR = TC ( ) ; NEWLINE print VAR . calculate ( NUMBER ) ; NEWLINE class B ( TC ) : NEWLINE def override_me ( VAR ) : NEWLINE return NUMBER NEWLINE VAR = B ( ) NEWLINE print VAR . calculate ( NUMBER )", "VAR = df . groupby ( df . index ) NEWLINE VAR . apply ( func )", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "from collections import Counter NEWLINE VAR = [ STRING , STRING , STRING , STRING ] NEWLINE VAR = Counter ( ( VAR [ : NUMBER ] , VAR [ NUMBER : ] ) for VAR in VAR ) NEWLINE print VAR . most_common ( )", ">> > VAR = ( STRING , [ datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ] ) NEWLINE >> > VAR [ NUMBER ] [ NUMBER ] . strftime ( STRING ) NEWLINE STRING", "import collections NEWLINE import itertools NEWLINE import string NEWLINE def allocate_goals ( VAR , VAR ) : NEWLINE VAR = VAR * NUMBER NEWLINE while True : NEWLINE for VAR in VAR : NEWLINE yield VAR NEWLINE for VAR in VAR : NEWLINE yield VAR NEWLINE def allocate ( VAR , VAR ) : NEWLINE VAR = string . ascii_uppercase [ : VAR ] NEWLINE VAR = VAR // NUMBER NEWLINE VAR , VAR = VAR [ : VAR ] , VAR [ VAR : ] NEWLINE VAR = allocate_goals ( VAR , VAR ) NEWLINE return collections . Counter ( itertools . islice ( VAR , VAR ) ) NEWLINE for VAR in xrange ( NUMBER , NUMBER ) : NEWLINE print VAR , sorted ( allocate ( VAR , NUMBER ) . items ( ) )", "def listcleaner ( VAR ) : NEWLINE if not VAR : NEWLINE return [ ] NEWLINE if isinstance ( VAR [ NUMBER ] , list ) : NEWLINE if VAR [ NUMBER ] : NEWLINE return [ listcleaner ( VAR [ NUMBER ] ) ] + listcleaner ( VAR [ NUMBER : ] ) NEWLINE else : NEWLINE return listcleaner ( VAR [ NUMBER : ] ) NEWLINE else : NEWLINE return [ VAR [ NUMBER ] ] + listcleaner ( VAR [ NUMBER : ] ) NEWLINE VAR = listcleaner ( [ NUMBER , [ ] , [ NUMBER , [ ] ] , NUMBER ] ) NEWLINE print ( VAR )", "class Bar NEWLINE { int meow ; int bark ; class SubBar { int joe ; int pete ; } }", ">> > VAR = pd . date_range ( STRING , periods = NUMBER , freq = STRING ) NEWLINE >> > VAR = pd . DataFrame ( { STRING : np . random . random ( NUMBER ) } , VAR = VAR ) NEWLINE >> > VAR NEWLINE temp NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER", "< form method = STRING > NEWLINE { % csrf_token % } NEWLINE { { formset . as_p } }", "VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER ] * NUMBER , STRING : [ NUMBER ] * NUMBER } ) . set_index ( [ STRING , STRING , STRING ] ) NEWLINE >> > VAR NEWLINE v1 v2 NEWLINE i1 i2 i3 NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "VAR = models . CharField ( max_length = NUMBER , default = increment_invoice_number , null = True , blank = True )", "VAR , VAR = [ ] , NUMBER NEWLINE for VAR in data : NEWLINE VAR . extend ( ( VAR , NUMBER ) for VAR in range ( int ( VAR ) , int ( VAR [ NUMBER ] ) ) ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = VAR [ NUMBER ] + NUMBER", "NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE dtype : float64", "from System . Collections import * NEWLINE VAR = Hashtable ( ) NEWLINE from System . Collections . Generic import * NEWLINE VAR = List [ str ] ( )", "Header , Profile , Report , Sequence , Status NEWLINE , xxxx , NUMBER , NUMBER , true NEWLINE The , xxxx , NUMBER , NUMBER , true NEWLINE , xxxx , NUMBER , NUMBER , true", "VAR = [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] NEWLINE def borda ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE for VAR , VAR in enumerate ( VAR [ NUMBER : : - NUMBER ] ) : NEWLINE if VAR not in VAR : NEWLINE VAR [ VAR ] = VAR + NUMBER NEWLINE else : NEWLINE VAR [ VAR ] += VAR + NUMBER NEWLINE VAR = max ( VAR . iteritems ( ) , key = lambda VAR : VAR [ NUMBER ] ) [ NUMBER ] NEWLINE VAR = [ VAR [ VAR [ NUMBER ] ] for VAR in sorted ( VAR . keys ( ) ) ] NEWLINE return ( VAR , VAR )", ">> > from sqlalchemy . orm import mapper NEWLINE >> > mapper ( Player , players_table ) NEWLINE < Mapper at NUMBER x . . . ; Player >", "df [ STRING ] = ( df . val == NUMBER ) . cumsum ( ) NEWLINE >> > df . head ( NUMBER ) NEWLINE EndDate val group_no NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER - NUMBER NUMBER", "VAR = open ( path , STRING ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR > given_number : NEWLINE VAR = VAR . split ( STRING ) [ NUMBER ] NEWLINE VAR . close ( )", "VAR = np . reshape ( list_data , ( NUMBER , NUMBER ) ) . T", "world NEWLINE hello", "zip ( * sorted ( zip ( sorted ( range ( len ( perc ) ) , key = perc . __getitem__ ) [ : : - NUMBER ] , opt ) ) ) [ NUMBER ]", "def re_round ( VAR , VAR = NUMBER ) : NEWLINE try : NEWLINE return round ( VAR , VAR ) NEWLINE except TypeError : NEWLINE return type ( VAR ) ( re_round ( VAR , VAR ) for VAR in VAR )", "VAR = { folder1 : [ file1 , file2 ] , folder2 : [ file3 ] , . . . }", "VAR = np . vstack ( [ np . random . multivariate_normal ( coordstest [ VAR , : ] , [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] , NUMBER ) for VAR in range ( NUMBER ) ] )", "John , Jeff , Judy , NEWLINE NUMBER , NUMBER , NUMBER , NEWLINE NUMBER , NUMBER , NUMBER , NEWLINE NUMBER , NUMBER , NUMBER ,", "VAR = np . arange ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . histogram ( A , VAR ) [ NUMBER ] NEWLINE VAR = np . histogram ( A , VAR , weights = A ) [ NUMBER ] / VAR NEWLINE VAR = np . histogram ( A , VAR , weights = B ) [ NUMBER ] / VAR NEWLINE VAR = np . vstack ( [ VAR , VAR ] )", "import gio NEWLINE import os NEWLINE def directory_changed ( VAR , VAR , VAR , VAR ) : NEWLINE if os . path . isdir ( VAR ) : NEWLINE add_monitor ( VAR ) NEWLINE print STRING , VAR , VAR , VAR NEWLINE def add_monitor ( VAR ) : NEWLINE VAR = gio . File ( VAR ) NEWLINE VAR = VAR . monitor_directory ( gio . FILE_MONITOR_NONE , None ) NEWLINE VAR . connect ( STRING , directory_changed ) NEWLINE add_monitor ( STRING ) NEWLINE import glib NEWLINE VAR = glib . MainLoop ( ) NEWLINE VAR . run ( )", "VAR = CSSSelector ( STRING ) NEWLINE VAR = VAR ( page_html )", "from xml . etree import ElementTree as et NEWLINE VAR = STRING NEWLINE VAR = et . fromstring ( VAR ) NEWLINE VAR . find ( STRING ) . text = STRING NEWLINE print et . tostring ( VAR )", ">> > d2 . T NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > for VAR in d2 . T : NEWLINE . . . print ( VAR ) NEWLINE . . . NEWLINE [ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER ] NEWLINE [ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER ] NEWLINE [ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER ]", "std : : function < std : : string ( int , int ) > get_string_function ( const std : : string & name ) NEWLINE { return [ = ] ( int x , int y ) { return name + STRING + std : : to_string ( x ) + STRING + std : : to_string ( y ) + STRING ; } ; }", "f1 NUMBER [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING ] ] NEWLINE f2 NUMBER [ [ STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] NEWLINE f3 NUMBER [ [ STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ] NEWLINE f4 NUMBER [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING ] ]", "{ % extends STRING % } NEWLINE { % block content % } NEWLINE . . . NEWLINE { % endblock % } NEWLINE { % block scripts % } NEWLINE < script src = STRING > < / script > NEWLINE < script src = STRING > < / script > NEWLINE < script > NEWLINE $ ( document ) . ready ( function ( ) { . . . } ) ; NEWLINE < / script > NEWLINE { % endblock % }", "os . path . join ( dir_name , STRING . join ( ( base_filename , filename_suffix ) ) )", "import itertools NEWLINE import string NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = { VAR : [ VAR ] for VAR in string . uppercase if VAR not in VAR } NEWLINE for VAR in itertools . permutations ( VAR ) : NEWLINE VAR = dict ( zip ( VAR , VAR ) ) NEWLINE print dict ( VAR . items ( ) + VAR . items ( ) )", "VAR = [ VAR for VAR in os . listdir ( STRING ) if os . path . isfile ( VAR ) ] NEWLINE for VAR in VAR : NEWLINE", ">> > VAR = a [ np . argsort ( a [ : , NUMBER ] ) ] NEWLINE >> > VAR , VAR = np . unique ( VAR [ : , NUMBER ] , return_index = True ) NEWLINE >> > VAR = np . add . reduceat ( VAR [ : , NUMBER : ] , VAR ) NEWLINE >> > np . column_stack ( ( VAR , VAR ) ) NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "from django . contrib . auth . models import User NEWLINE class UserProfile ( models . Model ) : NEWLINE VAR = models . ForeignKey ( User ) NEWLINE VAR = models . CharField ( max_length = NUMBER )", "In [ NUMBER ] : VAR = [ VAR [ STRING ] for VAR in soup . findAll ( STRING ) if VAR . has_key ( STRING ) ] NEWLINE In [ NUMBER ] : VAR [ : NUMBER ] NEWLINE Out [ NUMBER ] : NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "import pytz NEWLINE import datetime as DT NEWLINE VAR = DT . datetime . VAR ( ) NEWLINE VAR = dict ( ) NEWLINE for VAR in pytz . all_timezones : NEWLINE VAR = pytz . timezone ( VAR ) NEWLINE try : NEWLINE VAR = VAR . dst ( VAR , is_dst = False ) NEWLINE except TypeError : NEWLINE VAR = VAR . dst ( VAR ) NEWLINE if VAR == DT . timedelta ( NUMBER ) : NEWLINE VAR [ VAR ] = VAR . localize ( VAR , is_dst = False ) . strftime ( STRING ) NEWLINE else : NEWLINE for VAR in VAR . _utc_transition_times [ : : - NUMBER ] : NEWLINE VAR = VAR . dst ( VAR , is_dst = False ) NEWLINE if VAR == DT . timedelta ( NUMBER ) : NEWLINE VAR [ VAR ] = ( VAR . localize ( VAR , is_dst = False ) . strftime ( STRING ) ) NEWLINE break NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE assert len ( VAR ) == len ( pytz . all_timezones )", "text of interest", "VAR , VAR = np . meshgrid ( np . arange ( NUMBER , NUMBER ) , np . arange ( NUMBER , NUMBER ) ) NEWLINE VAR = np . vstack ( ( VAR . ravel ( ) , VAR . ravel ( ) ) ) . T NEWLINE VAR NEWLINE", "VAR = sum ( scores . get ( VAR , NUMBER ) for VAR in text . split ( ) )", "VAR = l1 . intersection ( l2 ) NEWLINE print len ( VAR )", "< field name = STRING groups = STRING / >", "[ VAR for VAR , VAR in child_parent . items ( ) if VAR == NUMBER ]", "$ ls NEWLINE file NUMBER file NUMBER file NUMBER s . py NEWLINE $ python s . py NUMBER NEWLINE NUMBER NEWLINE $ python s . py _ NEWLINE NUMBER", "c . PromptManager . in_template = STRING NEWLINE c . PromptManager . in2_template = STRING", "def next_string ( VAR ) : NEWLINE if len ( VAR ) == NUMBER : NEWLINE return STRING NEWLINE VAR = VAR [ NUMBER : - NUMBER ] NEWLINE VAR = VAR [ - NUMBER ] NEWLINE if VAR == STRING : NEWLINE return next_string ( VAR ) + STRING NEWLINE if VAR == STRING : NEWLINE return VAR + STRING NEWLINE if VAR == STRING : NEWLINE return VAR + STRING NEWLINE if VAR == STRING : NEWLINE return VAR + STRING NEWLINE return VAR + chr ( ord ( VAR ) + NUMBER )", "map ( STRING , plot = T ) NEWLINE rect ( - NUMBER , NUMBER , - NUMBER , NUMBER , col = c ( STRING ) )", "% timeit ( np . diff ( np . sign ( my_array ) ) != NUMBER ) . sum ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "VAR = [ { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , { STRING : NUMBER } ] NEWLINE [ VAR for VAR in VAR [ NUMBER ] if VAR in VAR [ NUMBER ] ] NEWLINE [ STRING ]", "import os NEWLINE import sys NEWLINE VAR = os . geteuid ( ) NEWLINE if VAR != NUMBER : NEWLINE print STRING NEWLINE VAR = [ STRING , sys . executable ] + sys . argv + [ os . environ ] NEWLINE os . execlpe ( STRING , * VAR ) NEWLINE print STRING , VAR", ">> > from operator import itemgetter NEWLINE >> > NEWLINE >> > VAR = { . . . STRING : NUMBER , . . . STRING : NUMBER , . . . STRING : NUMBER , . . . STRING : NUMBER , . . . STRING : NUMBER , . . . } NEWLINE >> > NEWLINE >> > VAR = { . . . STRING : NUMBER , . . . STRING : NUMBER , . . . STRING : NUMBER , . . . STRING : NUMBER , . . . STRING : NUMBER , . . . } NEWLINE >> > NEWLINE >> > for VAR , VAR in sorted ( VAR . items ( ) , key = itemgetter ( NUMBER ) ) : NEWLINE . . . VAR = VAR [ VAR ] - VAR NEWLINE . . . print STRING % ( VAR , VAR ) NEWLINE . . . NEWLINE . . . NEWLINE Evan Lysacek ( + NUMBER ) NEWLINE Daisuke Takahashi ( + NUMBER ) NEWLINE Evgeni Plushenko ( - NUMBER ) NEWLINE Nobunari Oda ( + NUMBER ) NEWLINE Stephane Lambiel ( + NUMBER ) NEWLINE >> >", "def update_by_email ( VAR = None , ** kwargs ) : NEWLINE print ( kwargs )", "print STRING NEWLINE VAR = box_index_C . reshape ( - NUMBER , NUMBER ) NEWLINE VAR = VAR / b_C % nbins NEWLINE print STRING NEWLINE VAR = box_index_F . reshape ( - NUMBER , NUMBER ) NEWLINE VAR = VAR / b_F % nbins", "from django . forms . formsets import formset_factory NEWLINE from django . shortcuts import render_to_response NEWLINE from django . template import RequestContext NEWLINE from django . http import HttpResponseRedirect NEWLINE from django . core . urlresolvers import reverse NEWLINE from forms import MachineForm , LineForm , BaseLineFormSet NEWLINE def get_no_of_lines ( VAR ) : NEWLINE if VAR . method == STRING : NEWLINE VAR = MachineForm ( VAR . POST ) NEWLINE if VAR . is_valid ( ) : NEWLINE VAR = VAR . cleaned_data [ STRING ] NEWLINE return HttpResponseRedirect ( reverse ( STRING , kwargs = { STRING : VAR } ) ) NEWLINE else : NEWLINE VAR = MachineForm ( ) NEWLINE VAR = RequestContext ( VAR , { STRING : VAR , } ) NEWLINE return render_to_response ( STRING , VAR ) NEWLINE def line_form ( VAR , VAR ) : NEWLINE VAR = int ( VAR ) NEWLINE VAR = formset_factory ( LineForm , extra = VAR , VAR = BaseLineFormSet ) NEWLINE if VAR . method == STRING : NEWLINE VAR = VAR ( VAR . POST , VAR . FILES ) NEWLINE if VAR . is_valid ( ) : NEWLINE pass NEWLINE else : NEWLINE VAR = VAR ( ) NEWLINE VAR = RequestContext ( VAR , { STRING : VAR , } ) NEWLINE return render_to_response ( STRING , VAR )", "Output : NEWLINE NUMBER [ STRING , STRING ] NEWLINE NUMBER [ STRING , STRING ] NEWLINE NUMBER [ STRING , STRING ] NEWLINE Mon Jun NUMBER NUMBER : NUMBER : NUMBER NUMBER scan NEWLINE Mon Jun NUMBER NUMBER : NUMBER : NUMBER NUMBER scan NEWLINE Mon Jun NUMBER NUMBER : NUMBER : NUMBER NUMBER scan NEWLINE Uhoh ! Restarting NUMBER procs NEWLINE NUMBER [ STRING , STRING ] NEWLINE NUMBER [ STRING , STRING ] NEWLINE Mon Jun NUMBER NUMBER : NUMBER : NUMBER NUMBER scan NEWLINE Uhoh ! Restarting NUMBER procs NEWLINE NUMBER [ STRING , STRING ] NEWLINE Mon Jun NUMBER NUMBER : NUMBER : NUMBER NUMBER scan NEWLINE Uhoh ! Restarting NUMBER procs NEWLINE NUMBER [ STRING , STRING ] NEWLINE Mon Jun NUMBER NUMBER : NUMBER : NUMBER NUMBER scan NEWLINE Uhoh ! Restarting NUMBER procs NEWLINE NUMBER [ STRING , STRING ] NEWLINE NUMBER [ STRING , STRING ]", ">> > calc ( ) NEWLINE Enter an expression : NUMBER + NUMBER - NUMBER NEWLINE NUMBER", "def __str__ ( VAR ) : NEWLINE return unicode ( VAR ) . encode ( STRING ) NEWLINE cls . __str__ = __str__", "class PriorityQueue ( Queue ) : NEWLINE STRING NEWLINE def _init ( VAR , VAR ) : NEWLINE VAR . _queue = [ ] NEWLINE def _put ( VAR , VAR , VAR = heapq . VAR ) : NEWLINE VAR ( VAR . _queue , VAR ) NEWLINE def _get ( VAR , VAR = heapq . VAR ) : NEWLINE return VAR ( VAR . _queue )", "from subprocess import Popen , PIPE NEWLINE VAR = Popen ( [ STRING , STRING ] , stdin = PIPE , stdout = PIPE , bufsize = NUMBER ) NEWLINE VAR = Popen ( [ STRING , STRING ] , stdin = PIPE , stdout = PIPE , bufsize = NUMBER ) NEWLINE bind ( VAR . stdout , VAR . stdin , somePythonRoutine ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = Popen ( [ STRING , STRING ] , stdin = PIPE , stdout = VAR , bufsize = NUMBER ) NEWLINE bind ( VAR . stdout , VAR . stdin , anotherPythonRoutine ) NEWLINE VAR . stdin . write ( STRING ) NEWLINE VAR . stdin . close ( ) NEWLINE VAR = [ VAR . wait ( ) for VAR in [ VAR , VAR , VAR ] ]", "VAR = df . groupby ( [ STRING , STRING ] ) . id . apply ( lambda VAR : list ( VAR ) [ - NUMBER ] ) NEWLINE df . Usedid = df . apply ( lambda VAR : int ( VAR [ VAR . UsedFName , VAR . UsedLName ] ) , axis = NUMBER )", "def calledfunction ( ) : NEWLINE VAR = STRING NEWLINE VAR = VAR if STRING in globals ( ) else VAR NEWLINE print VAR NEWLINE print STRING NEWLINE print NEWLINE calledfunction ( ) NEWLINE VAR = STRING NEWLINE print STRING NEWLINE print NEWLINE calledfunction ( )", "VAR = STRING NEWLINE VAR = VAR . encode ( STRING ) NEWLINE VAR = STRING . format ( len ( VAR ) ) . encode ( STRING ) NEWLINE VAR = VAR + VAR NEWLINE print ( VAR )", "def find_words_and_remove ( VAR , VAR ) : NEWLINE VAR = VAR [ : ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = _find_word_and_remove ( VAR , VAR ) NEWLINE return VAR", "VAR = vertex1 . name + STRING + vertex2 . name", "output == [ STRING , STRING , STRING , STRING ]", "if var1 == var2 == var3 == var4 == False :", "class_register [ self . __class__ . __name__ ] = self . __class__", "from itertools import product NEWLINE VAR = [ [ STRING , STRING ] , [ STRING , STRING , STRING ] , STRING ] NEWLINE VAR = [ STRING . join ( VAR ) for VAR in product ( * VAR ) ]", "dict ( ( VAR , VAR ) for VAR , VAR in enumerate ( ascii_lowercase , NUMBER ) )", "from collections import Counter NEWLINE VAR = [ { NUMBER : STRING , NUMBER : STRING , NUMBER : STRING , NUMBER : STRING } , { NUMBER : STRING , NUMBER : STRING } , { NUMBER : STRING , NUMBER : STRING } , ] NEWLINE VAR = Counter ( ) NEWLINE for VAR in VAR : NEWLINE VAR . update ( VAR . keys ( ) ) NEWLINE print dict ( VAR )", "from sklearn . preprocessing import StandardScaler NEWLINE VAR = StandardScaler ( ) NEWLINE VAR . fit ( X1 ) NEWLINE VAR = VAR . transform ( X2 )", "python manage . py shell", "print df . value_counts ( ) NEWLINE awful NUMBER NEWLINE good NUMBER NEWLINE bad NUMBER NEWLINE ok NUMBER NEWLINE dtype : int64 NEWLINE print df . value_counts ( sort = False ) NEWLINE bad NUMBER NEWLINE ok NUMBER NEWLINE good NUMBER NEWLINE awful NUMBER NEWLINE dtype : int64 NEWLINE print df . value_counts ( sort = False ) . plot . bar ( )", "def split_list ( VAR , VAR ) : NEWLINE VAR = NUMBER NEWLINE try : NEWLINE while True : NEWLINE VAR = VAR . index ( VAR , VAR ) NEWLINE yield VAR [ VAR : VAR ] NEWLINE VAR = VAR + NUMBER NEWLINE except ValueError : NEWLINE yield VAR [ VAR : ]", "import numpy as np", "def logsumexp_row_nonzeros ( VAR ) : NEWLINE VAR = np . empty ( VAR . shape [ NUMBER ] ) NEWLINE for VAR in range ( VAR . shape [ NUMBER ] ) : NEWLINE VAR [ VAR ] = logsumexp ( VAR . data [ VAR . indptr [ VAR ] : VAR . indptr [ VAR + NUMBER ] ] ) NEWLINE return VAR", "Output NEWLINE There was no next tuple NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "VAR = ind . ravel ( ) + np . repeat ( range ( NUMBER , NUMBER * ind . shape [ NUMBER ] , NUMBER ) , ind . shape [ NUMBER ] ) NEWLINE VAR = data . ravel ( ) [ VAR ] NEWLINE VAR = VAR . reshape ( ind . shape )", "import zipfile NEWLINE VAR = zipfile . ZipFile ( STRING ) NEWLINE VAR = sum ( ( VAR . file_size for VAR in VAR . infolist ( ) ) ) NEWLINE VAR = NUMBER NEWLINE for VAR in VAR . infolist ( ) : NEWLINE VAR += VAR . file_size NEWLINE print STRING % ( VAR * NUMBER / VAR ) NEWLINE VAR . extract ( VAR )", "VAR = df [ [ STRING , STRING , STRING ] ] . isin ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) . all ( axis = NUMBER ) NEWLINE df . ix [ VAR ]", "[ [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] [ NUMBER NUMBER NUMBER NUMBER NUMBER ] ]", "ModelWithTextField . objects . raw ( STRING )", "print calendar . timegm ( datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , tzinfo = pytz . utc ) . utctimetuple ( ) )", "def VAR ( VAR ) : NEWLINE return VAR NEWLINE VAR = substitude_args ( { } ) ( VAR )", "VAR = np . zeros ( field3d . shape , dtype = bool ) NEWLINE VAR = np . zeros ( field3d . shape , dtype = bool ) NEWLINE for VAR in range ( nt ) : NEWLINE VAR [ VAR , : , : ] = field2d > NUMBER NEWLINE VAR [ : , : , : ] = field2d [ np . newaxis , : , : ] > NUMBER NEWLINE print ( ( VAR == VAR ) . all ( ) )", "VAR = lambda VAR : pd . Series ( [ VAR for VAR in reversed ( VAR . split ( STRING ) ) ] ) NEWLINE VAR = df [ STRING ] . apply ( VAR ) NEWLINE print VAR NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER HUN NaN NaN NEWLINE NUMBER ESP NaN NaN NEWLINE NUMBER GBR NaN NaN NEWLINE NUMBER ESP NaN NaN NEWLINE NUMBER FRA NaN NaN NEWLINE NUMBER USA ID NaN NEWLINE NUMBER USA GA NaN NEWLINE NUMBER USA NJ Hoboken NEWLINE NUMBER USA NJ NaN NEWLINE NUMBER AUS NaN NaN", "[ ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) ]", "VAR = subset [ STRING ] == True `", "import pandas as pd NEWLINE import numpy as np NEWLINE def plot_bar ( VAR ) : NEWLINE VAR = VAR . stack ( ) . order ( ) NEWLINE VAR . plot ( kind = STRING , rot = NUMBER ) NEWLINE def plot_heatmap ( VAR ) : NEWLINE VAR = VAR . fillna ( value = NUMBER ) NEWLINE plt . pcolormesh ( VAR . values , cmap = plt . cm . Blues ) NEWLINE plt . yticks ( np . arange ( NUMBER , len ( VAR . index ) , NUMBER ) , VAR . index ) NEWLINE plt . xticks ( np . arange ( NUMBER , len ( VAR . columns ) , NUMBER ) , VAR . columns ) NEWLINE VAR = pd . DataFrame ( range ( NUMBER ) ) NEWLINE VAR , VAR = plt . subplots ( NUMBER ) NEWLINE plt . subplot2grid ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , colspan = NUMBER ) NEWLINE plot_bar ( VAR ) NEWLINE plt . subplot2grid ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , colspan = NUMBER ) NEWLINE plot_heatmap ( VAR ) NEWLINE plt . show ( )", "VAR = [ [ STRING , STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING ] ] NEWLINE VAR = [ ( VAR , VAR , VAR , VAR ) for VAR , VAR in enumerate ( VAR [ : : - NUMBER ] ) for VAR , VAR in enumerate ( VAR ) for VAR , VAR in enumerate ( VAR . split ( STRING ) ) ]", "def __init__ ( VAR , * args ) : NEWLINE VAR . _ids = { } NEWLINE def append ( VAR , VAR , VAR ) : NEWLINE if VAR in ids : NEWLINE raise ValueError ( STRING ) NEWLINE super ( Orders , VAR ) . append ( Order ( VAR , VAR ) ) NEWLINE VAR . _ids [ VAR ] = len ( VAR ) - NUMBER", "for VAR , VAR , VAR , VAR in map ( lambda y : x [ y * NUMBER : y * NUMBER + NUMBER ] , range ( len ( x ) // NUMBER ) ) : NEWLINE . . . more code . . .", ">> > [ re . search ( STRING , VAR ) . groups ( ) for VAR in my_list ] NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) ]", "import requests NEWLINE VAR = { STRING : STRING } NEWLINE VAR = { STRING : STRING , STRING : STRING } NEWLINE VAR = requests . post ( STRING , data = VAR , VAR = VAR )", "VAR = Project . objects . get ( name = STRING ) NEWLINE VAR = VAR . VAR . all ( )", "for VAR in vars ( ) [ STRING ] . __subclasses__ ( ) : NEWLINE print ( VAR . __base__ ) NEWLINE", "VAR = decallmethods ( login_testuser ) ( VAR )", "VAR = fields . Char ( compute = STRING , inverse = STRING , store = True ) NEWLINE VAR = fields . Boolean ( ) NEWLINE @ api . one NEWLINE def comp ( self ) : NEWLINE . . . NEWLINE @ api . one NEWLINE def inv ( self ) : NEWLINE . . .", "def chunks ( VAR , VAR ) : NEWLINE for VAR in xrange ( NUMBER , len ( VAR ) , VAR ) : NEWLINE yield VAR [ VAR : VAR + VAR ] NEWLINE def resample ( VAR , VAR ) : NEWLINE VAR = len ( VAR ) / VAR NEWLINE return [ np . mean ( VAR ) for VAR in chunks ( VAR , VAR ) ] NEWLINE import numpy as np NEWLINE VAR = np . linspace ( - NUMBER , NUMBER , NUMBER ) NEWLINE VAR = resample ( VAR , NUMBER ) NEWLINE print VAR NEWLINE", "x . py NEWLINE import ctypes NEWLINE class Example ( ctypes . Structure ) : NEWLINE VAR = [ ( STRING , ctypes . POINTER ( ctypes . c_char ) ) , ( STRING , ctypes . c_int ) , ( STRING , ctypes . POINTER ( ctypes . c_double ) ) , ( STRING , ctypes . c_int ) ] NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . data = ctypes . cast ( ctypes . create_string_buffer ( VAR ) , ctypes . POINTER ( ctypes . c_char ) ) NEWLINE VAR . len = VAR NEWLINE VAR . doubles = ( ctypes . c_double * VAR ) ( ) NEWLINE VAR . VAR = VAR NEWLINE def __repr__ ( VAR ) : NEWLINE return STRING . format ( ctypes . string_at ( VAR . data ) , STRING . join ( str ( VAR . doubles [ VAR ] ) for VAR in range ( VAR . VAR ) ) ) NEWLINE class Dll : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . dll = ctypes . CDLL ( STRING ) NEWLINE VAR . dll . func . argtypes = [ ctypes . POINTER ( Example ) ] NEWLINE VAR . dll . func . restype = None NEWLINE def func ( VAR , VAR ) : NEWLINE VAR . dll . func ( ctypes . byref ( VAR ) ) NEWLINE VAR = Dll ( ) NEWLINE VAR = Example ( NUMBER , NUMBER ) NEWLINE print ( STRING , VAR ) NEWLINE VAR . func ( VAR ) NEWLINE print ( STRING , VAR )", "from collections import defaultdict NEWLINE class UnionFind : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . leaders = defaultdict ( lambda : None ) NEWLINE def find ( VAR , VAR ) : NEWLINE VAR = VAR . leaders [ VAR ] NEWLINE if VAR is not None : NEWLINE VAR = VAR . find ( VAR ) NEWLINE VAR . leaders [ VAR ] = VAR NEWLINE return VAR NEWLINE return VAR NEWLINE def union ( VAR , VAR , VAR ) : NEWLINE VAR , VAR = VAR . find ( VAR ) , VAR . find ( VAR ) NEWLINE if VAR != VAR : NEWLINE VAR . leaders [ VAR ] = VAR NEWLINE def get_groups ( VAR ) : NEWLINE VAR = defaultdict ( set ) NEWLINE for VAR in VAR . leaders : NEWLINE VAR [ VAR . find ( VAR ) ] . add ( VAR ) NEWLINE return VAR", "VAR = [ [ int ( VAR ) for VAR in VAR . split ( ) ] for VAR in open ( STRING ) ] NEWLINE for VAR in VAR : NEWLINE print ( STRING % ( VAR [ NUMBER ] , sum ( VAR [ NUMBER : ] ) / len ( VAR [ NUMBER : ] ) , min ( VAR [ NUMBER : ] ) , max ( VAR [ NUMBER : ] ) ) )", "df [ STRING ] = df . apply ( lambda VAR : ( VAR [ [ STRING , STRING ] ] != VAR [ STRING ] ) . sum ( ) , axis = NUMBER ) NEWLINE df [ STRING ] = df . apply ( lambda VAR : VAR [ [ STRING , STRING , STRING ] ] . nunique ( ) , axis = NUMBER )", "df_wanted . loc [ STRING , : ] NEWLINE df_wanted . loc [ : , ( STRING ) ] NEWLINE df_wanted . loc [ STRING , ( STRING , STRING , NUMBER ) ]", ">> > VAR = [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > sorted ( VAR , key = sum , reverse = True ) NEWLINE [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ]", "import re", "print clf . get_support ( indices = True ) NEWLINE", "format ( num , STRING )", "import sys NEWLINE import os NEWLINE VAR = sys . argv [ - NUMBER ] NEWLINE print ( os . path . isabs ( VAR ) ) NEWLINE print ( VAR )", "VAR = pdb . gimp_layer_group_new ( img ) NEWLINE VAR . name = STRING", "import os , os . path NEWLINE for VAR , VAR , VAR in os . walk ( dirtocheck ) : NEWLINE for VAR in VAR : NEWLINE VAR = os . path . join ( VAR , VAR ) NEWLINE if os . path . getsize ( VAR ) < NUMBER * NUMBER : NEWLINE os . remove ( VAR )", "import os NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE if not os . path . exists ( VAR ) : NEWLINE VAR = raw_input ( STRING ) NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR . write ( VAR ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . close ( ) NEWLINE else : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) . split ( STRING ) NEWLINE print VAR NEWLINE if VAR in VAR : NEWLINE print STRING . format ( VAR ) NEWLINE else : NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR . seek ( NUMBER , NUMBER ) NEWLINE VAR . write ( VAR ) NEWLINE VAR . write ( STRING ) NEWLINE VAR . close ( )", "VAR += get_apps ( )", ": ref : ` table `", ">> > re . split ( STRING , string1 ) [ - NUMBER ] NEWLINE STRING NEWLINE >> > re . split ( STRING , string2 ) [ - NUMBER ] NEWLINE STRING", "def IdSet ( VAR , VAR ) : NEWLINE if not isinstance ( VAR , basestring ) : NEWLINE raise TypeError ( STRING ) NEWLINE VAR . UpdateFromKey ( ndb . Key ( VAR . __class__ , VAR . lower ( ) ) ) NEWLINE if VAR . caseful_id is None : NEWLINE VAR . caseful_id = VAR", "VAR = Environment ( ) NEWLINE SConscript ( STRING , exports = [ STRING ] )", "with open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR , delimiter = STRING ) NEWLINE for VAR in VAR : NEWLINE VAR . writerow ( filter ( None , VAR . rstrip ( ) . translate ( None , STRING ) . split ( STRING ) ) )", "[ ( STRING , STRING ) , ( STRING , STRING ) ]", "def file_loader ( VAR ) : NEWLINE VAR = { } NEWLINE VAR = None NEWLINE for VAR in VAR : NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR [ VAR ] = VAR = { } NEWLINE continue NEWLINE if VAR is not None : NEWLINE VAR [ VAR ] = VAR . get ( VAR , NUMBER ) NEWLINE return VAR", ">> > VAR = resp . info ( ) NEWLINE >> > VAR . getheaders ( STRING ) NEWLINE [ STRING , STRING ]", "In [ NUMBER ] : df . query ( STRING ) NEWLINE Out [ NUMBER ] : NEWLINE label Y88_N diff div fold NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "VAR = ( STRING , STRING , STRING , STRING , STRING , STRING , )", "import sys NEWLINE import pydoc NEWLINE VAR = pydoc . plain ( ( pydoc . render_doc ( sys ) ) ) NEWLINE print VAR", "STRING . encode ( STRING , STRING ) . translate ( None , non_vowels )", "VAR = [ VAR for VAR in VAR if is_group ( VAR ) ]", "import sys NEWLINE for VAR in sys . stdin : NEWLINE print STRING + VAR", "In [ NUMBER ] : MultiIndex . from_tuples ( index_3levels . droplevel ( STRING ) . unique ( ) ) NEWLINE Out [ NUMBER ] : NEWLINE MultiIndex NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "VAR = { frozenset ( VAR ) for VAR in fruits } NEWLINE VAR = set ( ) NEWLINE while VAR : NEWLINE VAR = VAR . pop ( ) NEWLINE if any ( VAR . issubset ( VAR ) for VAR in VAR ) or any ( VAR . issubset ( VAR ) for VAR in VAR ) : NEWLINE continue NEWLINE else : NEWLINE VAR . add ( VAR )", ">> > Base . subclasses NEWLINE { STRING : __main__ . Extend1 , STRING : __main__ . Extend2 }", "adb shell pm clear < app package here >", "import math NEWLINE def rotatePolygon ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR = math . radians ( VAR ) NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR . append ( ( VAR [ NUMBER ] * math . cos ( VAR ) - VAR [ NUMBER ] * math . sin ( VAR ) , VAR [ NUMBER ] * math . sin ( VAR ) + VAR [ NUMBER ] * math . cos ( VAR ) ) ) NEWLINE return VAR NEWLINE VAR = [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE print rotatePolygon ( VAR , NUMBER )", "re . findall ( STRING , inputtext )", ">> > v NEWLINE [ NUMBER , NUMBER ] NEWLINE >> > tea . decipher ( tea . encipher ( v , key ) , key ) NEWLINE [ NUMBER , NUMBER ]", ">> > threading . current_thread ( ) . __dict__ NEWLINE { . . . , ( STRING , STRING ) : { STRING : STRING } , . . . }", "self . h . set_ydata ( newdata )", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE import matplotlib as mpl NEWLINE import itertools NEWLINE def main ( ) : NEWLINE VAR , VAR = generate_data ( NUMBER , NUMBER ) NEWLINE VAR = [ invert ( VAR , VAR ) for VAR in VAR . T ] NEWLINE VAR , VAR , VAR = [ np . array ( VAR ) for VAR in zip ( * VAR ) ] NEWLINE VAR = gaussian ( VAR , VAR , VAR , VAR ) NEWLINE plot ( VAR , VAR , linestyle = STRING , marker = STRING ) NEWLINE plot ( VAR , VAR , linestyle = STRING ) NEWLINE plt . show ( ) NEWLINE def invert ( VAR , VAR ) : NEWLINE VAR = VAR > ( NUMBER * VAR . max ( ) ) NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = VAR [ VAR ] NEWLINE VAR , VAR , VAR = np . polyfit ( VAR , np . log ( VAR ) , NUMBER ) NEWLINE VAR = np . sqrt ( - NUMBER / ( NUMBER * VAR ) ) NEWLINE VAR = VAR * VAR ** NUMBER NEWLINE VAR = np . exp ( VAR + NUMBER * VAR ** NUMBER / VAR ** NUMBER ) NEWLINE return VAR , VAR , VAR NEWLINE def generate_data ( VAR , VAR ) : NEWLINE np . random . seed ( NUMBER ) NEWLINE VAR = np . linspace ( NUMBER , NUMBER , VAR ) NEWLINE VAR = NUMBER * np . random . random ( VAR ) NEWLINE VAR = NUMBER * np . random . random ( VAR ) + NUMBER NEWLINE VAR = NUMBER * np . random . random ( VAR ) + NUMBER NEWLINE VAR = gaussian ( VAR , VAR , VAR , VAR ) NEWLINE VAR = NUMBER * ( np . random . random ( VAR . shape ) - NUMBER ) NEWLINE return VAR , VAR + VAR NEWLINE def gaussian ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = - np . subtract . outer ( VAR , VAR ) ** NUMBER / ( NUMBER * VAR ** NUMBER ) NEWLINE return VAR * np . exp ( VAR ) NEWLINE def plot ( VAR , VAR , VAR = None , ** kwargs ) : NEWLINE if VAR is None : NEWLINE VAR = plt . gca ( ) NEWLINE VAR = itertools . cycle ( mpl . rcParams [ STRING ] ) NEWLINE for VAR , VAR in zip ( VAR . T , VAR ) : NEWLINE VAR . plot ( VAR , VAR , VAR = VAR , ** kwargs ) NEWLINE main ( )", "cdef trol ( int * i )", "[ ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE code / colour id : amount NEWLINE NUMBER one / black { NUMBER : NUMBER } NEWLINE NUMBER one / white { NUMBER : NUMBER , NUMBER : - NUMBER } NEWLINE NUMBER three / black { NUMBER : - NUMBER } NEWLINE NUMBER three / white { NUMBER : - NUMBER } NEWLINE NUMBER two / black { NUMBER : - NUMBER } NEWLINE NUMBER two / white { NUMBER : - NUMBER , NUMBER : - NUMBER }", "In [ NUMBER ] : % timeit [ VAR [ STRING ] . tolist ( ) for VAR , VAR in df . groupby ( STRING ) ] NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % timeit df . groupby ( [ STRING ] ) [ STRING ] . apply ( list ) . values . tolist ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE def would_be ( VAR ) : NEWLINE return any ( [ STRING , STRING , STRING ] == [ VAR [ VAR ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] ] for VAR in xrange ( len ( VAR ) - NUMBER ) ) NEWLINE def am_able_to ( VAR ) : NEWLINE return any ( [ STRING , STRING , STRING , STRING ] == [ VAR [ VAR ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] ] for VAR in xrange ( len ( VAR ) - NUMBER ) ) NEWLINE VAR = STRING . join ( VAR [ NUMBER ] for VAR in VAR ) NEWLINE VAR = STRING . join ( VAR [ NUMBER ] for VAR in VAR ) NEWLINE print ( STRING . format ( would_be ( VAR ) , VAR ) ) NEWLINE print ( STRING . format ( am_able_to ( VAR ) , VAR ) ) NEWLINE print ( STRING . format ( would_be ( VAR ) , VAR ) ) NEWLINE print ( STRING . format ( am_able_to ( VAR ) , VAR ) )", "URL GOTO = https : // www . url . com / rrralu NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / rebeccamacavei NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / corinnaco_ NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / andrew1996_ NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / thisisme_r NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / zabiburuziga NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / be_real_00 NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / officiel_14_leo NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER NEWLINE URL GOTO = https : // www . url . com / thefullersgroup NEWLINE TAG POS = NUMBER TYPE = BUTTON ATTR = TXT : Follow NEWLINE WAIT SECONDS = NUMBER", "VAR = [ STRING , STRING , STRING ] NEWLINE VAR = [ STRING , STRING , STRING ]", "class EvaluatingName ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . _callable = VAR NEWLINE def __call__ ( VAR ) : NEWLINE return VAR . _callable ( ) NEWLINE def __repr__ ( VAR ) : NEWLINE return repr ( VAR ( ) ) NEWLINE VAR = EvaluatingName ( os . getcwd )", "import argparse NEWLINE class DictAction ( argparse . Action ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE super ( DictAction , VAR ) . __init__ ( * args , ** kwargs ) NEWLINE VAR . nargs = STRING NEWLINE def __call__ ( VAR , VAR , VAR , VAR , VAR = None ) : NEWLINE VAR = getattr ( VAR , VAR . dest , [ ] ) or [ ] NEWLINE setattr ( VAR , VAR . dest , VAR ) NEWLINE VAR = getattr ( VAR , VAR . dest ) NEWLINE VAR . append ( dict ( VAR . split ( STRING ) for VAR in VAR ) ) NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , action = DictAction ) NEWLINE print VAR . parse_args ( )", "norm . fit ( ) : NUMBER = + NUMBER , NUMBER = NUMBER NEWLINE curve_fit ( ) : NUMBER = + NUMBER , NUMBER = NUMBER", "In [ NUMBER ] : % timeit old_function ( close , volume , INTERVAL_LENGTH ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "if start >= NUMBER : NEWLINE function1 ( ) NEWLINE if start >= NUMBER : NEWLINE function2 ( ) NEWLINE if start >= NUMBER : NEWLINE function3 ( )", "from System . Windows import WindowState as WindowState1 NEWLINE from ESS . MS . Framework . UIG . Mask import WindowState as WindowState2", "x not in seen and True", ">> > VAR = { STRING : ( STRING , STRING , STRING , STRING ) } NEWLINE >> > VAR . get ( STRING , ( ) ) NEWLINE ( STRING , STRING , STRING , STRING ) NEWLINE >> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > VAR [ STRING ] = VAR . get ( STRING ) + tuple ( VAR ) NEWLINE >> > VAR NEWLINE { STRING : ( STRING , STRING , STRING , STRING , STRING , STRING , STRING ) }", "// / @ brief boost : : python : : object that refers to a type . NEWLINE struct type_object : NEWLINE public boost : : python : : object NEWLINE { // / @ brief If the object is a type , then refer to it . Otherwise , // / refer to the instance ' s type . explicit type_object ( boost : : python : : object object ) : boost : : python : : object ( object ) { if ( ! PyType_Check ( object . ptr ( ) ) ) { throw std : : invalid_argument ( STRING ) ; } } } ; NEWLINE . . . NEWLINE // Only accepts a Python type . NEWLINE void add_component ( type_object type ) { . . . }", "python - NUMBER NUMBER NUMBER << STRING NEWLINE import sys NEWLINE print STRING , str ( sys . argv ) NEWLINE EOF", "VAR = A . copy ( ) NEWLINE VAR = ( B [ : , NUMBER ] [ : , None ] != np . arange ( d2 - NUMBER ) [ None , : ] ) & ( B [ : , NUMBER ] == NUMBER ) [ : , None ] NEWLINE VAR = np . where ( VAR , A [ : , : d2 - NUMBER ] , NUMBER ) . astype ( np . float ) NEWLINE VAR = np . sum ( VAR , axis = NUMBER ) / np . sum ( VAR . astype ( np . int ) , axis = NUMBER ) NEWLINE VAR [ : , : - NUMBER ] = np . where ( VAR , VAR , A [ : , : d2 - NUMBER ] )", "import example NEWLINE example . example ( ) NEWLINE from example import example NEWLINE example ( )", ">> > papa . replace ( STRING , STRING ) NEWLINE STRING NEWLINE >> > app . replace ( STRING , STRING ) NEWLINE STRING", "with open ( STRING ) as VAR : NEWLINE next ( VAR ) NEWLINE VAR = dict ( ) NEWLINE for VAR in VAR : NEWLINE if VAR . split ( ) [ NUMBER ] not in VAR : NEWLINE VAR [ VAR . split ( ) [ NUMBER ] ] = float ( VAR . split ( ) [ NUMBER ] ) NEWLINE else : NEWLINE VAR [ VAR . split ( ) [ NUMBER ] ] += float ( VAR . split ( ) [ NUMBER ] )", "In [ NUMBER ] : txt = STRING . splitlines ( ) NEWLINE In [ NUMBER ] : NEWLINE In [ NUMBER ] : np . loadtxt ( txt , delimiter = STRING , dtype = int ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = dict ( zip ( lables , model [ NUMBER ] ) )", "for VAR in os . listdir ( STRING ) : NEWLINE if VAR . endswith ( STRING ) : NEWLINE print ( VAR )", "def newFrame ( VAR , VAR ) : NEWLINE VAR . new_window = wx . Frame ( VAR , title = STRING , pos = ( NUMBER , NUMBER ) ) NEWLINE VAR . scroll = wx . ScrolledWindow ( VAR . new_window , - NUMBER , size = ( NUMBER , NUMBER ) ) NEWLINE VAR . scroll . SetScrollbars ( NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR . new_window . Layout ( ) NEWLINE VAR . new_window . Fit ( ) NEWLINE VAR . new_window . Show ( )", ">> > table . where ( STRING ) NEWLINE STRING", "$ dpkg - S / usr / lib / python2 NUMBER NEWLINE python - qgis , python - gdal , python - psycopg2 , python - pyspatialite , youtube - dl , virtualbox , duplicity , bzr - git , bzr - builddeb , debconf , ipython , libpython2 NUMBER - minimal : i386 , libpython2 NUMBER - dev : i386 , tahoe - lafs , seascope , samba , qbzr , python2 NUMBER , python - zope . interface , python - zfec , python - yaml , python - xdg , python - xapian , python - wxversion , python - wxgtk2 NUMBER , python - ws4py , python - webob , python - wadllib , python - vipscc , python - utidylib , python - usb , python - urllib3 , python - tz , python - twisted , python - twisted - words , python - twisted - web , python - twisted - runner , python - twisted - news , python - twisted - names , python - twisted - mail , python - twisted - lore , python - twisted - core , python - twisted - conch , python - twisted - bin , python - tk , python - tdb , python - talloc , python - support , python - subversion , python - sphinx , python - software - properties , python - six , python - sip , python - simplejson , python - simplegeneric , python - setuptools , python - setools , python - serial , python - sepolicy , python - sepolgen , python - semanage , python - selinux , python - secretstorage , python - scipy , python - samba , python - routes , python - roman , python - requests , python - repoze . lru , python - reportlab , python - reportlab - accel , python - renderpm , python - radare2 , python - qt4 , python - qt4 - gl , python - qscintilla2 , python - pyvorbis , python - pytools , python - pysqlite2 , python - pyside . qtxml , python - pyside . qtwebkit , python - pyside . qtuitools , python - pyside . qttest , python - pyside . qtsvg , python - pyside . qtsql , python - pyside . qtscript , python - pyside . qtopengl , python - pyside . qtnetwork , python - pyside . qthelp , python - pyside . qtgui , python - pyside . qtdeclarative , python - pyside . qtcore , python - pyside . phonon , python - pyparsing , python - pyopencl , python - pygments , python - pygame , python - pycurl , python - pycryptopp , python - pyaudio , python - pyasn1 , python - poppler - qt4 , python - ply , python - pkg - resources , python - pivy , python - pip , python - pil , python - pexpect , python - paramiko , python - pam , python - openssl , python - opengl , python - opencv , python - ogg , python - oauthlib , python - oauth , python - numpy , python - ntdb , python - newt , python - nevow , python - networkx , python - netifaces , python - mysqldb , python - musicbrainz , python - mock , python - mechanize , python - markupsafe , python - markdown , python - mako , python - magic , python - lxml , python - libxml2 , python - ldb , python - lazr . uri , python - lazr . restfulclient , python - launchpadlib , python - keyring , python - jinja2 , python - ipy , python - imaging , python - httplib2 , python - html5lib , python - gtk2 , python - gst0 NUMBER , python - gst0 NUMBER - rtsp , python - gpgme , python - gobject - NUMBER , python - glade2 , python - gi , python - freenect , python - foolscap , python - feedparser , python - fastimport , python - eyed3 , python - enchant , python - egenix - mxtools , python - egenix - mxdatetime , python - ecdsa , python - dulwich , python - docutils , python - docopt , python - dnspython , python - distro - info , python - distlib , python - decorator , python - debian , python - dbus , python - dateutil , python - cssutils , python - cssselect , python - crypto , python - configobj , python - colorama , python - collada , python - cherrypy3 , python - chardet , python - bzrlib , python - bluez , python - beautifulsoup , python - audit , python - apt , python - apsw , policycoreutils , mercurial , mercurial - common , lsb - release , iotop , hugin - tools , hplip , frescobaldi , libpython2 NUMBER : i386 , libpython2 NUMBER - stdlib : i386 , dblatex , cython , cfv , bzr - upload , bzr - search , bzr - pipeline , bzr - loom , bzr - explorer : / usr / lib / python2 NUMBER", "{ STRING : ObjectId ( STRING ) , STRING : [ STRING , STRING , STRING ] }", "STRING . format ( NUMBER )", ">> > print_nonrec_breathfirst ( n1 ) NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE >> > print_nonrec_depthfirst ( n1 ) NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", "> main . py - v - - plugin = Foo - - - - extra = bar - c", "import gevent NEWLINE import gevent . monkey NEWLINE gevent . monkey . patch_all ( ) NEWLINE import zmq . green as zmq NEWLINE import json NEWLINE VAR = zmq . Context ( ) NEWLINE VAR = VAR . VAR ( zmq . ROUTER ) NEWLINE VAR . bind ( STRING ) NEWLINE def do_something ( VAR ) : NEWLINE return sum ( VAR . get ( STRING ) ) NEWLINE def handle ( VAR ) : NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = json . loads ( VAR ) NEWLINE VAR = do_something ( VAR ) NEWLINE VAR [ NUMBER ] = json . dumps ( { STRING : VAR } ) NEWLINE VAR . send_multipart ( VAR ) NEWLINE def handle_zmq ( ) : NEWLINE while True : NEWLINE VAR = VAR . recv_multipart ( ) NEWLINE gevent . spawn ( handle , VAR ) NEWLINE if __name__ == STRING : NEWLINE handle_zmq ( )", "from eventlet import wsgi NEWLINE import eventlet NEWLINE from pprint import pformat NEWLINE def show_env ( VAR , VAR ) : NEWLINE VAR ( STRING , [ ( STRING , STRING ) ] ) NEWLINE return [ STRING % pformat ( VAR ) ] NEWLINE wsgi . server ( eventlet . listen ( ( STRING , NUMBER ) ) , show_env )", "reference NEWLINE NUMBER A NEWLINE NUMBER A", "$ python next_available_subnet . py NEWLINE subnet1 NEWLINE $ python next_available_subnet . py NEWLINE subnet2 NEWLINE $ python next_available_subnet . py NEWLINE subnet3 NEWLINE $ python next_available_subnet . py NEWLINE subnet1", "VAR = re . sub ( STRING , STRING , VAR , flags = re . UNICODE )", "from collections import Counter NEWLINE VAR = Counter ( a ) NEWLINE VAR = Counter ( b ) NEWLINE VAR = list ( ( VAR - VAR ) . elements ( ) )", "$ ( STRING ) . on ( STRING , function ( ) { var qu = { STRING : $ ( this ) . find ( STRING ) . attr ( STRING ) } $ ( this ) . addClass ( STRING ) . siblings ( ) . removeClass ( STRING ) ; $ . ajax ( { type : STRING , async : true , contentType : STRING , url : STRING , data : JSON . stringify ( qu ) , success : function ( data ) { var graph = $ ( STRING ) ; graph . html ( data ) ; $ ( STRING ) . show ( ) ; } , dataType : STRING } ) ; } ) ;", "import re NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] . strip ( ) NEWLINE if VAR [ NUMBER ] == STRING : NEWLINE VAR = re . sub ( STRING , STRING , VAR [ NUMBER ] . strip ( ) ) . split ( STRING ) NEWLINE elif VAR [ NUMBER ] == STRING : NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE elif VAR [ NUMBER ] == STRING : NEWLINE VAR = re . sub ( STRING , STRING , VAR [ NUMBER ] . strip ( ) ) . split ( STRING ) NEWLINE print VAR NEWLINE print VAR NEWLINE print VAR", "vinay NUMBER NUMBER NUMBER NUMBER : NUMBER pts / NUMBER NUMBER : NUMBER : NUMBER python . / manage . py runserver NEWLINE vinay NUMBER NUMBER NUMBER NUMBER : NUMBER pts / NUMBER NUMBER : NUMBER : NUMBER / usr / bin / python . / manage . py runserver", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = STRING NEWLINE re . findall ( VAR , VAR )", ">> > STRING . join ( pairs ) NEWLINE STRING", "df . to_hdf ( STRING , STRING , mode = STRING , format = STRING , data_columns = True ) NEWLINE In [ NUMBER ] : r NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : pd . read_hdf ( STRING , STRING , where = STRING ) NEWLINE Out [ NUMBER ] : NEWLINE A B NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER NEWLINE [ NUMBER rows x NUMBER columns ]", "VAR = stores . objects . filter ( order__success = True ) . annotate ( last_success = Max ( STRING ) ) . value_list ( STRING , STRING ) NEWLINE VAR = stores . objects . annotate ( last_date = Max ( STRING ) ) . value_list ( STRING , STRING ) NEWLINE", "import sip NEWLINE sip . delete ( self . sv_widgets [ purchase . id ] )", "VAR = [ ( NUMBER , NUMBER , STRING , NUMBER ) , ( NUMBER , NUMBER , STRING , NUMBER ) , ( NUMBER , NUMBER , STRING , NUMBER ) , ( NUMBER , NUMBER , STRING , NUMBER ) , ( NUMBER , NUMBER , STRING , NUMBER ) , ( NUMBER , NUMBER , STRING , NUMBER ) , ( NUMBER , NUMBER , STRING , NUMBER ) ]", "def remove_cols ( ) : NEWLINE VAR = [ ] NEWLINE with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR . append ( VAR . strip ( ) ) NEWLINE VAR = [ ] NEWLINE with open ( STRING ) as VAR : NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE if not VAR : NEWLINE for VAR , VAR in enumerate ( VAR . split ( STRING ) ) : NEWLINE if VAR . strip ( ) not in VAR : NEWLINE VAR . append ( VAR ) NEWLINE VAR = [ VAR . strip ( ) for VAR , VAR in enumerate ( VAR . split ( STRING ) ) if VAR in VAR ] NEWLINE VAR . write ( STRING . join ( VAR ) ) NEWLINE VAR . write ( STRING )", "VAR = treeWidget . currentItem ( ) NEWLINE VAR = treeWidget . itemAt ( centerOfTree ) NEWLINE VAR = VAR . VAR ( )", ">> > one [ NUMBER ] NEWLINE NUMBER NEWLINE >> > one [ NUMBER ] NEWLINE NUMBER", "VAR = AbortableAsyncResult ( myTaskId ) NEWLINE VAR . abort ( )", "In [ NUMBER ] : from collections import Counter NEWLINE In [ NUMBER ] : VAR = STRING NEWLINE In [ NUMBER ] : VAR = VAR . split ( ) NEWLINE In [ NUMBER ] : VAR = Counter ( VAR ) NEWLINE In [ NUMBER ] : print VAR NEWLINE Counter ( {} ) NEWLINE In [ NUMBER ] : VAR [ STRING ] NEWLINE Out [ NUMBER ] : NUMBER", "import re NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE def get_date ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR = re . match ( VAR , VAR ) NEWLINE if VAR : NEWLINE return int ( VAR . group ( NUMBER ) ) NEWLINE else : NEWLINE return - NUMBER NEWLINE print sorted ( VAR , key = get_date , reverse = True )", "import threading , time , random NEWLINE class Key ( object ) : NEWLINE VAR = { } NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . t0 = time . time ( ) NEWLINE VAR . VAR = threading . Timer ( VAR , VAR . now_what ) NEWLINE VAR . VAR . start ( ) NEWLINE def now_what ( VAR ) : NEWLINE VAR = STRING . format ( VAR . VAR , time . time ( ) - VAR . t0 ) NEWLINE Key . VAR . setdefault ( VAR . VAR , [ ] ) . append ( VAR ) NEWLINE def time_left ( VAR ) : NEWLINE return max ( VAR . t0 + VAR . VAR - time . time ( ) , NUMBER ) NEWLINE VAR = [ Key ( random . randint ( NUMBER , NUMBER ) , STRING . format ( VAR ) ) for VAR in range ( NUMBER , NUMBER ) ] NEWLINE VAR = time . time ( ) NEWLINE while any ( VAR . time_left ( ) for VAR in VAR ) : NEWLINE if time . time ( ) - VAR > NUMBER : NEWLINE VAR = filter ( lambda VAR : VAR , ( VAR . time_left ( ) for VAR in VAR ) ) NEWLINE if VAR : NEWLINE VAR = STRING NEWLINE print VAR . format ( len ( VAR ) , max ( VAR ) , sum ( VAR ) / len ( VAR ) ) NEWLINE VAR = time . time ( ) NEWLINE for VAR in sorted ( Key . VAR ) : NEWLINE print STRING . format ( VAR ) NEWLINE for VAR in Key . VAR [ VAR ] : NEWLINE print STRING . format ( VAR )", "VAR = re . finditer ( STRING , html ) NEWLINE for VAR in VAR : NEWLINE print VAR . group ( NUMBER )", "VAR = [ STRING , STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE with open ( VAR , STRING ) as f : NEWLINE . . .", "exclude . hglf", "VAR = VAR . set_index ( STRING )", "model [ NUMBER ]", "import multiprocessing NEWLINE import time NEWLINE def calculate1 ( VAR ) : NEWLINE print STRING NEWLINE time . sleep ( NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR . put ( VAR ) NEWLINE print STRING NEWLINE def calculate2 ( VAR ) : NEWLINE print STRING NEWLINE time . sleep ( NUMBER ) NEWLINE VAR = NUMBER NEWLINE VAR . put ( VAR ) NEWLINE print STRING NEWLINE VAR = multiprocessing . Queue ( ) NEWLINE VAR = multiprocessing . Process ( target = calculate1 , args = [ VAR ] ) NEWLINE VAR = multiprocessing . Process ( target = calculate2 , args = [ VAR ] ) NEWLINE VAR . start ( ) NEWLINE VAR . start ( ) NEWLINE print STRING NEWLINE VAR = VAR . get ( ) NEWLINE for VAR in [ VAR , VAR ] : NEWLINE VAR . terminate ( ) NEWLINE print STRING , VAR", "VAR = { VAR : VAR for VAR , VAR in locals ( ) . items ( ) if VAR is not None and not VAR . startswith ( STRING ) }", "for VAR in some_file : NEWLINE if STRING in VAR and all ( VAR not in VAR for VAR in black_list ) : NEWLINE pass", "class QuestionHandler ( RequestHandler ) : NEWLINE def get ( self , id ) : NEWLINE class AnswerHandler ( RequestHandler ) : NEWLINE def post ( self , id ) : NEWLINE VAR = self . get_argument ( STRING ) NEWLINE VAR = Application ( [ ( STRING , QuestionHandler ) , ( STRING , AnswerHandler ) , ] )", ">> > for VAR in ( dict ( VAR ) for VAR in pleio . itervalues ( ) for VAR in combinations ( VAR . iteritems ( ) , NUMBER ) ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] }", "VAR = Newsletter . objects . prefetch_related ( STRING ) . all ( ) . order_by ( STRING , STRING ) NEWLINE return render_to_response ( STRING , { STRING : VAR } )", ">> > df NEWLINE open high low close volume NEWLINE timelogt_a , a_0 , T_a * a_0 , a_1 , T_a * a_1 , a_2 , T_a * a_2 ] NEWLINE VAR = expand ( A ) NEWLINE VAR = zeros ( len ( VAR ) , len ( VAR ) ) NEWLINE def odvod_mat ( VAR ) : NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE type ( VAR [ VAR ] ) . _diff_wrt = True NEWLINE VAR = diff ( VAR , VAR [ VAR ] ) / NUMBER NEWLINE VAR = VAR . coeff ( VAR [ VAR ] ) NEWLINE VAR [ VAR , VAR ] = VAR NEWLINE VAR [ VAR , VAR ] = VAR [ VAR , VAR ] . subs ( T_a , NUMBER ) NEWLINE return VAR NEWLINE odvod_mat ( VAR )", "NUMBER NUMBER NUMBER NUMBER", "VAR = { } NEWLINE for VAR in datasource : NEWLINE VAR . setdefault ( key , set ( ) ) . add ( VAR )", "foo | STRING | spam", "U_k ( n , f ) = sum D_k ( n - NUMBER , s ) for s = f + NUMBER . . . k NEWLINE = sum U_k ( n - NUMBER , s ) for s = NUMBER . . . k - f NEWLINE U_k ( NUMBER , f ) = NUMBER", ">> > ( df [ cols ] > NUMBER ) . all ( axis = NUMBER ) NEWLINE NUMBER True NEWLINE NUMBER True NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE dtype : bool", ">> > VAR , = ns . values ( ) NEWLINE >> > VAR ( ) NEWLINE NUMBER", ">> > VAR = STRING NEWLINE >> > VAR [ NUMBER ] + VAR [ NUMBER : NUMBER ] + VAR [ NUMBER : NUMBER ] + VAR [ NUMBER ] NEWLINE STRING NEWLINE >> >", "VAR = STRING NEWLINE print sum ( float ( VAR ) for VAR in VAR . split ( STRING ) )", "VAR = asyncio . get_event_loop ( ) NEWLINE VAR = hello_world ( VAR ) NEWLINE asyncio . ensure_future ( VAR ) NEWLINE VAR . run_forever ( ) NEWLINE VAR . close ( )", "import datetime NEWLINE def addSecs ( VAR , VAR ) : NEWLINE VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , VAR . hour , VAR . minute , VAR . second ) NEWLINE VAR = VAR + datetime . timedelta ( seconds = VAR ) NEWLINE return VAR . time ( ) NEWLINE VAR = datetime . datetime . now ( ) . time ( ) NEWLINE VAR = addSecs ( VAR , NUMBER ) NEWLINE print VAR NEWLINE print VAR", "zope - conf - additional += NEWLINE < product - config pd . prenotazioni > NEWLINE logfile $ { buildout : directory } / var / log / prenotazioni . log NEWLINE < / product - config >", "from lxml import etree NEWLINE VAR = etree . parse ( STRING ) NEWLINE VAR = VAR . getroot ( ) NEWLINE for VAR in VAR . iter ( STRING ) : NEWLINE if VAR . text is not None : NEWLINE VAR . text = VAR . text . strip ( ) NEWLINE print ( etree . tostring ( VAR ) )", ">> > VAR = Time ( STRING ) NEWLINE >> > print vars ( VAR ) NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE >> > NEWLINE >> > VAR = Time ( hours = NUMBER , minutes = NUMBER , seconds = NUMBER ) NEWLINE >> > print vars ( VAR ) NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "[ [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] ] NEWLINE [ [ STRING , NUMBER , NUMBER , NUMBER ] , [ STRING , NUMBER , NUMBER , NUMBER ] ]", "zip ( data [ NUMBER ] , data [ NUMBER ] , data [ NUMBER ] )", "def complete ( VAR , VAR ) : NEWLINE return ( glob . glob ( os . path . expanduser ( VAR ) + STRING ) + [ None ] ) [ VAR ]", "SELECT * FROM Users WHERE name = STRING or UserType = STRING ;", "VAR = pd . DataFrame ( columns = [ STRING , STRING , STRING ] ) NEWLINE VAR [ STRING ] = pd . to_datetime ( weather [ STRING ] ) NEWLINE VAR [ STRING ] = weather_stn1 [ STRING ] NEWLINE VAR [ STRING ] = weather_stn2 [ STRING ] NEWLINE VAR = VAR . groupby ( VAR [ STRING ] ) . mean ( ) NEWLINE print VAR . reset_index ( )", "import http . cookiejar NEWLINE import urllib NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = urllib . parse . urlencode ( { STRING : < MYCOOLUSERNAME > , STRING : < MYCOOLPASSSWORD > , STRING : STRING } ) NEWLINE VAR = bytes ( VAR , STRING ) NEWLINE VAR = http . cookiejar . CookieJar ( ) NEWLINE VAR = urllib . request . build_opener ( urllib . request . HTTPRedirectHandler ( ) , urllib . request . HTTPHandler ( debuglevel = NUMBER ) , urllib . request . HTTPSHandler ( debuglevel = NUMBER ) , urllib . request . HTTPCookieProcessor ( VAR ) ) NEWLINE VAR . open ( VAR ) NEWLINE VAR = VAR . open ( VAR , VAR ) NEWLINE VAR = VAR . read ( ) NEWLINE VAR = VAR . info ( )", "{ STRING : STRING , STRING : STRING }", "import csv NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR , delimiter = STRING , quotechar = STRING ) NEWLINE for VAR in VAR : NEWLINE print VAR", "{ NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) , NUMBER : ( NUMBER , NUMBER , NUMBER ) }", ">> > VAR = STRING NEWLINE >> > import re NEWLINE >> > [ VAR . start ( ) for VAR in re . finditer ( STRING , VAR ) ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ]", "def get_context_data ( VAR , ** kwargs ) : NEWLINE VAR = super ( TeacherUpdate , VAR ) . get_context_data ( ** kwargs ) NEWLINE VAR [ STRING ] = VAR . second_form_class ( VAR . request . POST or None , instance = VAR . object . user ) NEWLINE return VAR NEWLINE def form_valid ( VAR , VAR ) : NEWLINE VAR = UserChangeForm ( VAR . request . POST , instance = VAR . object . user ) NEWLINE if VAR . is_valid ( ) : NEWLINE VAR . save ( ) NEWLINE return super ( TeacherUpdate , VAR ) . form_valid ( VAR )", "import numpy as NP NEWLINE VAR = NP . random . random_integers ( NUMBER , NUMBER , NUMBER ) . reshape ( NUMBER , NUMBER ) NEWLINE VAR = NP . array ( ( NUMBER , NUMBER , NUMBER ) ) . reshape ( NUMBER , NUMBER ) NEWLINE VAR = NP . append ( VAR , VAR , axis = NUMBER )", "def zipMap ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE yield VAR , VAR ( VAR )", "LOAD DATA INFILE STRING INTO TABLE tbl_name NEWLINE FIELDS TERMINATED BY STRING ENCLOSED BY STRING NEWLINE LINES TERMINATED BY STRING NEWLINE IGNORE NUMBER LINES ;", "import sqlalchemy as sa NEWLINE from sqlalchemy . ext . declarative import declarative_base NEWLINE VAR = declarative_base ( ) NEWLINE class Product ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR = sa . Column ( sa . Integer , primary_key = True ) NEWLINE VAR = sa . Column ( sa . String ) NEWLINE VAR = sa . Column ( sa . String )", "import os NEWLINE [ os . remove ( os . path . join ( STRING , VAR ) ) for VAR in os . listdir ( STRING ) if VAR . endswith ( STRING ) ]", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . sub ( STRING , STRING , VAR ) NEWLINE STRING", ">> > import re NEWLINE >> > VAR = re . compile ( STRING ) NEWLINE >> > VAR = [ . . . STRING , . . . STRING , . . . STRING . . . ] NEWLINE >> > for VAR in VAR : NEWLINE . . . print STRING if VAR . search ( VAR ) else STRING NEWLINE . . . NEWLINE Matches NEWLINE Matches NEWLINE Matches", "VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = { STRING : ( VAR , VAR ) , STRING : ( VAR , VAR ) , STRING : ( VAR , VAR ) } NEWLINE VAR = STRING . join ( [ VAR + STRING + STRING . join ( VAR ) for VAR , VAR in VAR . items ( ) ] ) NEWLINE print VAR NEWLINE", "NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE dtype : datetime64 [ ns ]", "def start_requests ( VAR ) : NEWLINE VAR = { STRING : STRING } NEWLINE for VAR , VAR in enumerate ( VAR . start_urls ) : NEWLINE yield Request ( VAR , cookies = { STRING : STRING } , callback = VAR . parse_item , VAR = VAR )", "for VAR , VAR in zip ( range ( NUMBER , len ( A ) - NUMBER ) , range ( NUMBER , len ( A ) ) ) : NEWLINE", "VAR = numpy . empty_like ( voxel_communities ) NEWLINE VAR [ voxel_communities . argsort ( ) ] = numpy . arange ( n_voxels )", "VAR = VAR if is_iterable ( VAR ) else [ VAR ] NEWLINE for VAR in VAR : NEWLINE do_stuff NEWLINE . . .", "os . getcwd ( )", "def post ( VAR ) : NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR . append ( VAR . request . get ( VAR ) ) NEWLINE return VAR", ">> > a1 NEWLINE [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > a2 NEWLINE [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > [ VAR for VAR in itertools . chain ( a1 , a2 ) ]", "import pandas as pd NEWLINE VAR = pd . read_clipboard ( ) NEWLINE VAR NEWLINE ID Code NEWLINE NUMBER NUMBER A NEWLINE NUMBER NUMBER B NEWLINE NUMBER NUMBER C NEWLINE NUMBER NUMBER A NEWLINE NUMBER NUMBER C NEWLINE NUMBER NUMBER B NEWLINE NUMBER NUMBER C", "ID , Name , ContactNo , Designation NEWLINE NUMBER , Vikas , NUMBER , NEWLINE NUMBER , MyShore , , Software Engineer", "np . random . seed ( NUMBER ) NEWLINE VAR = np . random . uniform ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR . sort ( ) NEWLINE >> > VAR NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE perc , edges = np . histogram ( VAR , bins = NUMBER , weights = np . zeros_like ( VAR ) + NUMBER / VAR . size ) NEWLINE >> > perc NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > edges NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE m = NUMBER ; M = NUMBER NEWLINE mask = ( m <= edges ) & ( edges < M ) NEWLINE >> > mask NEWLINE array ( [ True , True , True , False , False , False , False , False , False , False , False ] , dtype = bool ) NEWLINE >> > edges [ mask ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > perc [ mask [ : - NUMBER ] ] [ : - NUMBER ] NEWLINE array ( [ NUMBER , NUMBER ] ) NEWLINE m = NUMBER ; M = NUMBER NEWLINE mask = ( m < edges ) & ( edges < M ) NEWLINE >> > edges [ mask ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > perc [ mask [ : - NUMBER ] ] [ : - NUMBER ] NEWLINE array ( [ NUMBER , NUMBER ] )", "In [ NUMBER ] : VAR = { } NEWLINE In [ NUMBER ] : for VAR , VAR in names . iteritems ( ) : NEWLINE . . . : VAR [ VAR ] = { STRING : VAR } NEWLINE . . . : if dates . has_key ( VAR ) : NEWLINE . . . : VAR [ VAR ] [ STRING ] = dates [ VAR ] NEWLINE . . . : NEWLINE . . . : NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE { STRING : { STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING } , STRING : { STRING : STRING } , STRING : { STRING : STRING , STRING : STRING } , STRING : { STRING : STRING , STRING : STRING } }", "import lxml . etree as et NEWLINE VAR = et . parse ( STRING ) NEWLINE VAR = { STRING : STRING } NEWLINE for VAR in VAR . xpath ( STRING , namespaces = VAR ) : NEWLINE VAR = VAR . xpath ( STRING , namespaces = VAR ) [ NUMBER ] NEWLINE print ( VAR . xpath ( STRING ) )", "class GenericA ( ComplexModel ) : NEWLINE VAR = Integer NEWLINE VAR = Unicode NEWLINE VAR = DateTime", "plt . yticks ( [ NUMBER , NUMBER , NUMBER ] , [ STRING , STRING , STRING ] ) NEWLINE plt . xticks ( [ NUMBER , NUMBER , NUMBER ] , [ STRING , STRING , STRING ] , rotation = STRING )", "import pandas as pd NEWLINE from scipy . spatial import distance_matrix NEWLINE VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = pd . DataFrame ( VAR , columns = [ STRING , STRING ] , index = VAR )", "import operator NEWLINE VAR = ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] NEWLINE for VAR in VAR : NEWLINE VAR = reduce ( operator . add , map ( operator . mul , VAR , VAR ) ) NEWLINE print VAR", "list_arr [ np . arange ( list_arr . shape [ NUMBER ] ) , indices_array , : ]", "In [ NUMBER ] : [ STRING , STRING , STRING ] + [ STRING , STRING ] NEWLINE Out [ NUMBER ] : [ STRING , STRING , STRING , STRING , STRING ]", "( ? < ! \\ d ) \\ d { NUMBER } - \\ d { NUMBER , NUMBER } ( ? ! \\ d )", "sorted ( lst , key = lambda VAR : VAR [ NUMBER ] )", "sorted ( yourdict . items ( ) , key = lambda VAR : int ( VAR [ NUMBER ] . split ( ) [ NUMBER ] ) )", "< div id = STRING class = STRING > NEWLINE < div style = STRING > NEWLINE { % for VAR in voting_entry_list % } NEWLINE < li > < a href = STRING > { { VAR . text } } & nbsp { { VAR . score } } < / a > < / li > NEWLINE < p > NEWLINE < input type = STRING id = STRING name = STRING value = STRING autofocus value = STRING onfocus = STRING class = STRING / > NEWLINE < script > NEWLINE $ ( document ) . ready ( function ( ) { $ ( STRING ) . bind ( STRING , function ( e ) { // input type = id above if ( e . keyCode == NUMBER ) { var text = $ ( STRING ) . val ( ) ; var args = { STRING : text } ; $ . get ( STRING , args ) . done ( function ( data ) { console . log ( STRING + data ) ; location . reload ( ) ; } ) ; return false ; } if ( e . keyCode == NUMBER ) { var text = $ ( STRING ) . val ( ) ; var args = { STRING : text } ; $ . get ( STRING , args ) . done ( function ( data ) { console . log ( STRING + data ) ; location . reload ( ) ; } ) ; return false ; } } ) ; } ) ; NEWLINE < / script > NEWLINE { % endfor % } NEWLINE < / div > NEWLINE < / div >", "VAR = sorted ( result . items ( ) ) NEWLINE VAR = [ ( VAR - VAR ) for VAR , ( VAR , VAR ) in VAR ] NEWLINE print ( max ( VAR [ - NUMBER : ] ) > max ( VAR [ - NUMBER - NUMBER : - NUMBER ] ) ) NEWLINE", "from rest_framework import permissions NEWLINE class HasNiceHatOrHasNicePants ( permissions . BasePermission ) : NEWLINE STRING NEWLINE def has_permission ( VAR , VAR , VAR ) : NEWLINE if VAR . user . has_nicehat ( ) or VAR . user . has_nicepants ( ) : NEWLINE return True", "VAR = [ ] NEWLINE with open ( file , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR [ VAR ] . append ( VAR ) NEWLINE else : NEWLINE VAR = [ [ VAR ] for VAR in VAR ] NEWLINE VAR = { VAR [ NUMBER ] : VAR [ NUMBER : ] for VAR in VAR } NEWLINE print ( VAR )", "def random ( VAR , VAR ) : NEWLINE VAR = VAR NEWLINE VAR = f ( VAR ) NEWLINE VAR ( VAR ) NEWLINE def VAR ( VAR ) : NEWLINE plt . plot ( VAR , VAR ) NEWLINE plt . VAR ( ) NEWLINE VAR = random ( VAR , VAR )", ">> > sorted ( sav , key = lambda VAR : int ( VAR [ NUMBER ] ) ) NEWLINE [ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ]", "VAR = STRING NEWLINE VAR = re . compile ( STRING ) NEWLINE try : NEWLINE VAR , VAR = VAR . search ( VAR ) . groups ( ) NEWLINE except AttributeError as VAR : NEWLINE print STRING . format ( VAR ) NEWLINE raise NEWLINE VAR = VAR . split ( STRING ) NEWLINE print VAR , VAR NEWLINE VAR = { STRING : VAR , STRING : VAR [ : - NUMBER ] , STRING : VAR [ - NUMBER ] } NEWLINE print VAR NEWLINE", "import urllib NEWLINE VAR = STRING NEWLINE VAR = urllib . urlopen ( VAR ) NEWLINE print VAR . read ( ) NEWLINE", "df [ STRING ] = scalar - df [ STRING ]", "F : \\ so > python test - tree . py NEWLINE child . get_all_weight ( ) NUMBER NEWLINE child . get_all_weight ( ) NUMBER NEWLINE NUMBER NEWLINE child . get_all_weight ( ) NUMBER NEWLINE child . get_all_weight ( ) NUMBER NEWLINE NUMBER NEWLINE child . get_all_weight ( ) NUMBER NEWLINE child . get_all_weight ( ) NUMBER NEWLINE NUMBER", "< div id = STRING > < script src = STRING > < / script > NEWLINE < script src = STRING > < / script > NEWLINE < link href = STRING rel = STRING type = STRING > NEWLINE < / link > < / div >", "VAR = webdriver . Firefox ( )", "STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in adict . items ( ) )", ">> > xxs . select ( STRING ) . extract ( ) NEWLINE [ STRING , STRING , STRING ]", "def merge_dicts2 ( VAR ) : NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = ( VAR [ STRING ] , VAR [ STRING ] ) NEWLINE try : NEWLINE VAR [ VAR ] [ NUMBER ] . append ( VAR [ STRING ] ) NEWLINE except KeyError : NEWLINE VAR [ VAR ] = ( [ VAR [ STRING ] ] , VAR [ STRING ] ) NEWLINE return VAR", "plt . imshow ( np . dstack ( [ ca_map , ca_map , ca_map , alpha ] , . . . )", "def remove_cruft ( VAR ) : NEWLINE return VAR [ NUMBER : - NUMBER ] NEWLINE VAR = [ STRING , STRING , STRING , STRING ] NEWLINE [ remove_cruft ( VAR ) for VAR in VAR ]", "In [ NUMBER ] : datetime . datetime . strptime ( re . sub ( STRING , STRING , STRING ) , STRING ) NEWLINE Out [ NUMBER ] : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "col . aggregate ( [ { STRING : { STRING : NUMBER , STRING : { STRING : [ [ STRING , STRING , STRING ] , STRING ] } } } , { STRING : { STRING : True } } ] )", "for VAR in alarms : NEWLINE for VAR in whitelist : NEWLINE print getattr ( VAR , VAR )", "In [ NUMBER ] : temp2 . apply ( lambda VAR : VAR [ NUMBER ] ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER p500 NEWLINE NUMBER p600 NEWLINE NUMBER p700 NEWLINE Name : ticker", "someWidget . valueChanged . connect ( Player . health . fset . __get__ ( player ) )", "VAR = NUMBER NEWLINE with open ( STRING , STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if len ( VAR . split ( STRING ) ) == VAR : NEWLINE VAR . write ( VAR ) NEWLINE else : NEWLINE print STRING % VAR", "In [ NUMBER ] : VAR = pd . DataFrame ( d1 . ticker . str . split ( ) . tolist ( ) , . . . . . : columns = STRING . split ( ) ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE symbol date price NEWLINE NUMBER spx NUMBER / NUMBER / NUMBER p500 NEWLINE NUMBER spx NUMBER / NUMBER / NUMBER p600 NEWLINE NUMBER spx NUMBER / NUMBER / NUMBER p700", "class Matrix ( object ) : NEWLINE def __init__ ( VAR , * VAR ) : NEWLINE VAR . _shortcuts = [ VAR for VAR in VAR . _create_shortcuts ( VAR ) ] NEWLINE VAR . _li = [ None ] * ( VAR . _shortcuts . pop ( ) ) NEWLINE VAR . _shortcuts . reverse ( ) NEWLINE def _create_shortcuts ( VAR , VAR ) : NEWLINE VAR = list ( VAR ) NEWLINE VAR . reverse ( ) NEWLINE VAR = NUMBER NEWLINE yield NUMBER NEWLINE for VAR in VAR : NEWLINE VAR *= VAR NEWLINE yield VAR NEWLINE def _flat_index ( VAR , VAR ) : NEWLINE if len ( VAR ) != len ( VAR . _shortcuts ) : NEWLINE raise TypeError ( ) NEWLINE VAR = NUMBER NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR += VAR * VAR . _shortcuts [ VAR ] NEWLINE return VAR NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE return VAR . _li [ VAR . _flat_index ( VAR ) ] NEWLINE def __setitem__ ( VAR , VAR , VAR ) : NEWLINE VAR . _li [ VAR . _flat_index ( VAR ) ] = VAR", "> AT + CMMSEDIT = NUMBER NEWLINE OK NEWLINE > AT + CMMSDOWN = STRING , NUMBER , NUMBER NEWLINE CONNECT NEWLINE OK NEWLINE > AT + CMMSRECP = STRING NEWLINE OK NEWLINE > AT + CMMSVIEW NEWLINE ( your message ) NEWLINE OK NEWLINE > AT + CMMSSEND NEWLINE OK NEWLINE > AT + CMMSEDIT = NUMBER NEWLINE OK", "from __future__ import print_function NEWLINE import ast NEWLINE def transform ( VAR , VAR ) : NEWLINE class EqVisitor ( ast . NodeVisitor ) : NEWLINE def visit_BinOp ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE VAR . visit ( VAR . left ) NEWLINE VAR . visit ( VAR . op ) NEWLINE VAR . visit ( VAR . right ) NEWLINE generate ( STRING ) NEWLINE def visit_USub ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_UAdd ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_Sub ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_Add ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_Pow ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_Mult ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_Div ( VAR , VAR ) : NEWLINE generate ( STRING ) NEWLINE def visit_Name ( VAR , VAR ) : NEWLINE generate ( VAR . id ) NEWLINE def visit_Call ( VAR , VAR ) : NEWLINE debug ( STRING , VAR . func . id ) NEWLINE if VAR . func . id in VAR : NEWLINE debug ( STRING ) NEWLINE func_visit ( VAR [ VAR . func . id ] , VAR . args ) NEWLINE return NEWLINE debug ( STRING , VAR . func . id ) NEWLINE generate ( VAR . func . id ) NEWLINE generate ( STRING ) NEWLINE VAR = STRING NEWLINE for VAR in VAR . args : NEWLINE generate ( VAR ) NEWLINE VAR . visit ( VAR ) NEWLINE VAR = STRING NEWLINE generate ( STRING ) NEWLINE def visit_Num ( VAR , VAR ) : NEWLINE generate ( VAR . n ) NEWLINE def generic_visit ( VAR , VAR ) : NEWLINE debug ( STRING , type ( VAR ) . __name__ ) NEWLINE debug ( VAR . _fields ) NEWLINE ast . NodeVisitor . generic_visit ( VAR , VAR ) NEWLINE def func_visit ( VAR , VAR ) : NEWLINE class FuncVisitor ( EqVisitor ) : NEWLINE def visit_arguments ( VAR , VAR ) : NEWLINE VAR . arguments = { } NEWLINE for VAR , VAR in zip ( VAR , VAR . args ) : NEWLINE VAR . arguments [ VAR . id ] = VAR NEWLINE debug ( VAR . arguments ) NEWLINE def visit_Name ( VAR , VAR ) : NEWLINE debug ( STRING , VAR . id ) NEWLINE if VAR . id in VAR . arguments : NEWLINE VAR . visit ( VAR . arguments [ VAR . id ] ) NEWLINE else : NEWLINE generate ( VAR . id ) NEWLINE VAR = FuncVisitor ( ) NEWLINE VAR . visit ( ast . parse ( VAR ) ) NEWLINE VAR = EqVisitor ( ) NEWLINE VAR = [ ] NEWLINE def generate ( VAR ) : NEWLINE debug ( str ( VAR ) ) NEWLINE VAR . append ( str ( VAR ) ) NEWLINE VAR . visit ( ast . parse ( VAR , mode = STRING ) ) NEWLINE return STRING . join ( VAR ) NEWLINE def debug ( * args , ** kwargs ) : NEWLINE pass NEWLINE VAR = { STRING : STRING , STRING : STRING , } NEWLINE VAR = STRING NEWLINE print ( transform ( VAR , VAR ) )", "import collections NEWLINE def make_ngram_ipatterns ( VAR ) : NEWLINE STRING NEWLINE VAR = [ ] NEWLINE for VAR in xrange ( NUMBER , VAR + NUMBER ) : NEWLINE if VAR <= NUMBER : NEWLINE VAR . append ( STRING * VAR ) NEWLINE else : NEWLINE for VAR in xrange ( NUMBER ** ( VAR - NUMBER ) ) : NEWLINE VAR = STRING . format ( VAR , VAR - NUMBER ) NEWLINE VAR = VAR . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE VAR . append ( STRING . format ( VAR ) ) NEWLINE return VAR NEWLINE def make_ngram_npatterns ( VAR ) : NEWLINE STRING NEWLINE VAR = make_ngram_ipatterns ( VAR ) NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR = sum ( VAR == STRING for VAR in VAR ) NEWLINE VAR = len ( VAR ) NEWLINE for VAR in xrange ( VAR - VAR + NUMBER ) : NEWLINE VAR = STRING . format ( STRING * VAR , VAR , STRING * ( VAR - VAR - VAR ) ) NEWLINE VAR . append ( ( VAR , VAR , VAR ) ) NEWLINE return sorted ( VAR ) NEWLINE def main ( ) : NEWLINE VAR = NUMBER NEWLINE VAR = make_ngram_ipatterns ( VAR ) NEWLINE print STRING . join ( make_ngram_ipatterns ( VAR ) ) NEWLINE for VAR , VAR , VAR in make_ngram_npatterns ( VAR ) : NEWLINE VAR = STRING . join ( STRING . format ( VAR + NUMBER ) for VAR , VAR in enumerate ( VAR [ NUMBER : ] ) if VAR == STRING ) NEWLINE print ( STRING STRING . format ( VAR , VAR , VAR , VAR , VAR ) ) NEWLINE if __name__ == STRING : NEWLINE main ( )", "VAR = users_df . where ( users_df . _id == chosen_user ) . select ( STRING )", ">> > [ ( VAR , d . get ( VAR ) ) if d . get ( VAR ) else VAR for VAR in s ] NEWLINE [ ( STRING , STRING ) , STRING , ( STRING , STRING ) ]", ">> > from bs4 import BeautifulSoup NEWLINE >> > NEWLINE >> > VAR = STRING NEWLINE >> > NEWLINE >> > VAR = BeautifulSoup ( VAR ) NEWLINE >> > NEWLINE >> > for VAR in VAR . find_all ( text = STRING ) : NEWLINE . . . print VAR . find_parent ( STRING ) . find_next_sibling ( STRING ) . get_text ( strip = True ) NEWLINE . . . NEWLINE { NUMBER , } { NUMBER , NUMBER , } { NUMBER , NUMBER , } NEWLINE { NUMBER , NUMBER , } { NUMBER , } { NUMBER , NUMBER , }", "Output : NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER", "$ pip install rq - dashboard", "[ zart @ feena ziplib - demo ] $ PYTHONPATH = library . zip python NEWLINE Python NUMBER NUMBER ( r271 : NUMBER , Apr NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) NEWLINE [ GCC NUMBER NUMBER NUMBER ( Red Hat NUMBER NUMBER - NUMBER ) ] on linux2 NEWLINE Type STRING , STRING , STRING or STRING for VAR information . NEWLINE >> > import waitress NEWLINE >> > waitress NEWLINE < module STRING from STRING > NEWLINE >> > NEWLINE >> > from wsgiref . simple_server import demo_app NEWLINE >> > waitress . serve ( demo_app ) NEWLINE serving on http : // NUMBER NUMBER NUMBER : NUMBER NEWLINE ^ C >> >", "update RunningStatus set status = NUMBER ;", "rm - rf . cache / & & find . - name __pycache__ | xargs rm - rf", "def only_even_elements ( VAR ) : NEWLINE STRING NEWLINE for VAR in VAR : NEWLINE if VAR % NUMBER == NUMBER : NEWLINE return False NEWLINE return True NEWLINE def get_even_lists ( VAR ) : NEWLINE STRING NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if only_even_elements ( VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE return VAR", ">> > import re NEWLINE >> > s = STRING NEWLINE >> > def repl ( m ) : NEWLINE if m . group ( NUMBER ) in ( STRING , STRING ) or m . group ( NUMBER ) in ( STRING , STRING ) : NEWLINE return m . group ( NUMBER ) NEWLINE return m . group ( NUMBER ) + STRING + m . group ( NUMBER ) NEWLINE >> > re . sub ( STRING , repl , s ) NEWLINE STRING", "import numpy as np NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = np . vstack ( ( VAR , VAR ) ) NEWLINE VAR = np . arange ( NUMBER , NUMBER , NUMBER ) [ : , None ] NEWLINE VAR = np . logical_and ( VAR >= VAR , VAR < VAR + NUMBER ) [ None ] NEWLINE VAR , VAR = np . broadcast_arrays ( VAR [ : , None ] , VAR ) NEWLINE VAR = VAR . astype ( float ) NEWLINE VAR [ ~ VAR ] = np . nan NEWLINE VAR = np . nanmean ( VAR , axis = - NUMBER )", "import threading NEWLINE import time NEWLINE import random NEWLINE class ActivePool ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE super ( ActivePool , VAR ) . __init__ ( ) NEWLINE VAR . active = [ ] NEWLINE VAR . lock = threading . Lock ( ) NEWLINE def makeActive ( VAR , VAR ) : NEWLINE with VAR . lock : NEWLINE VAR . active . append ( VAR ) NEWLINE def makeInactive ( VAR , VAR ) : NEWLINE with VAR . lock : NEWLINE VAR . active . remove ( VAR ) NEWLINE def numActive ( VAR ) : NEWLINE with VAR . lock : NEWLINE return len ( VAR . active ) NEWLINE def __str__ ( VAR ) : NEWLINE with VAR . lock : NEWLINE return str ( VAR . active ) NEWLINE def worker ( VAR ) : NEWLINE VAR = threading . current_thread ( ) . VAR NEWLINE VAR . makeActive ( VAR ) NEWLINE print STRING % str ( VAR ) NEWLINE time . sleep ( random . randint ( NUMBER , NUMBER ) ) NEWLINE VAR . makeInactive ( VAR ) NEWLINE if __name__ == STRING : NEWLINE VAR = ActivePool ( ) NEWLINE VAR = ActivePool ( ) NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR . append ( threading . Thread ( target = worker , VAR = STRING . format ( VAR ) , args = ( VAR , ) ) ) NEWLINE VAR . append ( threading . Thread ( target = worker , VAR = STRING . format ( VAR ) , args = ( VAR , ) ) ) NEWLINE for VAR in VAR : NEWLINE VAR . daemon = True NEWLINE VAR . start ( ) NEWLINE while threading . activeCount ( ) > NUMBER : NEWLINE for VAR in VAR : NEWLINE VAR . join ( NUMBER ) NEWLINE print STRING . format ( VAR . numActive ( ) , VAR . numActive ( ) )", "with open ( STRING ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR , VAR = VAR . split ( STRING , NUMBER ) NEWLINE print ( [ VAR ] + map ( int , VAR . split ( STRING ) ) )", "BC XY UV b c NEWLINE NUMBER x u NUMBER NUMBER NEWLINE NUMBER x v NUMBER NUMBER NEWLINE NUMBER y u NUMBER NUMBER NEWLINE NUMBER y v NUMBER NUMBER", "from . import settings NEWLINE class Helper ( object ) : NEWLINE pass", "{ STRING : STRING , STRING : lambda VAR : np . sum ( VAR , NUMBER ) - NUMBER } NEWLINE { STRING : STRING , STRING : lambda VAR : NUMBER - np . sum ( VAR , NUMBER ) }", "NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE this is the __get__ else statement running NEWLINE NUMBER NEWLINE this is the __get__ else statement running NEWLINE NUMBER NEWLINE this is the __get__ else statement running NEWLINE NUMBER NEWLINE this is the __get__ else statement running NEWLINE NUMBER NEWLINE Setting circle . x to non - integer fails NEWLINE Setting circle . y to non - integer fails NEWLINE Setting circle . area fails NEWLINE Setting circle . circumference fails NEWLINE Setting circle . distance_to_origin fails NEWLINE NUMBER", "def build_cdf ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = NUMBER NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE VAR += VAR NEWLINE VAR . append ( ( VAR , VAR ) ) NEWLINE return ( VAR , VAR )", "Server NEWLINE Python NUMBER NUMBER ( r265 : NUMBER , Mar NUMBER NUMBER , NUMBER : NUMBER : NUMBER ) [ MSC v NUMBER NUMBER bit ( Intel ) ] on win32 NEWLINE Type STRING , STRING , STRING or STRING for VAR information . NEWLINE >> > from socket import * NEWLINE >> > s = socket ( ) NEWLINE >> > s . bind ( ( STRING , NUMBER ) ) NEWLINE >> > s . listen ( NUMBER ) NEWLINE >> > c , a = s . accept ( ) NEWLINE >> > f = c . makefile ( ) NEWLINE >> > length = ord ( f . read ( NUMBER ) ) NEWLINE >> > f . read ( length ) NEWLINE STRING", "VAR = [ ] NEWLINE while True : NEWLINE process ( VAR ) NEWLINE VAR = check_for_new_files ( ) NEWLINE time . sleep ( pollinterval )", "def sequences ( VAR ) : NEWLINE VAR = cycle ( VAR ) NEWLINE next ( VAR ) NEWLINE VAR = groupby ( VAR , key = lambda VAR : VAR + NUMBER == next ( VAR ) ) NEWLINE yield from ( tuple ( VAR ) + ( next ( ( next ( VAR ) [ NUMBER ] ) ) , ) for VAR , VAR in VAR if VAR ) NEWLINE print ( list ( sequences ( x ) ) )", "In [ NUMBER ] : [ np . bincount ( VAR ) [ NUMBER ] for VAR in a ] NEWLINE Out [ NUMBER ] : [ NUMBER , NUMBER ]", "VAR = clipped_zoom ( img , NUMBER ) NEWLINE VAR = clipped_zoom ( img , NUMBER ) NEWLINE VAR , VAR = plt . subplots ( NUMBER , NUMBER ) NEWLINE VAR [ NUMBER ] . imshow ( img , cmap = STRING ) NEWLINE VAR [ NUMBER ] . imshow ( VAR , cmap = STRING ) NEWLINE VAR [ NUMBER ] . imshow ( VAR , cmap = STRING )", "from datetime import datetime NEWLINE VAR = datetime . now ( )", "{ STRING : . . . , STRING : . . . , STRING : . . . , STRING : . . . , STRING : . . . }", "with flag_regexen ( re . DOTALL ) : NEWLINE < do stuff with all regexes DOTALLed >", "import collections NEWLINE class PrivateList ( collections . MutableSequence ) : NEWLINE def __init__ ( VAR , VAR = None ) : NEWLINE VAR . _list = VAR or [ ] NEWLINE def __repr__ ( VAR ) : NEWLINE return repr ( VAR . _list ) NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE print ( STRING . format ( VAR ) ) NEWLINE return VAR . _list [ VAR ] NEWLINE def __setitem__ ( VAR , VAR , VAR ) : NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE VAR . _list [ VAR ] = VAR NEWLINE def __delitem__ ( VAR , VAR ) : NEWLINE print ( STRING . format ( VAR ) ) NEWLINE del VAR . _list [ VAR ] NEWLINE def __len__ ( VAR ) : NEWLINE print ( STRING ) NEWLINE return len ( VAR . _list ) NEWLINE def insert ( VAR , VAR , VAR ) : NEWLINE print ( STRING . format ( VAR , VAR ) ) NEWLINE VAR . _list . insert ( VAR , VAR ) NEWLINE class Foo ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . list = PrivateList ( VAR )", ">> > print nt . Point . __doc__ NEWLINE A point in NUMBER d space", "from kivy . lang import Builder NEWLINE from kivy . uix . boxlayout import BoxLayout NEWLINE from kivy . uix . button import Button NEWLINE from kivy . uix . spinner import Spinner NEWLINE from kivy . base import runTouchApp NEWLINE from kivy . properties import ObjectProperty NEWLINE Builder . load_string ( STRING ) NEWLINE class MyButton ( Button ) : NEWLINE pass NEWLINE class MySpinner ( Spinner ) : NEWLINE VAR = ObjectProperty ( MyButton ) NEWLINE class MyWidget ( BoxLayout ) : NEWLINE pass NEWLINE runTouchApp ( MyWidget ( ) )", "In [ NUMBER ] : NEWLINE A == B NEWLINE Out [ NUMBER ] : NEWLINE array ( [ False , False , True , False , True ] , dtype = bool )", "VAR = lambda VAR : datetime ( int ( VAR [ NUMBER ] ) , int ( VAR [ NUMBER ] ) , int ( VAR [ NUMBER ] ) ) NEWLINE datelist [ STRING ] = datelist [ STRING ] . str . split ( STRING ) . apply ( VAR ) NEWLINE print datelist NEWLINE date end NEWLINE NUMBER NUMBER , NUMBER , NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER , NUMBER , NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER , NUMBER , NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER , NUMBER , NUMBER NUMBER - NUMBER - NUMBER NUMBER", "{ { request . user . userreferralprofile . y } }", "class loginWindow ( Toplevel ) : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE Toplevel . __init__ ( VAR , VAR ) NEWLINE . . . NEWLINE def login ( VAR ) : NEWLINE if access : NEWLINE VAR . destroy ( ) NEWLINE main ( ) NEWLINE class main ( Toplevel ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE Toplevel . __init__ ( VAR , * args , ** kwargs ) NEWLINE . . . NEWLINE VAR = Tk ( ) NEWLINE VAR . withdraw ( ) NEWLINE loginWindow ( STRING , VAR ) NEWLINE VAR . mainloop ( )", "from mpl_toolkits . basemap import Basemap , _cylproj , _pseudocyl", ">> > VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > max ( VAR , key = sum ) NEWLINE [ NUMBER , NUMBER , NUMBER ]", "VAR = soup . find ( STRING , attrs = { STRING : STRING } )", "if len ( last5 ) > NUMBER : NEWLINE last5 . pop ( NUMBER )", "def numbify ( VAR ) : NEWLINE def filter_numbers ( VAR , * args ) : NEWLINE VAR = VAR . get_text ( ) . strip ( ) NEWLINE VAR . set_text ( STRING . join ( [ VAR for VAR in VAR if VAR in STRING ] ) ) NEWLINE VAR . connect ( STRING , filter_numbers ) NEWLINE VAR = gtk . Builder ( ) NEWLINE VAR . add_from_file ( STRING ) NEWLINE VAR = VAR . get_object ( STRING ) NEWLINE numbify ( VAR )", "NUMBER", "import sys NEWLINE import os NEWLINE import argparse NEWLINE import math NEWLINE import datetime NEWLINE import glob NEWLINE VAR = argparse . ArgumentParser ( description = STRING ) NEWLINE def parseCommandLine ( ) : NEWLINE VAR . add_argument ( STRING , action = STRING , type = str , help = STRING ) NEWLINE VAR . add_argument ( STRING , action = STRING , type = int , help = STRING ) NEWLINE VAR = VAR . parse_args ( ) NEWLINE return ( VAR ) NEWLINE def dateToJulianDay ( VAR ) : NEWLINE VAR = ( NUMBER - VAR . month ) / NUMBER NEWLINE VAR = VAR . year + NUMBER - VAR NEWLINE VAR = VAR . month + NUMBER * VAR - NUMBER NEWLINE VAR = VAR . day + math . floor ( ( NUMBER * VAR + NUMBER ) / NUMBER ) + NUMBER * VAR + math . floor ( VAR / NUMBER ) - math . floor ( VAR / NUMBER ) + math . floor ( VAR / NUMBER ) - NUMBER NEWLINE return ( VAR ) NEWLINE def genStackNames ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = len ( VAR ) NEWLINE VAR = len ( str ( VAR ) ) NEWLINE VAR = NUMBER - VAR - VAR NEWLINE if VAR < NUMBER : NEWLINE VAR = VAR + VAR - NUMBER NEWLINE VAR = VAR - VAR NEWLINE VAR = VAR [ NUMBER : VAR ] NEWLINE VAR = len ( VAR ) NEWLINE for VAR in range ( VAR , VAR + NUMBER , VAR ) : NEWLINE VAR = len ( str ( VAR ) ) NEWLINE VAR = NUMBER - VAR - VAR NEWLINE VAR = VAR + VAR NEWLINE VAR = VAR + ( str ( VAR ) ) . zfill ( VAR ) NEWLINE VAR = VAR [ NUMBER : NUMBER ] + STRING + VAR [ NUMBER : NUMBER ] NEWLINE VAR . append ( VAR ) NEWLINE return VAR NEWLINE def main ( ) : NEWLINE VAR = parseCommandLine ( ) NEWLINE VAR = VAR . VAR NEWLINE VAR = VAR . VAR NEWLINE VAR = VAR + STRING NEWLINE VAR = glob . glob ( VAR ) NEWLINE VAR = STRING NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = os . path . splitext ( VAR ) [ NUMBER ] NEWLINE VAR = os . path . splitext ( VAR ) [ NUMBER ] . strip ( STRING ) NEWLINE VAR = datetime . datetime . strptime ( VAR , VAR ) NEWLINE VAR = int ( dateToJulianDay ( VAR ) ) NEWLINE VAR [ VAR ] = VAR NEWLINE VAR = len ( VAR ) NEWLINE VAR = genStackNames ( VAR , VAR , VAR + VAR - NUMBER , NUMBER ) NEWLINE VAR = NUMBER NEWLINE for VAR in sorted ( VAR ) : NEWLINE VAR = VAR + STRING + VAR [ VAR ] NEWLINE VAR = VAR [ VAR ] NEWLINE os . rename ( VAR , VAR ) NEWLINE print ( STRING + VAR + STRING + VAR ) NEWLINE VAR += NUMBER NEWLINE main ( )", "from fractions import Fraction NEWLINE def can_be_represented ( VAR , VAR ) : NEWLINE VAR = Fraction ( VAR , VAR ) NEWLINE return Fraction . from_float ( float ( VAR ) ) == VAR", ">> > Palette ( STRING , STRING , name = STRING ) NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE TypeError : __init__ ( ) got multiple values for argument STRING", "def allocate_goals ( VAR , VAR ) : NEWLINE VAR = VAR + VAR * NUMBER NEWLINE while True : NEWLINE yield random . choice ( VAR )", ">> > VAR = itertools . chain . from_iterable ( sixbit ) NEWLINE >> > list ( VAR ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", ">> > VAR = raw_input ( STRING ) NEWLINE Enter your birthday ( yyyy - mm - dd ) : NUMBER - NUMBER NUMBER - NUMBER NEWLINE >> > VAR = datetime . datetime . strptime ( VAR , STRING ) NEWLINE >> > VAR = VAR . date ( ) NEWLINE >> > VAR = datetime . date . today ( ) - VAR NEWLINE >> > VAR NEWLINE datetime . timedelta ( NUMBER )", ">> > orange NEWLINE [ STRING , STRING ] NEWLINE >> > lemon NEWLINE [ STRING , STRING ]", "import collections NEWLINE def map_nested_dicts ( VAR , VAR ) : NEWLINE if isinstance ( VAR , collections . Mapping ) : NEWLINE return { VAR : map_nested_dicts ( VAR , VAR ) for VAR , VAR in VAR . iteritems ( ) } NEWLINE else : NEWLINE return VAR ( VAR ) NEWLINE map_nested_dicts ( x , lambda VAR : VAR + NUMBER ) NEWLINE", "tell application STRING to set thelinkCount to do JavaScript STRING in document NUMBER NEWLINE set theUrl to STRING NEWLINE repeat with i from NUMBER to thelinkCount NEWLINE tell application STRING to set this_link to ( do JavaScript STRING & i & STRING in document NUMBER ) as string NEWLINE if this_link contains STRING then NEWLINE set theUrl to this_link NEWLINE exit repeat NEWLINE end if NEWLINE end repeat NEWLINE log theUrl", ". / NEWLINE | - SConstruct NEWLINE | - src / NEWLINE | | - SConscript NEWLINE | | - source . txt NEWLINE | - build /", "def line_prepender ( VAR , VAR ) : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR . seek ( NUMBER , NUMBER ) NEWLINE VAR . write ( VAR . rstrip ( STRING ) + STRING + VAR )", "VAR = reduce ( DataFrame . unionAll , transformed_dfs ) NEWLINE VAR = [ max ( VAR ) . alias ( VAR ) for VAR in VAR . columns [ NUMBER : ] ] NEWLINE VAR = VAR . repartition ( col ( STRING ) ) . groupBy ( col ( STRING ) ) . agg ( * VAR )", "import matplotlib . pyplot as plt NEWLINE for VAR in hull . simplices : NEWLINE plt . plot ( points [ VAR , NUMBER ] , points [ VAR , NUMBER ] , STRING ) NEWLINE plt . plot ( cx , cy , STRING , ms = NUMBER ) NEWLINE plt . show ( )", "df [ df < NUMBER ] . count ( )", "STRING . encode ( STRING , STRING ) . translate ( None , non_vowels )", "from selenium import webdriver NEWLINE from selenium . webdriver . common . by import By NEWLINE from selenium . webdriver . support . ui import WebDriverWait NEWLINE from selenium . webdriver . support import expected_conditions as EC NEWLINE import pandas as pd NEWLINE VAR = [ STRING , STRING ] NEWLINE VAR = [ ] NEWLINE VAR = webdriver . PhantomJS ( ) NEWLINE VAR . implicitly_wait ( NUMBER ) NEWLINE VAR = WebDriverWait ( VAR , NUMBER ) NEWLINE for VAR in VAR : NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR . get ( VAR + str ( VAR ) ) NEWLINE VAR . until ( EC . visibility_of_element_located ( ( By . CSS_SELECTOR , STRING ) ) ) NEWLINE for VAR in VAR . find_elements_by_css_selector ( STRING ) : NEWLINE VAR , VAR = VAR . find_element_by_class_name ( STRING ) . text . split ( STRING ) NEWLINE VAR = VAR . find_element_by_xpath ( STRING ) . text NEWLINE if STRING in VAR : NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE else : NEWLINE VAR = STRING NEWLINE VAR . append ( { STRING : VAR . strip ( ) , STRING : VAR . strip ( ) , STRING : VAR . strip ( ) , STRING : VAR . strip ( ) } ) NEWLINE VAR . close ( ) NEWLINE VAR = pd . DataFrame ( VAR ) NEWLINE print ( VAR )", ">> > VAR = STRING NEWLINE >> > VAR . encode ( STRING ) NEWLINE STRING", "for VAR , VAR in enumerate ( os . listdir ( directoryPath ) ) : NEWLINE if VAR . endswith ( STRING ) : NEWLINE array1 [ VAR ] = numpy . genfromtxt ( VAR , delimiter = STRING ) [ : , NUMBER ]", "from pyspark . sql import DataFrame NEWLINE from pyspark . rdd import RDD NEWLINE def foo ( VAR ) : NEWLINE if isinstance ( VAR , RDD ) : NEWLINE return STRING NEWLINE if isinstance ( VAR , DataFrame ) : NEWLINE return STRING NEWLINE foo ( sc . parallelize ( [ ] ) ) NEWLINE foo ( sc . parallelize ( [ ( STRING , NUMBER ) ] ) . toDF ( ) ) NEWLINE", ">> > VAR = STRING NEWLINE >> > VAR [ : NUMBER ] NEWLINE STRING NEWLINE >> > VAR [ NUMBER : NUMBER ] NEWLINE STRING NEWLINE >> > VAR [ - NUMBER : ] NEWLINE STRING", "date close high low open volume swings NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER", "if hasattr ( instance , self . name + STRING )", "In [ NUMBER ] : a = np . random . rand ( NUMBER ) NEWLINE In [ NUMBER ] : % % timeit NEWLINE . . . . . : a . mean ( ) NEWLINE . . . . . : a . var ( ) NEWLINE . . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : % % timeit NEWLINE . . . . . : m = a . mean ( ) NEWLINE . . . . . : np . mean ( ( a - m ) ** NUMBER ) NEWLINE . . . . . : NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : m = a . mean ( ) NEWLINE In [ NUMBER ] : a . var ( ) NEWLINE Out [ NUMBER ] : NUMBER NEWLINE In [ NUMBER ] : np . mean ( ( a - m ) ** NUMBER ) NEWLINE Out [ NUMBER ] : NUMBER", "if not ( var1 or var2 or var3 or var4 ) :", "VAR = { VAR : [ VAR , VAR ] for VAR in values } NEWLINE for VAR in values : NEWLINE if VAR - NUMBER in VAR and VAR in VAR : NEWLINE VAR , VAR = VAR [ VAR - NUMBER ] , VAR [ VAR ] NEWLINE if VAR [ NUMBER ] == VAR - NUMBER and VAR [ NUMBER ] == VAR : NEWLINE if VAR [ NUMBER ] != VAR [ NUMBER ] : NEWLINE del VAR [ VAR [ NUMBER ] ] NEWLINE if VAR [ NUMBER ] != VAR [ NUMBER ] : NEWLINE del VAR [ VAR [ NUMBER ] ] NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] NEWLINE VAR [ VAR [ NUMBER ] ] = VAR NEWLINE VAR = { VAR : VAR [ NUMBER ] - VAR [ NUMBER ] + NUMBER for VAR , VAR in VAR . iteritems ( ) if VAR == VAR [ NUMBER ] }", ">> > VAR = STRING NEWLINE >> > countSpaces ( VAR ) NEWLINE The whitespace normalized string is foo bar baz bam NEWLINE The maximum length of consecutive whitespace is NUMBER", ">> > class C ( object ) : NEWLINE . . . def __init__ ( VAR , VAR ) : NEWLINE . . . VAR . VAR = VAR NEWLINE . . . def __getitem__ ( VAR , VAR ) : NEWLINE . . . return VAR . VAR [ VAR ] NEWLINE . . . NEWLINE >> > def f ( VAR , VAR , VAR ) : NEWLINE . . . print STRING , VAR , VAR , VAR NEWLINE . . . NEWLINE >> > VAR = C ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > f ( * VAR ) NEWLINE Arguments : NUMBER NUMBER NUMBER NEWLINE >> >", "np . dot ( X_test , res_wls . params )", "doskey x = xdir . cmd $ *", "VAR = [ VAR for VAR in list_ if VAR [ NUMBER ] == c_code ]", "import pandas as pd NEWLINE VAR = { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : pd . Series ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , dtype = STRING ) } NEWLINE VAR = pd . DataFrame ( VAR ) NEWLINE VAR = pd . get_dummies ( VAR [ STRING ] ) NEWLINE VAR = pd . concat ( [ VAR , VAR ] , axis = NUMBER ) NEWLINE VAR = VAR . drop ( [ STRING , STRING ] , axis = NUMBER ) NEWLINE print ( VAR )", "RefactoringTool : Skipping implicit fixer : buffer NEWLINE RefactoringTool : Skipping implicit fixer : idioms NEWLINE RefactoringTool : Skipping implicit fixer : set_literal NEWLINE RefactoringTool : Skipping implicit fixer : ws_comma NEWLINE - - - map . py ( original ) NEWLINE + + + map . py ( refactored ) NEWLINE @ @ - NUMBER , NUMBER + NUMBER , NUMBER @ @ NEWLINE - map ( lambda VAR : VAR , range ( NUMBER ) ) NEWLINE + list ( map ( lambda VAR : VAR , list ( range ( NUMBER ) ) ) ) NEWLINE RefactoringTool : Files that need to be modified : NEWLINE RefactoringTool : map . py NEWLINE RefactoringTool : Warnings / messages while refactoring : NEWLINE RefactoringTool : NEWLINE RefactoringTool : Line NUMBER : You should use a for loop here", "log_e : NUMBER s NUMBER % NEWLINE log_2 : NUMBER s NUMBER % NEWLINE stringcount : NUMBER s NUMBER % NEWLINE olgn : NUMBER s NUMBER % NEWLINE bitcounter : NUMBER s NUMBER %", "if obj . __class__ . __name__ = STRING : NEWLINE expect_problems_some_day ( )", "from flask import send_file NEWLINE @ app . route ( STRING ) NEWLINE def view_method ( ) : NEWLINE VAR = send_file ( tempFileObj , as_attachment = True , attachment_filename = STRING ) NEWLINE return VAR", "VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE from operator import setitem NEWLINE map ( lambda VAR : setitem ( VAR , NUMBER , - NUMBER ) , VAR ) NEWLINE print ( VAR ) NEWLINE [ [ NUMBER , - NUMBER ] , [ NUMBER , - NUMBER ] ]", "$ python - m timeit - s STRING STRING NEWLINE NUMBER loops , best of NUMBER : NUMBER usec per loop", ">> > VAR = { STRING : [ NUMBER ] , STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER ] } NEWLINE >> > VAR = [ VAR for VAR , VAR in VAR . items ( ) ] NEWLINE >> > VAR NEWLINE [ [ NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ]", "from collections import Counter NEWLINE from itertools import chain NEWLINE VAR = [ { NUMBER : STRING , NUMBER : STRING , NUMBER : STRING , NUMBER : STRING } , { NUMBER : STRING , NUMBER : STRING } , { NUMBER : STRING , NUMBER : STRING } , ] NEWLINE VAR = Counter ( chain . from_iterable ( VAR . items ( ) for VAR in VAR ) ) NEWLINE VAR = { VAR : [ VAR , VAR ] for ( ( VAR , VAR ) , VAR ) in VAR . items ( ) } NEWLINE print dict ( VAR )", "In [ NUMBER ] : [ VAR . next_sibling . strip ( ) for VAR in soup . findAll ( STRING ) ] NEWLINE Out [ NUMBER ] : [ STRING , STRING ]", "import numpy as np NEWLINE from itertools import izip , cycle NEWLINE import matplotlib . pyplot as plt NEWLINE from collections import defaultdict NEWLINE VAR = NUMBER NEWLINE VAR = { } NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR = chr ( VAR ) NEWLINE VAR [ VAR ] = np . cumsum ( np . random . rand ( VAR ) > np . random . rand ( NUMBER ) ) NEWLINE VAR = cycle ( [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ) NEWLINE VAR , VAR = plt . subplots ( NUMBER , NUMBER ) NEWLINE VAR . set_xlabel ( STRING ) NEWLINE VAR . set_ylabel ( STRING ) NEWLINE VAR = np . zeros ( VAR * NUMBER - NUMBER ) NEWLINE VAR = np . vstack ( [ arange ( VAR ) , arange ( VAR ) ] ) . T . ravel ( ) [ NUMBER : ] NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR , VAR in izip ( sorted ( VAR . keys ( ) ) , VAR ) : NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = np . vstack ( [ VAR , VAR ] ) . T . ravel ( ) [ : - NUMBER ] NEWLINE VAR . fill_between ( VAR , VAR + VAR , VAR , facecolor = VAR , label = VAR , edgecolor = STRING ) NEWLINE VAR += VAR NEWLINE VAR . append ( matplotlib . patches . Rectangle ( [ NUMBER , NUMBER ] , NUMBER , NUMBER , color = VAR ) ) NEWLINE VAR . append ( VAR ) NEWLINE VAR . set_xlim ( [ NUMBER , VAR - NUMBER ] ) NEWLINE VAR . legend ( VAR , VAR , loc = NUMBER ) NEWLINE plt . show ( )", "g + + main . cpp - I STRING include_path_with [ weird ] characters STRING", "VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR . find_all ( STRING ) [ NUMBER ] . find_all ( STRING ) : NEWLINE VAR = VAR . find_all ( STRING ) NEWLINE VAR . append ( VAR [ NUMBER ] . text ) NEWLINE VAR . append ( VAR [ NUMBER ] . text ) NEWLINE print VAR NEWLINE print VAR", "if A in [ STRING , STRING , STRING ] : NEWLINE", "VAR = [ urlparse ( VAR ) . netloc for VAR in ifile ]", ">> > VAR = STRING NEWLINE >> > import itertools NEWLINE >> > for VAR in itertools . islice ( VAR , NUMBER , None , NUMBER ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE a NEWLINE i NEWLINE q NEWLINE y NEWLINE >> > for VAR in itertools . islice ( VAR , NUMBER , None , NUMBER ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE b NEWLINE j NEWLINE r NEWLINE z NEWLINE >> > for VAR in itertools . islice ( VAR , NUMBER , None , NUMBER ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE c NEWLINE k NEWLINE VAR", "import re NEWLINE VAR = re . match ( STRING , re . MULTILINE | re . VERBOSE )", "VAR = STRING NEWLINE VAR = STRING NEWLINE print STRING . center ( NUMBER , STRING ) NEWLINE for VAR in tokenize ( VAR ) : NEWLINE print VAR NEWLINE print STRING . center ( NUMBER , STRING ) NEWLINE for VAR in tokenize ( VAR ) : NEWLINE print VAR", "@ pyqtSlot ( ) NEWLINE def click_my_btn ( VAR , VAR ) : NEWLINE main_window . btn . hide ( )", ">> > VAR = requests . get ( url1 ) NEWLINE >> > VAR = { STRING : VAR . content } NEWLINE >> > VAR = requests . post ( url2 , VAR = VAR )", "In [ NUMBER ] : for VAR , VAR in groupby ( lst , lambda VAR : VAR != STRING ) : NEWLINE . . . : print VAR , list ( VAR ) NEWLINE . . . : NEWLINE True [ [ STRING , STRING , STRING ] ] NEWLINE False [ STRING ] NEWLINE True [ [ STRING ] ] NEWLINE False [ STRING ] NEWLINE True [ STRING , STRING , STRING ]", "from django . contrib . auth . models import User NEWLINE from django . db import models NEWLINE class Relationship ( models . Model ) : NEWLINE VAR = models . ForeignKey ( User , related_name = STRING ) NEWLINE VAR = models . ForeignKey ( User , related_name = STRING )", "In [ NUMBER ] : np . argwhere ( x == np . min ( x ) ) NEWLINE Out [ NUMBER ] : array ( [ [ NUMBER , NUMBER ] ] )", "import subprocess NEWLINE VAR = subprocess . Popen ( [ STRING , STRING , STRING ] , stdout = subprocess . PIPE , shell = True )", "tcpdump : verbose output suppressed , use - v or - vv for full protocol decode NEWLINE listening on lo , link - type EN10MB ( Ethernet ) , capture size NUMBER bytes NEWLINE NUMBER : NUMBER : NUMBER IP localhost : NUMBER > localhost NUMBER : S NUMBER : NUMBER ( NUMBER ) win NUMBER < mss NUMBER , sackOK , timestamp NUMBER NUMBER , nop , wscale NUMBER > NEWLINE E . . < R . @ . @ . . . . . . . . . . . . . . . CVC . . . . . . . . . I | . . . . @ . . . . NEWLINE & NUMBER . . . . . . . . . NEWLINE NUMBER : NUMBER : NUMBER IP localhost NUMBER > localhost : NUMBER : S NUMBER : NUMBER ( NUMBER ) ack NUMBER win NUMBER < mss NUMBER , sackOK , timestamp NUMBER NUMBER , nop , wscale NUMBER > NEWLINE E . . < . . @ . @ . < . . . . . . . . . . . . . C < . . CVC . . . . . Ia . . . . @ . . . . NEWLINE & NUMBER . & NUMBER . . . . . NEWLINE NUMBER : NUMBER : NUMBER IP localhost : NUMBER > localhost NUMBER : . ack NUMBER win NUMBER < nop , nop , timestamp NUMBER NUMBER > NEWLINE E . NUMBER R . @ . @ . . . . . . . . . . . . . . . CVC . C < . . . . . NUMBER . . . . . . NEWLINE & NUMBER . & NUMBER . NEWLINE NUMBER : NUMBER : NUMBER IP localhost : NUMBER > localhost NUMBER : P NUMBER : NUMBER ( NUMBER ) ack NUMBER win NUMBER < nop , nop , timestamp NUMBER NUMBER > NEWLINE E . . ; R . @ . @ . . . . . . . . . . . . . . . CVC . C < . . . . . . . / . . . . . NEWLINE & NUMBER . & NUMBER . hello NUMBER NEWLINE NUMBER : NUMBER : NUMBER IP localhost NUMBER > localhost : NUMBER : . ack NUMBER win NUMBER < nop , nop , timestamp NUMBER NUMBER > NEWLINE E . NUMBER . ( @ . @ . . . . . . . . . . . . . . . C < . . CVC . . . . NUMBER } . . . . . NEWLINE & NUMBER . & NUMBER . NEWLINE NUMBER : NUMBER : NUMBER IP localhost NUMBER > localhost : NUMBER : F NUMBER : NUMBER ( NUMBER ) ack NUMBER win NUMBER < nop , nop , timestamp NUMBER NUMBER > NEWLINE E . NUMBER . ) @ . @ . . . . . . . . . . . . . . . C < . . CVC . . . . NUMBER { . . . . . NEWLINE & NUMBER . & NUMBER . NEWLINE NUMBER : NUMBER : NUMBER IP localhost : NUMBER > localhost NUMBER : . ack NUMBER win NUMBER < nop , nop , timestamp NUMBER NUMBER > NEWLINE E . NUMBER R . @ . @ . . . . . . . . . . . . . . . CVC . C < . . . . . NUMBER x . . . . . NEWLINE & NUMBER . & NUMBER . NEWLINE NUMBER : NUMBER : NUMBER IP localhost : NUMBER > localhost NUMBER : P NUMBER : NUMBER ( NUMBER ) ack NUMBER win NUMBER < nop , nop , timestamp NUMBER NUMBER > NEWLINE E . . ; R . @ . @ . . . . . . . . . . . . . . . CVC . C < . . . . . . . / . . . . . NEWLINE & NUMBER % W & NUMBER . hello NUMBER NEWLINE NUMBER : NUMBER : NUMBER IP localhost NUMBER > localhost : NUMBER : R NUMBER : NUMBER ( NUMBER ) win NUMBER NEWLINE E . . ( . . @ . @ . < . . . . . . . . . . . . . C < . . . . . . P . . . b . . . NUMBER packets captured NUMBER packets received by filter NUMBER packets dropped by kernel", "CREATE TABLE ` dog_measurement_data ` ( ` id ` INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY , ` dog_measurement_id ` INT UNSIGNED NOT NULL , ` frame ` INT UNSIGNED , ` sensor_row ` INT UNSIGNED , ` sensor_col ` INT UNSIGNED , ` value ` NUMBER ) ;", "import inspect NEWLINE import sys NEWLINE def test ( ) : NEWLINE pass NEWLINE VAR = [ VAR for VAR , VAR in inspect . getmembers ( sys . modules [ __name__ ] , inspect . isfunction ) ] NEWLINE print VAR", "import unittest NEWLINE class TestCaseA ( unittest . TestCase ) : NEWLINE def setUp ( VAR ) : NEWLINE VAR . thing = A ( ) NEWLINE def test_does_x ( ) : NEWLINE VAR . assertTrue ( VAR . thing . does_x ( ) )", ">> > from collections import OrderedDict NEWLINE >> > VAR = OrderedDict ( ( ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ) ) NEWLINE >> > VAR = NUMBER NEWLINE >> > for VAR , VAR in VAR . iteritems ( ) : NEWLINE . . . VAR += VAR NEWLINE . . . VAR [ VAR ] = VAR NEWLINE . . . NEWLINE >> > VAR NEWLINE OrderedDict ( [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] )", "import itertools NEWLINE VAR = { ( NUMBER , NUMBER ) : NUMBER } NEWLINE def stirling1 ( VAR , VAR ) : NEWLINE VAR = VAR . get ( ( VAR , VAR ) ) NEWLINE if VAR is None : NEWLINE if not NUMBER <= VAR <= VAR : return NUMBER NEWLINE VAR = ( VAR - NUMBER ) * stirling1 ( VAR - NUMBER , VAR ) + stirling1 ( VAR - NUMBER , VAR - NUMBER ) NEWLINE VAR [ ( VAR , VAR ) ] = VAR NEWLINE return VAR NEWLINE def cyclecount ( VAR ) : NEWLINE VAR = NUMBER NEWLINE VAR = [ False ] * len ( VAR ) NEWLINE for ( VAR , VAR ) in enumerate ( VAR ) : NEWLINE while VAR < len ( VAR ) and not VAR [ VAR ] : NEWLINE VAR [ VAR ] = True NEWLINE if VAR == VAR : NEWLINE VAR += NUMBER NEWLINE break NEWLINE VAR = VAR [ VAR ] NEWLINE return VAR NEWLINE def extcount ( VAR , VAR , VAR ) : NEWLINE VAR = cyclecount ( VAR ) NEWLINE return sum ( stirling1 ( VAR - len ( VAR ) , VAR - VAR - VAR ) for VAR in VAR ) NEWLINE def unrank ( VAR , VAR , VAR ) : NEWLINE assert VAR >= NUMBER NEWLINE VAR = set ( range ( VAR ) ) NEWLINE VAR = [ ] NEWLINE while VAR : NEWLINE for VAR in sorted ( VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE VAR = extcount ( VAR , VAR , VAR ) NEWLINE if VAR < VAR : NEWLINE VAR . remove ( VAR ) NEWLINE break NEWLINE del VAR [ - NUMBER ] NEWLINE VAR -= VAR NEWLINE else : NEWLINE assert False NEWLINE return tuple ( VAR ) NEWLINE def rank ( VAR , VAR , VAR ) : NEWLINE assert VAR == len ( VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = [ ] NEWLINE VAR = set ( range ( VAR ) ) NEWLINE for VAR in VAR : NEWLINE VAR . remove ( VAR ) NEWLINE for VAR in sorted ( VAR ) : NEWLINE if VAR < VAR : NEWLINE VAR . append ( VAR ) NEWLINE VAR += extcount ( VAR , VAR , VAR ) NEWLINE del VAR [ - NUMBER ] NEWLINE VAR . append ( VAR ) NEWLINE return VAR NEWLINE def degree ( VAR ) : NEWLINE return len ( VAR ) - cyclecount ( VAR ) NEWLINE def test ( VAR , VAR ) : NEWLINE for ( VAR , VAR ) in enumerate ( VAR for VAR in itertools . permutations ( range ( VAR ) ) if degree ( VAR ) in VAR ) : NEWLINE assert unrank ( VAR , VAR , VAR ) == VAR NEWLINE assert rank ( VAR , VAR , VAR ) == VAR NEWLINE test ( NUMBER , { NUMBER , NUMBER , NUMBER } )", "column NUMBER : NEWLINE NUMBER | NUMBER NEWLINE btn btn - success NEWLINE column NUMBER : NEWLINE NUMBER | NUMBER NEWLINE btn btn - success", "In [ NUMBER ] : NEWLINE df [ STRING ] = df [ STRING ] . dt . time NEWLINE df NEWLINE Out [ NUMBER ] : NEWLINE Timestamp Date Time NEWLINE NUMBER NUMBER _095900 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095901 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095902 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095903 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095904 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095905 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095906 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095907 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095908 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER _095909 NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NUMBER : NUMBER : NUMBER", "Main Monitoring of Cameras NEWLINE def monitorCam ( camera , config , mainlog ) : NEWLINE STRING NEWLINE mainlog . info ( STRING . format ( mp . current_process ( ) . name , mp . current_process ( ) . pid ) ) NEWLINE VAR = initLogger ( config , filename = STRING . format ( camera ) ) NEWLINE VAR . info ( STRING . format ( camera , mp . current_process ( ) . pid ) ) NEWLINE config . camera = camera NEWLINE VAR = dosclass . MonitorFiles ( config , VAR , mainlog ) NEWLINE VAR = LoggingEventHandler ( ) NEWLINE VAR = Observer ( ) NEWLINE VAR . schedule ( VAR , path = config . fitsDir , recursive = False ) NEWLINE VAR . schedule ( VAR , config . fitsDir , recursive = False ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( ) NEWLINE VAR . info ( STRING ) NEWLINE VAR . info ( STRING . format ( config . fitsDir ) ) NEWLINE VAR . info ( STRING . format ( config . fitsDir , camera ) ) NEWLINE try : NEWLINE while True : NEWLINE time . sleep ( NUMBER ) NEWLINE except KeyboardInterrupt : NEWLINE VAR . unschedule_all ( ) NEWLINE VAR . stop ( ) NEWLINE VAR . info ( STRING ) NEWLINE VAR . info ( STRING ) NEWLINE VAR . info ( STRING ) NEWLINE VAR . info ( STRING ) NEWLINE if VAR . is_alive ( ) : NEWLINE VAR . info ( STRING ) NEWLINE else : NEWLINE VAR . info ( STRING )", "df [ STRING ] = pandas . Series ( range ( len ( df ) )", "histogram ( a , bins = NUMBER , range = None , normed = False , weights = None , new = None )", "pd . concat ( get_sumdf ( VAR ) for VAR in areas_tabs )", "import re NEWLINE import numpy NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = re . compile ( VAR ) NEWLINE for VAR in VAR . finditer ( VAR ) : NEWLINE print VAR . start ( ) , VAR . group ( ) , VAR . span ( ) NEWLINE VAR = len ( VAR . group ( ) ) * NUMBER NEWLINE VAR = STRING % VAR NEWLINE VAR += VAR NEWLINE VAR += STRING % VAR NEWLINE VAR = re . findall ( VAR , VAR ) NEWLINE print VAR NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = VAR [ NUMBER ] NEWLINE print VAR , VAR , VAR", ">> > import s NEWLINE >> > s . get_string_function ( STRING ) NEWLINE < Boost . Python . function object at NUMBER > NEWLINE >> > _ ( NUMBER , NUMBER ) NEWLINE STRING", "VAR = request . args . get ( STRING )", "In [ NUMBER ] : df . replace ( NUMBER , np . nan ) . bfill ( ) NEWLINE Out [ NUMBER ] : NEWLINE a b c NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NaN NaN NEWLINE NUMBER - NUMBER - NUMBER NaN NaN NaN NEWLINE NUMBER - NUMBER - NUMBER NaN NaN NaN", "STRING : fields . many2one ( STRING , STRING , required = False )", "> python file_renamer . py NEWLINE enter file with new names : newnames . txt NEWLINE The list of files - [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE Successfully renamed NUMBER NUMBER NUMBER to NUMBER NUMBER NUMBER NEWLINE Successfully renamed NUMBER NUMBER NUMBER to NUMBER NUMBER NUMBER NEWLINE Successfully renamed NUMBER NUMBER NUMBER to NUMBER NUMBER NUMBER", "for VAR in get_models ( app ) : NEWLINE VAR = VAR ( ) NEWLINE VAR . objects . filter ( . . . ) NEWLINE VAR . _meta . db_table NEWLINE VAR . _meta . verbose_name NEWLINE", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . sub ( STRING , STRING , VAR ) NEWLINE STRING", "class ListParser : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . str = VAR . split ( STRING ) NEWLINE print VAR . str NEWLINE VAR . answer = [ ] NEWLINE def parse ( VAR ) : NEWLINE VAR . nextLine ( ) NEWLINE VAR . topList ( ) NEWLINE return NEWLINE def topList ( VAR ) : NEWLINE while ( len ( VAR . str ) > NUMBER ) : NEWLINE VAR . topListItem ( ) NEWLINE def topListItem ( VAR ) : NEWLINE VAR = VAR . nextLine ( ) NEWLINE print STRING + VAR NEWLINE VAR = VAR . nextLine ( ) NEWLINE if VAR != STRING : NEWLINE raise Exception ( STRING % VAR ) NEWLINE VAR = VAR . sublist ( ) NEWLINE def nextLine ( VAR ) : NEWLINE return VAR . str . pop ( NUMBER ) NEWLINE def sublist ( VAR ) : NEWLINE while True : NEWLINE VAR = VAR . nextLine ( ) NEWLINE if VAR == STRING : NEWLINE return NEWLINE else : NEWLINE print STRING + VAR NEWLINE VAR = ListParser ( VAR ) NEWLINE VAR . parse ( ) NEWLINE print STRING", ">> > base64 . b64encode ( STRING ) NEWLINE STRING", "proxyModel . setView ( self . tableview )", "DIR1 / NEWLINE fileA NEWLINE fileB NEWLINE DIR3 / NEWLINE fileE NEWLINE fileF NEWLINE DIR2 / NEWLINE fileC NEWLINE fileD", "addToClipBoard ( your_variable )", "from itertools import groupby NEWLINE VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE VAR . sort ( key = lambda VAR : VAR [ NUMBER ] ) NEWLINE VAR = groupby ( VAR , lambda VAR : VAR [ NUMBER ] )", "VAR = { } NEWLINE class Example ( object ) : NEWLINE @ property NEWLINE def foo ( self ) : NEWLINE if self not in VAR : NEWLINE VAR [ self ] = . . . NEWLINE return VAR [ self ]", "VAR = root . cssselect ( STRING )", "NUMBER", "$ python v . py NEWLINE Django == NUMBER", "exec ( STRING )", "arcpy . ImportMetadata_conversion ( tempXmlExportPath , STRING , featureClassPath ) NEWLINE shutil . rmtree ( tempXmlExportPath )", "import regex as re NEWLINE def remove_punctuation ( VAR ) : NEWLINE return re . sub ( STRING , STRING , VAR )", "VAR = models . ForeignKey ( Entry )", "def flatten ( VAR ) : NEWLINE for VAR in VAR : NEWLINE if isinstance ( VAR , ( list , tuple ) ) : NEWLINE for VAR in flatten ( VAR ) : NEWLINE yield VAR NEWLINE else : NEWLINE yield VAR NEWLINE def VAR ( VAR , VAR ) : NEWLINE return any ( VAR == VAR for VAR in flatten ( VAR ) )", ">> > [ STRING . join ( VAR ) for VAR in itertools . product ( * [ ( VAR , d . get ( VAR ) ) if d . get ( VAR ) else VAR for VAR in s ] ) ] NEWLINE [ STRING , STRING , STRING , STRING ]", "if actNum == act_num and pinNum == pin_num : NEWLINE . . . NEWLINE self . controller . show_frame ( WelcomePage ) NEWLINE . . .", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGA NEWLINE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGG", "import paramiko NEWLINE VAR = paramiko . SSHClient ( ) NEWLINE VAR . connect ( STRING , username = STRING , password = STRING ) NEWLINE VAR , VAR , VAR = VAR . exec_command ( STRING ) NEWLINE VAR = VAR . read ( ) NEWLINE print ( VAR )", ">> > VAR = STRING NEWLINE >> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . findall ( VAR , VAR ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "if re . search ( STRING , subject , re . IGNORECASE ) : NEWLINE else : NEWLINE", "$ which pip NEWLINE / usr / local / bin / pip NEWLINE $ ls - l / usr / local / bin / pip NEWLINE lrwxr - xr - x NUMBER dmao admin NUMBER Feb NUMBER NUMBER : NUMBER NUMBER / usr / local / bin / pip - > . . / Cellar / python / NUMBER NUMBER / bin / pip", "[ VAR for VAR in a if not any ( VAR in VAR for VAR in b ) ]", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE print reduce ( lambda VAR , VAR : { VAR : VAR } , reversed ( VAR ) )", "import matplotlib . pyplot as plt NEWLINE import matplotlib . gridspec as gridspec NEWLINE import matplotlib . offsetbox as offsetbox NEWLINE VAR = { STRING : True , STRING : [ STRING , ] , } NEWLINE plt . rcParams . update ( VAR ) NEWLINE VAR = plt . figure ( figsize = ( NUMBER , NUMBER ) ) NEWLINE VAR = gridspec . GridSpec ( NUMBER , NUMBER ) NEWLINE VAR = plt . subplot ( VAR [ NUMBER : NUMBER , NUMBER : NUMBER ] ) NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR . axis ( STRING ) NEWLINE VAR = STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) + STRING NEWLINE VAR = STRING + str ( VAR [ NUMBER ] ) + STRING + str ( VAR [ NUMBER ] ) NEWLINE VAR = STRING NEWLINE VAR = VAR + VAR + VAR + VAR + VAR + VAR + VAR + VAR NEWLINE VAR = offsetbox . AnchoredText ( VAR , pad = NUMBER , loc = NUMBER , prop = dict ( size = NUMBER ) ) NEWLINE VAR . patch . set ( alpha = NUMBER ) NEWLINE VAR . add_artist ( VAR ) NEWLINE plt . savefig ( STRING , dpi = NUMBER )", "for VAR in big_list : NEWLINE VAR . sort ( key = lambda VAR : s [ VAR [ NUMBER ] ] )", "from collections import OrderedDict NEWLINE VAR = OrderedDict ( zip ( ( STRING , STRING , STRING ) , ( NUMBER , NUMBER , NUMBER ) ) ) NEWLINE print json . dumps ( dict ( VAR ) ) NEWLINE print json . dumps ( VAR )", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE if VAR in a : NEWLINE VAR += NUMBER NEWLINE elif VAR in b : NEWLINE VAR -= NUMBER NEWLINE print VAR", "import json NEWLINE VAR = { STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER ] } NEWLINE VAR = [ { STRING : VAR , STRING : VAR } for VAR , VAR in VAR . items ( ) ] NEWLINE json . dumps ( VAR , indent = NUMBER )", ">> > pprint ( combine ( l ) ) NEWLINE { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : { STRING : { STRING : NUMBER , STRING : NUMBER } , STRING : NUMBER , STRING : NUMBER } , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : NUMBER , STRING : { STRING : { STRING : NUMBER , STRING : NUMBER } , STRING : NUMBER , STRING : NUMBER } , STRING : STRING } ] } NEWLINE >> >", "class tweet ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . retweets = NUMBER NEWLINE def retweet ( VAR ) : NEWLINE VAR . retweets += NUMBER NEWLINE def __repr__ ( VAR ) : NEWLINE return STRING % ( VAR . retweets ) NEWLINE def __hash__ ( VAR ) : NEWLINE return hash ( VAR . VAR ) NEWLINE class person ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . tweets = dict ( ) NEWLINE def __repr__ ( VAR ) : NEWLINE return STRING % ( VAR . VAR , VAR . tweets ) NEWLINE def new_tweet ( VAR , VAR ) : NEWLINE VAR . tweets [ VAR ] = tweet ( VAR ) NEWLINE def retweet ( VAR , VAR ) : NEWLINE VAR . tweets [ VAR ] . retweet ( ) NEWLINE VAR = person ( STRING ) NEWLINE VAR . new_tweet ( STRING ) NEWLINE VAR . new_tweet ( STRING ) NEWLINE VAR . retweet ( STRING ) NEWLINE VAR . retweet ( STRING ) NEWLINE print VAR", "username machine start end NEWLINE NUMBER user1 D5599 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER NUMBER : NUMBER NEWLINE NUMBER user1 D5599 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER user1 D5599 . domain . com NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER user1 D5599 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER user1 D5599 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER user1 D5599 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER user1 D5645 . domain . com NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER user1 D5682 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER USER2 D5682 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER USER2 D5682 . domain . com NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER USER2 D5682 . domain . com NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER USER2 D5682 . domain . com NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER USER2 D5682 . domain . com NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER", "In [ NUMBER ] : import numpy as np NEWLINE In [ NUMBER ] : import pandas as pd NEWLINE In [ NUMBER ] : np . where ( pd . isnull ( df ) ) NEWLINE Out [ NUMBER ] : ( array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) , array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) ) NEWLINE In [ NUMBER ] : df . iloc [ NUMBER , NUMBER ] NEWLINE Out [ NUMBER ] : nan NEWLINE In [ NUMBER ] : [ df . iloc [ VAR , VAR ] for VAR , VAR in zip ( * np . where ( pd . isnull ( df ) ) ) ] NEWLINE Out [ NUMBER ] : [ nan , nan , nan , nan , nan , nan ]", "In [ NUMBER ] : VAR = np . einsum ( STRING , points , matrices ) NEWLINE In [ NUMBER ] : VAR [ NUMBER ] NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : points [ NUMBER ] . dot ( matrices [ NUMBER ] ) NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : VAR [ NUMBER ] NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : points [ NUMBER ] . dot ( matrices [ NUMBER ] ) NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER ] )", ">> > from pprint import pprint NEWLINE >> > pprint ( list ( pairwise ( pleio ) ) ) NEWLINE [ { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } , { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } , { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } , { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } , { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } , { STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } ]", "Charge NUMBER Charge NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER", "class Matrix ( object ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR = NUMBER ) : NEWLINE VAR . m = [ ] NEWLINE for VAR in range ( VAR ) : NEWLINE VAR . m . append ( [ VAR for VAR in range ( VAR ) ] ) NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE return VAR . m [ VAR ]", "In [ NUMBER ] : data . data NEWLINE Out [ NUMBER ] : IP ( src = STRING , off = NUMBER , dst = STRING , sum = NUMBER , len = NUMBER , p = NUMBER , id = NUMBER , data = TCP ( seq = NUMBER , off_x2 = NUMBER , ack = NUMBER , win = NUMBER , sum = NUMBER , flags = NUMBER , dport = NUMBER , sport = NUMBER ) )", "VAR = NUMBER NEWLINE for VAR , VAR in enumerate ( fields [ VAR : ] , VAR ) : NEWLINE . . . .", "[ section ] NEWLINE VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "VAR = SparkContext ( appName = STRING ) NEWLINE VAR . _jvm . com . wellcentive . nosql . Configurator . init ( )", "NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "NUMBER passed in x . xx seconds", "VAR = oldList [ : ]", "import itertools NEWLINE def readWords ( VAR ) : NEWLINE VAR = STRING NEWLINE for VAR in itertools . takewhile ( lambda VAR : bool ( VAR ) , itertools . imap ( VAR . read , itertools . repeat ( NUMBER ) ) ) : NEWLINE if VAR . isspace ( ) : NEWLINE if VAR : NEWLINE yield VAR NEWLINE VAR = STRING NEWLINE continue NEWLINE VAR += VAR NEWLINE if VAR : NEWLINE yield VAR", "VAR = messages ( id , internalDate ) NEWLINE GET https : // www . googleapis . com / gmail / v1 / users / me / threads / NUMBER e929dcc2df2 ? VAR = messages ( id % NUMBER CinternalDate ) & access_token = { YOUR_API_KEY }", "VAR = re . sub ( STRING , STRING , VAR , NUMBER )", "VAR = @ VAR @ NEWLINE VAR = @ VAR @", "from gi . repository import Gtk , Gdk , GLib NEWLINE def run_dialog ( VAR ) : NEWLINE VAR = Gtk . FileChooserDialog ( STRING , None , Gtk . FileChooserAction . SELECT_FOLDER , ( Gtk . STOCK_CANCEL , Gtk . ResponseType . CANCEL , STRING , Gtk . ResponseType . OK ) ) NEWLINE VAR = VAR . run ( ) NEWLINE if VAR == Gtk . ResponseType . OK : NEWLINE print ( STRING ) NEWLINE print ( STRING + VAR . get_filename ( ) ) NEWLINE elif VAR == Gtk . ResponseType . CANCEL : NEWLINE print ( STRING ) NEWLINE VAR . destroy ( ) NEWLINE Gtk . main_quit ( ) NEWLINE Gdk . threads_add_idle ( GLib . PRIORITY_DEFAULT , run_dialog , None ) NEWLINE Gtk . main ( )", "for VAR in lst : NEWLINE VAR ( STRING )", "product ( ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) )", "print ( list1 . index ( max ( list1 ) ) )", "import pandas as pd NEWLINE import datetime NEWLINE VAR = { datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) : { STRING : NUMBER , STRING : NUMBER } , datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) : { STRING : NUMBER , STRING : NUMBER } } NEWLINE print pd . DataFrame . from_dict ( VAR , orient = STRING )", ">> > def func ( VAR = NUMBER , VAR = NUMBER ) : NEWLINE . . . return VAR + VAR NEWLINE . . . NEWLINE >> > VAR = { STRING : NUMBER , STRING : NUMBER } NEWLINE >> > func ( ** VAR ) NEWLINE NUMBER NEWLINE >> > VAR = { STRING : NUMBER } NEWLINE >> > func ( ** VAR ) NEWLINE NUMBER NEWLINE >> > VAR = { STRING : NUMBER } NEWLINE >> > func ( ** VAR ) NEWLINE NUMBER NEWLINE >> > VAR = { } NEWLINE >> > func ( ** VAR ) NEWLINE NUMBER", "VAR = STRING NEWLINE if __name__ == STRING : NEWLINE import sys NEWLINE from twisted . internet import endpoints , VAR NEWLINE def shutdown ( VAR , VAR , VAR = [ ] ) : NEWLINE STRING NEWLINE if VAR : return NEWLINE VAR . append ( True ) NEWLINE if VAR : NEWLINE log . msg ( VAR . value ) NEWLINE VAR . callWhenRunning ( VAR . stop ) NEWLINE log . startLogging ( sys . stdout ) NEWLINE VAR = endpoints . serverFromString ( VAR , VAR ) NEWLINE VAR = VAR . listen ( ProxyFactory ( ) ) NEWLINE VAR . addErrback ( shutdown , VAR ) NEWLINE VAR . run ( ) NEWLINE else : NEWLINE from twisted . VAR import service , strports NEWLINE VAR = service . Application ( STRING ) NEWLINE strports . service ( VAR , ProxyFactory ( ) ) . setServiceParent ( VAR )", "from collections import defaultdict NEWLINE VAR = defaultdict ( list ) NEWLINE for VAR , VAR in cnt . items ( ) : NEWLINE VAR [ VAR ] . append ( VAR ) NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE print STRING . format ( VAR , STRING . join ( VAR ) ) NEWLINE NUMBER : windows NEWLINE NUMBER : android iphone NEWLINE NUMBER : apple NEWLINE . . . .", "VAR = numpy . loadtxt ( . . . , usecols = tuple ( xrange ( NUMBER , numcols , NUMBER ) ) )", "def split_on_parts ( VAR , * parts ) : NEWLINE VAR = NUMBER NEWLINE VAR = [ ] NEWLINE for VAR in parts : NEWLINE VAR . append ( VAR [ VAR : VAR + VAR ] ) NEWLINE VAR += VAR NEWLINE return VAR NEWLINE VAR = STRING NEWLINE print split_on_parts ( VAR , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE print split_on_parts ( VAR , NUMBER , NUMBER , NUMBER )", "mus . extend ( reversed ( mus ) )", "VAR = { } NEWLINE for VAR , VAR , VAR , VAR in data : NEWLINE VAR = VAR , VAR NEWLINE if VAR in VAR : NEWLINE VAR = VAR [ VAR ] NEWLINE VAR [ NUMBER ] += STRING . format ( VAR ) NEWLINE VAR [ NUMBER ] += STRING . format ( VAR ) NEWLINE else : NEWLINE VAR [ VAR ] = [ VAR , VAR , VAR , VAR ] NEWLINE print ( list ( VAR . values ( ) ) )", "@ login_required", "pdb . gimp_image_insert_layer ( < img > , < layer > , < parent > , < position > )", "from xml . etree import ElementTree as ET NEWLINE VAR = STRING NEWLINE VAR = ET . fromstring ( VAR ) NEWLINE VAR , VAR = NUMBER , NUMBER NEWLINE for VAR in VAR . findall ( STRING ) [ VAR - NUMBER : VAR ] : NEWLINE print ET . tostring ( VAR ) . strip ( )", ">> > from scrapy . VAR import Selector NEWLINE >> > VAR = Selector ( response ) NEWLINE >> > VAR . css ( STRING ) . re ( STRING ) NEWLINE [ STRING ] NEWLINE >> >", "server { listen NUMBER ; server_name example . com ; access_log / var / log / nginx / sample_project . access . log ; error_log / var / log / nginx / sample_project . error . log ; location / static / { alias / home / www / myhostname . com / static / ; expires NUMBER d ; } }", "return { STRING : STRING , STRING : STRING , STRING : datas , STRING : True }", "< httplib . HTTPMessage instance at NUMBER >", "VAR = list ( ) NEWLINE VAR = STRING NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = None NEWLINE VAR = [ ] NEWLINE for VAR in VAR . readlines ( ) : NEWLINE VAR , VAR = VAR . strip ( ) . split ( VAR ) NEWLINE VAR , VAR = [ VAR . strip ( ) for VAR in [ VAR , VAR ] ] NEWLINE if not VAR or VAR == VAR : NEWLINE VAR . append ( ( VAR , VAR ) ) NEWLINE VAR = VAR NEWLINE else : NEWLINE VAR . append ( VAR ) NEWLINE VAR = [ ( VAR , VAR ) ] NEWLINE VAR = VAR NEWLINE VAR . append ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR , VAR = zip ( * VAR ) NEWLINE print STRING % ( VAR [ NUMBER ] , VAR , STRING . join ( VAR ) )", "In [ NUMBER ] : timeit c = signal . fftconvolve ( a , numpy . fliplr ( numpy . flipud ( b ) ) , STRING ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : timeit c = signal . correlate ( a , b , STRING ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "from tensorflow . python . ops import control_flow_ops", ">> > class A ( object ) : pass NEWLINE . . . NEWLINE >> > VAR = A ( ) NEWLINE >> > A . f = lambda VAR , VAR : NUMBER * VAR NEWLINE >> > VAR . f ( NUMBER ) NEWLINE NUMBER NEWLINE >> > A . f = lambda VAR , VAR : NUMBER * VAR NEWLINE >> > VAR . f ( NUMBER ) NEWLINE NUMBER", "for VAR in ( a_list , b_list , c_list ) : NEWLINE VAR , VAR , VAR = VAR", "VAR = True NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER } NEWLINE VAR [ STRING if VAR else STRING ] = NUMBER NEWLINE print VAR NEWLINE", "VAR = np . float128 ( np . random . random ( ( NUMBER , ) ) )", ">> > from shutil import copyfile NEWLINE >> > for VAR in dict_date : NEWLINE for VAR in dict_date [ VAR ] : NEWLINE try : NEWLINE os . makedirs ( os . path . join ( path , VAR , VAR ) ) NEWLINE except os . error : NEWLINE pass NEWLINE for VAR in dict_date [ VAR ] [ VAR ] : NEWLINE copyfile ( os . path . join ( path , VAR ) , os . path . join ( path , VAR , VAR , VAR ) )", "VAR = re . compile ( STRING ) NEWLINE VAR = re . compile ( STRING % VAR . pattern )", "from collections import Mapping NEWLINE class MyDict ( Mapping ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE VAR . update ( dict ( * args , ** kwargs ) ) NEWLINE def __setitem__ ( VAR , VAR , VAR ) : NEWLINE VAR . __dict__ [ VAR ] = VAR NEWLINE def __getitem__ ( VAR , VAR ) : NEWLINE return VAR . __dict__ [ VAR ] NEWLINE def __delitem__ ( VAR , VAR ) : NEWLINE del VAR . __dict__ [ VAR ] NEWLINE def pop ( VAR , VAR , VAR = None ) : NEWLINE return VAR , VAR . __dict__ . pop ( VAR , VAR ) NEWLINE def update ( VAR , * args , ** kwargs ) : NEWLINE return VAR . __dict__ . update ( * args , ** kwargs ) NEWLINE def __iter__ ( VAR ) : NEWLINE return iter ( VAR . __dict__ ) NEWLINE def __len__ ( VAR ) : NEWLINE return len ( VAR . __dict__ ) NEWLINE def __repr__ ( VAR ) : NEWLINE return repr ( VAR . __dict__ )", "x not in seen and not seen . add ( x )", "import time NEWLINE import threading NEWLINE import concurrent . futures NEWLINE import random NEWLINE import logging NEWLINE logging . basicConfig ( level = logging . DEBUG , format = STRING ) NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = threading . local ( ) NEWLINE def do_work ( VAR ) : NEWLINE if STRING in VAR . __dict__ : NEWLINE logging . debug ( STRING . format ( VAR . session ) ) NEWLINE else : NEWLINE VAR . session = random . randint ( NUMBER , NUMBER ) NEWLINE logging . debug ( STRING . format ( VAR . session ) ) NEWLINE time . sleep ( VAR ) NEWLINE logging . debug ( STRING . format ( VAR ) ) NEWLINE return VAR NEWLINE with concurrent . futures . ThreadPoolExecutor ( max_workers = NUMBER ) as VAR : NEWLINE VAR = VAR . map ( do_work , VAR ) NEWLINE print ( list ( VAR ) )", "", "def parseTags ( VAR ) : NEWLINE return filter ( None , map ( sanitizeTag , VAR . split ( STRING ) ) ) NEWLINE def sanitizeTag ( VAR ) : NEWLINE VAR = filter ( lambda VAR : VAR . isalnum ( ) or VAR . isspace ( ) , VAR ) . split ( ) NEWLINE VAR = len ( VAR ) NEWLINE if VAR == NUMBER : NEWLINE return None NEWLINE elif VAR == NUMBER : NEWLINE return VAR [ NUMBER ] NEWLINE else : NEWLINE VAR = VAR [ NUMBER ] . lower ( ) if VAR [ NUMBER ] [ NUMBER ] . islower ( ) else VAR [ NUMBER ] . capitalize ( ) NEWLINE return VAR + STRING . join ( VAR . capitalize ( ) for VAR in VAR [ NUMBER : ] )", "from datetime import datetime NEWLINE from dateutil import relativedelta NEWLINE VAR = datetime . now ( ) NEWLINE VAR = datetime . now ( ) + relativedelta . relativedelta ( months = NUMBER ) NEWLINE print ( VAR ) NEWLINE print ( VAR ) NEWLINE VAR = datetime ( year = VAR . year , month = VAR . month , day = VAR . day , hour = NUMBER , minute = NUMBER , second = NUMBER ) NEWLINE VAR = datetime ( year = VAR . year , month = VAR . month , day = VAR . day , hour = NUMBER , minute = NUMBER , second = NUMBER ) NEWLINE VAR = VAR . replace ( hour = NUMBER , minute = NUMBER , second = NUMBER , microsecond = NUMBER ) NEWLINE print ( VAR ) NEWLINE print ( VAR )", "def load_url ( VAR , VAR ) : NEWLINE VAR . view . load ( QtCore . QUrl ( VAR ) )", "STRING . format ( my_num ) [ NUMBER : ] NEWLINE", "from Tkinter import Tk NEWLINE from twisted . internet import tksupport NEWLINE VAR = Tk ( ) NEWLINE tksupport . install ( VAR )", "tail - f / var / log / apache2 / access . log | / usr / share / bin / myharvester", "with open ( STRING , STRING ) as f : NEWLINE for VAR in f : NEWLINE print ( VAR , end = STRING )", "import numpy as np NEWLINE VAR = ( NUMBER , NUMBER ) NEWLINE VAR = np . prod ( VAR ) NEWLINE VAR = np . add . outer ( np . arange ( VAR [ NUMBER ] ) , np . arange ( VAR [ NUMBER ] ) ) NEWLINE print ( VAR ) NEWLINE", "print wnl . lemmatize ( STRING )", "class _ALibrary ( object ) : NEWLINE def __init__ ( self ) : NEWLINE pass NEWLINE def fun1 ( self ) : NEWLINE print STRING `", ">> > set_sim ( [ STRING , STRING ] , NUMBER ) NEWLINE >> > set_sim ( [ STRING , STRING ] , NUMBER ) NEWLINE >> > set_sim ( [ STRING , STRING ] , NUMBER ) NEWLINE >> > get_other_players ( STRING ) NEWLINE Player9 = NUMBER NEWLINE Player3 = NUMBER NEWLINE Player12 = NUMBER", "all ( VAR [ NUMBER ] in ( STRING , None ) for VAR in test . values ( ) )", "VAR = im . info [ STRING ] NEWLINE im . save ( STRING , VAR = VAR )", "VAR = [ _bin ( VAR , NUMBER ) for VAR in range ( NUMBER ) ]", "np . reshape ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , ( NUMBER , NUMBER ) ) . T NEWLINE np . reshape ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , ( NUMBER , NUMBER ) ) NEWLINE", "{ RANKS [ VAR ] : VAR for VAR , VAR in enumerate ( VALUES ) }", "with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) . rstrip ( STRING ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( re . sub ( STRING , STRING , VAR ) )", ">> > VAR = soup . find_all ( STRING , class_ = STRING ) NEWLINE >> > for VAR in VAR : NEWLINE . . . if STRING not in VAR . attrs [ STRING ] : NEWLINE . . . print VAR", "import signal NEWLINE class Reporter ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . retval = [ ] NEWLINE def handler ( VAR , VAR , VAR ) : NEWLINE print VAR . retval NEWLINE VAR = Reporter ( ) NEWLINE signal . signal ( signal . SIGINT , VAR . handler )", "@ timing NEWLINE def do_work ( ) : NEWLINE", "$ pip install json2html", "STRING . name . STRING", "VAR = np . vectorize ( stats . VAR ) NEWLINE VAR = VAR ( x , x + y )", "import numpy as np NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR = np . digitize ( VAR , VAR ) NEWLINE VAR NEWLINE", "while True : NEWLINE VAR = VAR + NUMBER NEWLINE VAR = VAR ** NUMBER NEWLINE VAR = VAR + VAR NEWLINE if VAR >= n : NEWLINE break NEWLINE print ( VAR )", ">> > VAR = ( NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR . __hash__ is None NEWLINE False NEWLINE >> > hash ( VAR ) NEWLINE NUMBER", "VAR = ( np . arange ( NUMBER , NUMBER ) . reshape ( - NUMBER , NUMBER ) * np . ones ( NUMBER ) . reshape ( NUMBER , - NUMBER ) ) . flatten ( ) NEWLINE VAR = pd . Series ( VAR ) NEWLINE VAR = pd . DataFrame ( coords , columns = [ STRING , STRING ] ) NEWLINE plt . scatter ( VAR [ STRING ] , VAR [ STRING ] , c = VAR , s = NUMBER , cmap = STRING )", "from pandas . util . testing import assert_frame_equal NEWLINE assert_frame_equal ( csvdata , csvdata_old )", "import pandas as pd NEWLINE VAR = { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] } NEWLINE VAR = pd . DataFrame ( VAR ) NEWLINE print VAR", "VAR = NUMBER", "map ( STRING , plot = T , ylim = c ( NUMBER , NUMBER ) , xlim = c ( - NUMBER , - NUMBER ) ) NEWLINE map ( STRING , plot = T , fill = T , col = palette ( ) , ylim = c ( NUMBER , NUMBER ) , xlim = c ( - NUMBER , - NUMBER ) ) NEWLINE rect ( - NUMBER , NUMBER , - NUMBER , NUMBER , col = c ( STRING ) )", "class Article ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE if __name__ == STRING : NEWLINE from datetime import date NEWLINE import itertools NEWLINE import operator NEWLINE VAR = [ Article ( date ( NUMBER , NUMBER , NUMBER ) ) , Article ( date ( NUMBER , NUMBER , NUMBER ) ) , Article ( date ( NUMBER , NUMBER , NUMBER ) ) , Article ( date ( NUMBER , NUMBER , NUMBER ) ) , ] NEWLINE VAR = operator . attrgetter ( STRING ) NEWLINE VAR = sorted ( VAR , key = VAR ) NEWLINE VAR = [ { VAR . strftime ( STRING ) : list ( VAR ) } for VAR , VAR in itertools . groupby ( VAR , VAR ) ] NEWLINE print VAR", ">> > VAR = STRING NEWLINE >> > VAR NEWLINE STRING", "class ModuleModel ( db . Model ) : NEWLINE @ classmethod NEWLINE def kind ( VAR ) : NEWLINE return STRING % ( VAR . __module__ , super ( ModuleModel , VAR ) . kind ( ) )", "pavdict . setdefault ( pav , [ ] ) . append ( subdict )", "def main ( ) : NEWLINE VAR = { } NEWLINE VAR = RLock ( ) NEWLINE VAR = threading . Thread ( target = udp_server , args = ( udp_ip , udp_port , VAR , VAR ) ) NEWLINE VAR . start ( ) NEWLINE . . .", "from lxml import html NEWLINE import requests NEWLINE def historic_quotes ( VAR , VAR , VAR , VAR , VAR , VAR , VAR ) : NEWLINE VAR = STRING % VAR NEWLINE VAR = { STRING : VAR , STRING : VAR , STRING : VAR , STRING : VAR , STRING : VAR , STRING : VAR , STRING : STRING , } NEWLINE VAR = requests . get ( VAR , VAR = VAR ) NEWLINE VAR = html . document_fromstring ( VAR . content ) NEWLINE for VAR in VAR . xpath ( STRING ) : NEWLINE print VAR NEWLINE historic_quotes ( STRING , STRING , STRING , STRING , STRING , STRING , STRING )", "VAR = { } NEWLINE for VAR in obj : NEWLINE VAR . setdefault ( VAR . area . region . id , [ ] ) . append ( [ VAR . id , VAR . name ] )", "import math NEWLINE def function ( VAR , VAR , VAR ) : NEWLINE return math . exp ( VAR * VAR ) * math . sin ( VAR * VAR )", "from pyquery import PyQuery NEWLINE VAR = PyQuery ( url = STRING , parser = STRING ) NEWLINE for VAR in VAR ( STRING ) : NEWLINE for VAR in VAR . iterchildren ( STRING ) : NEWLINE print ( VAR . text_content ( ) )", "VAR = [ ] NEWLINE for VAR , VAR in grouped_data : NEWLINE VAR [ STRING ] = ( VAR [ STRING ] - VAR [ STRING ] . shift ( ) . fillna ( pd . datetime ( NUMBER , NUMBER , NUMBER ) ) ) . astype ( STRING ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = pd . concat ( VAR )", "box [ a ] [ b ] = box [ a ] [ b ] or chr ( current_char )", "for VAR in fileinput . readlines ( ) : NEWLINE VAR , VAR , VAR = VAR . split ( STRING ) NEWLINE if VAR == STRING : NEWLINE function_a ( ) NEWLINE if VAR == STRING : NEWLINE function_b ( ) NEWLINE if VAR == STRING : NEWLINE function_c ( )", "In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE a b c NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NEWLINE In [ NUMBER ] : pd . isnull ( df [ [ STRING , STRING ] ] ) . any ( axis = NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER True NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER True NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE NUMBER False NEWLINE dtype : bool NEWLINE In [ NUMBER ] : df . ix [ pd . isnull ( df [ [ STRING , STRING ] ] ) . any ( axis = NUMBER ) ] NEWLINE Out [ NUMBER ] : NEWLINE a b c NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NaN NUMBER NUMBER NEWLINE In [ NUMBER ] : df . ix [ pd . isnull ( df [ [ STRING , STRING ] ] ) . any ( axis = NUMBER ) , STRING ] NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE Name : c , dtype : int32", "VAR = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] NEWLINE def clamp ( VAR , VAR , VAR ) : NEWLINE if VAR < VAR : NEWLINE return VAR NEWLINE elif VAR > VAR : NEWLINE return VAR NEWLINE else : NEWLINE return VAR NEWLINE def getNeighbour ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = len ( VAR [ VAR ] ) NEWLINE VAR = len ( VAR ) NEWLINE VAR = [ ] NEWLINE for VAR in range ( clamp ( NUMBER , VAR , VAR - VAR ) , clamp ( NUMBER , VAR , VAR + VAR ) + NUMBER ) : NEWLINE VAR = [ ] NEWLINE for VAR in range ( clamp ( NUMBER , VAR , VAR - VAR ) , clamp ( NUMBER , VAR , VAR + VAR ) + NUMBER ) : NEWLINE if VAR != VAR or ( VAR == VAR and VAR != VAR ) : NEWLINE VAR . append ( VAR [ VAR ] [ VAR ] ) NEWLINE VAR . append ( VAR ) NEWLINE return VAR", "if len ( ranking_list ) > NUMBER : NEWLINE print ranking_list", "VAR , VAR = STRING , STRING NEWLINE VAR , VAR = STRING , STRING NEWLINE VAR , VAR = STRING , STRING NEWLINE VAR , VAR = STRING , STRING NEWLINE def padded ( VAR , VAR = None , VAR = NUMBER , VAR = STRING , VAR = STRING , VAR = STRING , VAR = STRING ) : NEWLINE VAR = STRING . join ( [ STRING , VAR . strip ( ) ] ) if VAR else STRING NEWLINE VAR = VAR . strip ( ) if VAR else STRING NEWLINE VAR -= sum ( [ len ( VAR ) , len ( VAR ) , len ( VAR ) , len ( VAR ) ] ) NEWLINE if VAR < NUMBER : NEWLINE VAR = VAR [ : len ( VAR ) + VAR ] NEWLINE if VAR : NEWLINE VAR = VAR . strip ( ) NEWLINE VAR = STRING . join ( [ VAR [ : len ( VAR ) - ( len ( VAR ) + NUMBER ) ] , VAR ] ) NEWLINE return STRING . join ( VAR for VAR in [ VAR , VAR , VAR , STRING . join ( VAR for VAR in range ( VAR ) ) , VAR ] if VAR ) NEWLINE def box ( VAR , VAR , * extras ) : NEWLINE VAR = ( VAR + VAR ) NEWLINE VAR = [ padded ( STRING . format ( VAR ) , ( VAR + VAR + VAR ) , VAR = VAR , VAR = VAR , VAR = VAR ) , padded ( STRING . format ( VAR ) , VAR , VAR = VAR , VAR = VAR , VAR = STRING ) , ] NEWLINE VAR . extend ( padded ( VAR , VAR , VAR = VAR , VAR = VAR , VAR = STRING ) for VAR in extras ) NEWLINE VAR . append ( padded ( None , None , VAR = VAR , VAR = VAR , VAR = VAR ) ) NEWLINE return STRING . join ( VAR ) NEWLINE print ( box ( NUMBER , NUMBER , STRING , STRING ) ) NEWLINE print ( box ( NUMBER , NUMBER , STRING , STRING , STRING ) ) NEWLINE print ( box ( NUMBER , NUMBER , STRING ) )", "VAR = Image . open ( STRING ) NEWLINE VAR = VAR . convert ( STRING ) NEWLINE VAR = VAR . getdata ( ) NEWLINE VAR = collections . Counter ( VAR ) NEWLINE print ( VAR [ ( NUMBER , NUMBER , NUMBER , NUMBER ) ] )", "def grouper ( VAR , VAR , VAR = None ) : NEWLINE STRING NEWLINE return itertools . izip_longest ( * [ iter ( VAR ) ] * VAR , VAR = VAR ) NEWLINE def bits2str ( VAR ) : NEWLINE for VAR in grouper ( NUMBER , VAR ) : NEWLINE yield chr ( int ( STRING . join ( map ( str , VAR ) ) , NUMBER ) )", "d . text = STRING . join ( STRING % ( VAR , xml_dict [ VAR ] ) for VAR in sorted ( xml_dict . keys ( ) ) )", "import csv NEWLINE import collections NEWLINE from operator import itemgetter NEWLINE . . . NEWLINE if sort_int == NUMBER : NEWLINE with open ( path ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE for VAR , VAR in sorted ( VAR ) : NEWLINE print ( VAR , VAR ) NEWLINE elif sort_int == NUMBER : NEWLINE with open ( path ) as VAR : NEWLINE VAR = sorted ( csv . VAR ( VAR ) , key = itemgetter ( NUMBER ) , reverse = True ) NEWLINE for VAR , VAR in VAR : NEWLINE print ( VAR , VAR ) NEWLINE elif sort_int == NUMBER : NEWLINE with open ( path ) as VAR : NEWLINE VAR = collections . Counter ( ) NEWLINE VAR = collections . Counter ( ) NEWLINE for VAR , VAR in csv . VAR ( VAR ) : NEWLINE VAR = int ( VAR ) NEWLINE VAR [ VAR ] += VAR NEWLINE VAR [ VAR ] += NUMBER NEWLINE for VAR in sorted ( VAR ) : NEWLINE VAR = VAR [ VAR ] / VAR [ VAR ] NEWLINE print ( VAR , VAR )", ">> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > for VAR , VAR in enumerate ( VAR ) : NEWLINE . . . if VAR [ NUMBER ] == VAR : NEWLINE . . . print ( STRING , VAR ) NEWLINE . . . print ( VAR == VAR [ VAR : VAR + len ( VAR ) ] ) NEWLINE . . . NEWLINE found first instance of letter at , NUMBER NEWLINE True", "VAR = sqlite3 . connect ( STRING ) NEWLINE VAR = VAR . cursor ( ) NEWLINE VAR . execute ( STRING + STRING ) NEWLINE VAR = VAR . fetchall ( ) NEWLINE VAR = { } NEWLINE VAR = None NEWLINE for VAR in VAR : NEWLINE VAR = ( VAR [ NUMBER ] , { } ) NEWLINE VAR [ VAR [ NUMBER ] ] = VAR NEWLINE if VAR [ NUMBER ] == NUMBER : NEWLINE VAR = { VAR [ NUMBER ] : VAR [ NUMBER ] } NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ VAR [ NUMBER ] ] NEWLINE VAR = VAR . get ( VAR [ NUMBER ] , None ) NEWLINE if VAR is not None : NEWLINE VAR [ NUMBER ] [ VAR [ NUMBER ] ] = VAR [ NUMBER ] NEWLINE print VAR", "getattr ( sys . modules [ __name__ ] , func_name ) ( )", "logsumexp ( a ) = max ( a ) + log ( exp [ a - max ( a ) ] )", "VAR = dict ( foo = NUMBER , bar = NUMBER , baz = NUMBER ) NEWLINE cur . execute ( STRING % ( STRING . join ( VAR ) , STRING . join ( STRING % VAR for VAR in VAR ) ) , VAR )", "OPEN , NUMBER , ACCY , NUMBER , NUMBER , Intro Financial Accounting , NUMBER , Ray , K , MON , NUMBER , MW , NUMBER : NUMBER PM - NUMBER : NUMBER PM , NUMBER NUMBER / NUMBER / NUMBER - NUMBER / NUMBER / NUMBER NEWLINE [ Finished in NUMBER s ]", ">> > VAR = df . resample ( STRING ) . interpolate ( STRING ) NEWLINE >> > VAR . headn [ NUMBER ] : NEWLINE df [ STRING ] = df [ STRING ] . replace ( STRING , NUMBER ) NEWLINE df [ STRING ] = df [ STRING ] . replace ( STRING , NUMBER ) NEWLINE df NEWLINE Out [ NUMBER ] : NEWLINE time stock bid ask NEWLINE NUMBER time1 stockA NUMBER NUMBER NEWLINE NUMBER time2 stockA NUMBER NUMBER NEWLINE NUMBER time3 stockB NUMBER NUMBER NEWLINE NUMBER time4 stockB NUMBER NUMBER", "for VAR in elems : NEWLINE try : NEWLINE print VAR . xpath ( STRING ) [ - NUMBER ] . get ( STRING ) NEWLINE except IndexError : NEWLINE print STRING", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE print ( STRING . format ( STRING , STRING , STRING , STRING ) ) NEWLINE VAR = NUMBER NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE print ( STRING . format ( VAR [ VAR ] , VAR [ VAR + NUMBER ] , VAR [ VAR + NUMBER ] , VAR [ VAR + NUMBER ] ) ) NEWLINE VAR += NUMBER", "NUMBER NEWLINE NUMBER", "writer . writerow ( sorted ( my_data . keys ( ) ) ) NEWLINE writer . writerows ( zip ( * ( my_data [ VAR ] for VAR in sorted ( my_data . keys ( ) ) ) ) )", "def comparePackages ( VAR ) : NEWLINE for VAR , VAR in zip ( VAR . keys ( ) , VAR . values ( ) ) : NEWLINE for VAR in xrange ( len ( VAR ) ) : NEWLINE VAR = str ( VAR [ VAR ] ) NEWLINE VAR = str ( VAR [ VAR - NUMBER ] ) NEWLINE VAR = apt_pkg . version_compare ( VAR , VAR ) NEWLINE if VAR > NUMBER : NEWLINE VAR = VAR NEWLINE elif VAR == NUMBER : NEWLINE VAR = VAR NEWLINE elif VAR < NUMBER : NEWLINE VAR = VAR NEWLINE del VAR [ : ] NEWLINE if ( VAR is STRING ) : NEWLINE VAR = STRING NEWLINE VAR [ VAR ] = VAR", ">> > VAR = randint ( NUMBER , len ( numbers ) ) NEWLINE >> > VAR NEWLINE NUMBER", "df [ STRING ] = df . groupby ( STRING , group_keys = False ) . apply ( check_df_pants ) NEWLINE pring df NEWLINE id date item will_buy_pants NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING True NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING False NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING False NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING False NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING False NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING True NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING True NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER STRING False", "VAR = [ NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER ]", "Script not started as root . Running sudo . . NEWLINE [ sudo ] password for bob : NEWLINE Running . Your euid is NUMBER", "from itertools import takewhile , ifilter NEWLINE VAR = soup . find ( STRING , class_ = STRING ) NEWLINE for VAR in VAR . find_all ( STRING ) : NEWLINE print VAR . get_text ( ) NEWLINE VAR = takewhile ( lambda VAR : VAR . name == STRING , VAR . find_next_siblings ( text = False ) ) NEWLINE for VAR in VAR : NEWLINE", "def f ( VAR ) : NEWLINE if abs ( VAR [ STRING ] ) > abs ( VAR [ STRING ] ) : NEWLINE return VAR [ STRING ] / VAR [ STRING ] NEWLINE else : NEWLINE return VAR [ STRING ] / VAR [ STRING ]", "if ( x == STRING ) : NEWLINE new_disorder . append ( STRING . format ( i , seq [ i ] ) )", "print test . groupby ( [ STRING , STRING , STRING ] ) . sum ( ) NEWLINE Value NEWLINE GroupID Sample SampleMeta NEWLINE NUMBER S1 S1_meta NUMBER NEWLINE NUMBER S2 S2_meta NUMBER", "{ NUMBER : [ NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] , NUMBER : [ NUMBER ] , . . . }", "def compute_neighborhoods ( VAR , VAR ) : NEWLINE VAR = set ( VAR . keys ( ) ) NEWLINE for VAR in VAR : NEWLINE VAR = set ( generate_neighbors ( VAR , VAR ) ) NEWLINE VAR = VAR & VAR NEWLINE VAR = VAR [ VAR ] [ NUMBER ] NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] [ NUMBER ] . append ( VAR )", "VAR = datetime . now ( pytz . timezone ( STRING ) ) NEWLINE VAR > make_aware ( campaingObject . publish_end , pytz . timezone ( STRING ) )", "VAR = browser . find_elements_by_tag_name ( STRING ) NEWLINE for VAR in VAR : NEWLINE if VAR . get_attribute ( STRING ) . find ( STRING ) > - NUMBER and VAR . get_attribute ( STRING ) . find ( STRING ) > - NUMBER and VAR . get_attribute ( STRING ) . find ( STRING ) > - NUMBER and VAR . get_attribute ( STRING ) . find ( STRING ) > - NUMBER : NEWLINE", "< shellcommand > : NEWLINE orientation : STRING NEWLINE first : one NEWLINE second : two NEWLINE third : three NEWLINE canvas : NEWLINE Rectangle : NEWLINE source : STRING NEWLINE pos : self . pos NEWLINE size : self . size NEWLINE BoxLayout : NEWLINE orientation : STRING NEWLINE Button : NEWLINE id : one NEWLINE text : STRING NEWLINE background_color : NUMBER , NUMBER , NUMBER , NUMBER NEWLINE font_size : NUMBER NEWLINE size_hint : NUMBER , None NEWLINE on_press : root . uname ( ) NEWLINE Button : NEWLINE id : two NEWLINE text : STRING NEWLINE background_color : NUMBER , NUMBER , NUMBER , NUMBER NEWLINE font_size : NUMBER NEWLINE size_hint : NUMBER , None NEWLINE on_press : root . date ( ) NEWLINE Button : NEWLINE id : three NEWLINE text : STRING NEWLINE background_color : NUMBER , NUMBER , NUMBER , NUMBER NEWLINE font_size : NUMBER NEWLINE size_hint : NUMBER , None NEWLINE on_press : root . last ( )", "VAR = None", ">> > VAR = memoryview ( value ) . cast ( STRING ) NEWLINE >> > VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] NEWLINE NUMBER , NUMBER , NUMBER", "class MyDecorator ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . arg = VAR NEWLINE def __call__ ( VAR , VAR ) : NEWLINE @ functools . wraps ( VAR ) NEWLINE def decorated ( * args , ** kwargs ) : NEWLINE print STRING % VAR . arg NEWLINE VAR ( * args , ** kwargs ) NEWLINE print STRING % VAR . arg NEWLINE return decorated", "import numpy as np NEWLINE VAR = ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = np . arange ( np . prod ( VAR ) ) . reshape ( VAR ) NEWLINE VAR , VAR = np . tril_indices ( NUMBER ) NEWLINE VAR , VAR = np . ix_ ( VAR , VAR ) NEWLINE VAR , VAR = np . ix_ ( VAR , VAR ) NEWLINE VAR = VAR [ : , VAR , VAR , : , : , VAR , VAR ] NEWLINE print VAR . VAR NEWLINE VAR = np . zeros_like ( VAR ) NEWLINE VAR [ : , VAR , VAR , : , : , VAR , VAR ] = VAR NEWLINE VAR [ : , VAR , VAR , : , : , VAR , VAR ] = VAR NEWLINE VAR [ : , VAR , VAR , : , : , VAR , VAR ] = VAR NEWLINE VAR [ : , VAR , VAR , : , : , VAR , VAR ] = VAR", "In [ NUMBER ] : VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] } ) NEWLINE In [ NUMBER ] : VAR [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE Name : s1 , dtype : float64 NEWLINE In [ NUMBER ] : VAR [ STRING ] . shape NEWLINE Out [ NUMBER ] : ( NUMBER , )", "dL2 ( NUMBER ) / dZ2 ( NUMBER ) = L2 ( NUMBER ) * ( NUMBER - L2 ( NUMBER ) ) NEWLINE dL2 ( NUMBER ) / dZ2 ( NUMBER ) = L2 ( NUMBER ) * ( NUMBER - L2 ( NUMBER ) ) NEWLINE dL2 ( NUMBER ) / dZ2 ( NUMBER ) = L2 ( NUMBER ) * ( NUMBER - L2 ( NUMBER ) )", "import unicodedata NEWLINE def eval_unicode ( VAR ) : NEWLINE VAR = sum ( unicodedata . numeric ( VAR ) for VAR in VAR if unicodedata . category ( VAR ) == STRING ) NEWLINE VAR = float ( STRING . join ( VAR for VAR in VAR if VAR . isdigit ( ) or VAR == STRING ) or NUMBER ) NEWLINE return VAR + VAR", "fig . colorbar ( )", "def toggleConsole ( ) : NEWLINE toggleConsole . show = not getattr ( toggleConsole , STRING , True ) NEWLINE VAR = win32console . GetConsoleWindow ( ) NEWLINE win32gui . ShowWindow ( VAR , int ( toggleConsole . show ) )", "( VAR , VAR ) = histogram ( my_array [ : , NUMBER ] , weights = my_array [ : , NUMBER ] )", ">> > slice ( NUMBER , NUMBER ) NEWLINE slice ( NUMBER , NUMBER , None ) NEWLINE >> > slice ( NUMBER , NUMBER , NUMBER ) NEWLINE slice ( NUMBER , NUMBER , NUMBER ) NEWLINE >> >", "python echo . py < test . txt", ">> > import os NEWLINE >> > class EvaluatingName ( object ) : NEWLINE . . . def __init__ ( VAR , VAR ) : NEWLINE . . . VAR . _callable = VAR NEWLINE . . . def __call__ ( VAR ) : NEWLINE . . . return VAR . _callable ( ) NEWLINE . . . def __repr__ ( VAR ) : NEWLINE . . . return repr ( VAR ( ) ) NEWLINE . . . NEWLINE >> > VAR = EvaluatingName ( os . getcwd ) NEWLINE >> > os . chdir ( STRING ) NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > os . chdir ( STRING ) NEWLINE >> > VAR NEWLINE STRING", "array ( [ [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ] )", "print ( local_minima_locations ) NEWLINE print ( arr [ local_minima_locations ] ) NEWLINE", ">> > re . sub ( STRING , STRING , STRING ) NEWLINE STRING", "A NUMBER NUMBER / AS4637 NUMBER NUMBER / AS13706", ">> > from collections import defaultdict NEWLINE >> > def combine ( item ) : NEWLINE if type ( item ) != type ( [ ] ) : NEWLINE return item NEWLINE VAR = [ ( VAR . items ( ) [ NUMBER ] [ NUMBER ] , combine ( VAR . items ( ) [ NUMBER ] [ NUMBER ] ) ) for VAR in item ] NEWLINE VAR = defaultdict ( list ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] ] . append ( VAR [ NUMBER ] ) NEWLINE return dict ( ( VAR , VAR if len ( VAR ) > NUMBER else VAR [ NUMBER ] ) for VAR , VAR in VAR . iteritems ( ) )", ">> > ptree . productions ( ) NEWLINE [ S - > VP , VP - > VB NP ADVP , VB - > STRING , NP - > PRP , PRP - > STRING , ADVP - > RB , RB - > STRING ]", "cdef public api int cy_call_func_int_fast ( object self , char * method , bint * error ) : NEWLINE if ( hasattr ( self , method ) ) : NEWLINE error [ NUMBER ] = NUMBER NEWLINE return getattr ( self , method ) ( ) ; NEWLINE else : NEWLINE error [ NUMBER ] = NUMBER", "VAR = arr [ idx ] . reshape ( w , h // NUMBER ) NEWLINE print ( VAR ) NEWLINE print ( VAR . shape ) NEWLINE", "@ staticmethod NEWLINE def main_loop ( VAR ) : NEWLINE STRING NEWLINE VAR = time . clock ( ) NEWLINE while True : NEWLINE try : NEWLINE VAR . update ( ) NEWLINE except tkinter . TclError : NEWLINE break NEWLINE VAR += tkinter . _tkinter . getbusywaitinterval ( ) / NUMBER NEWLINE time . sleep ( max ( VAR - time . clock ( ) , NUMBER ) )", "date brand sales NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBlue NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER PrinterBetter NUMBER", "if getattr ( my_view , STRING , None ) == STRING : NEWLINE . . .", "a . sort ( key = lambda VAR : int ( VAR . split ( ) [ NUMBER ] ) ) NEWLINE print a", "from collections import defaultdict NEWLINE from itertools import izip , tee NEWLINE import os NEWLINE import sys NEWLINE def hamming_distance ( VAR , VAR ) : NEWLINE STRING NEWLINE if not isinstance ( VAR , basestring ) : raise ValueError ( STRING ) NEWLINE if not isinstance ( VAR , basestring ) : raise ValueError ( STRING ) NEWLINE if len ( VAR ) != len ( VAR ) : raise ValueError ( STRING ) NEWLINE return sum ( VAR != VAR for VAR , VAR in izip ( VAR , VAR ) ) NEWLINE def pairwise ( VAR ) : NEWLINE STRING NEWLINE VAR , VAR = tee ( VAR ) NEWLINE next ( VAR , None ) NEWLINE return izip ( VAR , VAR ) NEWLINE VAR = sys . argv [ NUMBER ] NEWLINE VAR = defaultdict ( list ) NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE for VAR in ( VAR . strip ( ) . split ( STRING ) for VAR in VAR ) : NEWLINE VAR = STRING . join ( VAR [ : - NUMBER ] ) NEWLINE VAR [ VAR ] . append ( VAR [ - NUMBER ] ) NEWLINE for VAR in sorted ( VAR ) : NEWLINE VAR = VAR [ VAR ] NEWLINE VAR . sort ( key = lambda VAR : len ( VAR ) ) NEWLINE print VAR + STRING + STRING . join ( VAR ) NEWLINE if len ( VAR ) > NUMBER : NEWLINE for VAR , VAR in pairwise ( VAR ) : NEWLINE if len ( VAR ) == len ( VAR ) and hamming_distance ( VAR , VAR ) < NUMBER : NEWLINE print STRING . format ( VAR , VAR )", "import fileinput NEWLINE for VAR in fileinput . input ( STRING , inplace = NUMBER ) : NEWLINE print STRING % ( fileinput . lineno ( ) , VAR ) ,", "python - mtimeit - s STRING STRING", "In [ NUMBER ] : df . index = MultiIndex . from_product ( [ [ STRING , STRING ] , [ NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE a b NEWLINE a NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE b NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE [ NUMBER rows x NUMBER columns ] NEWLINE In [ NUMBER ] : df . loc [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE a b NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE [ NUMBER rows x NUMBER columns ] NEWLINE In [ NUMBER ] : df . loc [ [ STRING ] ] NEWLINE Out [ NUMBER ] : NEWLINE a b NEWLINE a NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE [ NUMBER rows x NUMBER columns ]", "import heapq NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE print heapq . nlargest ( n = NUMBER , iterable = VAR , key = VAR . get ) [ - NUMBER ] NEWLINE", "{ % some_simple_tag something myobject . body % }", "VAR = STRING NEWLINE VAR = STRING . join ( STRING . join ( choice ( VAR ) for VAR in xrange ( randrange ( NUMBER , NUMBER ) ) ) for VAR in xrange ( NUMBER ) ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR )", "http : // ellywonderland . blogspot . com / NUMBER / NUMBER / my - vintage - pre - wedding . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / pre - wedding - vintage . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / tissue - paper - flower - crepe - paper . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / menguap - menurut - islam . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / weddings - idea . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / kawin . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / vitamin - c - collagen . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / port - dickson . html NEWLINE http : // ellywonderland . blogspot . com / NUMBER / NUMBER / ellys - world . html", "[ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "VAR = [ { VAR . get ( STRING ) : VAR . get ( STRING ) for VAR in VAR } for VAR in df . misc ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR : NEWLINE VAR , VAR = zip ( * VAR . VAR ( ) ) NEWLINE df . loc [ df . index [ VAR ] , VAR ] = VAR NEWLINE del df [ STRING ] NEWLINE >> > df NEWLINE name age cars shoes pets siblings NEWLINE NUMBER Jim NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER Bob NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER Sue NUMBER NUMBER NUMBER NUMBER NUMBER", "val1 NEWLINE Date gas NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER o3 NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER so2 NUMBER", "^ ( ? ! mpeg ) . *", "import string NEWLINE def complementary_strand ( VAR , VAR ) : NEWLINE return VAR . translate ( string . maketrans ( STRING , STRING ) )", "C : \\ zipdir > python - mzipdir c : \\ tmp \\ test test . zip", "Output NEWLINE { datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) , datetime . date ( NUMBER , NUMBER , NUMBER ) : ( NUMBER , NUMBER ) }", "VAR = NUMBER NEWLINE for VAR , VAR in A . iteritems ( ) : NEWLINE if VAR in VAR . keys ( ) : NEWLINE VAR = some_function_of ( VAR [ VAR ] ) NEWLINE break NEWLINE else : NEWLINE VAR = your_default_value NEWLINE", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "wholesaler product date NEWLINE NUMBER UME24 NUMBER - NUMBER - NUMBER NaN NEWLINE NUMBER UPE55 NUMBER - NUMBER - NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER UPE54 NUMBER - NUMBER - NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER UME24 NUMBER - NUMBER - NUMBER NaN NEWLINE UPE54 NUMBER - NUMBER - NUMBER NaN NEWLINE NUMBER UPE55 NUMBER - NUMBER - NUMBER NaN NEWLINE NUMBER UPE54 NUMBER - NUMBER - NUMBER NaN NEWLINE NUMBER - NUMBER - NUMBER NUMBER", "import sys NEWLINE print sys . argv [ NUMBER ]", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE from matplotlib . widgets import RectangleSelector NEWLINE def main ( ) : NEWLINE VAR , VAR , VAR = np . random . random ( ( NUMBER , NUMBER ) ) NEWLINE VAR *= NUMBER NEWLINE VAR , VAR = plt . subplots ( figsize = ( NUMBER , NUMBER ) , nrows = NUMBER , sharex = True ) NEWLINE VAR [ NUMBER ] . scatter ( VAR , VAR , color = STRING ) NEWLINE VAR [ NUMBER ] . scatter ( VAR , VAR , color = STRING ) NEWLINE VAR [ NUMBER ] . set ( ylabel = STRING ) NEWLINE VAR [ NUMBER ] . set ( xlabel = STRING , ylabel = STRING ) NEWLINE VAR = Highlighter ( VAR , VAR , VAR , VAR ) NEWLINE plt . show ( ) NEWLINE VAR = VAR . mask NEWLINE print VAR [ ~ VAR ] , VAR [ ~ VAR ] , VAR [ ~ VAR ] NEWLINE class Highlighter ( object ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . canvas = VAR [ NUMBER ] . figure . canvas NEWLINE VAR . VAR , VAR . VAR , VAR . VAR = VAR , VAR , VAR NEWLINE VAR . mask = np . zeros ( VAR . shape , dtype = bool ) NEWLINE VAR . _highlights = [ VAR . scatter ( [ ] , [ ] , s = NUMBER , color = STRING , zorder = NUMBER ) for VAR in VAR ] NEWLINE VAR . _select1 = RectangleSelector ( VAR [ NUMBER ] , VAR . select_xy , useblit = True ) NEWLINE VAR . _select2 = RectangleSelector ( VAR [ NUMBER ] , VAR . select_xz , useblit = True ) NEWLINE def select_xy ( VAR , VAR , VAR ) : NEWLINE VAR . mask |= VAR . inside ( VAR , VAR , VAR . VAR , VAR . VAR ) NEWLINE VAR . update ( ) NEWLINE def select_xz ( VAR , VAR , VAR ) : NEWLINE VAR . mask |= VAR . inside ( VAR , VAR , VAR . VAR , VAR . VAR ) NEWLINE VAR . update ( ) NEWLINE def update ( VAR ) : NEWLINE VAR = np . column_stack ( [ VAR . VAR [ VAR . mask ] , VAR . VAR [ VAR . mask ] ] ) NEWLINE VAR . _highlights [ NUMBER ] . set_offsets ( VAR ) NEWLINE VAR = np . column_stack ( [ VAR . VAR [ VAR . mask ] , VAR . VAR [ VAR . mask ] ] ) NEWLINE VAR . _highlights [ NUMBER ] . set_offsets ( VAR ) NEWLINE VAR . canvas . draw ( ) NEWLINE def inside ( VAR , VAR , VAR , VAR , VAR ) : NEWLINE VAR , VAR = sorted ( [ VAR . xdata , VAR . xdata ] ) NEWLINE VAR , VAR = sorted ( [ VAR . ydata , VAR . ydata ] ) NEWLINE return ( VAR > VAR ) & ( VAR < VAR ) & ( VAR > VAR ) & ( VAR < VAR ) NEWLINE main ( )", "{ STRING : STRING , STRING : STRING }", "` http - - print hb google . com > out . txt `", "VAR = [ { STRING : name0 , STRING : qty0 , . . . } { STRING : name1 , STRING : qty1 , . . . } { STRING : name2 , STRING : qty2 , . . . } . . . ] NEWLINE insert_names ( VAR )", "from itertools import count NEWLINE VAR = count ( NUMBER ) NEWLINE next ( VAR ) NEWLINE next ( VAR ) NEWLINE print next ( VAR )", "with open ( STRING ) as VAR : NEWLINE for VAR in read_by_tokens ( VAR ) : NEWLINE print ( VAR )", "$ python stat_creation_date . py NEWLINE Thu Feb NUMBER NUMBER : NUMBER : NUMBER NUMBER stat_creation_date . py", "Counter . objects . get_or_create ( name = name ) NEWLINE Counter . objects . filter ( name = name ) . update ( count = F ( STRING ) + NUMBER )", "import urllib . request NEWLINE urllib . request . urlretrieve ( STRING , STRING )", "import numpy as np NEWLINE import pandas as pd NEWLINE VAR = pd . DataFrame ( np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , NUMBER ) ) , columns = [ STRING , STRING ] ) NEWLINE VAR = pd . crosstab ( VAR . type , VAR . subtype ) NEWLINE print VAR . loc [ NUMBER , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] . sum ( ) + VAR . loc [ NUMBER , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] . sum ( )", "VAR = [ VAR for VAR , VAR in posValueD . items ( ) if VAR == posValueD [ aiMove2 ] ]", "import random NEWLINE def sample_gen ( VAR , VAR ) : NEWLINE VAR = dict ( ) NEWLINE VAR = dict ( ) NEWLINE for ( VAR , VAR ) in enumerate ( VAR ) : NEWLINE VAR = VAR . get ( VAR , VAR ) NEWLINE VAR = VAR . get ( VAR - VAR - NUMBER , VAR - VAR - NUMBER ) NEWLINE VAR [ VAR ] = VAR NEWLINE VAR [ VAR ] = VAR NEWLINE VAR . pop ( VAR - VAR - NUMBER , None ) NEWLINE VAR . pop ( VAR , None ) NEWLINE del VAR NEWLINE for VAR in xrange ( VAR - len ( VAR ) , NUMBER , - NUMBER ) : NEWLINE VAR = random . randrange ( VAR ) NEWLINE yield VAR . get ( VAR , VAR ) NEWLINE VAR [ VAR ] = VAR . get ( VAR - NUMBER , VAR - NUMBER ) NEWLINE VAR . pop ( VAR - NUMBER , None )", "Title , Release Date , Director NEWLINE And Now For Something Completely Different , NUMBER , Ian MacNaughton NEWLINE Monty Python And The Holy Grail , NUMBER , Terry Gilliam and Terry Jones NEWLINE Monty Python ' s Life Of Brian , NUMBER , Terry Jones", "NUMBER - > NUMBER - > NUMBER NEWLINE __ NEWLINE / | NEWLINE NUMBER < - / .", "wf . write ( STRING )", "[ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ]", "VAR , VAR = np . VAR ( a . round ( decimals = NUMBER ) , return_index = True )", ">> > from nltk . corpus import gutenberg NEWLINE >> > VAR = gutenberg . raw ( fileids = STRING ) NEWLINE >> > VAR = RegExConcordanceIndex ( VAR ) NEWLINE >> > VAR . print_concordance ( STRING , demarcation = STRING ) NEWLINE Displaying NUMBER matches : NEWLINE Emma Woodhouse , ** handsome ** , clever , and rich , with a comfortab NEWLINE Emma Woodhouse , handsome , ** clever ** , and rich , with a comfortable home NEWLINE The real evils , ** indeed ** , of Emma ' s situation were the power NEWLINE o her many enjoyments . The danger , ** however ** , was at present NEWLINE well - informed , ** useful ** , gentle , knowing all the ways of the NEWLINE well - informed , useful , ** gentle ** , knowing all the ways of the family , NEWLINE a good - humoured , ** pleasant ** , excellent man , that he thoroughly NEWLINE \" No , ** papa ** , nobody thought of your walking . We NEWLINE STRING said Mr . Woodhouse , NEWLINE should not like her so well as we do , ** sir ** , NEWLINE e none for myself , papa ; but I must , ** indeed ** , NEWLINE met with him in Broadway Lane , ** when ** , because it began to drizzle , NEWLINE like Mr . Elton , ** papa ** , - - I must look about for a wife for hi NEWLINE STRING said Mr . Knightley , NEWLINE better thing . Invite him to dinner , ** Emma ** , and help him to the best NEWLINE y . He had received a good education , ** but ** , NEWLINE Miss Churchill , ** however ** , being of age , and with the full co NEWLINE From the expense of the child , ** however ** , he was soon relieved . NEWLINE It was most unlikely , ** therefore ** , that he should ever want his NEWLINE strong enough to affect one so dear , ** and ** , as he believed , NEWLINE It was , ** indeed ** , a highly prized letter . Mrs . Westo NEWLINE and he had , ** therefore ** , earnestly tried to dissuade them NEWLINE Fortunately for him , ** Highbury ** , including Randalls in the same par NEWLINE handsome , ** rich ** , nor married . Miss Bates stood in th NEWLINE a real , ** honest ** , old - fashioned Boarding - school , wher", "from itertools import product , takewhile NEWLINE def new ( VAR , VAR = range ( NUMBER ) ) : NEWLINE VAR = list ( VAR ) NEWLINE VAR = VAR [ NUMBER ] NEWLINE for VAR in product ( VAR , repeat = VAR ) : NEWLINE VAR = sum ( NUMBER for VAR in takewhile ( lambda VAR : VAR == VAR , reversed ( VAR ) ) ) NEWLINE VAR = VAR [ : - VAR ] NEWLINE yield from filter ( None , ( VAR + ( VAR , ) * VAR for VAR in range ( VAR ) ) ) NEWLINE yield VAR", "_______ NEWLINE / \\ - > NUMBER - > NUMBER - > NUMBER NEWLINE __ __ NEWLINE / | / | NEWLINE NUMBER < - / NUMBER < - / .", "[ [ NUMBER ] [ NUMBER , NUMBER , NUMBER ] [ NUMBER , NUMBER , NUMBER ] [ NUMBER ] [ NUMBER ] [ NUMBER ] [ ] [ NUMBER ] [ NUMBER ] [ ] ]", "VAR = [ { STRING : STRING : STRING : NUMBER } ]", "B ' ( t ) = V", "def add_contact ( ) : NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE phonebook [ VAR ] . append ( VAR )", "sorted ( myList , key = val_dict . get )", "VAR = [ ( STRING , STRING , STRING ) , ( STRING , STRING , STRING ) ]", "import re NEWLINE def split_string ( VAR , VAR ) : NEWLINE return re . split ( STRING . format ( re . escape ( VAR ) ) , VAR )", "class JobsHandler ( BaseHandler ) : NEWLINE def parseRestArgs ( VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = None NEWLINE if len ( VAR ) and not VAR [ NUMBER ] is None : NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR = re . VAR ( STRING , VAR [ VAR ] ) NEWLINE if VAR : NEWLINE VAR = int ( VAR . groups ( ) [ NUMBER ] ) NEWLINE VAR = re . VAR ( STRING , VAR [ - NUMBER ] ) NEWLINE if VAR : NEWLINE VAR = VAR . groups ( ) [ NUMBER ] [ NUMBER : ] NEWLINE return VAR , VAR NEWLINE def get ( VAR , * VAR ) : NEWLINE VAR , VAR = VAR . parseRestArgs ( VAR ) NEWLINE if len ( VAR ) : NEWLINE if VAR == None or STRING : NEWLINE pass NEWLINE elif VAR == STRING : NEWLINE pass NEWLINE else : NEWLINE raise tornado . web . HTTPError ( NUMBER ) NEWLINE else : NEWLINE if VAR == None or STRING : NEWLINE pass NEWLINE elif VAR == STRING : NEWLINE pass NEWLINE else : NEWLINE raise tornado . web . HTTPError ( NUMBER )", "coverage erase NEWLINE tox NEWLINE coverage combine NEWLINE coveralls", "stars * grid", "In [ NUMBER ] : a1 . __array_interface__ [ STRING ] NEWLINE Out [ NUMBER ] : ( NUMBER , False ) NEWLINE In [ NUMBER ] : a . __array_interface__ [ STRING ] NEWLINE Out [ NUMBER ] : ( NUMBER , False )", ">> > function ( var1 = None , var2 = STRING , var3 = None ) NEWLINE { STRING : STRING }", "for VAR in xrange ( NUMBER , NUMBER ) : NEWLINE try : NEWLINE VAR = urllib2 . urlopen ( STRING . format ( VAR ) ) NEWLINE except : NEWLINE continue NEWLINE else : NEWLINE VAR = BeautifulSoup ( VAR . read ( ) ) NEWLINE for VAR in VAR . findAll ( STRING , { STRING : STRING } ) : NEWLINE print re . sub ( STRING , STRING , STRING . join ( VAR . findAll ( text = True ) ) . encode ( STRING ) ) NEWLINE print STRING NEWLINE VAR = VAR + NUMBER", "< span class = STRING title = STRING style = STRING > view < / span >", "def g ( VAR ) : NEWLINE @ wraps ( VAR ) NEWLINE def wrapper ( * args , ** kwargs ) : NEWLINE VAR = VAR ( * args , ** kwargs ) NEWLINE return - VAR NEWLINE return wrapper", "def all_subclasses ( VAR ) : NEWLINE return VAR . __subclasses__ ( ) + [ VAR for VAR in VAR . __subclasses__ ( ) for VAR in all_subclasses ( VAR ) ] NEWLINE print ( all_subclasses ( vars ( ) [ STRING ] ) ) NEWLINE", "< table > NEWLINE < tr > NEWLINE < td > NEWLINE Something NEWLINE < / td > NEWLINE < / tr > NEWLINE < / table >", "VAR = [ STRING , STRING , STRING ] NEWLINE print sorted ( VAR , key = lambda VAR : map ( int , VAR . split ( STRING ) [ : - NUMBER ] ) )", "help ( httplib . HTTPMessage ) NEWLINE . . . NEWLINE If multiple header fields with the same name occur , they are combined NEWLINE according to the rules in RFC NUMBER sec NUMBER : NEWLINE Appending each subsequent field - value to the first , each separated NEWLINE by a comma . The order in which header fields with the same field - name NEWLINE are received is significant to the interpretation of the combined NEWLINE field value .", "import foo NEWLINE class bar_mock ( object ) : NEWLINE @ staticmethod NEWLINE def get_data ( ) : NEWLINE return STRING NEWLINE if __name__ == STRING : NEWLINE foo . bar = bar_mock NEWLINE VAR = foo . Data ( ) NEWLINE print VAR . val", "VAR = STRING NEWLINE print ( STRING . join ( replace_line ( VAR . split ( STRING ) , STRING , [ STRING , STRING ] ) ) )", "profile . user", "VAR = [ ] NEWLINE VAR = int ( raw_input ( STRING ) ) NEWLINE for VAR in range ( VAR ) : NEWLINE VAR . append ( raw_input ( STRING . format ( VAR + NUMBER ) ) )", "if VAR < NUMBER : NEWLINE VAR += NUMBER ** NUMBER", "zip ( t [ : : NUMBER ] , t [ NUMBER : : NUMBER ] )", ">> > df . groupby ( STRING ) [ STRING ] . all ( ) NEWLINE Category NEWLINE A False NEWLINE B False NEWLINE C True NEWLINE D True NEWLINE Name : Boolean , dtype : bool", "def dragEnterEvent ( VAR , VAR ) : NEWLINE if VAR . mimeData ( ) . hasFormat ( STRING ) : NEWLINE VAR . setDropAction ( Qt . MoveAction ) NEWLINE VAR . accept ( ) NEWLINE else : NEWLINE VAR . ignore ( ) NEWLINE def startDrag ( VAR , VAR ) :", "VAR = { VAR . replace ( STRING , STRING ) : VAR for VAR , VAR in self . test_lockCheck ( ) . iteritems ( ) }", "NUMBER NaN NEWLINE NUMBER NaN NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER NEWLINE NUMBER NaN NEWLINE NUMBER NaN NEWLINE dtype : float64", "def get_y ( ) : NEWLINE VAR = NUMBER NEWLINE while VAR <= Tc : NEWLINE VAR = - NUMBER * g * VAR ** NUMBER + h NEWLINE yield VAR NEWLINE VAR += step", "VAR = numpy . array ( [ a , b , c ] ) . T . flatten ( )", "VAR = STRING NEWLINE VAR = open ( STRING % VAR ) . read ( ) . rstrip ( )", ">> > pd . DataFrame ( { VAR : [ VAR . get ( VAR ) for VAR in params ] for VAR in [ STRING , STRING , STRING , STRING ] } ) NEWLINE param1 param2 param3 param4 NEWLINE NUMBER [ apple ] [ tomato ] [ carrot ] None NEWLINE NUMBER [ banana ] None [ potato ] [ berry ] NEWLINE NUMBER None [ apple ] [ tomato ] [ carrot ]", ">> > VAR , VAR = np . vstack ( [ np . unravel_index ( VAR , A . shape ) for VAR in B ] ) . T NEWLINE >> > A [ VAR , VAR ] = NUMBER NEWLINE >> > A NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = STRING NEWLINE VAR = STRING", "def reverse_sublist ( VAR , VAR , VAR ) : NEWLINE VAR [ VAR : VAR ] = reversed ( VAR [ VAR : VAR ] )", "sorted ( [ dict ( [ ( STRING , VAR ) ] + list ( VAR . items ( ) ) ) for VAR , VAR in a [ STRING ] . items ( ) ] , key = lambda VAR : VAR [ STRING ] )", "pygame . gfxdraw . aapolygon ( window , ( UL , UR , BR , BL ) , color_L1 ) NEWLINE pygame . gfxdraw . filled_polygon ( window , ( UL , UR , BR , BL ) , color_L1 )", "def checkCommonNodes ( VAR , VAR ) : NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE for VAR in VAR : NEWLINE try : NEWLINE if VAR [ VAR ] == VAR : NEWLINE print STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in VAR . iteritems ( ) ) NEWLINE except KeyError : NEWLINE continue", "def flatten ( VAR ) : NEWLINE if not VAR : NEWLINE return NEWLINE elif not isinstance ( VAR , list ) : NEWLINE yield VAR NEWLINE else : NEWLINE for VAR in flatten ( VAR [ NUMBER ] ) : NEWLINE yield VAR NEWLINE for VAR in flatten ( VAR [ NUMBER : ] ) : NEWLINE yield VAR NEWLINE list ( flatten ( ls1 ) ) NEWLINE = > [ NUMBER , STRING , NUMBER , STRING , NUMBER , STRING , NUMBER , STRING ]", "class CrossTab ( object ) : NEWLINE def __init__ ( VAR , VAR = NUMBER , ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . col_key_set = set ( ) NEWLINE VAR . cell_dict = { } NEWLINE VAR . headings_OK = False NEWLINE def add_item ( VAR , VAR , VAR , VAR ) : NEWLINE VAR . col_key_set . add ( VAR ) NEWLINE try : NEWLINE VAR . cell_dict [ VAR ] [ VAR ] += VAR NEWLINE except KeyError : NEWLINE try : NEWLINE VAR . cell_dict [ VAR ] [ VAR ] = VAR NEWLINE except KeyError : NEWLINE VAR . cell_dict [ VAR ] = { VAR : VAR } NEWLINE def _process_headings ( VAR ) : NEWLINE if VAR . headings_OK : NEWLINE return NEWLINE VAR . row_headings = list ( sorted ( VAR . cell_dict . keys ( ) ) ) NEWLINE VAR . col_headings = list ( sorted ( VAR . col_key_set ) ) NEWLINE VAR . headings_OK = True NEWLINE def get_col_headings ( VAR ) : NEWLINE VAR . _process_headings ( ) NEWLINE return VAR . col_headings NEWLINE def generate_row_info ( VAR ) : NEWLINE VAR . _process_headings ( ) NEWLINE for VAR in VAR . row_headings : NEWLINE VAR = VAR . cell_dict [ VAR ] NEWLINE VAR = [ VAR . get ( VAR , VAR . VAR ) for VAR in VAR . col_headings ] NEWLINE yield VAR , VAR NEWLINE if __name__ == STRING : NEWLINE VAR = [ [ STRING , NUMBER , STRING ] , [ STRING , NUMBER , STRING ] , [ STRING , NUMBER , STRING ] , [ STRING , NUMBER , STRING ] ] NEWLINE VAR = CrossTab ( VAR = STRING ) NEWLINE for VAR in VAR : NEWLINE VAR . add_item ( VAR = VAR [ NUMBER ] , VAR = VAR [ NUMBER ] , VAR = VAR [ NUMBER ] ) NEWLINE print ( ) NEWLINE print ( STRING , VAR . get_col_headings ( ) ) NEWLINE for VAR , VAR in VAR . generate_row_info ( ) : NEWLINE print ( repr ( VAR ) , VAR )", "def set_active_border ( VAR , VAR ) : NEWLINE VAR = VAR . colormap . alloc_named_color ( STRING ) . pixel NEWLINE VAR . configure ( border_width = NUMBER ) NEWLINE VAR . change_attributes ( None , border_pixel = VAR , border_width = NUMBER ) NEWLINE VAR . dpy . sync ( )", ">> > VAR = LineString ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ) NEWLINE >> > VAR . convex_hull NEWLINE < Polygon object at . . . > NEWLINE >> > VAR . convex_hull . coords NEWLINE ( ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ) , ) NEWLINE >> > VAR = MultiLineString ( VAR ) NEWLINE >> > VAR . convex_hull NEWLINE < Polygon object at . . . > NEWLINE >> > VAR . convex_hull . coords NEWLINE ( ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ) , )", "self . values [ index ] = self . generators [ index ] . next ( )", ">> > VAR = datetime . datetime . strptime ( STRING , STRING )", "try : NEWLINE urllib . urlopen ( STRING , proxies = { STRING : STRING } ) NEWLINE except IOError : NEWLINE print STRING NEWLINE else : NEWLINE print STRING", "In [ NUMBER ] : df [ ( df [ STRING ] >= NUMBER ) | ( df [ STRING ] <= - NUMBER ) ] NEWLINE Out [ NUMBER ] : NEWLINE label Y88_N diff div fold NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "import pickle NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE pickle . dump ( VAR , VAR )", "def find_parent_keys ( VAR , VAR , VAR = None ) : NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE if VAR == VAR : NEWLINE yield VAR NEWLINE if isinstance ( VAR , dict ) : NEWLINE for VAR in find_parent_keys ( VAR , VAR , VAR ) : NEWLINE yield VAR", ">> > v . feature_names_ NEWLINE [ STRING , STRING , STRING ]", "def random_grid ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = raw_input ( STRING ) NEWLINE for VAR in range ( int ( VAR ) ) : NEWLINE VAR . append ( [ ] ) NEWLINE for VAR in range ( int ( VAR ) ) : NEWLINE VAR [ VAR ] . append ( random . randint ( ( int ( VAR ) ) , ( int ( VAR ) ) ) ) NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE VAR += ( STRING . join ( [ str ( VAR ) for VAR in VAR ] ) ) + STRING NEWLINE print VAR NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR )", "class Bar NEWLINE { private : int value ; public : Bar ( ) : value ( NUMBER ) { } // Functions to expose to Python : int getValue ( ) const { return value ; } void setValue ( int newValue ) { value = newValue ; } } ; NEWLINE class Foo NEWLINE { private : // Integer Vector : std : : vector < int > fooVector ; Bar bar ; public : // Functions to expose to Python : void pushBack ( const int & newInt ) { fooVector . push_back ( newInt ) ; } int getInt ( const int & element ) { return fooVector . at ( element ) ; } Bar & getBar ( ) { return bar ; } } ; NEWLINE double compute ( ) { return NUMBER ; }", ">> > eval ( STRING ) NEWLINE STRING NEWLINE >> > ast . literal_eval ( STRING ) NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE File STRING , line NUMBER , in literal_eval NEWLINE return _convert ( node_or_string ) NEWLINE File STRING , line NUMBER , in _convert NEWLINE raise ValueError ( STRING ) NEWLINE ValueError : malformed string", ">> > list ( Comprehension ( range ( NUMBER ) ) . bit_length ( ) ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", ">> > import re NEWLINE >> > s = STRING NEWLINE >> > re . findall ( STRING , s ) NEWLINE [ STRING , STRING , STRING ]", ">> > VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE >> > VAR = [ list ( VAR ) for VAR in set ( tuple ( VAR ) for VAR in VAR ) ] NEWLINE [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ]", "[ freetds ] NEWLINE VAR = MS SQL database access with Free TDS NEWLINE VAR = / usr / lib / i386 - linux - gnu / odbc / libtdsodbc . so NEWLINE VAR = / usr / lib / i386 - linux - gnu / odbc / libtdsS . so NEWLINE VAR = NUMBER", "for VAR , VAR in enumerate ( splits ) : NEWLINE columns [ VAR ] . append ( VAR )", ">> > re . search ( regex , STRING ) NEWLINE", ">> > df [ STRING ] . astype ( object ) . replace ( { False : STRING , True : STRING } ) NEWLINE NUMBER fail NEWLINE NUMBER fail NEWLINE NUMBER pass NEWLINE NUMBER fail NEWLINE NUMBER fail", "[ STRING , STRING , STRING ]", "VAR = np . ogrid [ NUMBER : w , NUMBER : h ] NEWLINE VAR = ( VAR [ NUMBER ] + VAR [ NUMBER ] ) % NUMBER == NUMBER NEWLINE print ( VAR ) NEWLINE print ( VAR . shape ) NEWLINE", "class AuthorizerSession ( ApplicationSession ) : NEWLINE @ inlineCallbacks NEWLINE def onJoin ( VAR , VAR ) : NEWLINE print ( STRING . format ( VAR ) ) NEWLINE try : NEWLINE yield VAR . register ( VAR . authorize , STRING ) NEWLINE print ( STRING ) NEWLINE except Exception as VAR : NEWLINE print ( STRING . format ( VAR ) ) NEWLINE def authorize ( VAR , VAR , VAR , VAR ) : NEWLINE print ( STRING . format ( VAR , VAR , VAR ) ) NEWLINE if VAR [ STRING ] == STRING : NEWLINE return True NEWLINE [ Authorization logic here ] NEWLINE return authorized", "[ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "VAR = Thread ( target = some_long_running_external_process ) NEWLINE VAR . start ( )", "from itertools import groupby NEWLINE from operator import itemgetter NEWLINE VAR = [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE for VAR , VAR in groupby ( VAR , itemgetter ( NUMBER ) ) : NEWLINE with open ( VAR + STRING , STRING ) as VAR : NEWLINE VAR . write ( STRING . join ( str ( VAR [ NUMBER ] ) for VAR in VAR ) )", "VAR = { VAR [ NUMBER ] for VAR in main_list } NEWLINE for VAR in xml_data : NEWLINE VAR = VAR . get ( STRING ) NEWLINE if VAR in VAR : NEWLINE print ( VAR )", "curr . executemany ( STRING , ( ( VAR , ) for VAR in myList ) )", "class SomeService ( ServiceBase ) : NEWLINE @ rpc ( Unicode ( values = [ STRING , STRING , STRING ] ) , _returns = GenericA ) NEWLINE def get_some_a ( self , type_name ) : NEWLINE", "Date Time Length Cost Bill Category Destination Number Destination City Origin Number OriginCity NEWLINE NUMBER / NUMBER / NUMBER NUMBER : NUMBER NUMBER $ NUMBER LOCAL AIRTIME , LONG DISTANCE and INTERNATIONAL CHARGES xxx - xxx - xxxx City Name aaa - aaa - aaaa City Name Mobile NEWLINE NUMBER / NUMBER / NUMBER NUMBER : NUMBER NUMBER $ NUMBER LOCAL AIRTIME , LONG DISTANCE and INTERNATIONAL CHARGES yyy - yyy - yyyy City Name zzz - zzz - zzzz City Name Mobile NEWLINE NUMBER / NUMBER / NUMBER NUMBER : NUMBER NUMBER $ NUMBER LOCAL AIRTIME , LONG DISTANCE and INTERNATIONAL CHARGES NUMBER - NUMBER - NUMBER City Name zzz - zzz - zzzz City Name Mobile", "( x * y . T ) . T", "np . sort ( data . reshape ( N , - NUMBER ) ) NEWLINE arraydef show_menu ( VAR ) : NEWLINE for VAR in ( VAR , VAR ) : NEWLINE send_message ( window_handle , WM_KEYDOWN , VAR , NUMBER ) NEWLINE send_message ( window_handle , WM_KEYUP , VAR , NUMBER )", ">> > spreadout ( range ( NUMBER ) , list ( STRING ) ) NEWLINE [ NUMBER , STRING , NUMBER , NUMBER , STRING , NUMBER , NUMBER , STRING , NUMBER ] NEWLINE >> > xy_wrapper ( NUMBER , NUMBER ) NEWLINE STRING", "def prob_round ( VAR , VAR = NUMBER ) : NEWLINE VAR = np . sign ( VAR ) * NUMBER ** VAR NEWLINE VAR *= VAR NEWLINE VAR = random . random ( ) < VAR - int ( VAR ) NEWLINE VAR = math . ceil if VAR else math . floor NEWLINE return VAR ( VAR ) / VAR NEWLINE VAR = NUMBER NEWLINE [ prob_round ( VAR , VAR = NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE = > [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", ">> > re . search ( STRING , b ) . group ( ) NEWLINE STRING", "class TestRepository : NEWLINE async def __aenter__ ( self ) : NEWLINE await self . some_init ( ) NEWLINE async def __aexit__ ( self , exc_type , exc , tb ) : NEWLINE await self . do_persistence ( ) NEWLINE await self . fetch_data ( ) NEWLINE async def do_work ( ) : NEWLINE VAR = TestRepository ( ) NEWLINE async with VAR : NEWLINE VAR = await VAR . get_by_lim_off ( VAR = int ( length ) , VAR = start , VAR = VAR , VAR = VAR , VAR = VAR ) NEWLINE asyncio . get_event_loop ( ) . run_until_complete ( do_work ( ) )", ">> > VAR = [ tuple ( VAR ) for VAR in ls ] NEWLINE >> > collections . Counter ( VAR ) NEWLINE Counter ( { ( STRING , NUMBER ) : NUMBER , ( STRING , NUMBER ) : NUMBER , ( STRING , NUMBER ) : NUMBER , ( STRING , NUMBER ) : NUMBER } )", "{ DJANGOSTACK } \\ python \\ python . exe manage . py syncdb", "from selenium import webdriver NEWLINE VAR = webdriver . Firefox ( ) NEWLINE VAR . get ( STRING ) NEWLINE VAR = VAR . find_element_by_xpath ( STRING STRING ) NEWLINE VAR = VAR . execute_script ( STRING , VAR ) NEWLINE print ( STRING . format ( VAR ) ) NEWLINE VAR . execute_script ( STRING , VAR , STRING ) NEWLINE VAR = VAR . execute_script ( STRING , VAR ) NEWLINE print ( STRING . format ( VAR ) )", ". . include : : global . rst NEWLINE : strike : ` This looks like it is outdated . `", ">> > STRING > STRING NEWLINE False NEWLINE >> > STRING > STRING NEWLINE True", ">> > [ STRING . format ( STRING , VAR ) for VAR in range ( NUMBER ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) , ] NEWLINE VAR = str . maketrans ( { VAR : VAR for VAR , VAR in VAR for VAR in VAR } )", "print str ( count ) + STRING + str ( conv )", "VAR , VAR = np . unique ( anArray , return_inverse = True ) NEWLINE VAR = ( VAR . max ( ) - VAR + NUMBER ) . reshape ( anArray . shape )", ">> > def VAR ( VAR , VAR , VAR ) : NEWLINE . . . VAR = { STRING : VAR , STRING : VAR , STRING : VAR } NEWLINE . . . d ( ** VAR ) NEWLINE . . . NEWLINE >> > def d ( ** VAR ) : NEWLINE . . . print ( VAR ) NEWLINE . . . NEWLINE >> > VAR ( NUMBER , NUMBER , NUMBER ) NEWLINE { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER }", "elif event . type == SHRINKSNAKE : NEWLINE if len ( wormCoords ) > NUMBER : NEWLINE del wormCoords [ - NUMBER ]", "import itertools NEWLINE def arrangements ( VAR ) : NEWLINE VAR = itertools . permutations ( VAR ) NEWLINE return set ( VAR for VAR in VAR if all ( VAR != VAR for VAR , VAR in zip ( VAR , VAR ) ) )", "pts . actor . mapper . input = pts . mlab_source . dataset", "return HttpResponse ( STRING . format ( val ) )", ">> > VAR = select ( [ addresses . c . email_address ] ) . . . . where ( addresses . c . user_id == users . c . id ) . . . . limit ( NUMBER ) NEWLINE >> > conn . execute ( users . update ( ) . values ( fullname = VAR ) )", "from flask_sqlalchemy import SQLAlchemy as BaseSQLAlchemy , Model , _BoundDeclarativeMeta , _QueryProperty NEWLINE from sqlalchemy import MetaData NEWLINE class SQLAlchemy ( BaseSQLAlchemy ) : NEWLINE def make_declarative_base ( VAR ) : NEWLINE VAR = MetaData ( naming_convention = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , } ) NEWLINE VAR = declarative_base ( VAR = VAR , cls = Model , name = STRING , metaclass = _BoundDeclarativeMeta ) NEWLINE VAR . query = _QueryProperty ( VAR ) NEWLINE return VAR", "def my_print ( * args ) : NEWLINE print STRING . join ( map ( str , args ) )", "biggraph generate NUMBER nodes NUMBER : NUMBER : NUMBER NEWLINE biggraph generate NUMBER edges NUMBER : NUMBER : NUMBER NEWLINE biggraph add edges NUMBER : NUMBER : NUMBER NEWLINE biggraph Dijkstra NUMBER : NUMBER : NUMBER NEWLINE biggraph shortest_path done NUMBER : NUMBER : NUMBER NEWLINE step : NUMBER NUMBER NEWLINE step : NUMBER NUMBER NEWLINE step : NUMBER NUMBER NEWLINE step : NUMBER NUMBER NEWLINE biggraph walk done NUMBER : NUMBER : NUMBER NEWLINE path : [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "python manage . py - - help", "STRING", "import string NEWLINE import collections NEWLINE def cleanedup ( VAR ) : NEWLINE for VAR in VAR : NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE if VAR in string . ascii_letters : NEWLINE VAR += VAR NEWLINE elif VAR : NEWLINE yield VAR NEWLINE VAR = STRING NEWLINE with open ( STRING ) as VAR : NEWLINE VAR = collections . Counter ( cleanedup ( VAR ) ) NEWLINE print VAR . most_commond ( NUMBER )", "def print_multiples ( VAR , VAR = NUMBER ) : NEWLINE for VAR in range ( NUMBER , VAR + NUMBER ) : NEWLINE print VAR * VAR , NEWLINE print STRING", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE def find_supersets ( VAR ) : NEWLINE VAR = set ( ) NEWLINE VAR = dict ( zip ( [ frozenset ( VAR . split ( ) ) for VAR in VAR ] , VAR ) ) NEWLINE for VAR in VAR . keys ( ) : NEWLINE for VAR in VAR . copy ( ) : NEWLINE if VAR <= VAR : NEWLINE break NEWLINE elif VAR < VAR : NEWLINE VAR . remove ( VAR ) NEWLINE else : NEWLINE VAR . add ( VAR ) NEWLINE return [ VAR [ VAR ] for VAR in VAR ] NEWLINE print ( find_supersets ( VAR ) )", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "VAR , VAR , VAR = np . linalg . lstsq ( A , X ) [ NUMBER ]", "translate ( unicode ) | NUMBER NEWLINE dict . fromkeys | NUMBER NEWLINE translate ( bytes ) | NUMBER NEWLINE translate ( bytearray ) | NUMBER NEWLINE List Comprehension | NUMBER NEWLINE Regular expressions | NUMBER NEWLINE Generator exp | NUMBER", "This would keep paragraphs separated . This would keep paragraphs separated . NEWLINE This would keep paragraphs separated . NEWLINE This would keep paragraphs separated . NEWLINE When , in the course of human events , it becomes necessary for one people", ">> > from collections import defaultdict NEWLINE >> > import inspect NEWLINE >> > inspect . getmodule ( defaultdict ) NEWLINE < module STRING from STRING >", ">> some_nodes = [ < Node : T1 > , < Node : T2 > , < Node : T3 > ] NEWLINE >> print get_queryset_descendants ( some_nodes ) NEWLINE [ < Node : T1 NUMBER > , < Node : T1 NUMBER > , < Node : T3 NUMBER > , < Node : T3 NUMBER NUMBER > ] NEWLINE >> print get_queryset_descendants ( some_nodes , include_self = True ) NEWLINE [ < Node : T1 > , < Node : T1 NUMBER > , < Node : T1 NUMBER > , < Node : T2 > , < Node : T3 > , < Node : T3 NUMBER > , < Node : T3 NUMBER NUMBER > ]", "Date NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE dtype : intimport re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = re . compile ( STRING ) NEWLINE def validity ( VAR ) : NEWLINE VAR = False NEWLINE if VAR . match ( VAR ) : NEWLINE return True NEWLINE if VAR . match ( VAR ) : NEWLINE return True NEWLINE if VAR . match ( VAR ) : NEWLINE return True NEWLINE return False NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING ) NEWLINE print validity ( STRING )", "from itertools import groupby NEWLINE VAR = lambda VAR : VAR [ NUMBER ] [ NUMBER ] . upper ( ) NEWLINE VAR = { VAR : sum ( VAR for VAR , VAR in VAR ) for VAR , VAR in groupby ( sorted ( original . items ( ) , VAR = VAR ) , VAR = VAR ) }", "[ NUMBER , [ NUMBER ] , NUMBER ]", "d . isoformat ( STRING )", ">> > VAR = pd . DataFrame ( NUMBER , index = df . index , columns = rangenp . in1d ( A , B ) . reshape ( A . shape ) . sum ( NUMBER ) == lenfor VAR , VAR in datelist [ [ STRING ] ] . iterrows ( ) : NEWLINE VAR = df [ df [ STRING ] <= VAR [ STRING ] ] NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR . append ( VAR ) NEWLINE print pd . concat ( VAR , ignore_index = True ) NEWLINE date group number end NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group3 NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group2 NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER group1 - NUMBER NUMBER - NUMBER - NUMBER NUMBER", "some_instance . __class__ = sandbox . SomeClass", "def options_view ( VAR ) : NEWLINE VAR = VAR . context NEWLINE return { STRING : VAR , }", ">> > [ seq [ VAR : VAR + division + overlap ] for VAR in range ( NUMBER , n * division , division ) ] NEWLINE [ STRING , STRING , STRING , STRING ]", "scipy . sparse . dok_matrix . __array__ = scipy . sparse . dok_matrix . toarray NEWLINE a [ : ] = s", ">> > zip ( L , fL ) NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ]", "$ python / tmp / get_tags . py / tmp / tests / NEWLINE a tag , another force tag , another tag , default tag , force tag , tag - NUMBER , tag - NUMBER", "VAR = csv . DictWriter ( ouf , [ STRING ] + months [ NUMBER : ] )", ">> > class Player ( object ) : NEWLINE . . . def __init__ ( VAR , VAR , VAR ) : NEWLINE . . . VAR . VAR = VAR NEWLINE . . . VAR . VAR = VAR NEWLINE . . . NEWLINE . . . def __repr__ ( VAR ) : NEWLINE . . . return STRING % ( VAR . VAR , VAR . VAR )", "import pandas as pd NEWLINE import numpy as np NEWLINE VAR = ( NUMBER , NUMBER ) NEWLINE VAR = np . random . normal ( size = VAR ) NEWLINE VAR [ : , NUMBER ] += VAR [ : , NUMBER ] NEWLINE VAR = pd . DataFrame ( VAR ) NEWLINE VAR = VAR . corr ( ) . abs ( ) NEWLINE VAR = VAR . unstack ( ) NEWLINE VAR = VAR . order ( kind = STRING ) NEWLINE print VAR [ - NUMBER : - NUMBER ]", "def user_profile_view ( request , user_name ) : NEWLINE user_profile_view . name = STRING", "[ VAR for VAR , VAR in enumerate ( l ) if not any ( is_subtuple ( VAR , VAR ) for VAR in l [ VAR + NUMBER : ] ) ]", ">> > instance = Something . objects . create ( VAR = STRING , VAR = { STRING : NUMBER , STRING : NUMBER , STRING : { STRING : NUMBER } } )", "VAR = NUMBER NEWLINE for VAR in range ( len ( arr1 ) ) : NEWLINE VAR = run_with_timeout ( VAR , foo1 , arr1 [ VAR ] ) )", "from numpy import take , argsort NEWLINE take ( opt , argsort ( argsort ( perc ) [ : : - NUMBER ] ) )", "VAR = np . array ( [ . . . ] ) NEWLINE listOfFlowMaps . append ( VAR )", "import os NEWLINE VAR = STRING NEWLINE VAR = { } NEWLINE for VAR , VAR , VAR in os . walk ( VAR ) : NEWLINE VAR [ VAR ] = VAR", "VAR = STRING NEWLINE print ( getattr ( MaxVal , VAR ) )", "VAR = { VAR : list ( itemgetter ( * srt_key ) ( VAR ) ) for VAR , VAR in d . items ( ) } NEWLINE print ( VAR )", "while titles [ - NUMBER ] == STRING : NEWLINE titles . pop ( )", ">> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > VAR . translate ( dict . fromkeys ( ord ( VAR ) for VAR in VAR + VAR . upper ( ) ) ) NEWLINE STRING", "VAR = Test ( NUMBER ) NEWLINE VAR = Test ( NUMBER ) NEWLINE VAR = [ VAR . i , VAR . i ]", "import lxml . html NEWLINE from lxml . cssselect import CSSSelector NEWLINE VAR = result . read ( ) NEWLINE VAR = lxml . html . fromstring ( VAR ) NEWLINE VAR = VAR . xpath ( STRING )", "import difflib NEWLINE def similar ( VAR , VAR ) : NEWLINE return difflib . SequenceMatcher ( a = VAR . lower ( ) , b = VAR . lower ( ) ) . ratio ( ) > NUMBER NEWLINE def unique ( VAR , VAR ) : NEWLINE VAR = VAR [ : ] NEWLINE for VAR in VAR : NEWLINE VAR . pop ( NUMBER ) NEWLINE [ VAR . pop ( VAR ) for VAR in VAR if VAR . has_key ( VAR ) for VAR in VAR if VAR . has_key ( VAR ) and similar ( VAR [ VAR ] , VAR [ VAR ] ) ] NEWLINE return VAR", "import pandas as pd NEWLINE from StringIO import StringIO NEWLINE VAR = STRING NEWLINE VAR = pd . read_table ( StringIO ( VAR ) , index_col = NUMBER , sep = STRING )", "import cv2 NEWLINE VAR = cv2 . imread ( STRING ) NEWLINE while ( NUMBER ) : NEWLINE cv2 . imshow ( STRING , VAR ) NEWLINE VAR = cv2 . waitKey ( NUMBER ) NEWLINE if VAR == NUMBER : NEWLINE break NEWLINE elif VAR == - NUMBER : NEWLINE continue NEWLINE else : NEWLINE print VAR", ">> > d NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ) NEWLINE >> > VAR = d . copy ( ) NEWLINE >> > VAR . sort ( axis = NUMBER ) NEWLINE >> > VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "sshpass - [ args ] rsync [ source ] [ dest ]", "< ! DOCTYPE html > NEWLINE < html > NEWLINE < head > . . . < / head > NEWLINE < body > NEWLINE { % include STRING % } NEWLINE { % include STRING % } NEWLINE < / body > NEWLINE < / html >", "os . path . join ( dir_name , base_filename + STRING + filename_suffix )", "Argument List : [ STRING , STRING , STRING , STRING ]", "< button name = STRING string = STRING type = STRING context = STRING / >", ">> > from datarray . datarray import DataArray as DA NEWLINE >> > VAR = DA ( D , [ rows , cols ] ) NEWLINE >> > VAR . axes NEWLINE ( Axis ( name = STRING , index = NUMBER , labels = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ) , Axis ( name = STRING , index = NUMBER , labels = [ STRING , STRING , STRING , STRING , STRING ] ) ) NEWLINE >> > NEWLINE >> > VAR [ : , STRING ] NEWLINE DataArray ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE ( STRING , )", "from bs4 import BeautifulSoup NEWLINE import requests NEWLINE VAR = requests . get ( STRING ) NEWLINE VAR = BeautifulSoup ( VAR . text ) NEWLINE VAR = [ VAR [ STRING ] for VAR in VAR . findAll ( STRING ) if VAR . has_key ( STRING ) ] NEWLINE VAR = [ VAR [ STRING ] for VAR in VAR . findAll ( STRING ) if VAR . has_key ( STRING ) ] NEWLINE VAR = [ VAR [ STRING ] for VAR in VAR . findAll ( STRING ) if VAR . has_key ( STRING ) ]", "lst [ i : ]", ">> > VAR = [ STRING , STRING ] NEWLINE >> > VAR = [ STRING , STRING , STRING ] NEWLINE >> > sum ( VAR . lower ( ) in VAR . lower ( ) for VAR in VAR for VAR in VAR ) NEWLINE NUMBER NEWLINE >> > len ( set ( VAR for VAR in VAR for VAR in VAR if VAR . lower ( ) in VAR . lower ( ) ) ) NEWLINE NUMBER", ">> > VAR = [ [ STRING , STRING , STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING , STRING , STRING ] ] NEWLINE >> > NEWLINE >> > VAR = [ VAR [ NUMBER ] ] NEWLINE >> > for VAR in VAR [ NUMBER : ] : NEWLINE . . . for VAR , VAR in enumerate ( VAR . pop ( NUMBER ) . split ( STRING ) ) : NEWLINE . . . VAR = VAR [ : ] NEWLINE . . . VAR . insert ( NUMBER , VAR [ NUMBER ] + VAR . strip ( ) ) NEWLINE . . . VAR . append ( VAR ) NEWLINE . . . NEWLINE >> > for VAR in VAR : NEWLINE . . . printizedInput ( STRING , int ) , SizedInput ( STRING , str ) , MatrixInput ( STRING , int ) , ]", "c . InteractiveShellApp . exec_files = [ STRING ]", ". . . . NEWLINE else : NEWLINE exec ( ui_application . tag )", "{ STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING }", "VAR = STRING NEWLINE VAR = re . match ( STRING , VAR ) NEWLINE print VAR . group ( )", "A point in NUMBER d space", "VAR , VAR = split_upper_lower ( STRING )", "VAR = STRING NEWLINE VAR = os . path . join ( PROJECT_ROOT , STRING , STRING ) NEWLINE VAR = ( os . path . join ( PROJECT_ROOT , STRING ) , )", "VAR = NUMBER NEWLINE print STRING . format ( VAR )", "print STRING NEWLINE for VAR in xrange ( N ) : NEWLINE VAR = box_index_F [ VAR ] NEWLINE VAR = linind_F [ tuple ( binassign [ : , VAR ] ) ] NEWLINE print STRING % ( VAR , VAR == VAR , VAR , VAR ) NEWLINE print STRING NEWLINE for VAR in xrange ( N ) : NEWLINE VAR = box_index_C [ VAR ] NEWLINE VAR = linind_C [ tuple ( binassign [ : , VAR ] ) ] NEWLINE print STRING % ( VAR , VAR == VAR , VAR , VAR )", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING , STRING ]", "import random , time NEWLINE from subprocess import Popen NEWLINE def work_diligently ( ) : NEWLINE VAR = [ STRING , str ( random . randrange ( NUMBER , NUMBER ) ) ] NEWLINE VAR = Popen ( VAR ) NEWLINE print STRING . format ( VAR . pid , VAR ) NEWLINE return VAR NEWLINE def spawn ( VAR ) : NEWLINE return [ work_diligently ( ) for VAR in xrange ( VAR ) ] NEWLINE VAR = NUMBER NEWLINE VAR = spawn ( VAR ) NEWLINE while True : NEWLINE print time . ctime ( ) , STRING NEWLINE VAR = [ VAR for VAR in VAR if VAR . poll ( ) is None ] NEWLINE VAR = VAR - len ( VAR ) NEWLINE if VAR : NEWLINE print STRING . format ( VAR ) NEWLINE VAR . extend ( spawn ( VAR ) ) NEWLINE time . sleep ( NUMBER )", ">> > Inventary . objects . filter ( Q ( name__startswith = STRING ) | Q ( name__startswith = STRING ) )", "def calc ( VAR = NUMBER , VAR = NUMBER , VAR = NUMBER ) : NEWLINE VAR = raw_input ( STRING ) NEWLINE return eval ( VAR , None , locals ( ) )", "import sys NEWLINE if sys . version_info [ NUMBER ] < NUMBER : NEWLINE def py2_compat ( VAR ) : NEWLINE if hasattr ( VAR , STRING ) : NEWLINE VAR . __unicode__ = VAR . __str__ NEWLINE del VAR . __str__ NEWLINE return VAR NEWLINE else : NEWLINE def py2_compat ( VAR ) : NEWLINE return VAR NEWLINE @ py2_compat NEWLINE class MyPython3Class ( object ) : NEWLINE def __str__ ( VAR ) : NEWLINE return STRING", "VAR = STRING . join ( [ STRING . join ( authors [ : - NUMBER ] ) , authors [ - NUMBER ] ] if len ( authors ) > NUMBER else authors )", ">> > VAR = STRING NEWLINE >> > VAR = map ( str . strip , VAR . split ( STRING ) ) NEWLINE >> > VAR NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = sorted ( set ( VAR ) , key = lambda VAR : VAR . index ( VAR ) ) NEWLINE >> > VAR NEWLINE [ STRING , STRING , STRING , STRING ] NEWLINE >> > STRING . join ( VAR ) NEWLINE STRING", "class One : NEWLINE @ staticmethod NEWLINE def get ( ) : NEWLINE return NUMBER NEWLINE class Two : NEWLINE def __init__ ( VAR ) : NEWLINE VAR = One . get ( )", "In [ NUMBER ] : NEWLINE df [ STRING ] = pd . to_datetime ( df [ STRING ] . astype ( str ) + df [ STRING ] . astype ( str ) . str . zfill ( NUMBER ) , format = STRING ) NEWLINE df NEWLINE Out [ NUMBER ] : NEWLINE year month pl date NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER - NUMBER - NUMBER", "settings NEWLINE helper NEWLINE VAR in lib . settings NEWLINE someobject NEWLINE VAR in lib . foo . someobject NEWLINE import fnmatch , os NEWLINE from lib . settings import Values NEWLINE from lib import VAR NEWLINE print NEWLINE for VAR , VAR , VAR in os . walk ( STRING ) : NEWLINE for VAR in fnmatch . filter ( VAR , STRING ) : NEWLINE print STRING % ( os . path . basename ( VAR ) , VAR ) NEWLINE print open ( os . path . join ( VAR , VAR ) ) . read ( ) NEWLINE print NEWLINE print STRING NEWLINE class VAR ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE print STRING , VAR NEWLINE print STRING NEWLINE import helper NEWLINE class Values ( object ) : NEWLINE pass NEWLINE helper . VAR ( __name__ ) NEWLINE import settings , foo . someobject , helper NEWLINE VAR = helper . VAR NEWLINE print STRING NEWLINE from . . import helper NEWLINE helper . VAR ( __name__ ) NEWLINE import someobject", "test1 NEWLINE test2", "from threading import Timer NEWLINE def kill_yourself ( VAR ) : NEWLINE VAR = Timer ( VAR , kill_yourself_now ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( )", "Complete solution NEWLINE VAR = tree . getroot ( ) NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE for VAR in VAR : NEWLINE print str", "json . dumps ( { STRING : decimal . Decimal ( STRING ) } , cls = DecimalEncoder )", "import sys NEWLINE import subprocess as sp NEWLINE import cPickle NEWLINE VAR = STRING NEWLINE def send_and_exit ( VAR ) : NEWLINE sys . stdout . write ( VAR + cPickle . dumps ( VAR ) ) NEWLINE sys . stdout . flush ( ) NEWLINE sys . exit ( NUMBER ) NEWLINE def execute_and_receive ( VAR ) : NEWLINE VAR = sp . Popen ( [ STRING , VAR ] , stdout = sp . PIPE ) NEWLINE ( VAR , VAR ) = VAR . communicate ( ) NEWLINE return cPickle . loads ( VAR [ VAR . find ( VAR ) + len ( VAR ) : ] )", "class ListComponents ( generics . ListAPIView ) : NEWLINE VAR = MenuItemComponentSerializer NEWLINE def get_queryset ( VAR ) : NEWLINE STRING NEWLINE VAR = VAR . kwargs [ STRING ] NEWLINE return MenuItemComponent . objects . filter ( menuItem = VAR )", "from collections import Counter NEWLINE from itertools import chain NEWLINE VAR = [ { NUMBER : STRING , NUMBER : STRING , NUMBER : STRING , NUMBER : STRING } , { NUMBER : STRING , NUMBER : STRING } , { NUMBER : STRING , NUMBER : STRING } , ] NEWLINE VAR = Counter ( chain . from_iterable ( VAR ) ) NEWLINE print dict ( VAR )", "zip ( ii , y [ ii ] ) NEWLINE", "VAR = { VAR [ NUMBER ] : VAR [ NUMBER : ] for VAR in listb }", "[ ( STRING , STRING , STRING ) , ( None , STRING , STRING ) , ( None , STRING , None ) ]", "import proto NEWLINE proto . struct_token_type_delta . from_buffer ( bytearray ( STRING ) )", "def split_list ( VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if VAR == VAR : NEWLINE yield VAR NEWLINE VAR = [ ] NEWLINE else : NEWLINE VAR . append ( VAR ) NEWLINE yield VAR", "def collapseTrajectories ( VAR , VAR , VAR , VAR , VAR = STRING ) : NEWLINE VAR = NUMBER NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if len ( VAR [ VAR == VAR ] ) > VAR : NEWLINE VAR = len ( VAR [ VAR == VAR ] ) NEWLINE VAR = VAR NEWLINE VAR = np . linspace ( NUMBER , NUMBER , VAR ) NEWLINE VAR = np . linspace ( NUMBER , NUMBER , VAR ) NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if len ( VAR [ VAR == VAR ] ) > NUMBER : NEWLINE VAR = VAR [ VAR == VAR ] NEWLINE VAR = VAR [ VAR == VAR ] NEWLINE VAR = np . linspace ( NUMBER , NUMBER , len ( VAR ) ) NEWLINE VAR = np . linspace ( NUMBER , NUMBER , len ( VAR ) ) NEWLINE VAR = interp1d ( VAR , VAR , VAR = STRING ) NEWLINE VAR = interp1d ( VAR , VAR , VAR = STRING ) NEWLINE VAR . append ( VAR ( VAR ) ) NEWLINE VAR . append ( VAR ( VAR ) ) NEWLINE if VAR == STRING : NEWLINE VAR = np . median ( VAR , axis = NUMBER ) NEWLINE VAR = np . median ( VAR , axis = NUMBER ) NEWLINE elif VAR == STRING : NEWLINE VAR = np . mean ( VAR , axis = NUMBER ) NEWLINE VAR = np . mean ( VAR , axis = NUMBER ) NEWLINE return VAR , VAR", "import inspect NEWLINE def decallmethods ( VAR , VAR = STRING ) : NEWLINE def dectheclass ( VAR ) : NEWLINE for VAR , VAR in inspect . getmembers ( VAR , inspect . ismethod ) : NEWLINE if VAR . startswith ( VAR ) : NEWLINE setattr ( VAR , VAR , VAR ( VAR ) ) NEWLINE return VAR NEWLINE return dectheclass", ">> > from collections import defaultdict NEWLINE >> > lis = [ ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ( NUMBER , STRING ) , ] NEWLINE >> > dic = defaultdict ( set ) NEWLINE for VAR , VAR in lis : NEWLINE dic [ VAR ] . update ( VAR . split ( STRING ) ) NEWLINE >> > dic NEWLINE defaultdict ( < type STRING > , { NUMBER : set ( [ STRING , STRING , STRING ] ) , NUMBER : set ( [ STRING , STRING , STRING ] ) } )", "< browser : page NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING / >", "VAR = np . array ( [ ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ] ) NEWLINE VAR = np . array ( [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] ) NEWLINE VAR = np . argsort ( VAR [ : , NUMBER ] ) NEWLINE VAR [ : , NUMBER ] [ VAR [ VAR [ : , NUMBER ] [ VAR ] . searchsorted ( VAR [ : , NUMBER ] ) ] ] = VAR [ : , NUMBER ] NEWLINE print ( VAR )", "import re NEWLINE VAR = STRING NEWLINE VAR = re . sub ( STRING , STRING , VAR . replace ( STRING , STRING ) )", "def eliminate_consonants ( VAR ) : NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE if VAR in VAR : NEWLINE print ( VAR , end = STRING ) NEWLINE eliminate_consonants ( STRING )", "< location STRING > NEWLINE SetHandler python - program NEWLINE PythonHandler django . core . handlers . modpython NEWLINE PythonPath STRING NEWLINE SetEnv DJANGO_SETTINGS_MODULE osqa . settings NEWLINE PythonDebug On NEWLINE < / location >", "VAR . rename ( columns = { NUMBER : STRING , NUMBER : STRING , NUMBER : STRING } , inplace = True ) NEWLINE VAR = VAR [ [ STRING , STRING , STRING ] ] NEWLINE print VAR NEWLINE City State Country NEWLINE NUMBER NaN NaN HUN NEWLINE NUMBER NaN NaN ESP NEWLINE NUMBER NaN NaN GBR NEWLINE NUMBER NaN NaN ESP NEWLINE NUMBER NaN NaN FRA NEWLINE NUMBER NaN ID USA NEWLINE NUMBER NaN GA USA NEWLINE NUMBER Hoboken NJ USA NEWLINE NUMBER NaN NJ USA NEWLINE NUMBER NaN NaN AUS", "def add_old_setattr_to_class ( VAR ) : NEWLINE def __setattr__ ( VAR , VAR , VAR ) : NEWLINE VAR = super ( VAR . __class__ , VAR ) . __setattr__ NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR ( VAR , VAR ) NEWLINE else : NEWLINE VAR ( STRING + VAR , getattr ( VAR , VAR ) ) NEWLINE VAR ( VAR , VAR ) NEWLINE VAR . __setattr__ = __setattr__ NEWLINE class MyObject ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . attr_one = None NEWLINE VAR . attr_two = NUMBER NEWLINE VAR = MyObject ( ) NEWLINE add_old_setattr_to_class ( VAR . __class__ ) NEWLINE VAR . attr_one = STRING NEWLINE VAR . attr_two = NUMBER NEWLINE print VAR . old_attr_one NEWLINE print VAR . attr_one NEWLINE print VAR . old_attr_two NEWLINE print VAR . attr_two", "Consider using other format , e . g . YAML NEWLINE data . yaml NEWLINE MyHome : NEWLINE - STRING NEWLINE - STRING NEWLINE - STRING", "VAR = Counter ( keywords )", "import matplotlib . pyplot as plt NEWLINE VAR = pd . DataFrame ( { STRING : { NUMBER : True , NUMBER : False , NUMBER : False , NUMBER : False , NUMBER : False , NUMBER : True , NUMBER : False } , STRING : { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } } )", "< facultyMember > NEWLINE < FirstName > C < / FirstName > NEWLINE < / facultyMember > NEWLINE < facultyMember > NEWLINE < FirstName > D < / FirstName > NEWLINE < / facultyMember > NEWLINE < facultyMember > NEWLINE < FirstName > E < / FirstName > NEWLINE < / facultyMember > NEWLINE < facultyMember > NEWLINE < FirstName > F < / FirstName > NEWLINE < / facultyMember >", ">> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING NEWLINE >> > next_string ( STRING ) NEWLINE STRING", "def remove ( VAR , VAR = None , VAR = None ) : NEWLINE for VAR in VAR : NEWLINE if ( VAR is not None and VAR . VAR == VAR or VAR is not None and VAR . VAR == VAR ) : NEWLINE super ( Orders , VAR ) . remove ( VAR ) NEWLINE break", "( Thread - NUMBER ) NUMBER - created new session : STRING NEWLINE ( Thread - NUMBER ) NUMBER - created new session : STRING NEWLINE ( Thread - NUMBER ) NUMBER - created new session : STRING NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE ( Thread - NUMBER ) NUMBER - re - using session STRING NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE ( Thread - NUMBER ) NUMBER - re - using session STRING NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE ( Thread - NUMBER ) NUMBER - re - using session STRING NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE ( Thread - NUMBER ) NUMBER - re - using session STRING NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE ( Thread - NUMBER ) NUMBER - slept for NUMBER seconds NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = Counter . objects . get_or_create ( name = name ) NEWLINE VAR . count = F ( STRING ) + NUMBER NEWLINE VAR . save ( )", "import pandas as pd NEWLINE VAR = pd . read_table ( STRING , sep = STRING ) NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE VAR = VAR . groupby ( VAR ) NEWLINE VAR [ STRING ] = VAR . cumcount ( ) NEWLINE VAR = VAR . set_index ( VAR + [ STRING ] ) NEWLINE VAR = VAR . unstack ( STRING ) NEWLINE VAR = VAR . swaplevel ( NUMBER , NUMBER , axis = NUMBER ) NEWLINE VAR = VAR . sortlevel ( axis = NUMBER ) NEWLINE VAR . columns = VAR . columns . droplevel ( NUMBER ) NEWLINE VAR = VAR . reset_index ( ) NEWLINE print ( VAR )", "xcrun simctl erase < udid here >", "[ NUMBER NUMBER NUMBER ] NEWLINE [ - NUMBER - NUMBER - NUMBER ]", "IGHV3 - NUMBER - IGHJ4 - CAKDRGYTGYGVYFDYW NEWLINE IGHV4 - NUMBER - IGHJ4 - CARHDILTGYSYYFDYW NEWLINE IGHV3 - NUMBER - IGHJ3 - CAKSGGWYLSDAFDIW NEWLINE IGHV4 - NUMBER - IGHJ4 - CARTGFGELGFDYW NEWLINE IGHV1 - NUMBER - IGHJ2 - CARDSDYDWYFDLW NEWLINE IGHV1 - NUMBER - IGHJ3 - CARGQTYYDILTGPSDAFDIW NEWLINE IGHV4 - NUMBER - IGHJ5 - CARSTGDWFDPW NEWLINE IGHV3 - NUMBER - IGHJ3 - CANVPIYSSSYDAFDIW NEWLINE IGHV3 - NUMBER - IGHJ4 - CAKDWELYYFDYW NEWLINE IGHV3 - NUMBER - IGHJ4 - CAKDRGYTGFGVYFDYW NEWLINE IGHV4 - NUMBER - IGHJ4 - CARHLGYNNSWYPFDYW NEWLINE IGHV1 - NUMBER - IGHJ4 - CAREGYNWNDEGRFDYW NEWLINE IGHV3 - NUMBER - IGHJ3 - CAKSSGWYLSDAFDIW NEWLINE IGHV4 - NUMBER - IGHJ4 - CARYLGYNSNWYPFDYW NEWLINE IGHV3 - NUMBER - IGHJ6 - CAKEGCSSGCPYYYYGMDVW NEWLINE IGHV3 - NUMBER - IGHJ3 - CAKWGPDAFDIW NEWLINE IGHV3 - NUMBER - IGHJ - CATSGGSP NEWLINE IGHV3 - NUMBER - IGHJ4 - CARDGDGYNDYW NEWLINE IGHV1 - NUMBER - IGHJ4 - CARRIGYSSGSEDYW NEWLINE IGHV1 - NUMBER - IGHJ4 - CARDIAVPGHGDYW NEWLINE IGHV6 - NUMBER - IGHJ4 - CASGGAVPGYYFDYW NEWLINE IGHV1 - NUMBER - CAREGYNWNDEGRFDYW NEWLINE IGHV4 - NUMBER - CARSTGDWFDPW NEWLINE IGHV1 - NUMBER - CARDSDYDWYFDLW", "import eav NEWLINE from app . models import Patient , Encounter NEWLINE eav . register ( Encounter ) NEWLINE eav . register ( Patient ) NEWLINE Attribute . objects . create ( name = STRING , datatype = Attribute . TYPE_INT ) NEWLINE Attribute . objects . create ( name = STRING , datatype = Attribute . TYPE_FLOAT ) NEWLINE Attribute . objects . create ( name = STRING , datatype = Attribute . TYPE_FLOAT ) NEWLINE Attribute . objects . create ( name = STRING , datatype = Attribute . TYPE_TEXT ) NEWLINE Attribute . objects . create ( name = STRING , datatype = Attribute . TYPE_TEXT ) NEWLINE self . yes = EnumValue . objects . create ( value = STRING ) NEWLINE self . no = EnumValue . objects . create ( value = STRING ) NEWLINE self . unkown = EnumValue . objects . create ( value = STRING ) NEWLINE VAR = EnumGroup . objects . create ( name = STRING ) NEWLINE VAR . enums . add ( self . yes ) NEWLINE VAR . enums . add ( self . no ) NEWLINE VAR . enums . add ( self . unkown ) NEWLINE Attribute . objects . create ( name = STRING , datatype = Attribute . TYPE_ENUM , enum_group = VAR ) NEWLINE Patient . objects . create ( name = STRING , eav__age = NUMBER , eav__fever = no , eav__city = STRING , eav__country = STRING ) NEWLINE VAR = Patient . objects . filter ( Q ( eav__city__contains = STRING ) ) NEWLINE VAR = Q ( eav__city__contains = STRING ) | Q ( eav__fever = no )", "@ api . one NEWLINE @ api . depends ( STRING , STRING ) NEWLINE def _compute_value ( VAR ) : NEWLINE if VAR . child_ids : NEWLINE VAR . value = sum ( [ VAR . value for VAR in VAR . child_ids ] ) NEWLINE else : NEWLINE VAR . value = VAR . value_manual", "$ python - m timeit - s STRING STRING NEWLINE NUMBER loops , best of NUMBER : NUMBER usec per loop", ">> > type ( Extend1 ) NEWLINE < class STRING >", "VAR = STRING NEWLINE VAR = [ [ int ( VAR ) for VAR in VAR . split ( ) ] for VAR in VAR . splitlines ( ) [ NUMBER : ] ] NEWLINE VAR = defaultdict ( list ) NEWLINE for VAR , VAR , VAR in VAR : NEWLINE VAR [ VAR ] . append ( ( VAR , VAR ) ) NEWLINE for VAR , VAR in VAR . items ( ) : NEWLINE VAR = UnionFind ( ) NEWLINE for VAR , VAR in VAR : NEWLINE VAR . VAR ( VAR , VAR ) NEWLINE print VAR , VAR . get_groups ( ) . values ( )", "from noo cimport trol", "df [ STRING ] = ( ~ df [ [ STRING , STRING ] ] . isin ( df [ STRING ] ) ) . sum ( NUMBER )", "VAR = { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] } NEWLINE import csv NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR . writerow ( VAR . keys ( ) ) NEWLINE VAR . writerows ( zip ( * VAR . values ( ) ) )", "$ fab - l", "def logging_debug ( VAR ) : NEWLINE STRING NEWLINE if os . environ . get ( STRING , STRING ) . startswith ( STRING ) : NEWLINE logging . debug ( VAR . encode ( STRING ) ) NEWLINE else : NEWLINE logging . debug ( VAR )", "VAR = [ VAR for VAR in os . listdir ( somedir ) if os . path . isfile ( VAR ) ] .", "python test . py NEWLINE A . a ( ) NEWLINE B . b ( ) NEWLINE I was called by __main__ . A . a ( )", "QTabWidget : : pane { / * The tab widget frame * / border - top : NUMBER px solid position : absolute ; top : - NUMBER em ; } NEWLINE QTabWidget : : tab - bar { alignment : center ; } NEWLINE / * Style the tab using the tab sub - control . Note that NEWLINE it reads QTabBar _not_ QTabWidget * / NEWLINE QTabBar : : tab { background : qlineargradient ( x1 : NUMBER , y1 : NUMBER , x2 : NUMBER , y2 : NUMBER , stop : NUMBER stop : NUMBER border : NUMBER px solid border - bottom - color : border - top - left - radius : NUMBER px ; border - top - right - radius : NUMBER px ; min - width : NUMBER ex ; padding : NUMBER px ; } QTabBar : : tab : selected , QTabBar : : tab : hover { background : qlineargradient ( x1 : NUMBER , y1 : NUMBER , x2 : NUMBER , y2 : NUMBER , stop : NUMBER stop : NUMBER } QTabBar : : tab : selected { border - color : border - bottom - color : }", "In [ NUMBER ] : df . groupby ( [ STRING , STRING ] ) . mean ( ) NEWLINE Out [ NUMBER ] : NEWLINE A B C D NEWLINE year id NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER - NUMBER", "In [ NUMBER ] : arr NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] ) NEWLINE In [ NUMBER ] : arr_out NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = { STRING : NUMBER , STRING : NUMBER , } NEWLINE VAR = [ STRING , STRING , STRING , STRING , STRING ] NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = VAR . get ( VAR , NUMBER ) + NUMBER NEWLINE print VAR", "In [ NUMBER ] : a = numpy . arange ( NUMBER , NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : b = numpy . arange ( NUMBER , NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : c = numpy . arange ( NUMBER , NUMBER , NUMBER ) NEWLINE In [ NUMBER ] : def f ( a , b , c ) : NEWLINE . . . : d = numpy . empty ( ( len ( a ) , NUMBER ) , dtype = a . dtype ) NEWLINE . . . : d [ : , NUMBER ] , d [ : , NUMBER ] , d [ : , NUMBER ] = a , b , c NEWLINE . . . : return d . ravel ( ) NEWLINE . . . : NEWLINE In [ NUMBER ] : def g ( a , b , c ) : NEWLINE . . . : return numpy . vstack ( ( a , b , c ) ) . T . ravel ( ) NEWLINE . . . : NEWLINE In [ NUMBER ] : % timeit f ( a , b , c ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit g ( a , b , c ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop", "for VAR , VAR in tab . groupby ( STRING ) : NEWLINE print VAR NEWLINE print pd . to_datetime ( VAR . time ) . diff ( ) . mean ( ) NEWLINE", ">> > VAR = STRING NEWLINE >> > [ float ( VAR ) for VAR in VAR . split ( ) ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "In [ NUMBER ] : import dateutil . parser as parser NEWLINE In [ NUMBER ] : parser . parse ( STRING , fuzzy = True ) NEWLINE Out [ NUMBER ] : datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER )", "FROM foo LEFT OUTER JOIN baz ON foo . id = baz . foo_id RIGHT OUTER JOIN bar ON bar . id = baz . bar_id", "< a href = STRING > Download PDF < / a >", "import os NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = Environment ( ) NEWLINE for VAR in VAR : NEWLINE SConscript ( os . path . join ( VAR , STRING ) , exports = [ STRING ] )", "print ( STRING + STRING . join ( your_list ) + STRING )", "In [ NUMBER ] : % edit - x NEWLINE In [ NUMBER ] : macro xed NUMBER NEWLINE In [ NUMBER ] : store xed NEWLINE In [ NUMBER ] : xed", "< ( [ ^ > ] * ) >", "from PIL import Image NEWLINE from pyscreenshot import grab NEWLINE VAR = grab ( bbox = ( NUMBER , NUMBER , NUMBER , NUMBER ) ) NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = min ( VAR / width , VAR / height ) NEWLINE VAR = VAR . resize ( ( VAR * VAR , width * VAR ) , Image . ANTIALIAS )", "def replace_dupes ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = set ( ) NEWLINE for VAR in VAR : NEWLINE if VAR in VAR : NEWLINE VAR . append ( STRING ) NEWLINE else : NEWLINE VAR . add ( VAR ) NEWLINE VAR . append ( VAR ) NEWLINE return VAR NEWLINE VAR = ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) NEWLINE print ( replace_dupes ( VAR ) ) NEWLINE", "Python27 \\ Lib \\ pydoc . py", "VAR = dict ( [ ( VAR , alphabet . index ( VAR ) ) for VAR in alphabet ) VAR = sorted ( inputList , key = lambda VAR : [ VAR [ VAR ] for VAR in VAR [ NUMBER ] ] )", "VAR , VAR = zip ( * s ) NEWLINE plt . scatter ( VAR , VAR )", ">> > unescape_string ( string ) NEWLINE STRING NEWLINE >> > unescape_string ( STRING ) NEWLINE STRING", "NUMBER f NUMBER NEWLINE \\ | / NEWLINE \\ | / NEWLINE \\ | / NEWLINE l - - - - - - - - - - - - - - r NEWLINE | NEWLINE | NEWLINE |", "def data_to_python ( VAR ) : NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR = [ ] NEWLINE VAR = True NEWLINE for VAR in VAR : NEWLINE if VAR : NEWLINE VAR = False NEWLINE VAR = VAR . split ( STRING ) NEWLINE else : NEWLINE VAR = { } NEWLINE for VAR , VAR in enumerate ( VAR . split ( STRING ) ) : NEWLINE VAR [ VAR [ VAR ] ] = VAR NEWLINE VAR . append ( VAR ) NEWLINE return VAR NEWLINE def searchByYear ( VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if VAR [ STRING ] . endswith ( str ( VAR ) ) : NEWLINE VAR . append ( VAR ) NEWLINE return VAR", "print ET . tostring ( grandchild ) . strip ( )", "VAR = NUMBER NEWLINE flow [ np . abs ( flow ) < VAR ] = NUMBER", "In [ NUMBER ] : def f ( VAR ) : NEWLINE return [ ( VAR , NUMBER , NUMBER ) , ( VAR , NUMBER , NUMBER ) , ( VAR , NUMBER , NUMBER ) , ( VAR + NUMBER , NUMBER , NUMBER ) ] NEWLINE In [ NUMBER ] : l = [ ] NEWLINE In [ NUMBER ] : for VAR in range ( NUMBER ) : NEWLINE l . extend ( f ( VAR ) ) NEWLINE In [ NUMBER ] : index_3levels = pd . MultiIndex . from_tuples ( l , names = [ STRING , STRING , STRING ] ) NEWLINE In [ NUMBER ] : len ( index_3levels ) NEWLINE Out [ NUMBER ] : NUMBER", "from celery import shared_task NEWLINE @ shared_task NEWLINE def delete_model ( VAR ) : NEWLINE try : NEWLINE MyModel . objects . get ( pk = VAR ) . delete ( ) NEWLINE except MyModel . DoesNotExist : NEWLINE pass", "def applyfs ( VAR , VAR ) : NEWLINE STRING NEWLINE return map ( lambda VAR : VAR ( * VAR ) , VAR )", "from datetime import datetime NEWLINE VAR = [ ] NEWLINE VAR . append ( datetime . now ( ) )", "from scipy . interpolate import interp2d NEWLINE import numpy as np NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . random . uniform ( NUMBER , NUMBER , ( VAR , VAR ) ) NEWLINE VAR = interp2d ( np . arange ( VAR ) , np . arange ( VAR ) , VAR )", ">> > VAR = json . loads ( STRING )", "dZ3 / dBias = theta2 ( NUMBER )", "import re NEWLINE import requests NEWLINE from lxml import html NEWLINE def getVideosLinks ( VAR ) : NEWLINE VAR = re . findall ( STRING , VAR ) NEWLINE return VAR NEWLINE def prepareJSONurl ( VAR ) : NEWLINE VAR = STRING . format ( hash = VAR ) NEWLINE return VAR NEWLINE def extractEpisodeHash ( VAR ) : NEWLINE VAR = html . fromstring ( VAR ) NEWLINE VAR = VAR . xpath ( STRING ) [ NUMBER ] . split ( STRING , NUMBER ) [ NUMBER ] NEWLINE VAR = re . findall ( STRING , VAR ) NEWLINE return VAR [ NUMBER ] NEWLINE def extractIframeURL ( VAR ) : NEWLINE VAR = None NEWLINE VAR = html . fromstring ( VAR ) NEWLINE try : NEWLINE VAR = VAR . xpath ( STRING ) [ NUMBER ] NEWLINE VAR = True NEWLINE except : NEWLINE VAR = False NEWLINE return VAR , VAR NEWLINE VAR = STRING NEWLINE VAR = requests . get ( VAR ) NEWLINE VAR , VAR = extractIframeURL ( VAR . VAR ) NEWLINE if VAR : NEWLINE VAR = requests . get ( VAR ) NEWLINE VAR = extractEpisodeHash ( VAR . VAR ) NEWLINE VAR = prepareJSONurl ( VAR ) NEWLINE VAR = requests . get ( VAR ) NEWLINE for VAR in getVideosLinks ( VAR . VAR ) : NEWLINE print STRING . format ( VAR ) NEWLINE else : NEWLINE print STRING", "if len ( kargs . viewkeys ( ) & { STRING , STRING } ) != NUMBER : NEWLINE raise ValueError ( STRING )", "plt . scatter ( * zip ( * a ) )", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE VAR = VAR . find ( STRING , attrs = { STRING : STRING } ) . parent NEWLINE VAR . span . em . extract ( ) NEWLINE print VAR . text", "@ numba . jit ( nopython = True ) NEWLINE def generate_values ( VAR , VAR , VAR ) : NEWLINE VAR = len ( VAR ) NEWLINE VAR = np . empty ( VAR ) NEWLINE for VAR in range ( VAR ) : NEWLINE for VAR in range ( VAR , VAR ) : NEWLINE if VAR [ VAR ] < VAR [ VAR ] or VAR [ VAR ] > VAR [ VAR ] : NEWLINE VAR [ VAR ] = VAR [ VAR ] NEWLINE break NEWLINE else : NEWLINE VAR [ VAR ] = np . nan NEWLINE return VAR", "for VAR in listb_dict . viewkeys ( ) & lista_set : NEWLINE print VAR , listb_dict [ VAR ]", "class CreateFatherView ( CreateView ) : NEWLINE VAR = STRING NEWLINE VAR = Father NEWLINE VAR = FatherForm NEWLINE def get_success_url ( VAR ) : NEWLINE return reverse ( STRING ) NEWLINE def form_valid ( VAR , VAR ) : NEWLINE VAR = VAR . get_context_data ( ) NEWLINE VAR = VAR [ STRING ] NEWLINE if VAR . is_valid ( ) and VAR . is_valid ( ) : NEWLINE VAR . object = VAR . save ( ) NEWLINE return redirect ( VAR . get_success_url ( ) ) NEWLINE else : NEWLINE return VAR . render_to_response ( VAR . get_context_data ( VAR = VAR ) ) NEWLINE def form_invalid ( VAR , VAR ) : NEWLINE return VAR . render_to_response ( VAR . get_context_data ( VAR = VAR ) ) NEWLINE def get_context_data ( VAR , ** kwargs ) : NEWLINE VAR = super ( CreateFatherView , VAR ) . get_context_data ( ** kwargs ) NEWLINE if VAR . request . POST : NEWLINE VAR [ STRING ] = FatherForm ( VAR . request . POST ) NEWLINE VAR [ STRING ] = FatherInlineFormSet ( VAR . request . POST ) NEWLINE else : NEWLINE VAR [ STRING ] = Father ( ) NEWLINE VAR [ STRING ] = FatherInlineFormSet ( ) NEWLINE return VAR", "VAR = collections . defaultdict ( list ) NEWLINE for VAR in lst : NEWLINE VAR [ VAR [ NUMBER ] ] . append ( VAR ) NEWLINE VAR [ min ( VAR for VAR in VAR . keys ( ) if VAR != NUMBER ) ]", "with open ( STRING , STRING ) as VAR : NEWLINE VAR = STRING . join ( file_contents ) NEWLINE VAR . write ( VAR )", "df . groupby ( [ STRING ] ) [ STRING ] . apply ( list ) . values . tolist ( ) NEWLINE In [ NUMBER ] : df . groupby ( [ STRING ] ) [ STRING ] . apply ( list ) . values . tolist ( ) NEWLINE Out [ NUMBER ] : NEWLINE [ [ STRING , STRING , STRING ] , [ STRING ] , [ STRING ] , [ STRING , STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] ]", "In [ NUMBER ] : a = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE In [ NUMBER ] : concatenated_ranges ( a ) NEWLINE Out [ NUMBER ] : array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE In [ NUMBER ] : % timeit concatenated_ranges ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit junuxx ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit mr_e ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : a = np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , ) ) NEWLINE In [ NUMBER ] : % timeit concatenated_ranges ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit junuxx ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit mr_e ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : a = np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , ) ) NEWLINE In [ NUMBER ] : % timeit concatenated_ranges ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit junuxx ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit mr_e ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : a = np . random . randint ( NUMBER , NUMBER , size = ( NUMBER , ) ) NEWLINE In [ NUMBER ] : % timeit concatenated_ranges ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop NEWLINE In [ NUMBER ] : % timeit junuxx ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % timeit mr_e ( a ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "Is STRING of type STRING + adj ? True NEWLINE Is STRING of type STRING + verb ? False NEWLINE Is STRING of type STRING + adj ? False NEWLINE Is STRING of type STRING + verb ? True", "VAR = re . sub ( STRING , STRING , s ) NEWLINE VAR = BeautifulSoup ( VAR )", "import questions NEWLINE print STRING , questions . sports_questions [ NUMBER ]", "VAR = list ( itertools . chain ( list1 , list2 , list3 ) )", "import numpy as np NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . arange ( VAR , dtype = np . float ) NEWLINE VAR = np . arange ( VAR , dtype = np . float ) NEWLINE def old_function ( VAR , VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in xrange ( len ( VAR ) - VAR ) : NEWLINE for VAR in xrange ( VAR + NUMBER , VAR + VAR ) : NEWLINE VAR = VAR [ VAR ] / VAR [ VAR ] NEWLINE VAR = sum ( VAR [ VAR + NUMBER : VAR + NUMBER ] ) NEWLINE if ( VAR > NUMBER ) and ( VAR < NUMBER ) and ( VAR > NUMBER ) : NEWLINE VAR . append ( ( VAR , VAR , VAR , VAR ) ) NEWLINE return VAR NEWLINE def new_function ( VAR , VAR , VAR ) : NEWLINE VAR = [ ] NEWLINE for VAR in xrange ( VAR . size - VAR ) : NEWLINE VAR = VAR [ VAR + NUMBER : VAR + VAR ] . cumsum ( ) NEWLINE VAR = VAR [ VAR + NUMBER : VAR + VAR ] / VAR [ VAR ] NEWLINE VAR = ( VAR > NUMBER ) & ( VAR < NUMBER ) & ( VAR > NUMBER ) NEWLINE VAR = np . arange ( VAR + NUMBER , VAR + VAR ) [ VAR ] NEWLINE VAR = zip ( VAR . size * [ VAR ] , VAR , VAR [ VAR ] , VAR [ VAR ] ) NEWLINE VAR . extend ( VAR ) NEWLINE return VAR NEWLINE def new_function2 ( VAR , VAR , VAR ) : NEWLINE VAR , VAR = [ ] , [ ] NEWLINE VAR , VAR = [ ] , [ ] NEWLINE for VAR in xrange ( NUMBER , VAR ) : NEWLINE VAR = VAR NEWLINE VAR = VAR . size - VAR + VAR NEWLINE VAR . append ( VAR [ VAR : VAR ] ) NEWLINE VAR . append ( VAR [ VAR : VAR ] ) NEWLINE VAR . append ( np . arange ( VAR , VAR ) ) NEWLINE VAR . append ( np . arange ( VAR . size - VAR ) ) NEWLINE VAR = np . vstack ( VAR ) NEWLINE VAR = np . vstack ( VAR ) NEWLINE VAR = np . vstack ( VAR ) NEWLINE VAR = np . vstack ( VAR ) NEWLINE VAR = VAR . cumsum ( axis = NUMBER ) NEWLINE VAR = VAR / VAR [ : - VAR ] NEWLINE VAR = ( VAR > NUMBER ) & ( VAR < NUMBER ) & ( VAR > NUMBER ) NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = VAR [ VAR ] NEWLINE VAR = zip ( VAR . flat , VAR . flat , VAR . flat , VAR . flat ) NEWLINE return VAR NEWLINE VAR = old_function ( VAR , VAR , VAR ) NEWLINE VAR = new_function ( VAR , VAR , VAR ) NEWLINE VAR = new_function ( VAR , VAR , VAR ) NEWLINE print set ( VAR ) == set ( VAR ) NEWLINE print set ( VAR ) == set ( VAR )", "VAR = STRING NEWLINE print ( infer_spaces ( VAR ) )", "VAR = [ None , function1 , function2 , function3 , . . . ] NEWLINE for VAR in f_list [ start : ] : NEWLINE VAR ( )", "$ . / threads_input2 . py NEWLINE Interrupting text ! NEWLINE Interrupting text ! NEWLINE Interrupting text ! NEWLINE Interrupting text ! NEWLINE > WELL , PRINCE , Genoa and Lucca are now no more than private estates of the Bo NEWLINE naparte family . No , I warn you , that if you do not tell me we are at war ,", "VAR = Employees ( ) NEWLINE VAR . surname = STRING NEWLINE VAR . salary = NUMBER NEWLINE VAR . car_man = STRING NEWLINE VAR = Employees ( ) NEWLINE VAR . surname = STRING NEWLINE VAR . salary = NUMBER NEWLINE VAR . car_man = Daewoo", "VAR = [ [ STRING , NUMBER ] , [ STRING , NUMBER ] , [ STRING , NUMBER ] ] NEWLINE VAR = [ [ STRING , NUMBER ] , [ STRING , NUMBER ] , [ STRING , NUMBER ] ] NEWLINE print sorted ( VAR ) == sorted ( VAR )", "VAR = MyClass . create_default_parser ( )", "A [ np . lexsort ( ( A [ : , NUMBER ] , A [ : , NUMBER ] ) ) ]", "boost : : python : : object type = / * Py_TYPE * / ; NEWLINE boost : : python : : object object = type ( ) ; // isinstance ( object , type ) == True", "def options ( VAR ) : NEWLINE VAR . load ( STRING ) NEWLINE VAR . load ( STRING ) NEWLINE def configure ( VAR ) : NEWLINE VAR . load ( STRING ) NEWLINE VAR . load ( STRING ) NEWLINE def build ( VAR ) : NEWLINE print STRING % ( VAR . env . CC_NAME , VAR . env . CC ) NEWLINE print STRING % ( VAR . env . CXX_NAME , VAR . env . CXX )", "VAR = numpy . random . randint ( NUMBER , size = ( NUMBER , NUMBER ) ) NEWLINE VAR = np . column_stack ( ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , np . zeros ( NUMBER ) ) )", ">> > import re NEWLINE >> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > NEWLINE >> > VAR = re . compile ( STRING ) NEWLINE >> > VAR . sub ( STRING , VAR ) NEWLINE STRING NEWLINE >> > VAR . sub ( STRING , VAR ) NEWLINE STRING NEWLINE >> > VAR . sub ( STRING , VAR ) NEWLINE STRING", "import System . Windows as Module1 NEWLINE import ESS . MS . Framework . UIG . Mask as Module2 NEWLINE // . . . NEWLINE Module1 . WindowState NEWLINE Module2 . WindowState", "VAR = { STRING : hash , STRING : record . level , STRING : record . channel or STRING , STRING : STRING % ( record . filename , record . lineno ) , STRING : record . msg , STRING : record . module or STRING , STRING : NUMBER , STRING : False , STRING : app_id , STRING : sql , }", "from gi . repository import Gtk , Gdk NEWLINE def focus_in ( * args ) : NEWLINE print STRING NEWLINE def focus_out ( * args ) : NEWLINE print STRING NEWLINE VAR = Gtk . Window ( ) NEWLINE VAR . connect ( STRING , Gtk . main_quit ) NEWLINE VAR = Gdk . Screen . get_default ( ) NEWLINE VAR = Gtk . CssProvider ( ) NEWLINE VAR . load_from_path ( STRING ) NEWLINE VAR = Gtk . STYLE_PROVIDER_PRIORITY_USER NEWLINE VAR = Gtk . StyleContext ( ) NEWLINE VAR . add_provider_for_screen ( VAR , VAR , VAR ) NEWLINE VAR = Gtk . Entry ( text = STRING ) NEWLINE VAR = Gtk . Entry ( text = STRING ) NEWLINE VAR = Gtk . Button ( STRING ) NEWLINE VAR . connect ( STRING , focus_in ) NEWLINE VAR . connect ( STRING , focus_out ) NEWLINE VAR = Gtk . VBox ( ) NEWLINE VAR . add ( VAR ) NEWLINE VAR . add ( VAR ) NEWLINE VAR . add ( VAR ) NEWLINE VAR . add ( VAR ) NEWLINE VAR . show_all ( ) NEWLINE Gtk . main ( )", "VAR = [ VAR for VAR in os . listdir ( STRING ) if VAR . endswith ( STRING ) ]", "import csv NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . DictWriter ( VAR , fieldnames = VAR ) NEWLINE VAR . writeheader ( ) NEWLINE for VAR in VAR : NEWLINE VAR = { STRING : NUMBER , STRING : NUMBER , STRING : VAR } NEWLINE VAR . writerow ( VAR )", ">> > table . transpose ( ) NEWLINE >> > table . where ( STRING ) NEWLINE STRING", "VAR = [ [ [ [ NUMBER , STRING ] , [ NUMBER , STRING ] ] , [ NUMBER , STRING ] ] , [ NUMBER , STRING ] ] NEWLINE flatten ( VAR ) NEWLINE = > [ NUMBER , STRING , NUMBER , STRING , NUMBER , STRING , NUMBER , STRING ]", ">> > import pysvn NEWLINE >> > VAR = pysvn . Client ( ) NEWLINE >> > VAR . info ( STRING ) NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in < module > NEWLINE pysvn . _pysvn_2_7 . ClientError : STRING is not a working copy", "import bottle NEWLINE VAR = bottle . Bottle ( ) NEWLINE @ VAR . route ( STRING ) NEWLINE def config1 ( ) : NEWLINE return STRING", "from twisted . VAR . service import Application NEWLINE from thatmodule import ThingDoer NEWLINE VAR = Application ( STRING ) NEWLINE ThingDoer ( ) . setServiceParent ( VAR )", "VAR = build_cdf ( { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } ) ; NEWLINE VAR = [ sample_from_cdf ( VAR ) for VAR in range ( NUMBER , NUMBER ) ] ; NEWLINE print ( len ( [ VAR for VAR in VAR if VAR == STRING ] ) ) NEWLINE print ( len ( [ VAR for VAR in VAR if VAR == STRING ] ) ) NEWLINE print ( len ( [ VAR for VAR in VAR if VAR == STRING ] ) )", "random_combinations_sample ( a_large_set , NUMBER , NUMBER )", "import json NEWLINE import zmq NEWLINE VAR = { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , } NEWLINE VAR = zmq . Context ( ) NEWLINE VAR = VAR . VAR ( zmq . DEALER ) NEWLINE VAR . connect ( STRING ) NEWLINE VAR . send ( json . dumps ( VAR ) ) NEWLINE print VAR . recv ( )", "Traceback ( most recent call last ) : NEWLINE File STRING , VAR NUMBER , in < module > NEWLINE replace_3_line ( STRING ) NEWLINE File STRING , VAR NUMBER , in replace_3_line NEWLINE for VAR in old_file : NEWLINE File STRING , VAR NUMBER , in decode NEWLINE return codecs . charmap_decode ( input , self . errors , decoding_table ) [ NUMBER ] NEWLINE UnicodeDecodeError : STRING codec can ' t decode byte NUMBER in position NUMBER : character maps to < undefined >", "reference , name , house NEWLINE NUMBER A , john , NUMBER NEWLINE NUMBER R , bill , NUMBER NEWLINE RT48 , kate , NUMBER NEWLINE NUMBER A , harry , NUMBER", "[ [ [ regex ( VAR , VAR ) for VAR in VAR ] for VAR in VAR ] for VAR , VAR in zip ( a , b ) ]", "print zip ( * data )", "D : \\ temp > waf . bat configure build - - check - c - compiler = gcc - - check - cxx - compiler = g + + NEWLINE Setting top to : D : \\ temp NEWLINE Setting out to : D : \\ temp \\ build NEWLINE Checking for STRING ( c compiler ) : c : \\ tools \\ gcc \\ bin \\ gcc . exe NEWLINE Checking for STRING ( c + + compiler ) : c : \\ tools \\ gcc \\ bin \\ g + + . exe NEWLINE STRING finished successfully ( NUMBER s ) NEWLINE Waf : Entering directory ` D : \\ temp \\ build ' NEWLINE Compiler is CC_NAME gcc CC [ STRING ] NEWLINE Compiler is CXX_NAME gcc CXX [ STRING ] NEWLINE Waf : Leaving directory ` D : \\ temp \\ build ' NEWLINE STRING finished successfully ( NUMBER s )", "VAR = measurements . sum ( z2 , lw , index = arange ( lw . max ( ) + NUMBER ) ) NEWLINE print VAR NEWLINE [ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER ]", ">> > from collections import Counter NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > Counter ( VAR ) - Counter ( VAR ) NEWLINE Counter ( { STRING : NUMBER , STRING : NUMBER } ) NEWLINE >> > list ( ( Counter ( VAR ) - Counter ( VAR ) ) . elements ( ) ) NEWLINE [ STRING , STRING , STRING ]", "VAR = [ float ( sum ( VAR ) ) / len ( VAR ) for VAR , VAR in pairs ]", "[ STRING , STRING , STRING ] NEWLINE NUMBER NEWLINE [ STRING , STRING ]", "STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING", "VAR = Popen ( . . . ) NEWLINE VAR = psutil . Process ( VAR . pid ) NEWLINE for VAR in VAR . get_children ( ) : NEWLINE VAR . send_signal ( signal . SIGINT )", "while True : NEWLINE VAR = input ( STRING ) NEWLINE if ( VAR == STRING ) : NEWLINE method1 ( ) NEWLINE if ( VAR == STRING ) : NEWLINE method2 ( )", "def traverse ( obj , prev_path = STRING , path_repr = STRING . format ) NEWLINE if isinstance ( obj , dict ) : NEWLINE VAR = obj . items ( ) NEWLINE elif isinstance ( obj , list ) : NEWLINE VAR = enumerate ( obj ) NEWLINE else : NEWLINE yield prev_path , obj NEWLINE return NEWLINE for VAR , VAR in VAR : NEWLINE for VAR in traverse ( VAR , path_repr ( prev_path , VAR ) , path_repr ) : NEWLINE yield VAR", "pip install fpdf", ">> > import json NEWLINE >> > VAR = { STRING : STRING , STRING : NUMBER } NEWLINE >> > print json . dumps ( VAR ) NEWLINE { STRING : STRING , STRING : NUMBER }", "self . vl_seatView . removeWidget ( self . sv_widgets [ purchase . id ] ) NEWLINE self . sv_widgets [ purchase . id ] . setParent ( None ) NEWLINE del self . sv_widgets [ purchase . id ]", "import numpy as np NEWLINE VAR = np . array ( [ NUMBER , NUMBER , - NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , NUMBER , - NUMBER , NUMBER , - NUMBER , NUMBER , NUMBER ] ) NEWLINE ( ( VAR [ : - NUMBER ] * VAR [ NUMBER : ] ) < NUMBER ) . sum ( )", "Nickname NEWLINE Car", "VAR = [ STRING , STRING , STRING , STRING ] NEWLINE print ( STRING . format ( STRING , STRING , STRING , STRING ) ) NEWLINE print ( STRING . format ( VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] ) )", ">> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ]", "import multiprocessing as mp NEWLINE def mkproc ( VAR ) : NEWLINE VAR , VAR = mp . Pipe ( ) NEWLINE VAR = mp . Process ( VAR , args = ( VAR , ) ) NEWLINE VAR . start ( ) NEWLINE return ( VAR , VAR )", "VAR = STRING NEWLINE for VAR in list : NEWLINE VAR = VAR NEWLINE if VAR . startswith ( STRING ) : NEWLINE VAR = VAR [ NUMBER : ] NEWLINE if VAR . startswith ( VAR ) or VAR . startswith ( VAR ) : NEWLINE . . . do something . . .", "/ accounting ? id = NUMBER NEWLINE / downloadpdf ? id = NUMBER & type = pdf NEWLINE / downloadpdf ? id = NUMBER & type = file", "VAR = BeautifulSoup ( html ) NEWLINE for VAR in VAR . findAll ( STRING , STRING ) : NEWLINE print VAR . text", "chrom , pos , freqC_in_A , . . . , freqG_in_A , freq_dot_in_A freqC_in_B , . . . , freqG_in_B , freq_dot_in_B", "echo foo | NEWLINE firstCommand - | somePythonRoutine - | NEWLINE secondCommand - | anotherPythonRoutine - | NEWLINE thirdCommand - > finalOutput", "scrapy shell http : // blog . scrapy . org / rss . xml", "VAR = response . meta [ STRING ]", "with open ( STRING r ' ) as pickle_in : NEWLINE VAR = pickle . load ( pickle_in )", "applyfs ( [ mean , std , var , fxn4 . . . ] , mylist )", "< ADDRESS > NEWLINE < STREET > One Main Street < / STREET > NEWLINE < STREET1 > One Second Street < / STREET1 > NEWLINE < CITY > Gotham City < / CITY > NEWLINE < ZIP > NUMBER NUMBER < / ZIP > NEWLINE < PHONE > NUMBER - NUMBER - NUMBER < / PHONE > NEWLINE < COUNTRY > USA < / COUNTRY > NEWLINE < / ADDRESS >", "$ python tests . py - v NEWLINE Test parsing of file1 . html . . . ok NEWLINE Test parsing of file2 . html . . . ok NEWLINE Test parsing of file3 . html . . . ok NEWLINE Test parsing of file4 . html . . . ok NEWLINE Test parsing of tests / file5 . html . . . ok NEWLINE Test parsing of tests / file6 . html . . . FAIL NEWLINE Test parsing of tests / file7 . html . . . ok NEWLINE Test parsing of tests / file8 . html . . . ok NEWLINE == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == NEWLINE FAIL : Test parsing of tests / file6 . html NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in test_file NEWLINE self . assertEquals ( NUMBER , NUMBER , STRING ) NEWLINE AssertionError : Parsing failed . NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE Ran NUMBER tests in NUMBER s NEWLINE FAILED ( failures = NUMBER )", "NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER , NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER , NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER , - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER , - NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER , NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER , - NUMBER", "from collections import defaultdict NEWLINE VAR = defaultdict ( set ) NEWLINE for VAR in datasource : NEWLINE VAR [ key ] . add ( VAR )", "foo , bar | baz , spam", "U_k ( n ) + D_k ( n ) = NUMBER * U_k ( n ) = NUMBER * ( sum U_k ( n , VAR ) for VAR in NUMBER . . . k ) .", "NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "url ( STRING , . . . . ) ,", "( S ( NP I ) ( VP ( V shot ) ( NP ( NUM NUMBER ) ( N elephants ) ) ) )", "import svmutil NEWLINE VAR = svmutil . svm_parameter ( STRING ) NEWLINE . . .", "print s . split ( STRING )", ">> > df NEWLINE A B abc1 abc2 abc3 abc4 NEWLINE NUMBER NUMBER NUMBER x r a d NEWLINE NUMBER NUMBER NUMBER y d b e NEWLINE NUMBER NUMBER NUMBER z e c r NEWLINE NUMBER NUMBER NUMBER r g d f NEWLINE NUMBER NUMBER NUMBER z z z z", "import datetime NEWLINE VAR = datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = VAR + datetime . timedelta ( NUMBER , NUMBER ) NEWLINE print VAR . time ( ) NEWLINE print VAR . time ( )", "from App . VAR import getConfiguration NEWLINE VAR = getattr ( getConfiguration ( ) , STRING , { } ) NEWLINE VAR = VAR . get ( STRING , { } ) NEWLINE VAR = VAR . get ( STRING )", "-", "class Time : NEWLINE def __init__ ( VAR , VAR = NUMBER , VAR = NUMBER , VAR = NUMBER , VAR = STRING ) : NEWLINE if VAR == STRING : NEWLINE VAR = now ( ) NEWLINE VAR . hour = VAR . hour NEWLINE VAR . min = VAR . min NEWLINE VAR . sec = VAR . sec NEWLINE else : NEWLINE VAR = abs ( NUMBER * VAR + NUMBER * VAR + VAR ) NEWLINE VAR . hour = VAR // NUMBER NEWLINE VAR . min = VAR // NUMBER % NUMBER NEWLINE VAR . sec = VAR % NUMBER", "print ( [ d2 [ VAR ] for VAR in d2 . viewkeys ( ) - d1 ] ) NEWLINE print ( [ d1 [ VAR ] for VAR in d1 . viewkeys ( ) - d2 ] )", "import glob NEWLINE VAR = [ VAR for VAR in glob . glob ( STRING ) if STRING in VAR or STRING in VAR or STRING in VAR ] NEWLINE for VAR in VAR : NEWLINE print VAR", "df [ STRING ] = np . where ( df . groupby ( STRING ) . cumcount ( ) < NUMBER , NUMBER , df [ STRING ] )", "from collections import defaultdict NEWLINE VAR = [ STRING , NUMBER , NUMBER , NUMBER , STRING , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = defaultdict ( list ) NEWLINE VAR = VAR [ NUMBER ] NEWLINE for VAR in VAR [ NUMBER : ] : NEWLINE if type ( VAR ) != type ( VAR ) : NEWLINE VAR [ VAR ] . append ( VAR ) NEWLINE else : NEWLINE VAR = VAR NEWLINE print ( VAR )", "import datetime , pytz NEWLINE VAR = STRING NEWLINE VAR = datetime . datetime . VAR ( pytz . timezone ( VAR ) )", ">> > [ itemgetter ( NUMBER , NUMBER ) ( VAR ) for VAR in a ] NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "> cmd / c STRING", "random . sample ( itertools . combinations ( a_large_set , NUMBER ) , NUMBER )", ">> > import heapq NEWLINE >> > heapq . nsmallest ( NUMBER , c , key = sum ) NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "VAR = range ( NUMBER ) NEWLINE VAR = NUMBER NEWLINE dict ( ( VAR * VAR ** NUMBER + VAR * VAR + VAR , ( VAR , VAR , VAR ) ) for VAR in VAR for VAR in VAR for VAR in VAR )", "makedir ( datetime . date . today ( ) . strftime ( STRING ) )", "frequency NEWLINE good NUMBER NEWLINE pathetic NUMBER NEWLINE average movie NUMBER NEWLINE movie bad NUMBER NEWLINE watch NUMBER NEWLINE good movie NUMBER NEWLINE watch good NUMBER NEWLINE good acting NUMBER NEWLINE must NUMBER NEWLINE movie good NUMBER NEWLINE pathetic avoid NUMBER NEWLINE bad acting NUMBER NEWLINE average NUMBER NEWLINE must watch NUMBER NEWLINE acting NUMBER NEWLINE bad NUMBER NEWLINE movie NUMBER NEWLINE avoid NUMBER", ">> > for VAR , VAR in enumerate ( range ( NUMBER ) ) : NEWLINE M [ : , VAR ] = fnx ( NUMBER ) NEWLINE >> > M NEWLINE arraydef sumColumns1 ( VAR ) : NEWLINE import csv NEWLINE with open ( VAR ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE VAR = lambda VAR : NUMBER if VAR == STRING else int ( VAR ) NEWLINE VAR = reduce ( lambda VAR , VAR : [ VAR ( VAR ) + VAR ( VAR ) for VAR , VAR in zip ( VAR , VAR ) ] , VAR ) NEWLINE return dict ( zip ( VAR , VAR ) )", "for VAR , VAR in zipMap ( get_handler , the_list ) : NEWLINE . . .", "def merge_dicts ( VAR ) : NEWLINE VAR = { } NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR = ( VAR [ STRING ] , VAR [ STRING ] ) NEWLINE try : NEWLINE VAR [ VAR ] [ STRING ] . append ( VAR [ STRING ] ) NEWLINE except KeyError : NEWLINE VAR = { STRING : VAR [ STRING ] , STRING : VAR [ STRING ] , STRING : [ VAR [ STRING ] ] , STRING : VAR [ STRING ] } NEWLINE VAR [ VAR ] = VAR NEWLINE VAR . append ( VAR ) NEWLINE return VAR", "python_run my_cool_script . py - - foo = bar", "if sys . version_info . major == NUMBER and sys . version_info . minor == NUMBER : NEWLINE print ( STRING )", "$ twistd - ny thatfile . tac", "import matplotlib . pyplot as plt NEWLINE VAR , VAR = plt . subplots ( NUMBER ) NEWLINE plt . subplot2grid ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , colspan = NUMBER ) NEWLINE plt . plot ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE plt . subplot2grid ( ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , colspan = NUMBER ) NEWLINE plt . plot ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE plt . show ( )", "VAR = STRING NEWLINE for VAR , VAR in d . items ( ) : NEWLINE VAR = STRING . format ( VAR , STRING . join ( VAR ) ) NEWLINE VAR += VAR NEWLINE print VAR", ">> > help ( sys . displayhook ) NEWLINE Help on built - in function displayhook in module sys : NEWLINE displayhook ( . . . ) NEWLINE displayhook ( object ) - > None NEWLINE Print an object to sys . stdout and also save it in builtins . _", "VAR = wx . richtext . RichTextCtrl ( self , style = wx . VSCROLL | wx . HSCROLL | wx . NO_BORDER ) NEWLINE VAR . BeginTextColour ( ( NUMBER , NUMBER , NUMBER ) ) NEWLINE VAR . WriteText ( STRING ) NEWLINE VAR . EndTextColour ( ) NEWLINE VAR . Newline ( )", "with open ( STRING ) as VAR : NEWLINE print ( sum ( float ( VAR ) for VAR in VAR ) )", "def customize_string ( VAR , VAR ) : NEWLINE if STRING in VAR : NEWLINE VAR = VAR . split ( ) NEWLINE VAR [ NUMBER ] += VAR NEWLINE VAR [ - NUMBER ] += VAR NEWLINE return STRING . join ( VAR ) NEWLINE else : NEWLINE return VAR", ">> > [ list ( list ( VAR ) for VAR in VAR ) for VAR in set ( [ tuple ( tuple ( x ) for x in VAR ) for VAR in my_list ] ) ] NEWLINE [ [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ]", "if is_iterable ( test ) : NEWLINE return [ do_stuff ( VAR ) for VAR in test ] NEWLINE else : NEWLINE return [ do_stuff ( test ) ]", "useradd - m - p PASSWORD", "def post ( VAR ) : NEWLINE return [ VAR . request . get ( VAR ) for VAR in [ STRING , STRING ] ]", ">> > a NEWLINE [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > VAR = [ ] NEWLINE >> > for VAR in a : NEWLINE VAR += VAR NEWLINE >> > VAR NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> >", ">> > VAR = vectorizer . get_feature_names ( ) NEWLINE >> > VAR = np . abs ( VAR ) NEWLINE >> > for VAR in range ( km . n_clusters ) : NEWLINE . . . VAR = np . argsort ( VAR [ VAR ] ) [ - NUMBER : ] NEWLINE . . . print ( zip ( [ VAR [ VAR ] for VAR in VAR ] , VAR [ VAR , VAR ] ) ) NEWLINE . . . NEWLINE [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ] NEWLINE [ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "VAR = read_file ( files [ NUMBER ] )", ">> NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE >> The slowest run took NUMBER times longer than the fastest . This could mean that an intermediate result is being cached NEWLINE >> NUMBER loops , best of NUMBER : NUMBER s per loop", "Content - Type : multipart / form - data ; boundary = NUMBER f9d948e26f140a289a9e8297c332a91 NEWLINE - - NUMBER ca5f18576514b069c33bc436ce6e2cd NEWLINE Content - Disposition : form - data ; name = STRING ; filename = STRING NEWLINE Content - Type : image / png NEWLINE [ . . image data . . ] NEWLINE - - NUMBER ca5f18576514b069c33bc436ce6e2cd NEWLINE Content - Disposition : form - data ; name = STRING NEWLINE python NEWLINE - - NUMBER ca5f18576514b069c33bc436ce6e2cd NEWLINE Content - Disposition : form - data ; name = STRING NEWLINE text NEWLINE - - NUMBER ca5f18576514b069c33bc436ce6e2cd NEWLINE Content - Disposition : form - data ; name = STRING NEWLINE Pictures NEWLINE - - NUMBER ca5f18576514b069c33bc436ce6e2cd - -", "import lxml . etree NEWLINE import urllib2 NEWLINE VAR = STRING NEWLINE VAR = lxml . etree . parse ( urllib2 . urlopen ( VAR ) ) . getroot ( ) NEWLINE print dict ( ( ( VAR . tag , VAR . text ) for VAR in VAR ) )", "import foo_core NEWLINE import gtk NEWLINE def main ( ) NEWLINE if __name__ == STRING : NEWLINE main ( )", "logsumexp ( ( b , NUMBER ) ) NEWLINE = max ( ( b , NUMBER ) ) + log ( exp [ ( b , NUMBER ) - max ( ( b , NUMBER ) ) ] ) NEWLINE = max ( max ( b ) , NUMBER ) + log ( exp [ ( b , NUMBER ) - max ( max ( b ) , NUMBER ) ] ) NEWLINE = max ( max ( b ) , NUMBER ) + log ( exp [ b - max ( max ( b ) , NUMBER ) ] + exp [ NUMBER - max ( max ( b ) , NUMBER ) ] ) NEWLINE = max ( max ( b ) , NUMBER ) + log ( exp [ b - max ( max ( b ) , NUMBER ) ] + k exp [ - max ( max ( b ) , NUMBER ) ] )", "- - make sure to escape properly if needed NEWLINE set pythonvar to STRING NEWLINE set outputvar to ( do shell script STRING & pythonvar & STRING )", "plt . tight_layout ( )", "[ < li class = STRING > < a href = STRING title = STRING > < span style = STRING title = STRING > t < / span > < / a > < / li > ]", "< users > NEWLINE < user name = STRING highscore = STRING averagescore = STRING NEWLINE VAR = STRING attempt2 = STRING attempt3 = STRING > NEWLINE < / user > NEWLINE < user > NEWLINE . . . NEWLINE < / users >", ">> > repr ( example ) NEWLINE STRING NEWLINE >> > print ( repr ( example ) ) NEWLINE STRING", "VAR = { STRING : { STRING : lambda VAR : ( STRING , STRING ) , STRING : lambda VAR : ( STRING , STRING ) , None : lambda VAR : ( STRING , VAR ) } , STRING : { STRING : lambda VAR : ( STRING , STRING ) , STRING : lambda VAR : ( STRING , STRING ) , None : lambda VAR : ( STRING , VAR ) } , STRING : { STRING : lambda VAR : ( STRING , STRING ) , STRING : lambda VAR : ( STRING , STRING ) , None : lambda VAR : ( STRING , VAR ) } , STRING : { None : lambda VAR : ( STRING , VAR ) } } NEWLINE def reduce ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE VAR , VAR = VAR [ VAR ] . get ( VAR , VAR [ VAR ] [ None ] ) ( VAR ) NEWLINE VAR += VAR NEWLINE return VAR NEWLINE VAR = STRING NEWLINE print reduce ( VAR )", "def addTerm ( VAR , VAR ) : NEWLINE VAR = VAR . tree NEWLINE for VAR in VAR : NEWLINE VAR = VAR . lower ( ) NEWLINE if re . match ( STRING , VAR ) : NEWLINE VAR = VAR [ NUMBER ] . setdefault ( VAR , [ { } , None ] ) NEWLINE VAR [ NUMBER ] = VAR", "( ? < ! \\ d ) \\ d { NUMBER } - \\ d { NUMBER , NUMBER } ( ? ! \\ d ) ( ? ! Dog )", "class MyClass ( object ) : NEWLINE VAR = None NEWLINE def __setattr__ ( VAR , VAR , VAR ) : NEWLINE super ( ) . __setattr__ ( STRING , VAR ) NEWLINE print ( STRING )", ">> > VAR = { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } NEWLINE >> > sorted ( VAR , key = lambda VAR : int ( VAR . split ( ) [ NUMBER ] ) ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "def nested ( VAR , VAR = NUMBER ) : NEWLINE for VAR , VAR in itertools . groupby ( VAR , lambda VAR : VAR . split ( STRING ) [ VAR ] ) : NEWLINE yield next ( VAR ) NEWLINE VAR = list ( nested ( VAR , VAR + NUMBER ) ) NEWLINE if VAR : NEWLINE yield VAR", "from matplotlib import pyplot NEWLINE import numpy , weakref NEWLINE VAR = numpy . arange ( int ( NUMBER ) ) NEWLINE VAR = pyplot . Figure ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = VAR . plot ( VAR ) NEWLINE VAR = VAR . pop ( NUMBER ) NEWLINE VAR = weakref . ref ( VAR ) NEWLINE print VAR NEWLINE VAR . remove ( ) NEWLINE print VAR NEWLINE del VAR NEWLINE print VAR", "def voting ( request ) : NEWLINE VAR = { STRING : Entry . objects . order_by ( STRING ) [ : NUMBER ] , STRING : Entry . objects . order_by ( STRING , STRING ) [ : NUMBER ] , STRING : Entry . objects . order_by ( STRING , STRING ) [ : NUMBER ] , STRING : Entry . objects . order_by ( STRING , STRING ) [ : NUMBER ] , STRING : Entry . objects . unvoted_or_random ( ) , } NEWLINE return render ( request , STRING , VAR ) ; NEWLINE def voteup ( request ) : NEWLINE VAR = request . GET . get ( STRING ) NEWLINE if request . method == STRING : NEWLINE VAR = Entry . objects . get ( pk = VAR ) NEWLINE VAR . score += NUMBER NEWLINE VAR . voted = True NEWLINE VAR . save ( ) NEWLINE else : NEWLINE pass NEWLINE return HttpResponse ( STRING ) NEWLINE def votedown ( request ) : NEWLINE VAR = request . GET . get ( STRING ) NEWLINE if request . method == STRING : NEWLINE VAR = Entry . objects . get ( pk = VAR ) NEWLINE VAR . score -= NUMBER NEWLINE VAR . voted = True NEWLINE VAR . save ( ) NEWLINE else : NEWLINE pass NEWLINE return HttpResponse ( STRING )", "final . append ( { uniq_ident : vocab } )", "( STRING , STRING ) NEWLINE ( STRING , STRING ) NEWLINE ( STRING , STRING ) NEWLINE ( STRING , STRING )", "// This is the data you want to pass to Python NEWLINE $ data = array ( STRING , STRING , STRING ) ; NEWLINE // Execute the python script with the JSON data NEWLINE $ result = shell_exec ( STRING . escapeshellarg ( json_encode ( $ data ) ) ) ; NEWLINE // Decode the result NEWLINE $ resultData = json_decode ( $ result , true ) ; NEWLINE // This will contain : array ( STRING = > STRING ) NEWLINE var_dump ( $ resultData ) ;", "colors [ i * chunks // len ( nums ) % len ( colors ) ] NEWLINE ^ index of num in nums NEWLINE ^ ^ multiply by chunks then later dividing by len is the NEWLINE same as dividing by len / chunks NEWLINE ^ explicit integer divide is important for indexing NEWLINE ^ ensures that there is no index error if NEWLINE chunks > len ( colors ) ( check example )", "df [ STRING ] = df [ STRING ] / df [ STRING ] . astype ( STRING )", "while VAR [ NUMBER ] != STRING : NEWLINE VAR = raw_input ( STRING ) . split ( ) NEWLINE try : NEWLINE VAR , VAR = VAR [ NUMBER ] . capitalize ( ) , VAR [ NUMBER ] . lower ( ) NEWLINE print STRING % ( VAR , VAR , people [ VAR ] [ VAR ] ) NEWLINE except KeyError : NEWLINE print wrong ,", "VAR = BeautifulSoup ( html2 ) NEWLINE VAR = VAR . body . extract ( ) NEWLINE div . append ( VAR ) NEWLINE div . body . unwrap ( ) NEWLINE print div", "In [ NUMBER ] : NEWLINE VAR = np . array ( [ NUMBER , np . NaN , NUMBER , np . NaN ] ) NEWLINE VAR NEWLINE Out [ NUMBER ] : NEWLINE array ( [ NUMBER , nan , NUMBER , nan ] ) NEWLINE In [ NUMBER ] : NEWLINE print ( np . nanmin ( VAR , axis = NUMBER ) , np . nanmax ( VAR , axis = NUMBER ) ) NEWLINE NUMBER NUMBER", "import os NEWLINE def file_renamer ( VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE for ( VAR , VAR ) in VAR : NEWLINE VAR = VAR [ NUMBER : NUMBER ] NEWLINE if VAR == VAR : NEWLINE os . rename ( VAR , VAR ) NEWLINE print STRING % ( VAR , VAR ) NEWLINE if __name__ == STRING : NEWLINE VAR = os . getcwd ( ) NEWLINE VAR = os . VAR . abspath ( VAR ) NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = os . VAR . join ( VAR , VAR ) NEWLINE VAR = [ ] NEWLINE with open ( VAR ) as VAR : NEWLINE for VAR in VAR : NEWLINE VAR = VAR . strip ( ) . split ( STRING ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = os . listdir ( VAR ) NEWLINE file_renamer ( VAR , VAR )", "VAR = [ [ STRING , [ STRING , STRING , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ] , [ STRING , STRING , [ STRING , STRING , STRING ] ] , [ STRING , STRING , [ STRING , STRING , STRING ] , [ STRING , STRING , STRING ] ] , [ STRING , STRING , [ STRING , STRING , STRING ] ] ] ] NEWLINE def un_nest ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE if type ( VAR ) is list : NEWLINE VAR . extend ( un_nest ( VAR ) ) NEWLINE else : NEWLINE VAR . append ( VAR ) NEWLINE if VAR : NEWLINE VAR . insert ( NUMBER , VAR ) NEWLINE return VAR NEWLINE print ( un_nest ( VAR ) )", ">> > split_string ( STRING , STRING ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "[ zart @ feena ~ ] $ mkdir ziplib - demo NEWLINE [ zart @ feena ~ ] $ cd ziplib - demo NEWLINE [ zart @ feena ziplib - demo ] $ virtualenv . NEWLINE New python executable in . / bin / python NEWLINE Installing setuptools . . . . . . . . . . . . . done . NEWLINE Installing pip . . . . . . . . . . . . . . . done .", "range ( NUMBER , NUMBER , NUMBER ) + [ NUMBER ]", ">> > VAR = [ pygame . Rect ( NUMBER , NUMBER , NUMBER , NUMBER ) , pygame . Rect ( NUMBER , NUMBER , NUMBER , NUMBER ) ] NEWLINE >> > next ( ( VAR for ( VAR , VAR ) in enumerate ( VAR ) if VAR . collidepoint ( NUMBER , NUMBER ) ) , - NUMBER ) NEWLINE NUMBER NEWLINE >> > next ( ( VAR for ( VAR , VAR ) in enumerate ( VAR ) if VAR . collidepoint ( NUMBER , NUMBER ) ) , - NUMBER ) NEWLINE - NUMBER NEWLINE >> >", ">> > import itertools >> > d = { STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING ] } NEWLINE >> > for VAR in itertools . product ( * [ d [ k ] for k in sorted ( d . keys ( ) ) ] ) : NEWLINE . . . print STRING . join ( VAR ) NEWLINE . . . NEWLINE asbf NEWLINE asby NEWLINE asbu NEWLINE asbn NEWLINE asbg NEWLINE asof NEWLINE asoy NEWLINE asou NEWLINE ason NEWLINE asog NEWLINE asef NEWLINE . . . NEWLINE snkf NEWLINE snky NEWLINE snku NEWLINE snkn NEWLINE snkg", "zip ( colours , map ( lambda VAR : len ( filter ( lambda VAR : VAR == VAR , c ) ) , colours ) )", "Num Bits : NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE bin NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE bin16 NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE constantin_bin NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE num_bin NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE Python3 ' s bin NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "VAR = table . find ( STRING )", "VAR = list ( s - set ( last5 ) )", ">> > print ( MyFloat ( NUMBER ) ) NEWLINE NUMBER NEWLINE >> > print ( MyFloat ( - NUMBER ) ) NEWLINE - NUMBER NEWLINE >> > print ( STRING , format ( MyFloat ( NUMBER ) ) ) NEWLINE some text NUMBER some more text NEWLINE >> > print ( STRING , format ( MyFloat ( NUMBER ) ) ) NEWLINE some text + NUMBER some more text", "import csv NEWLINE VAR = NUMBER NEWLINE with open ( STRING , STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = csv . writer ( VAR ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if len ( VAR ) == VAR : NEWLINE VAR . writerow ( VAR ) NEWLINE else : NEWLINE print STRING % VAR", "if br == True : NEWLINE break NEWLINE else : NEWLINE pass NEWLINE if br == True : NEWLINE break NEWLINE else : NEWLINE pass", "test_egg ( __main__ . TestFoo ) . . . setup NEWLINE teardown NEWLINE ok NEWLINE test_ham ( __main__ . TestFoo ) . . . skipped STRING NEWLINE test_spam ( __main__ . TestFoo ) . . . skipped STRING NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE Ran NUMBER tests in NUMBER s NEWLINE OK ( skipped = NUMBER ) NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE Ran NUMBER tests in NUMBER s NEWLINE OK ( skipped = NUMBER )", "VAR = ( VAR for VAR in propadd if VAR [ NUMBER ] == row1 [ NUMBER ] and harversine ( custx , custy , VAR [ NUMBER ] , VAR [ NUMBER ] ) < NUMBER ) NEWLINE VAR = ( VAR for VAR in custadd if VAR [ NUMBER ] == row1 [ NUMBER ] ) NEWLINE VAR = ( VAR for VAR in numlist if re . search ( STRING , row1 [ NUMBER ] ) is not None and VAR [ NUMBER ] == re . search ( STRING , row1 [ NUMBER ] ) . group ( ) ) NEWLINE VAR = ( STRING , STRING , STRING ) NEWLINE for VAR , VAR in enumerate ( ( VAR , VAR , VAR ) ) : NEWLINE VAR = list ( VAR ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE row1 [ NUMBER ] = VAR [ NUMBER ] [ NUMBER ] NEWLINE row1 [ NUMBER ] = VAR [ NUMBER ] [ NUMBER ] NEWLINE row1 [ NUMBER ] = VAR [ VAR ] NEWLINE break", ", reference , name , house NEWLINE NUMBER , NUMBER A , john , NUMBER NEWLINE NUMBER , NUMBER A , harry , NUMBER", "[ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( - NUMBER , - NUMBER , - NUMBER ) , ( - NUMBER , - NUMBER , - NUMBER ) , ( - NUMBER , - NUMBER , - NUMBER ) , ( - NUMBER , - NUMBER , - NUMBER ) ]", "from threading import Thread NEWLINE class myClassA ( Thread ) : NEWLINE def __init__ ( VAR ) : NEWLINE Thread . __init__ ( VAR ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( ) NEWLINE def run ( VAR ) : NEWLINE while True : NEWLINE print STRING NEWLINE class myClassB ( Thread ) : NEWLINE def __init__ ( VAR ) : NEWLINE Thread . __init__ ( VAR ) NEWLINE VAR . daemon = True NEWLINE VAR . start ( ) NEWLINE def run ( VAR ) : NEWLINE while True : NEWLINE print STRING NEWLINE myClassA ( ) NEWLINE myClassB ( ) NEWLINE while True : NEWLINE pass", "i NEWLINE ii NEWLINE ixi NEWLINE iii NEWLINE ixxi NEWLINE ixii NEWLINE iixi NEWLINE iiii NEWLINE ixxxi NEWLINE ixxii NEWLINE ixixi NEWLINE ixiii NEWLINE iixxi NEWLINE iixii NEWLINE iiixi NEWLINE iiiii NEWLINE order : NUMBER ipattern : i npattern : n_ixxxx - > n_ixxxx = self . i ( w1 ) NEWLINE order : NUMBER ipattern : i npattern : n_xixxx - > n_xixxx = self . i ( w2 ) NEWLINE order : NUMBER ipattern : i npattern : n_xxixx - > n_xxixx = self . i ( w3 ) NEWLINE order : NUMBER ipattern : i npattern : n_xxxix - > n_xxxix = self . i ( w4 ) NEWLINE order : NUMBER ipattern : i npattern : n_xxxxi - > n_xxxxi = self . i ( w5 ) NEWLINE order : NUMBER ipattern : ii npattern : n_iixxx - > n_iixxx = self . ii ( w1 , w2 ) NEWLINE order : NUMBER ipattern : ii npattern : n_xiixx - > n_xiixx = self . ii ( w2 , w3 ) NEWLINE order : NUMBER ipattern : ii npattern : n_xxiix - > n_xxiix = self . ii ( w3 , w4 ) NEWLINE order : NUMBER ipattern : ii npattern : n_xxxii - > n_xxxii = self . ii ( w4 , w5 ) NEWLINE order : NUMBER ipattern : ixi npattern : n_ixixx - > n_ixixx = self . ixi ( w1 , w3 ) NEWLINE order : NUMBER ipattern : ixi npattern : n_xixix - > n_xixix = self . ixi ( w2 , w4 ) NEWLINE order : NUMBER ipattern : ixi npattern : n_xxixi - > n_xxixi = self . ixi ( w3 , w5 ) NEWLINE order : NUMBER ipattern : ixxi npattern : n_ixxix - > n_ixxix = self . ixxi ( w1 , w4 ) NEWLINE order : NUMBER ipattern : ixxi npattern : n_xixxi - > n_xixxi = self . ixxi ( w2 , w5 ) NEWLINE order : NUMBER ipattern : ixxxi npattern : n_ixxxi - > n_ixxxi = self . ixxxi ( w1 , w5 ) NEWLINE order : NUMBER ipattern : iii npattern : n_iiixx - > n_iiixx = self . iii ( w1 , w2 , w3 ) NEWLINE order : NUMBER ipattern : iii npattern : n_xiiix - > n_xiiix = self . iii ( w2 , w3 , w4 ) NEWLINE order : NUMBER ipattern : iii npattern : n_xxiii - > n_xxiii = self . iii ( w3 , w4 , w5 ) NEWLINE order : NUMBER ipattern : iixi npattern : n_iixix - > n_iixix = self . iixi ( w1 , w2 , w4 ) NEWLINE order : NUMBER ipattern : iixi npattern : n_xiixi - > n_xiixi = self . iixi ( w2 , w3 , w5 ) NEWLINE order : NUMBER ipattern : iixxi npattern : n_iixxi - > n_iixxi = self . iixxi ( w1 , w2 , w5 ) NEWLINE order : NUMBER ipattern : ixii npattern : n_ixiix - > n_ixiix = self . ixii ( w1 , w3 , w4 ) NEWLINE order : NUMBER ipattern : ixii npattern : n_xixii - > n_xixii = self . ixii ( w2 , w4 , w5 ) NEWLINE order : NUMBER ipattern : ixixi npattern : n_ixixi - > n_ixixi = self . ixixi ( w1 , w3 , w5 ) NEWLINE order : NUMBER ipattern : ixxii npattern : n_ixxii - > n_ixxii = self . ixxii ( w1 , w4 , w5 ) NEWLINE order : NUMBER ipattern : iiii npattern : n_iiiix - > n_iiiix = self . iiii ( w1 , w2 , w3 , w4 ) NEWLINE order : NUMBER ipattern : iiii npattern : n_xiiii - > n_xiiii = self . iiii ( w2 , w3 , w4 , w5 ) NEWLINE order : NUMBER ipattern : iiixi npattern : n_iiixi - > n_iiixi = self . iiixi ( w1 , w2 , w3 , w5 ) NEWLINE order : NUMBER ipattern : iixii npattern : n_iixii - > n_iixii = self . iixii ( w1 , w2 , w4 , w5 ) NEWLINE order : NUMBER ipattern : ixiii npattern : n_ixiii - > n_ixiii = self . ixiii ( w1 , w3 , w4 , w5 ) NEWLINE order : NUMBER ipattern : iiiii npattern : n_iiiii - > n_iiiii = self . iiiii ( w1 , w2 , w3 , w4 , w5 )", "from pyspark . sql . functions import col NEWLINE VAR = users_df . where ( col ( STRING ) == chosen_user ) . select ( col ( STRING ) )", "def parse ( VAR , VAR ) : NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE VAR = ExItem ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE VAR [ STRING ] = VAR . xpath ( STRING ) . extract ( ) NEWLINE return VAR", "VAR = [ VAR . select ( * [ lit ( None ) . cast ( VAR . dataType ) . alias ( VAR . name ) if VAR . name not in VAR . columns else col ( VAR . name ) for VAR in output_schema . fields ] ) for VAR in dfs ]", "x . c NEWLINE __declspec ( dllexport ) void read ( int16_t * input , size_t size ) NEWLINE { int i ; for ( i = NUMBER ; i < size ; i + + ) input [ i ] = i ; }", ">> > from redis import Redis NEWLINE >> > from rq import Queue NEWLINE >> > VAR = Queue ( STRING , connection = Redis ( ) ) NEWLINE >> > VAR . count NEWLINE NUMBER NEWLINE >> > VAR . empty ( ) NEWLINE NUMBER NEWLINE >> > VAR . count NEWLINE NUMBER", "== == == == == == == == == == == == == stuffstuffimport os NEWLINE os . chdir ( os . path . split ( __file__ ) [ NUMBER ] )", "update RunningStatus set status = NUMBER ;", "def get_constant_value ( ) NEWLINE return getattr ( _thread_local , STRING , None ) NEWLINE def set_constant_value ( value ) : NEWLINE VAR = value", "VAR = Edge . all ( ) . filter ( STRING , vertex1 ) . filter ( STRING , vertex2 ) . get ( )", "def factors ( VAR ) : NEWLINE return filter ( lambda VAR : VAR % VAR == NUMBER , range ( NUMBER , VAR + NUMBER ) )", "p . stdin . write ( STRING )", "import os NEWLINE VAR = STRING NEWLINE for VAR in os . listdir ( VAR ) : NEWLINE if VAR . endswith ( STRING ) : NEWLINE VAR = os . VAR . join ( VAR , VAR ) NEWLINE with open ( VAR ) as VAR : NEWLINE print VAR , STRING", "class FileProxyGetter ( ProxyGetter ) : NEWLINE . . . NEWLINE def MakeProxy ( self , * args , ** kwargs ) : NEWLINE return Proxy . fromstring ( * args , ** kwargs ) NEWLINE def Get ( self ) : NEWLINE . . . NEWLINE proxies . append ( self . MakeProxy ( l [ : - NUMBER ] ) ) NEWLINE . . . NEWLINE . . . NEWLINE class FileSecureProxyGetter ( FileProxyGetter ) : NEWLINE def MakeProxy ( self , * args , ** kwargs ) : NEWLINE return SecureProxy . fromstring ( * args , ** kwargs )", "[ STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE [ STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE [ STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "def recursive_sum ( VAR , VAR , VAR = NUMBER ) : NEWLINE if VAR < min ( len ( VAR ) , len ( VAR ) ) : NEWLINE return [ VAR [ VAR ] + VAR [ VAR ] ] + recursive_sum ( VAR , VAR , VAR + NUMBER ) NEWLINE else : NEWLINE return [ ] NEWLINE print recursive_sum ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ) NEWLINE", "VAR = open ( STRING , STRING ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR = VAR . split ( ) NEWLINE VAR [ NUMBER ] = VAR [ NUMBER ] . replace ( STRING , STRING ) NEWLINE VAR = STRING . join ( VAR ) NEWLINE VAR . write ( VAR ) NEWLINE VAR . close ( ) NEWLINE VAR . close ( )", "rdflib . plugin . register ( STRING , rdflib . VAR . Processor , STRING , STRING ) NEWLINE rdflib . plugin . register ( STRING , rdflib . VAR . Result , STRING , STRING ) NEWLINE VAR = STRING NEWLINE for VAR in sorted ( g . VAR ( VAR , initNs = dict ( rdf = RDF , foaf = FOAF , bib = BIB ) ) , key = lambda VAR : int ( VAR [ NUMBER ] [ NUMBER : ] ) ) : NEWLINE print STRING % ( VAR [ NUMBER ] [ NUMBER : ] , VAR [ NUMBER ] , VAR [ NUMBER ] )", ">> > class MyClass ( object ) : NEWLINE . . . pass NEWLINE . . . NEWLINE >> > VAR = MyClass ( ) NEWLINE >> > VAR = VAR . __class__ NEWLINE >> > VAR = VAR ( ) NEWLINE >> > VAR , VAR NEWLINE ( < __main__ . MyClass object at NUMBER > , < __main__ . MyClass object at NUMBER > )", "from VAR import S_ISREG , ST_CTIME , ST_MODE NEWLINE import os , sys , time NEWLINE VAR = sys . argv [ NUMBER ] if len ( sys . argv ) == NUMBER else STRING NEWLINE VAR = ( os . VAR . join ( VAR , VAR ) for VAR in os . listdir ( VAR ) ) NEWLINE VAR = ( ( os . VAR ( VAR ) , VAR ) for VAR in VAR ) NEWLINE VAR = ( ( VAR [ ST_CTIME ] , VAR ) for VAR , VAR in VAR if S_ISREG ( VAR [ ST_MODE ] ) ) NEWLINE for VAR , VAR in sorted ( VAR ) : NEWLINE print time . ctime ( VAR ) , os . VAR . basename ( VAR )", "def countSpaces ( VAR ) : NEWLINE VAR = [ ] NEWLINE VAR = None NEWLINE VAR = NUMBER NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR == STRING : NEWLINE if VAR is None : NEWLINE VAR = VAR NEWLINE VAR . append ( VAR ) NEWLINE else : NEWLINE if VAR is not None : NEWLINE VAR = max ( VAR - VAR - NUMBER , VAR ) NEWLINE VAR = None NEWLINE VAR . append ( VAR ) NEWLINE print ( STRING , STRING . join ( VAR ) ) NEWLINE print ( STRING , VAR )", ">> > VAR = STRING . join ( str ( VAR ) for VAR in range ( NUMBER ) ) NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > VAR = [ int ( VAR ) for VAR in VAR . split ( STRING ) ] NEWLINE >> > VAR NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = zip ( VAR [ : : NUMBER ] , VAR [ NUMBER : : NUMBER ] ) NEWLINE >> > VAR NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE >> >", "from itertools import groupby , tee , cycle NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE def sequences ( VAR ) : NEWLINE VAR = cycle ( VAR ) NEWLINE next ( VAR ) NEWLINE VAR = groupby ( VAR , key = lambda VAR : VAR + NUMBER == next ( VAR ) ) NEWLINE for VAR , VAR in VAR : NEWLINE if VAR : NEWLINE yield tuple ( VAR ) + ( next ( ( next ( VAR ) [ NUMBER ] ) ) , ) NEWLINE print ( list ( sequences ( VAR ) ) ) NEWLINE [ ( NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER , NUMBER ) ]", "[ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "file2 . write ( newline )", "import matplotlib NEWLINE import numpy as np NEWLINE import matplotlib . cm as cm NEWLINE import matplotlib . mlab as mlab NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = NUMBER NEWLINE VAR = np . arange ( - NUMBER , NUMBER , VAR ) NEWLINE VAR = np . arange ( - NUMBER , NUMBER , VAR ) NEWLINE VAR , VAR = np . meshgrid ( VAR , VAR ) NEWLINE VAR = mlab . bivariate_normal ( VAR , VAR , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = mlab . bivariate_normal ( VAR , VAR , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = NUMBER * ( VAR - VAR ) NEWLINE plt . figure ( ) NEWLINE VAR = plt . contour ( VAR , VAR , VAR ) NEWLINE for VAR in VAR . collections : NEWLINE for VAR , VAR in reversed ( list ( enumerate ( VAR . get_paths ( ) ) ) ) : NEWLINE VAR = VAR . vertices NEWLINE VAR = np . max ( VAR . max ( axis = NUMBER ) - VAR . min ( axis = NUMBER ) ) NEWLINE if VAR < NUMBER : NEWLINE del ( VAR . get_paths ( ) [ VAR ] ) NEWLINE plt . gcf ( ) . canvas . draw ( )", "from bs4 import BeautifulSoup , CData NEWLINE import urllib NEWLINE VAR = urllib . urlopen ( STRING ) NEWLINE VAR = BeautifulSoup . BeautifulSoup ( VAR . read ( ) ) NEWLINE for VAR in VAR . findAll ( text = True ) : NEWLINE if isinstance ( VAR , CData ) : NEWLINE print STRING % VAR", "In [ NUMBER ] : NEWLINE VAR = STRING NEWLINE VAR = pd . read_csv ( io . StringIO ( VAR ) , header = None , names = [ STRING , STRING , STRING , STRING ] ) NEWLINE VAR NEWLINE Out [ NUMBER ] : NEWLINE time stock bid ask NEWLINE NUMBER time1 stockA bid NUMBER NEWLINE NUMBER time2 stockA ask NUMBER NEWLINE NUMBER time3 stockB ask NUMBER NEWLINE NUMBER time4 stockB bid NUMBER", "In [ NUMBER ] : b [ NUMBER ] [ STRING ] = NUMBER", "VAR = pd . concat ( [ df1 , df2 , df3 ] ) NEWLINE", "VAR = Foo ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE print ( VAR . list ) NEWLINE print ( VAR . list [ NUMBER ] ) NEWLINE VAR . list [ NUMBER ] = NUMBER NEWLINE print ( VAR . list )", "from tvtk . api import tvtk ; from mayavi import mlab ; import numpy as np NEWLINE VAR , VAR , VAR = np . random . random ( ( NUMBER , nr_points ) ) NEWLINE VAR = np . random . randint ( NUMBER , size = ( NUMBER , NUMBER ) ) NEWLINE VAR = mlab . points3d ( VAR , VAR , VAR ) NEWLINE VAR = tvtk . UnsignedCharArray ( ) NEWLINE VAR . from_array ( VAR ) NEWLINE VAR . mlab_source . dataset . point_data . scalars = VAR NEWLINE VAR . mlab_source . dataset . modified ( )", "In [ NUMBER ] : VAR = { STRING : { STRING : { STRING : NUMBER , . . . : STRING : NUMBER , . . . : STRING : NUMBER , . . . : STRING : NUMBER } } } NEWLINE In [ NUMBER ] : VAR = [ ] NEWLINE In [ NUMBER ] : for VAR , VAR in VAR . items ( ) : NEWLINE . . . : for VAR , VAR in VAR . items ( ) : NEWLINE . . . : for VAR , VAR in VAR . items ( ) : NEWLINE . . . : VAR . append ( { STRING : VAR , STRING : VAR , STRING : VAR , STRING : VAR } ) NEWLINE . . . : NEWLINE In [ NUMBER ] : VAR = pd . DataFrame ( VAR ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE A B C D NEWLINE NUMBER NUMBER lagtime darkgreen NUMBER NEWLINE NUMBER NUMBER lagtime pink NUMBER NEWLINE NUMBER NUMBER lagtime darkorange NUMBER NEWLINE NUMBER NUMBER lagtime red NUMBER", "In [ NUMBER ] : df . groupby ( df [ STRING ] . apply ( lambda x : x . date ( ) ) ) . agg ( { STRING : pd . Series . nunique } ) NEWLINE Out [ NUMBER ] : NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER", "VAR = [ VAR [ : : - NUMBER ] for VAR in reversed ( self . topArea ) ]", "from Tkinter import * NEWLINE class loginWindow ( Toplevel ) : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE Toplevel . __init__ ( VAR , VAR ) NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR . VAR ( STRING ) NEWLINE Button ( VAR , text = STRING , command = VAR . login ) . pack ( ) NEWLINE def login ( VAR ) : NEWLINE VAR = True NEWLINE if VAR : NEWLINE VAR . destroy ( ) NEWLINE VAR . VAR . deiconify ( ) NEWLINE else : NEWLINE VAR . VAR . quit ( ) NEWLINE class main ( Tk ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE Tk . __init__ ( VAR , * args , ** kwargs ) NEWLINE VAR . VAR ( STRING ) NEWLINE VAR . geometry ( STRING ) NEWLINE VAR . config ( background = STRING ) NEWLINE VAR . resizable ( width = FALSE , height = FALSE ) NEWLINE VAR = Menu ( VAR ) NEWLINE VAR = Menu ( VAR , tearoff = NUMBER ) NEWLINE VAR . add_command ( label = STRING , command = VAR . quit ) NEWLINE VAR . add_cascade ( label = STRING , menu = VAR ) NEWLINE VAR = Menu ( VAR , tearoff = NUMBER ) NEWLINE VAR . add_command ( label = STRING , command = VAR . createAbout ) NEWLINE VAR . add_cascade ( label = STRING , menu = VAR ) NEWLINE VAR . config ( menu = VAR ) NEWLINE VAR = Canvas ( VAR , width = NUMBER , height = NUMBER ) NEWLINE VAR . pack ( expand = NUMBER , fill = BOTH ) NEWLINE VAR . withdraw ( ) NEWLINE loginWindow ( STRING , VAR ) NEWLINE def createAbout ( VAR ) : NEWLINE pass NEWLINE def quit ( VAR ) : NEWLINE VAR . destroy ( ) NEWLINE VAR = main ( ) NEWLINE VAR . mainloop ( )", "VAR = open ( STRING ) NEWLINE def read1k ( ) : NEWLINE return VAR . read ( NUMBER ) NEWLINE for VAR in iter ( read1k , STRING ) : NEWLINE process_data ( VAR )", "import time NEWLINE VAR = NUMBER NEWLINE VAR = time . time ( ) NEWLINE while True : NEWLINE doSomeWork ( ) NEWLINE VAR += VAR NEWLINE VAR = VAR - time . time ( ) NEWLINE if VAR > NUMBER : NEWLINE time . sleep ( VAR )", "for VAR in s . split ( STRING ) : NEWLINE print float ( VAR )", "Lead . objects . values ( STRING , STRING ) . annotate ( Count ( STRING ) )", "class NumberEntry ( gtk . Entry ) : NEWLINE def __init__ ( VAR ) : NEWLINE gtk . Entry . __init__ ( VAR ) NEWLINE VAR . connect ( STRING , VAR . on_changed ) NEWLINE def on_changed ( VAR , * args ) : NEWLINE VAR = VAR . get_text ( ) . strip ( ) NEWLINE VAR . set_text ( STRING . join ( [ VAR for VAR in VAR if VAR in STRING ] ) )", "import inspect NEWLINE class key_memoized ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . cache = { } NEWLINE def __call__ ( VAR , * VAR , ** VAR ) : NEWLINE VAR = VAR . VAR ( VAR , VAR ) NEWLINE if VAR not in VAR . cache : NEWLINE VAR . cache [ VAR ] = VAR . VAR ( * VAR , ** VAR ) NEWLINE return VAR . cache [ VAR ] NEWLINE def normalize_args ( VAR , VAR , VAR ) : NEWLINE VAR = inspect . getargs ( VAR . VAR . __code__ ) . VAR NEWLINE return dict ( VAR . items ( ) + zip ( VAR , VAR ) ) NEWLINE def VAR ( VAR , VAR , VAR ) : NEWLINE VAR = VAR . normalize_args ( VAR , VAR ) NEWLINE return tuple ( sorted ( VAR . items ( ) ) )", "python renpcrmaps . py precip NUMBER", ">> > VAR = filter ( lambda VAR : VAR < NUMBER , A ) NEWLINE >> > VAR = filter ( lambda VAR : VAR > NUMBER , A ) NEWLINE >> > VAR NEWLINE [ - NUMBER , - NUMBER , - NUMBER , - NUMBER ] NEWLINE >> > VAR NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ]", ">> > VAR = STRING . format ( vars = STRING , example = STRING ) NEWLINE >> > VAR NEWLINE STRING", "class Palette ( list ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE super ( Palette , VAR ) . __init__ ( args ) NEWLINE VAR . name = kwargs . pop ( STRING , None ) NEWLINE VAR . description = kwargs . pop ( STRING , None ) NEWLINE VAR . extend ( kwargs . pop ( STRING , [ ] ) ) NEWLINE if kwargs : NEWLINE raise TypeError ( STRING . format ( type ( VAR ) . __name__ , STRING . join ( kwargs ) ) )", "class A ( ComplexModel ) : NEWLINE VAR = Integer NEWLINE class B ( A ) : NEWLINE VAR = Unicode NEWLINE class C ( A ) : NEWLINE VAR = DateTime", ">> > VAR = itertools . chain . from_iterable ( sixbit ) NEWLINE >> > [ STRING . join ( VAR ) for VAR in itertools . izip ( * [ VAR ] * NUMBER ) ] NEWLINE [ STRING , STRING , STRING ]", "VAR = re . sub ( STRING , STRING , VAR , flags = re . UNICODE )", "import collections NEWLINE def map_nested_dicts_modify ( VAR , VAR ) : NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE if isinstance ( VAR , collections . Mapping ) : NEWLINE map_nested_dicts_modify ( VAR , VAR ) NEWLINE else : NEWLINE VAR [ VAR ] = VAR ( VAR ) NEWLINE map_nested_dicts_modify ( x , lambda VAR : VAR + NUMBER ) NEWLINE", "date val NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER", "STRING : lambda self , cr , uid , ctx : self . pool [ STRING ] . _company_default_get ( cr , uid , object = STRING , context = ctx )", ">> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > with_pandas_groupby ( np . prod , VAR , VAR ) NEWLINE a NUMBER NEWLINE VAR NUMBER NEWLINE c NUMBER", "VAR = day_counts [ - NUMBER ] NEWLINE VAR = VAR [ STRING ] NEWLINE VAR = VAR [ STRING ]", "[ NUMBER , NUMBER ]", "{ STRING : STRING }", "In [ NUMBER ] : NEWLINE VAR = pd . DataFrame ( { STRING : randn ( NUMBER ) , STRING : randn ( NUMBER ) , STRING : randn ( NUMBER ) } ) NEWLINE VAR NEWLINE Out [ NUMBER ] : NEWLINE a b c NEWLINE NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER - NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NEWLINE NUMBER NUMBER - NUMBER - NUMBER NEWLINE [ NUMBER rows x NUMBER columns ] NEWLINE In [ NUMBER ] : NEWLINE VAR [ VAR > NUMBER ] . count ( ) NEWLINE Out [ NUMBER ] : NEWLINE a NUMBER NEWLINE b NUMBER NEWLINE c NUMBER NEWLINE dtype : int64", ">> > map ( STRING . join , zip ( * [ iter ( myl ) ] * NUMBER ) ) NEWLINE [ STRING , STRING , STRING ]", "X [ i ] . data", "from collections import OrderedDict NEWLINE VAR = OrderedDict ( ) NEWLINE for VAR in os . listdir ( directoryPath ) : NEWLINE if VAR . endswith ( STRING ) : NEWLINE VAR [ VAR ] = numpy . genfromtxt ( VAR , delimiter = STRING ) [ : , NUMBER ]", "Ben [ STRING , STRING ] NEWLINE Alice [ STRING , STRING ] NEWLINE Tom [ STRING , STRING ]", "VAR = manager . Manager ( )", "VAR = interpolate . UnivariateSpline ( x , y )", "VAR = [ VAR for VAR in myList if VAR . count ( None ) < NUMBER ] NEWLINE [ OUTPUT ] NEWLINE [ [ NUMBER , NUMBER , None , None , None ] ]", "VAR = np . array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ) NEWLINE np . random . random ( VAR . shape )", "VAR = MvT101 . groupby ( STRING , sort = True ) . sum ( ) NEWLINE VAR = MvT102 . groupby ( STRING , sort = True ) . sum ( )", "def get_pivots ( ) : NEWLINE VAR = pd . DataFrame . from_csv ( STRING ) NEWLINE VAR [ STRING ] = np . nan NEWLINE VAR = VAR . irow ( NUMBER ) . open NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE for VAR in range ( NUMBER , len ( VAR ) ) : NEWLINE VAR = VAR . irow ( VAR ) NEWLINE if VAR == NUMBER : NEWLINE if VAR . low < VAR - VAR : NEWLINE VAR . ix [ VAR , STRING ] = VAR . low - VAR NEWLINE VAR , VAR = VAR . low , VAR NEWLINE VAR = - NUMBER NEWLINE elif VAR . high > VAR + VAR : NEWLINE VAR . ix [ VAR , STRING ] = VAR . high - VAR NEWLINE VAR , VAR = VAR . high , VAR NEWLINE VAR = NUMBER NEWLINE elif VAR == NUMBER : NEWLINE if VAR . high > VAR : NEWLINE VAR . ix [ VAR , STRING ] = VAR . ix [ VAR , STRING ] + ( VAR . high - VAR . ix [ VAR , STRING ] ) NEWLINE VAR . ix [ VAR , STRING ] = np . nan NEWLINE VAR , VAR = VAR . high , VAR NEWLINE elif VAR . low < VAR - VAR : NEWLINE VAR . ix [ VAR , STRING ] = VAR . low - VAR NEWLINE VAR , VAR = VAR . low , VAR NEWLINE VAR = - NUMBER NEWLINE elif VAR == - NUMBER : NEWLINE if VAR . low < VAR : NEWLINE VAR . ix [ VAR , STRING ] = VAR . ix [ VAR , STRING ] + ( VAR . low - VAR . ix [ VAR , STRING ] ) NEWLINE VAR . ix [ VAR , STRING ] = np . nan NEWLINE VAR , VAR = VAR . low , VAR NEWLINE elif VAR . high > VAR - VAR : NEWLINE VAR . ix [ VAR , STRING ] = VAR . high - VAR NEWLINE VAR , VAR = VAR . high , VAR NEWLINE VAR = NUMBER NEWLINE print VAR", "from functools import wraps NEWLINE import inspect NEWLINE def initializer ( VAR ) : NEWLINE VAR , VAR , VAR , VAR = inspect . getargspec ( VAR ) NEWLINE @ wraps ( VAR ) NEWLINE def wrapper ( VAR , * args , ** kargs ) : NEWLINE for VAR , VAR in zip ( VAR [ NUMBER : ] , args ) + kargs . items ( ) : NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE VAR ( VAR , * args , ** kargs ) NEWLINE return wrapper", "circle . _circumference_is_set = True", "def do_stuff ( VAR ) : NEWLINE print STRING % VAR", "( { NUMBER : [ NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] } , { NUMBER : [ NUMBER , NUMBER ] , NUMBER : [ NUMBER , NUMBER ] } ) NEWLINE { NUMBER : NUMBER , NUMBER : NUMBER }", ">> > fL NEWLINE [ STRING , STRING , STRING ]", "Column NUMBER Column NUMBER Column NUMBER Column NUMBER NEWLINE bread milk sugar tea NEWLINE eggs shampoo clothes tiger NEWLINE beads washing machine juice mixed herbs", "$ x subdir", "VAR = mlab . VAR ( STRING ) NEWLINE VAR . scene . disable_render = True NEWLINE VAR = mlab . points3d ( x , y , z , density , scale_mode = STRING , scale_factor = NUMBER ) NEWLINE VAR = VAR . glyph . mask_points NEWLINE VAR . maximum_number_of_points = x . size NEWLINE VAR . on_ratio = NUMBER NEWLINE VAR . glyph . mask_input_points = True NEWLINE VAR . scene . disable_render = False NEWLINE mlab . axes ( ) NEWLINE mlab . show ( )", "VAR = filter ( lambda VAR : VAR [ NUMBER ] == c_code , list_ )", "self . secondFrame . Close ( )", "a b c blue orange red NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "array ( [ NUMBER ] )", "Yes : if isinstance ( obj , int ) : NEWLINE No : if type ( obj ) is type ( NUMBER ) :", "VAR = wx . TextCtrl ( self , - NUMBER , STRING , size = ( NUMBER , NUMBER ) , style = wx . TE_MULTILINE | wx . TE_RICH2 ) NEWLINE VAR . SetInsertionPoint ( NUMBER ) NEWLINE VAR . SetStyle ( NUMBER , NUMBER , wx . TextAttr ( STRING , STRING ) )", "In [ NUMBER ] : VAR = [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] NEWLINE In [ NUMBER ] : from operator import setitem NEWLINE In [ NUMBER ] : map ( lambda VAR : setitem ( VAR , NUMBER , - NUMBER ) , VAR ) NEWLINE Out [ NUMBER ] : [ None , None ] NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : [ [ NUMBER , - NUMBER ] , [ NUMBER , - NUMBER ] ]", "VAR = [ VAR for VAR in L1 if ( VAR not in L2 ) and ( VAR not in L3 ) ] NEWLINE VAR = set ( L2 + L3 ) NEWLINE VAR = [ VAR for VAR in L1 if VAR not in VAR ]", ">> > def sum_of_squares_of_digits ( VAR ) : NEWLINE . . . return sum ( int ( VAR ) ** NUMBER for VAR in str ( VAR ) ) NEWLINE . . . NEWLINE >> > sum_of_squares_of_digits ( NUMBER ) NEWLINE NUMBER", "VAR = len ( list_a ) NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER , VAR , NUMBER ) : NEWLINE VAR . append ( list_a [ VAR : VAR + NUMBER ] ) NEWLINE VAR = ( VAR [ - NUMBER ] [ NUMBER ] , VAR [ VAR ] [ NUMBER ] ) NEWLINE VAR . append ( VAR ) NEWLINE try : NEWLINE VAR = ( VAR [ NUMBER ] + NUMBER , list_a [ VAR + NUMBER ] [ NUMBER ] ) NEWLINE VAR . append ( VAR ) NEWLINE except IndexError : NEWLINE print STRING NEWLINE print VAR", "VAR = array ( [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , . . . , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ] , dtype = int8 ) NEWLINE VAR = np . eye ( VAR . max ( ) + NUMBER ) [ VAR . ravel ( ) ]", "{ % for VAR in files . entryfile_set . all % }", "Code NEWLINE import math , sys NEWLINE def stringcount ( VAR ) : NEWLINE STRING NEWLINE return len ( bin ( VAR ) ) - NUMBER NEWLINE def log_2 ( VAR ) : NEWLINE STRING NEWLINE return int ( round ( math . log ( VAR , NUMBER ) , NUMBER ) ) NEWLINE def log_e ( VAR ) : NEWLINE STRING NEWLINE return int ( round ( math . log ( VAR ) / NUMBER , NUMBER ) ) NEWLINE def bitcounter ( VAR ) : NEWLINE STRING NEWLINE VAR = NUMBER NEWLINE while VAR > NUMBER : NEWLINE VAR >>= NUMBER NEWLINE VAR += NUMBER NEWLINE return VAR NEWLINE def olgn ( VAR ) : NEWLINE STRING NEWLINE if VAR < NUMBER : NEWLINE return - NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = sys . getsizeof ( VAR ) * NUMBER NEWLINE while True : NEWLINE VAR = ( VAR + VAR ) // NUMBER NEWLINE VAR = VAR >> VAR NEWLINE if VAR == NUMBER : NEWLINE return VAR NEWLINE if VAR == NUMBER : NEWLINE VAR = VAR - NUMBER NEWLINE else : NEWLINE VAR = VAR + NUMBER NEWLINE def hashlookup ( VAR ) : NEWLINE STRING NEWLINE global VAR NEWLINE return VAR [ VAR ] NEWLINE def lookup ( VAR ) : NEWLINE STRING NEWLINE global VAR NEWLINE return VAR [ VAR ] NEWLINE def bitwise ( VAR ) : NEWLINE STRING NEWLINE VAR = ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE VAR = NUMBER NEWLINE for VAR in range ( NUMBER , - NUMBER , - NUMBER ) : NEWLINE if ( VAR & VAR [ VAR ] ) : NEWLINE VAR >>= VAR [ VAR ] ; NEWLINE VAR |= VAR [ VAR ] ; NEWLINE return VAR NEWLINE def unrolled_bitwise ( VAR ) : NEWLINE STRING NEWLINE VAR = NUMBER ; NEWLINE if VAR > NUMBER : NEWLINE VAR >>= NUMBER NEWLINE VAR = NUMBER ; NEWLINE if VAR > NUMBER : NEWLINE VAR >>= NUMBER NEWLINE VAR += NUMBER ; NEWLINE if VAR > NUMBER : NEWLINE VAR >>= NUMBER NEWLINE VAR += NUMBER ; NEWLINE if VAR > NUMBER : NEWLINE VAR >>= NUMBER NEWLINE VAR += NUMBER ; NEWLINE return VAR + ( VAR >> NUMBER ) NEWLINE def ilog ( VAR ) : NEWLINE STRING NEWLINE VAR = NUMBER NEWLINE VAR = ( not not VAR & NUMBER ) << NUMBER ; NEWLINE VAR >>= VAR ; NEWLINE VAR |= VAR ; NEWLINE VAR = ( not not VAR & NUMBER ) << NUMBER ; NEWLINE VAR >>= VAR ; NEWLINE VAR |= VAR ; NEWLINE VAR = ( not not VAR & NUMBER ) << NUMBER ; NEWLINE VAR >>= VAR ; NEWLINE VAR |= VAR ; NEWLINE VAR = ( not not VAR & NUMBER ) << NUMBER ; NEWLINE VAR >>= VAR ; NEWLINE VAR |= VAR ; NEWLINE VAR += ( not not VAR & NUMBER ) ; NEWLINE return VAR - NUMBER ; NEWLINE VAR = { . . . } NEWLINE VAR = ( . . . )", "import itertools as it NEWLINE VAR = [ ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) , ( STRING , STRING , NUMBER ) ] NEWLINE VAR = [ ] NEWLINE for VAR , VAR in it . groupby ( sorted ( VAR , key = lambda VAR : VAR [ : NUMBER ] ) , key = lambda VAR : VAR [ : NUMBER ] ) : NEWLINE VAR . append ( VAR + ( sum ( VAR [ NUMBER ] for VAR in VAR ) , ) )", "VAR = [ ] NEWLINE VAR = [ ] NEWLINE VAR = [ VAR , VAR ] NEWLINE for VAR in numbers : NEWLINE VAR [ VAR % NUMBER ] . append ( VAR ) NEWLINE print VAR", "while True : NEWLINE VAR = check_for_new_files ( ) NEWLINE process ( VAR ) NEWLINE time . sleep ( pollinterval )", "def filtermax ( VAR , VAR , VAR , VAR ) : NEWLINE VAR = VAR . index . isin ( VAR ) . sum ( ) > NUMBER NEWLINE if VAR : NEWLINE return VAR [ VAR [ VAR ] == VAR . ix [ VAR ] [ VAR ] . max ( ) ] NEWLINE else : NEWLINE return VAR [ VAR [ VAR ] == VAR [ VAR ] . max ( ) ] NEWLINE return VAR", "In [ NUMBER ] : % timeit orig ( df . copy ( ) , patch . copy ( ) ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE In [ NUMBER ] : % timeit using_numpy ( df . copy ( ) , patch . copy ( ) ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "import re NEWLINE VAR = re . match ( STRING , re . MULTILINE | re . VERBOSE )", "import numpy as np NEWLINE import pandas as pd NEWLINE np . random . seed ( NUMBER ) NEWLINE VAR = pd . DataFrame ( np . random . randint ( NUMBER , size = ( NUMBER , NUMBER ) ) , columns = list ( STRING ) ) NEWLINE print ( VAR ) NEWLINE VAR = { VAR . __name__ : VAR . apply ( VAR ) for VAR in ( pd . Series . nunique , pd . Series . count ) } NEWLINE print ( pd . concat ( VAR , axis = NUMBER ) )", ">> > VAR = STRING NEWLINE >> > VAR = { STRING : open ( STRING , STRING ) } NEWLINE >> > VAR = requests . post ( VAR , VAR = VAR )", "import json NEWLINE VAR = [ ] NEWLINE def getinput ( VAR ) : NEWLINE VAR . append ( raw_input ( STRING ) )", "In [ NUMBER ] : from itertools import groupby NEWLINE In [ NUMBER ] : VAR = [ [ STRING , STRING , STRING ] , STRING , [ STRING ] , STRING , STRING , STRING , STRING ] NEWLINE In [ NUMBER ] : [ list ( VAR ) for VAR , VAR in groupby ( VAR , lambda VAR : VAR != STRING ) if VAR ] NEWLINE Out [ NUMBER ] : [ [ [ STRING , STRING , STRING ] ] , [ [ STRING ] ] , [ STRING , STRING , STRING ] ]", "VAR = set ( ) NEWLINE for VAR in indices : NEWLINE VAR . add ( VAR . row ( ) )", "In [ NUMBER ] : np . where ( x == np . min ( x ) ) NEWLINE Out [ NUMBER ] : ( array ( [ NUMBER ] ) , array ( [ NUMBER ] ) )", "size : NUMBER NEWLINE values : NEWLINE NUMBER NUMBER NEWLINE NUMBER NUMBER", "In [ NUMBER ] : data NEWLINE Out [ NUMBER ] : NEWLINE { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] , STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } ] }", "NUMBER DoS ( NUMBER , NUMBER ) NEWLINE [ ( STRING , STRING , STRING ) ] NEWLINE file . . . Department of Something is called ( DoS ) and then more texts and moreow * Instance * test_string * test_string * test_string * test_string * test_string * test_string * test_string * string__722 * string__722 * string__722 * string__722 * string__722 * string__722 * string__722 * string__720 * string__720 * string__720 * string__720 * string__720 * string__720 * string__720 * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * HCAL_SlowDa * string__718 * string__718 * string__718 * string__718 * string__718 * string__718 * string__718 * string__719 * string__719 * string__719 * string__719 * string__719 * string__719 * string__719 * string__723 * string__723 * string__723 * string__723 * string__723 * string__723 * string__723 * string__721 * string__721 * string__721 * string__721 * string__721 * string__721 * string__721 * another_str * another_str * another_str * another_str * another_str * another_str * another_str * another_str * another_strtest_string * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * string__722 * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * string__720 * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * HCAL_SlowDa * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * string__718 * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * string__719 * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * string__723 * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * NUMBER * stringdef test_if_ascii ( VAR ) : NEWLINE if isinstance ( test , unicode ) : NEWLINE raise TypeError ( STRING ) NEWLINE return all ( NUMBER <= ord ( VAR ) <= NUMBER for VAR in VAR )", "[ STRING ]", "for VAR in range ( HEIGHT ) : NEWLINE for VAR in range ( WIDTH ) : NEWLINE if keygrid [ VAR ] [ VAR ] in stockgrid [ VAR ] [ VAR ] : NEWLINE stockgrid [ VAR ] [ VAR ] [ keygrid [ VAR ] [ VAR ] ] += NUMBER", ">> > cur . execute ( STRING ) NEWLINE < sqlite3 . Cursor object at NUMBER > NEWLINE >> > for VAR , VAR in groupby ( cur , key = lambda VAR : VAR [ NUMBER ] [ NUMBER ] ) : NEWLINE . . . print STRING . join ( [ VAR [ NUMBER ] for VAR in VAR ] ) NEWLINE . . . NEWLINE A1 A2 A3 A4 A5 A6 A7 A8 NEWLINE B1 B2 B3 B4 B5 B6 B7 B8 NEWLINE C1 C2 C3 C4 C5 C6 C7 C8", "VAR = [ VAR . translate ( trans ) for VAR in row ]", "STRING", "VAR = None NEWLINE VAR = iter ( data ) NEWLINE for VAR in VAR : NEWLINE if VAR == STRING : NEWLINE print STRING , NEWLINE else : NEWLINE print STRING , NEWLINE if VAR == STRING : NEWLINE break NEWLINE VAR = VAR NEWLINE for VAR in VAR : NEWLINE print STRING , NEWLINE print", "VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR = do_projections ( VAR )", "from sqlalchemy import inspect NEWLINE VAR = inspect ( engine ) NEWLINE for VAR in VAR . get_table_names ( ) : NEWLINE for VAR in VAR . get_columns ( VAR ) : NEWLINE print ( STRING % VAR [ STRING ] )", "In [ NUMBER ] : data . data . data NEWLINE Out [ NUMBER ] : TCP ( seq = NUMBER , off_x2 = NUMBER , ack = NUMBER , win = NUMBER , sum = NUMBER , flags = NUMBER , dport = NUMBER , sport = NUMBER )", "@ substitute_args ( { } ) NEWLINE def f ( VAR ) : NEWLINE return VAR NEWLINE", "[ info ] NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = My Game", "VAR = request . form [ STRING ]", "print ( permgrid ( NUMBER , NUMBER ) ) NEWLINE", "elif next == STRING : NEWLINE exit_game ( bear_room )", "ST_Transform ( geom , NUMBER )", "class MultipleChoices ( web . HTTPError ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR = STRING NEWLINE VAR = { STRING : STRING } NEWLINE VAR = STRING NEWLINE VAR += STRING . join ( STRING . format ( VAR ) for VAR in VAR ) NEWLINE VAR += STRING NEWLINE web . HTTPError . __init__ ( VAR , VAR , VAR , VAR )", "TOP : NUMBER List name NEWLINE SUB : NUMBER item NEWLINE SUB : NUMBER item NEWLINE SUB : NUMBER item NEWLINE TOP : NUMBER List name NEWLINE SUB : NUMBER item NEWLINE SUB : NUMBER item NEWLINE SUB : NUMBER item NEWLINE TOP : NUMBER List name NEWLINE SUB : NUMBER item NEWLINE SUB : NUMBER item NEWLINE SUB : NUMBER item NEWLINE done", "STRING . format ( NUMBER )", "import pandas as pd NEWLINE VAR = pd . DataFrame ( { STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] } ) NEWLINE VAR = pd . crosstab ( index = [ VAR [ STRING ] ] , columns = [ VAR [ STRING ] ] ) . clip ( upper = NUMBER ) NEWLINE print ( VAR )", "import numpy as np NEWLINE VAR = np . arange ( NUMBER ) . reshape ( NUMBER , NUMBER ) NEWLINE print ( VAR ) NEWLINE VAR = VAR [ NUMBER : NUMBER , NUMBER : NUMBER ] NEWLINE VAR [ : ] = np . rot90 ( VAR . copy ( ) ) NEWLINE print ( VAR ) NEWLINE VAR = np . arange ( NUMBER ) . reshape ( NUMBER , NUMBER ) NEWLINE VAR = VAR [ NUMBER : NUMBER , NUMBER : NUMBER ] NEWLINE VAR [ : ] = np . rot90 ( VAR . copy ( ) , - NUMBER ) NEWLINE print ( VAR ) NEWLINE", "def setView ( VAR , VAR ) : NEWLINE VAR . _view = VAR", "import os NEWLINE def addToClipBoard ( VAR ) : NEWLINE VAR = STRING + VAR . strip ( ) + STRING NEWLINE os . system ( VAR )", "for VAR , VAR in d . items ( ) : NEWLINE print ( STRING . format ( VAR = VAR , avg = sum ( VAR ) / len ( VAR ) ) )", "awk - f script . awk file { , }", "class DummyItem : NEWLINE def __add__ ( VAR , VAR ) : NEWLINE return VAR NEWLINE VAR = DummyItem ( ) NEWLINE VAR += NUMBER NEWLINE print VAR", "VAR , VAR = skin . shape [ : NUMBER ] NEWLINE for VAR in xrange ( VAR ) : NEWLINE for VAR in xrange ( VAR ) : NEWLINE if bw_image [ VAR ] [ VAR ] > threshold : NEWLINE new_image [ VAR ] [ VAR ] = NUMBER NEWLINE else : NEWLINE new_image [ VAR ] [ VAR ] = NUMBER", "from django . core . urlresolvers import resolve NEWLINE from myapp . views import user_profile_view NEWLINE try : NEWLINE VAR = resolve ( STRING % user_name ) NEWLINE if VAR == user_profile_view : NEWLINE else : NEWLINE except : NEWLINE", "Hi { { first_name } } . NEWLINE This is your { { email } } NEWLINE Thank you", "sum ( VAR == VAR for VAR , VAR in itertools . izip ( s1 , s2 ) )", "VAR = models . ForeignKey ( Entry , related_name = STRING )", "parser . add_option ( STRING , help = STRING , dest = STRING , action = STRING ) NEWLINE parser . add_option ( STRING , help = STRING , dest = STRING , action = STRING ) NEWLINE ( VAR , VAR ) = parser . parse_args ( ) NEWLINE if ( parser . has_option ( STRING ) and parser . has_option ( STRING ) ) : NEWLINE print STRING NEWLINE sys . exit ( NUMBER )", ">> > list ( chunked ( NUMBER , data ) ) NEWLINE [ STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "class Login ( tk . Frame ) : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE . . . NEWLINE class WelcomePage ( tk . Frame ) : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE . . .", ". / workon . sh", "from itertools import product , islice NEWLINE def max_sum_n_pow_lower_x ( VAR , VAR ) : NEWLINE STRING NEWLINE VAR , VAR , VAR = NUMBER , NUMBER , NUMBER NEWLINE while VAR < VAR : NEWLINE VAR *= VAR NEWLINE VAR += NUMBER NEWLINE VAR += VAR NEWLINE return VAR - NUMBER , VAR - VAR NEWLINE def get_nth_pow ( VAR , VAR ) : NEWLINE VAR = list ( VAR ) NEWLINE VAR , VAR = max_sum_n_pow_lower_x ( VAR , len ( VAR ) ) NEWLINE VAR = itertools . product ( VAR , VAR = VAR + NUMBER ) NEWLINE return STRING . join ( list ( islice ( VAR , VAR - VAR ) ) [ - NUMBER ] )", "On ( [ ^ , ] + , ) { NUMBER } . * ? wrote :", "from collections import defaultdict NEWLINE VAR = defaultdict ( int ) NEWLINE for VAR , VAR , VAR in strScoresDict : NEWLINE VAR [ VAR ] += VAR NEWLINE VAR [ VAR ] += VAR NEWLINE VAR = sorted ( VAR , key = lambda VAR : VAR [ VAR ] , reverse = True )", "import math NEWLINE from collections import defaultdict NEWLINE VAR = math . pi / NUMBER NEWLINE VAR = STRING NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE def coord2cart ( VAR , VAR ) : NEWLINE VAR = math . cos ( VAR ) * math . cos ( VAR ) NEWLINE VAR = math . cos ( VAR ) * math . sin ( VAR ) NEWLINE VAR = math . sin ( VAR ) NEWLINE return ( VAR , VAR , VAR ) NEWLINE def cart2corrd ( VAR , VAR , VAR ) : NEWLINE VAR = math . atan2 ( VAR , VAR ) NEWLINE VAR = math . sqrt ( VAR * VAR + VAR * VAR ) NEWLINE VAR = math . atan2 ( VAR , VAR ) NEWLINE return ( VAR , VAR ) NEWLINE def VAR ( VAR , VAR , VAR , VAR ) : NEWLINE global VAR , VAR NEWLINE VAR = ( VAR - VAR ) * VAR NEWLINE VAR = ( VAR - VAR ) * VAR NEWLINE VAR = VAR * VAR NEWLINE VAR = VAR * VAR NEWLINE VAR = math . sin ( VAR / NUMBER ) * math . sin ( VAR / NUMBER ) + math . sin ( VAR / NUMBER ) * math . sin ( VAR / NUMBER ) * math . cos ( VAR ) * math . cos ( VAR ) NEWLINE VAR = NUMBER * math . atan2 ( math . sqrt ( VAR ) , math . sqrt ( NUMBER - VAR ) ) ; NEWLINE VAR = VAR * VAR NEWLINE return VAR NEWLINE def bounding_box ( VAR , VAR ) : NEWLINE VAR . append ( VAR ) NEWLINE VAR = - NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = - NUMBER NEWLINE for ( VAR , VAR ) in VAR : NEWLINE if VAR > VAR : VAR = VAR NEWLINE if VAR > VAR : VAR = VAR NEWLINE if VAR < VAR : VAR = VAR NEWLINE if VAR < VAR : VAR = VAR NEWLINE VAR = NUMBER NEWLINE VAR += VAR NEWLINE VAR -= VAR NEWLINE VAR -= VAR NEWLINE VAR += VAR NEWLINE return ( VAR , VAR , VAR , VAR ) NEWLINE def sitesDist ( VAR , VAR ) : NEWLINE return VAR ( VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] ) NEWLINE def load_site_data ( ) : NEWLINE global VAR NEWLINE VAR = defaultdict ( tuple ) NEWLINE VAR = open ( VAR , encoding = STRING ) NEWLINE VAR . readline ( ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ : - NUMBER ] NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = float ( VAR [ NUMBER ] ) NEWLINE VAR = VAR * math . pi / NUMBER NEWLINE VAR = VAR * math . pi / NUMBER NEWLINE VAR [ ( VAR , VAR ) ] = ( VAR , VAR ) NEWLINE return VAR NEWLINE def main ( ) : NEWLINE VAR = ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) NEWLINE VAR = NUMBER NEWLINE VAR = { } NEWLINE VAR = load_site_data ( ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = [ VAR for VAR in VAR if VAR != VAR and sitesDist ( VAR , VAR ) < VAR ] NEWLINE print ( STRING ) NEWLINE print ( STRING ) NEWLINE print ( STRING ) NEWLINE VAR = { } NEWLINE for VAR in VAR : NEWLINE VAR = len ( VAR [ VAR ] ) NEWLINE if VAR >= VAR : NEWLINE VAR = bounding_box ( VAR , VAR [ VAR ] ) NEWLINE VAR [ VAR ] = VAR NEWLINE for VAR in VAR : NEWLINE VAR = STRING % ( VAR [ VAR ] ) NEWLINE if len ( VAR ) == VAR : NEWLINE VAR = NUMBER NEWLINE VAR = STRING % ( VAR [ VAR ] [ NUMBER ] , VAR [ VAR ] [ NUMBER ] , VAR [ VAR ] [ NUMBER ] , VAR [ VAR ] [ NUMBER ] , VAR [ VAR ] ) NEWLINE VAR += NUMBER NEWLINE print ( VAR ) NEWLINE print ( STRING ) NEWLINE main ( )", "@ key_memoized NEWLINE def foo ( VAR , VAR , VAR ) : NEWLINE print STRING % ( VAR , VAR , VAR ) NEWLINE return VAR + VAR + VAR NEWLINE print foo ( NUMBER , NUMBER , NUMBER ) NEWLINE print foo ( NUMBER , NUMBER , VAR = NUMBER ) NEWLINE print foo ( VAR = NUMBER , VAR = NUMBER , VAR = NUMBER )", "{ STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : { STRING : STRING , STRING : STRING , STRING : { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } } }", "C : \\ > python st . py f1 . txt f2 . txt NEWLINE line1 NEWLINE line2 NEWLINE line1 NEWLINE line2 NEWLINE line3 NEWLINE line4", "def bin ( VAR ) : NEWLINE if VAR == NUMBER : NEWLINE return STRING NEWLINE elif VAR < NUMBER : NEWLINE VAR = STRING NEWLINE VAR *= - NUMBER NEWLINE else : NEWLINE VAR = STRING NEWLINE VAR = [ ] NEWLINE while VAR : NEWLINE VAR . append ( _conv_table [ VAR & NUMBER ] ) NEWLINE VAR >>= NUMBER NEWLINE return VAR + STRING . join ( reversed ( VAR ) ) . lstrip ( STRING )", "VAR = max ( my_dict , key = lambda VAR : VAR [ NUMBER ] )", "< ADDRESS > NEWLINE < STREET > One Main Street < / STREET > NEWLINE < CITY > Gotham City < / CITY > NEWLINE < ZIP > NUMBER NUMBER < / ZIP > NEWLINE < PHONE > NUMBER - NUMBER - NUMBER < / PHONE > NEWLINE < / ADDRESS >", "def _new_game_board ( ) - > [ [ str ] ] : NEWLINE STRING NEWLINE return [ [ None ] * BOARD_COLUMNS for VAR in range ( BOARD_ROWS ) ] NEWLINE VAR = namedtuple ( STRING , [ STRING , STRING ] ) NEWLINE def new_game_state ( ) - > VAR : NEWLINE STRING NEWLINE return VAR ( board = _new_game_board ( ) , turn = RED )", "[ map ( lambda VAR : VAR + NUMBER , VAR ) for VAR in VAR ]", "In [ NUMBER ] : df . replace ( { STRING : { STRING : STRING } } , regex = True ) NEWLINE Out [ NUMBER ] : NEWLINE MemberID Year DSFS DrugCount NEWLINE NUMBER NUMBER Y2 NUMBER _10 NUMBER + NEWLINE NUMBER NUMBER Y3 NUMBER _9 NUMBER NEWLINE NUMBER NUMBER Y1 NUMBER _3 NUMBER", "from twisted . internet import reactor NEWLINE root_window . protocol ( STRING , reactor . stop ) NEWLINE reactor . run ( )", "VAR = driver . find_elements_by_xpath ( STRING )", ">> > Something . objects . filter ( data__a = NUMBER ) NEWLINE >> > Something . objects . filter ( data__nested__c = NUMBER ) NEWLINE >> > Something . objects . filter ( data__has_key = STRING )", "Now running : [ STRING ] NEWLINE Now running : [ STRING ] NEWLINE Now running : [ STRING , STRING ] NEWLINE Now running : [ STRING , STRING ] NEWLINE Now running : [ STRING , STRING , STRING ] NEWLINE Now running : [ STRING , STRING , STRING ] NEWLINE Now running : [ STRING , STRING , STRING , STRING ] NEWLINE Now running : [ STRING , STRING , STRING , STRING ] NEWLINE Now running : [ STRING , STRING , STRING , STRING , STRING ] NEWLINE Now running : [ STRING , STRING , STRING , STRING , STRING ] NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER NEWLINE A - threads active : NUMBER , B - threads active : NUMBER", "VAR = VAR = [ NUMBER ] NEWLINE print VAR , VAR NEWLINE VAR [ NUMBER ] = NUMBER NEWLINE print VAR , VAR NEWLINE VAR = [ NUMBER ] NEWLINE print VAR , VAR", "first sentence , NUMBER NEWLINE second sentence , NUMBER NEWLINE third sentence , NUMBER", "import numpy as np NEWLINE np . sqrt ( football [ [ STRING , STRING ] ] . sum ( axis = NUMBER ) )", "from cStringIO import StringIO NEWLINE from flask import make_response NEWLINE from somewhere import generate_wav_file NEWLINE @ app . route ( STRING ) NEWLINE def view_method ( ) : NEWLINE VAR = StringIO ( ) NEWLINE generate_wav_file ( VAR ) NEWLINE VAR = make_response ( VAR . getvalue ( ) ) NEWLINE VAR . close ( ) NEWLINE VAR . headers [ STRING ] = STRING NEWLINE VAR . headers [ STRING ] = STRING NEWLINE return VAR", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE import matplotlib . ticker as mtick NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = VAR ** NUMBER NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR . loglog ( VAR , VAR , basex = np . e , basey = np . e ) NEWLINE def ticks ( VAR , VAR ) : NEWLINE return STRING . format ( np . log ( VAR ) ) NEWLINE VAR . xaxis . set_major_formatter ( mtick . FuncFormatter ( ticks ) ) NEWLINE VAR . yaxis . set_major_formatter ( mtick . FuncFormatter ( ticks ) ) NEWLINE plt . show ( )", "VAR = VAR . groupby ( [ STRING , STRING ] ) . apply ( lambda VAR : VAR . set_index ( STRING ) . to_dict ( STRING ) [ STRING ] )", "hg lfconvert - - to - normal < old > < new >", "class A2 ( A ) : NEWLINE . . .", "VAR = [ [ a , b ] , [ c , d ] , [ e , f ] ]", "$ PYTHONPATH = / put / path / here python myscript . py", "val_if_true if condition else val_if_false", "class MyConfigParser ( ConfigParser . RawConfigParser ) : NEWLINE def get_list_of_tups ( VAR , VAR , VAR ) : NEWLINE VAR = VAR . get ( VAR , VAR ) NEWLINE import re NEWLINE VAR = re . finditer ( STRING , VAR ) NEWLINE return [ ( VAR . group ( NUMBER ) , VAR . group ( NUMBER ) ) for VAR in VAR ]", "VAR = STRING . join ( service_args )", "def fibTimeLimited ( VAR ) : NEWLINE VAR = time . time ( ) NEWLINE VAR , VAR , VAR = NUMBER , NUMBER , NUMBER NEWLINE while time . time ( ) < VAR + VAR : NEWLINE VAR += NUMBER NEWLINE VAR , VAR = VAR , VAR + VAR NEWLINE return ( VAR , VAR )", "$ cat NUMBER - simplified . csv NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER NEWLINE NUMBER , NUMBER", "VAR = [ ] NEWLINE for VAR in itertools . product ( [ NUMBER , NUMBER ] , repeat = NUMBER ) : NEWLINE VAR . append ( STRING . join ( map ( str , VAR ) ) ) NEWLINE print ( VAR ) NEWLINE >> > VAR NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "Device : / dev / sda1 NEWLINE VolumeID : vol - NUMBER d011806 NEWLINE Volume Size : attached", "VAR = re . sub ( STRING , STRING , VAR , NUMBER )", "( NUMBER , NUMBER )", "bld . new_task_gen ( features = STRING , source = STRING , target = STRING , VERSION = bld . env [ STRING ] , DATADIR = bld . env [ STRING ] )", "In [ NUMBER ] : NEWLINE VAR = STRING NEWLINE VAR = pd . read_csv ( io . StringIO ( VAR ) , header = None , names = [ STRING , STRING , STRING , STRING ] ) NEWLINE VAR NEWLINE Out [ NUMBER ] : NEWLINE time stock bid ask NEWLINE NUMBER time1 stockA bid NUMBER NEWLINE NUMBER time2 stockA ask NUMBER NEWLINE NUMBER time3 stockB ask NUMBER NEWLINE NUMBER time4 stockB bid NUMBER NEWLINE NUMBER time5 stockA bid NUMBER NEWLINE NUMBER time6 stockA ask NUMBER NEWLINE In [ NUMBER ] : NEWLINE VAR . loc [ VAR [ STRING ] == STRING , STRING ] = VAR [ STRING ] NEWLINE VAR . loc [ VAR [ STRING ] != STRING , STRING ] = STRING NEWLINE VAR . loc [ VAR [ STRING ] == STRING , STRING ] = STRING NEWLINE VAR NEWLINE Out [ NUMBER ] : NEWLINE time stock bid ask NEWLINE NUMBER time1 stockA NUMBER NEWLINE NUMBER time2 stockA NUMBER NEWLINE NUMBER time3 stockB NUMBER NEWLINE NUMBER time4 stockB NUMBER NEWLINE NUMBER time5 stockA NUMBER NEWLINE NUMBER time6 stockA NUMBER", "< group col = STRING name = STRING string = STRING colspan = STRING > NEWLINE < field name = STRING on_change = STRING / > NEWLINE < field name = STRING / > NEWLINE < field name = STRING / > NEWLINE < field name = STRING / > NEWLINE < field name = STRING style = STRING / > NEWLINE < field name = STRING / > NEWLINE < / group >", "def fast_iter ( VAR , VAR , * args , ** kwargs ) : NEWLINE STRING NEWLINE for VAR , VAR in VAR : NEWLINE VAR ( VAR , * args , ** kwargs ) NEWLINE VAR . clear ( ) NEWLINE for VAR in VAR . xpath ( STRING ) : NEWLINE while VAR . getprevious ( ) is not None : NEWLINE del VAR . getparent ( ) [ NUMBER ] NEWLINE del VAR NEWLINE def process_element ( VAR ) : NEWLINE print VAR . xpath ( STRING ) NEWLINE VAR = etree . iterparse ( MYFILE , tag = STRING ) NEWLINE fast_iter ( VAR , process_element )", "simple ( )", "def square ( VAR ) : NEWLINE VAR = VAR ** NUMBER NEWLINE return VAR NEWLINE square ( VAR )", "function matching_line ( array1 , array2 ) : NEWLINE if array1 [ NUMBER ] = array2 [ NUMBER ] NEWLINE . . etc", ">> > func ( ** { STRING : NUMBER } ) NEWLINE NUMBER", "VAR = VAR . groupby ( STRING ) . apply ( lambda VAR : list ( VAR . product_id ) [ : NUMBER ] ) NEWLINE print VAR", "Usage NEWLINE $ twistd - ny proxy_modify_request . py", "sorted ( str1 ) == sorted ( str2 )", "import lxml . etree as ET NEWLINE VAR = ET . parse ( tempXmlExportPath ) NEWLINE VAR = VAR . getroot ( )", "import pandas as pd NEWLINE VAR = pd . DataFrame ( { STRING : [ STRING ] } ) NEWLINE VAR = pd . ExcelWriter ( STRING , engine = STRING ) NEWLINE VAR . book . strings_to_urls = False NEWLINE VAR . to_excel ( VAR , sheet_name = STRING ) NEWLINE VAR . save ( )", "[ [ STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING ] ]", "df . apply ( lambda VAR : STRING . join ( [ str ( VAR ) for VAR in VAR ] ) )", ">> > VAR = gimp . Image ( NUMBER , NUMBER , RGB ) NEWLINE >> > pdb . gimp_display_new ( VAR ) NEWLINE < display > NEWLINE >> > VAR = pdb . gimp_layer_group_new ( VAR ) NEWLINE >> > VAR = pdb . gimp_layer_group_new ( VAR ) NEWLINE >> > VAR = pdb . gimp_layer_group_new ( VAR ) NEWLINE >> > VAR = pdb . gimp_layer_group_new ( VAR ) NEWLINE >> > VAR . add_layer ( VAR , NUMBER ) NEWLINE >> > pdb . gimp_image_insert_layer ( VAR , VAR , VAR , NUMBER ) NEWLINE >> > pdb . gimp_image_insert_layer ( VAR , VAR , VAR , NUMBER ) NEWLINE >> > pdb . gimp_image_insert_layer ( VAR , VAR , VAR , NUMBER ) NEWLINE >> > VAR = gimp . Layer ( VAR , STRING , NUMBER , NUMBER ) NEWLINE >> > pdb . gimp_image_insert_layer ( VAR , VAR , VAR , NUMBER )", "In [ NUMBER ] : df NEWLINE Out [ NUMBER ] : NEWLINE close_price short_lower_band long_lower_band NEWLINE Equity ( NUMBER ) NUMBER NUMBER NUMBER NEWLINE Equity ( NUMBER ) NUMBER NUMBER NUMBER NEWLINE Equity ( NUMBER ) NUMBER NUMBER NUMBER NEWLINE Equity ( NUMBER ) NUMBER NUMBER NUMBER NEWLINE Equity ( NUMBER ) NUMBER NUMBER NUMBER NEWLINE Equity ( NUMBER ) NUMBER NUMBER NUMBER NEWLINE In [ NUMBER ] : NEWLINE In [ NUMBER ] : df [ ( df . close_price < df . short_lower_band ) & . . . . . : ( df . close_price < df . long_lower_band ) ] . index . values NEWLINE Out [ NUMBER ] : array ( [ STRING , STRING , STRING ] , dtype = object )", "def print_reports ( VAR , VAR , VAR , VAR , VAR ) : NEWLINE STRING", "VAR = { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER } NEWLINE def path_to_root ( VAR , VAR ) : NEWLINE yield VAR NEWLINE while VAR in VAR : NEWLINE VAR = VAR [ VAR ] NEWLINE yield VAR NEWLINE print list ( path_to_root ( VAR , NUMBER ) )", "[ NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER Class Fail Error Skip Success Total NUMBER Regression_TestCase NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER Total NUMBER NUMBER NUMBER NUMBER NUMBER ]", "VAR = { VAR for VAR in counts_to_display . values ( ) for VAR in VAR }", "VAR = [ ] NEWLINE for VAR in text . split ( ) : NEWLINE if VAR in scores : NEWLINE VAR [ VAR ] = scores [ VAR ] NEWLINE VAR = sum ( VAR )", "list_choices [ i . area . region . id ] . append ( [ i . id , i . name ] )", "for VAR , VAR , VAR in zip ( a_list , b_list , c_list ) : NEWLINE pass", "from pylab import imshow , show , get_cmap NEWLINE from numpy import random NEWLINE VAR = random . random ( ( NUMBER , NUMBER ) ) NEWLINE imshow ( VAR , cmap = get_cmap ( STRING ) , interpolation = STRING ) NEWLINE show ( )", "db . order . aggregate ( [ { $ project : { last_status : { $ arrayElemAt : [ { $ slice : [ STRING , - NUMBER ] } , NUMBER ] } } } , { $ match : { STRING : STRING } } ] )", "VAR = { STRING : [ STRING , STRING , STRING , STRING ] , STRING : [ [ datetime . date ( NUMBER , NUMBER , NUMBER ) , STRING , STRING , STRING ] , [ datetime . date ( NUMBER , NUMBER , NUMBER ) , STRING , STRING , STRING ] ] }", ">> > import os NEWLINE >> > import re NEWLINE >> > pat = STRING NEWLINE >> > from collections import defaultdict NEWLINE >> > dict_date = defaultdict ( lambda : defaultdict ( list ) ) NEWLINE >> > for VAR in os . listdir ( path ) : NEWLINE if os . path . isfile ( os . path . join ( path , VAR ) ) : NEWLINE VAR , VAR = re . match ( pat , VAR ) . groups ( ) NEWLINE dict_date [ VAR ] [ VAR ] . append ( VAR ) NEWLINE >> > dict_date [ STRING ] NEWLINE defaultdict ( < type STRING > , { STRING : [ STRING , STRING , STRING ] } )", "{ % for VAR in allcam % } NEWLINE < p > { { VAR . camurl } } < / p > NEWLINE < p > { { VAR . sitename } } < / p > NEWLINE { % endfor % }", "import re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = VAR . match ( STRING ) NEWLINE if VAR : NEWLINE print STRING , VAR . group ( NUMBER ) + STRING + VAR . group ( NUMBER ) NEWLINE else : NEWLINE print STRING", "VAR = re . compile ( STRING ) NEWLINE def natural_key ( VAR ) : NEWLINE return [ ( NUMBER , int ( VAR ) ) if VAR . isdigit ( ) else ( NUMBER , VAR . lower ( ) ) for VAR in VAR . findall ( VAR ) ] + [ VAR ] NEWLINE for VAR in test_cases : NEWLINE print VAR [ NUMBER ] NEWLINE print sorted ( VAR [ NUMBER ] , key = natural_key{ STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] , STRING : [ STRING , STRING ] } NEWLINE import csv NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR , delimiter = STRING ) NEWLINE for VAR in VAR . items ( ) : NEWLINE VAR . writerow ( VAR )", "Output NEWLINE before : Example ( STRING , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE after : Example ( STRING , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] )", "In [ NUMBER ] : from collections import Counter NEWLINE In [ NUMBER ] : counted_dates = Counter ( df [ STRING ] . apply ( lambda x : x . date ( ) ) ) NEWLINE In [ NUMBER ] : counted_series = pd . Series ( counted_dates ) NEWLINE In [ NUMBER ] : counted_series . index = pd . to_datetime ( counted_series . index ) NEWLINE In [ NUMBER ] : counted_series NEWLINE Out [ NUMBER ] : NEWLINE NUMBER - NUMBER - NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER", "VAR = [ VAR for VAR , VAR in weighted for VAR in range ( VAR ) ]", "instance . elementSets [ STRING ] . elements", "def f3 ( VAR ) : NEWLINE VAR = min ( ( VAR for VAR in VAR if VAR [ NUMBER ] ) , key = lambda VAR : VAR [ NUMBER ] ) [ NUMBER ] NEWLINE return [ VAR for VAR in VAR if VAR [ NUMBER ] == VAR ] NEWLINE % timeit f3 ( VAR ) NEWLINE NUMBER loops , best of NUMBER : NUMBER us per loop", "def load_on_show ( VAR ) : NEWLINE VAR = VAR . tabs . currentIndex ( ) NEWLINE if VAR == NUMBER : NEWLINE VAR = STRING NEWLINE print VAR NEWLINE VAR . tab2 . load_url ( VAR )", ">> > min ( enumerate ( a ) , key = lambda VAR : abs ( VAR [ NUMBER ] - NUMBER ) ) NEWLINE ( NUMBER , NUMBER )", "print clusters [ STRING ]", "class OrderedClass ( type ) : NEWLINE @ classmethod NEWLINE def __prepare__ ( VAR , VAR , VAR , ** kwds ) : NEWLINE return collections . OrderedDict ( ) NEWLINE def __new__ ( VAR , VAR , VAR , VAR , ** kwds ) : NEWLINE VAR = type . __new__ ( VAR , VAR , VAR , dict ( VAR ) ) NEWLINE VAR . members = tuple ( VAR ) NEWLINE return VAR NEWLINE class A ( metaclass = OrderedClass ) : NEWLINE def one ( VAR ) : pass NEWLINE def two ( VAR ) : pass NEWLINE def three ( VAR ) : pass NEWLINE def four ( VAR ) : pass NEWLINE >> > A . members NEWLINE ( STRING , STRING , STRING , STRING , STRING )", ">> > sample ( NUMBER , [ NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] )", "class _BLibrary ( object ) : NEWLINE def __init__ ( self ) : NEWLINE pass NEWLINE def fun2 ( self ) : NEWLINE print STRING NEWLINE def fun3 ( self ) : NEWLINE print STRING", "def get_other_players ( VAR ) : NEWLINE for VAR in similarities . keys ( ) : NEWLINE try : NEWLINE VAR = VAR [ ( VAR . index ( VAR ) + NUMBER ) % NUMBER ] NEWLINE print VAR , STRING , similarities [ VAR ] NEWLINE except ValueError : NEWLINE pass", "for VAR in superstrings . copy ( ) :", "SELECT t1 . alt_bilesen NEWLINE FROM urunler_seviyeler t1 NEWLINE WHERE t1 . parcano = STRING", "VAR = { STRING : STRING } NEWLINE for VAR in list1 : NEWLINE VAR . update ( VAR )", ">> > VAR = [ NUMBER , [ STRING , STRING ] , [ STRING , STRING ] , [ STRING , STRING ] , STRING ] NEWLINE >> > VAR = [ VAR [ NUMBER ] + STRING + VAR [ NUMBER ] + STRING if type ( VAR ) == list and VAR [ NUMBER ] == STRING else str ( VAR ) for VAR in VAR ] NEWLINE >> > VAR NEWLINE [ STRING , STRING , STRING , STRING , STRING ]", "< ? xml version = STRING encoding = STRING ? > NEWLINE < tag1 > NEWLINE < tag2 attr1 = STRING > & quot ; example text & quot ; < / tag2 > NEWLINE < tag3 > NEWLINE < tag4 attr2 = STRING > & quot ; example text & quot ; < / tag4 > NEWLINE < tag5 > NEWLINE < tag6 attr3 = STRING > & apos ; example text & apos ; < / tag6 > NEWLINE < / tag5 > NEWLINE < / tag3 > NEWLINE < / tag1 >", "def visualizeSignals ( VAR , VAR , VAR ) : NEWLINE VAR = VAR . time [ VAR : VAR ] NEWLINE VAR = ( int ) ( ( VAR [ ( len ( VAR ) - NUMBER ) ] - VAR [ NUMBER ] ) / VAR . mod ) + NUMBER NEWLINE VAR = plt . figure ( STRING ) NEWLINE VAR = VAR . gca ( projection = STRING ) NEWLINE for VAR in range ( VAR - NUMBER ) : NEWLINE VAR = VAR . mat1 [ VAR ] [ NUMBER ] + VAR . mod * VAR NEWLINE VAR = np . array ( VAR . mat1T [ VAR ] ) NEWLINE VAR = np . array ( VAR . mat2 [ VAR ] ) NEWLINE VAR . plot ( VAR , VAR , zs = VAR , zdir = STRING ) NEWLINE plt . show ( )", "VAR = [ STRING , NUMBER , STRING , NUMBER ] NEWLINE print ( STRING . format ( STRING , STRING , STRING , STRING ) ) NEWLINE print ( STRING . format ( VAR [ NUMBER ] , VAR [ NUMBER ] , VAR [ NUMBER ] , str ( VAR [ NUMBER ] ) ) )", "VAR = filter ( lambda VAR : len ( VAR ) <= NUMBER , names ) NEWLINE print ( VAR )", "VAR = get_template_attribute ( STRING , STRING ) NEWLINE return VAR ( STRING )", "VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR , VAR = len ( VAR ) , len ( VAR [ NUMBER ] ) NEWLINE VAR = [ ] NEWLINE VAR = [ ] NEWLINE for VAR in range ( VAR + VAR - NUMBER ) : NEWLINE VAR . append ( [ ] ) NEWLINE VAR . append ( [ ] ) NEWLINE VAR = NUMBER NEWLINE if VAR >= VAR : NEWLINE VAR = VAR - VAR + NUMBER NEWLINE VAR = VAR NEWLINE if VAR < VAR - NUMBER : NEWLINE VAR = VAR + NUMBER NEWLINE for VAR in range ( VAR , VAR ) : NEWLINE VAR , VAR = VAR - VAR , VAR NEWLINE VAR [ - NUMBER ] . append ( VAR [ VAR ] [ VAR ] ) NEWLINE VAR = VAR - VAR - NUMBER NEWLINE VAR [ - NUMBER ] . append ( VAR [ VAR ] [ VAR ] ) NEWLINE print STRING , VAR NEWLINE print STRING , VAR", "VAR = json . loads ( jsonfile ) NEWLINE print json2html . convert ( json = VAR )", ">> > VAR = My_tuple ( ** dict ( zip ( vars , vals ) ) ) NEWLINE >> > VAR NEWLINE My_tuple ( var1 = STRING , var2 = STRING )", ">> > VAR , VAR = strs . split ( STRING ) NEWLINE >> > VAR NEWLINE STRING NEWLINE >> > VAR NEWLINE STRING", "print ( A . array ) NEWLINE print ( B . array ) NEWLINE print ( C . array ) NEWLINE", "< table > NEWLINE < tr > NEWLINE < td > NEWLINE < span class = STRING > NEWLINE some text NEWLINE < / span > NEWLINE < / td > NEWLINE < td > NEWLINE < span class = STRING > NEWLINE NUMBER NUMBER NEWLINE < / span > NEWLINE < / td > NEWLINE < / tr > NEWLINE < / table >", "VAR = np . vstack ( [ np . random . multivariate_normal ( coordstest [ VAR , : ] , covs , NUMBER ) for VAR in range ( NUMBER ) ] )", "[ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE NUMBER", "cmds . ls ( long = True , type = STRING )", "< tr > NEWLINE { % for VAR in field . headers % } NEWLINE < th > { { VAR } } < / th > NEWLINE { % endfor % } NEWLINE < / tr >", "category number_of_purchase product_id NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat2 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat1 NUMBER NUMBER NEWLINE NUMBER cat2 NUMBER NUMBER", "expand_grid ( dict ( var_1 . to_dict ( STRING ) , ** var_2 . to_dict ( STRING ) ) ) NEWLINE In [ NUMBER ] : expand_grid ( dict ( var_1 . to_dict ( STRING ) , ** var_2 . to_dict ( STRING ) ) ) NEWLINE Out [ NUMBER ] : NEWLINE val_1 val_2 NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER NUMBER", "VAR = re . findall ( STRING , str )", "NUMBER in [ NUMBER , NUMBER , NUMBER ]", "[ { STRING : [ < __main__ . Article object at NUMBER > , < __main__ . Article object at NUMBER > ] } , { STRING : [ < __main__ . Article object at NUMBER > ] } , { STRING : [ < __main__ . Article object at NUMBER > ] } ]", "VAR = timeString . split ( STRING ) NEWLINE print ( VAR ) - > [ STRING , STRING , STRING ]", "In [ NUMBER ] : VAR = df [ [ STRING , STRING ] + [ VAR for VAR in df . columns if VAR [ - NUMBER ] == STRING ] ] NEWLINE In [ NUMBER ] : VAR = VAR . rename ( columns = lambda VAR : VAR [ : - NUMBER ] if VAR [ - NUMBER ] == STRING else VAR ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE Misc Year a b VAR NEWLINE NUMBER A NUMBER NUMBER h NUMBER NEWLINE NUMBER R NUMBER NUMBER i NUMBER NEWLINE NUMBER B NUMBER NUMBER j NUMBER NEWLINE In [ NUMBER ] : VAR = df [ [ STRING , STRING ] + [ VAR for VAR in df . columns if VAR [ - NUMBER ] == STRING ] ] NEWLINE In [ NUMBER ] : VAR = VAR . rename ( columns = lambda VAR : VAR [ : - NUMBER ] if VAR [ - NUMBER ] == STRING else VAR ) NEWLINE In [ NUMBER ] : pd . concat ( [ VAR , VAR ] ) NEWLINE Out [ NUMBER ] : NEWLINE Misc Year a b VAR NEWLINE NUMBER A NUMBER NUMBER h NUMBER NEWLINE NUMBER R NUMBER NUMBER i NUMBER NEWLINE NUMBER B NUMBER NUMBER j NUMBER NEWLINE NUMBER A NUMBER NUMBER k NUMBER NEWLINE NUMBER R NUMBER NUMBER l NUMBER NEWLINE NUMBER B NUMBER NUMBER m NUMBER", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE def is_slice_in_list ( VAR , VAR ) : NEWLINE VAR = len ( VAR ) NEWLINE return any ( VAR == VAR [ VAR : VAR + VAR ] for VAR in xrange ( len ( VAR ) - VAR + NUMBER ) )", "import urllib2 NEWLINE from lxml import html NEWLINE VAR = urllib2 . urlopen ( STRING ) NEWLINE VAR = html . parse ( VAR ) . getroot ( ) NEWLINE VAR = VAR . get_element_by_id ( STRING ) NEWLINE for VAR in VAR . find ( STRING ) . iterchildren ( STRING ) : NEWLINE for VAR in VAR . iterchildren ( STRING ) : NEWLINE print ( VAR . text_content ( ) )", "from sklearn . datasets import load_iris NEWLINE from sklearn . linear_model import RandomizedLogisticRegression NEWLINE VAR = load_iris ( ) NEWLINE VAR , VAR = VAR . data , VAR . target NEWLINE VAR = RandomizedLogisticRegression ( ) NEWLINE VAR . fit ( VAR , VAR ) NEWLINE print VAR . get_support ( ) NEWLINE", "customer_id date invoice_amt no_days_since_last_purchase days_since NEWLINE NUMBER NUMBER A NUMBER - NUMBER - NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NUMBER A NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER - NUMBER NUMBER - NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NUMBER A NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER B NUMBER - NUMBER - NUMBER NUMBER NaN NUMBER NEWLINE NUMBER NUMBER B NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER B NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER", ">> > import datetime as dt NEWLINE >> > VAR = STRING NEWLINE >> > VAR = dt . datetime . strptime ( VAR , STRING ) NEWLINE >> > VAR NEWLINE datetime . datetime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE >> > VAR = dt . datetime . strftime ( VAR , STRING ) NEWLINE >> > VAR NEWLINE STRING", "class Update_MyStore ( MyStore ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR = shelve . open ( VAR ) NEWLINE for VAR in VAR : NEWLINE setattr ( VAR , VAR , VAR [ VAR ] ) NEWLINE VAR . items ( ) NEWLINE VAR . store_in_db ( ) NEWLINE Update_MyStore ( STRING )", "def do_stuff ( VAR ) : NEWLINE print STRING % VAR", "df [ STRING ] = ( df . col2 > NUMBER ) . astype ( STRING )", "import csv NEWLINE from itertools import izip_longest NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = NUMBER NEWLINE VAR = izip_longest ( * [ iter ( list ( VAR ) [ NUMBER ] ) ] * VAR , fillvalue = STRING ) NEWLINE print STRING . join ( STRING . join ( VAR ) for VAR in VAR )", ">> > findbetween ( STRING , STRING ) NEWLINE [ STRING , STRING , STRING ] NEWLINE >> > findbetween ( STRING , STRING ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > findbetween ( STRING , STRING ) NEWLINE [ STRING , STRING ] NEWLINE >> > findbetween ( STRING , STRING ) NEWLINE [ STRING , STRING ] NEWLINE >> > findbetween ( STRING , STRING ) NEWLINE [ STRING , STRING ]", "$ SETTINGS_MODE = prod python manage . py migrate", "import os NEWLINE from subprocess import Popen NEWLINE VAR = STRING NEWLINE os . mkfifo ( VAR ) NEWLINE VAR = Popen ( [ STRING , STRING , STRING , STRING , VAR ] ) NEWLINE with open ( VAR , STRING ) as VAR : NEWLINE VAR . write ( STRING ) NEWLINE os . remove ( VAR ) NEWLINE VAR . wait ( )", "\\ ( ( [ ^ ( ) ] * ) \\ ) NEWLINE ( ? = ( ? : \\ s * \\ ( [ ^ ( ) ] * \\ ) ) * \\ s * $ )", ">> > def convert_to_tuple ( elem ) : NEWLINE if isinstance ( elem , list ) : NEWLINE return tuple ( elem ) NEWLINE elif isinstance ( elem , basestring ) : NEWLINE return ( elem , ) NEWLINE else : NEWLINE pass NEWLINE >> > convert_to_tuple ( STRING ) NEWLINE ( STRING , ) NEWLINE >> > convert_to_tuple ( [ STRING , STRING ] ) NEWLINE ( STRING , STRING )", "class ContextMixin : NEWLINE VAR = { } NEWLINE def get_context_data ( VAR , ** kwargs ) : NEWLINE VAR = super ( ContextMixin , VAR ) . get_context_data ( ** kwargs ) NEWLINE VAR . update ( VAR . VAR ) NEWLINE return VAR NEWLINE class FooUpdate ( ContextMixin , UpdateView ) : NEWLINE VAR = Foo NEWLINE VAR = { STRING : STRING }", "[ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "VAR = df . groupby ( STRING ) . apply ( lambda VAR : VAR [ STRING ] . unique ( ) . shape [ NUMBER ] > NUMBER and VAR [ STRING ] . unique ( ) . shape [ NUMBER ] > NUMBER ) * NUMBER NEWLINE df . set_index ( STRING , inplace = True ) NEWLINE df [ STRING ] = VAR", "while VAR [ NUMBER ] != STRING : NEWLINE VAR = raw_input ( STRING ) . split ( ) NEWLINE try : NEWLINE print STRING % ( VAR [ NUMBER ] . capitalize ( ) , VAR [ NUMBER ] . lower ( ) , people [ VAR [ NUMBER ] . capitalize ( ) ] [ VAR [ NUMBER ] . lower ( ) ] ) NEWLINE except KeyError : NEWLINE print wrong ,", "for VAR , VAR in enumerate ( str1 ) : NEWLINE if str2 [ NUMBER ] == VAR : NEWLINE print ( STRING , VAR ) NEWLINE print ( str2 == str1 [ VAR : VAR + len ( str2 ) ] )", "for VAR in tree . iterfind ( STRING ) : NEWLINE if VAR . get ( STRING ) == STRING : NEWLINE VAR . set ( STRING , STRING ) NEWLINE", "globals ( ) [ func_name ] ( )", "VAR = set ( ) NEWLINE for VAR in reader1 : NEWLINE VAR . add ( VAR [ NUMBER ] )", "global clearscreen", "[ [ NUMBER ] [ - NUMBER ] [ NUMBER ] [ - NUMBER ] [ NUMBER ] ]", ">> > VAR = [ [ STRING , STRING , None , STRING ] , [ STRING , STRING , STRING ] ] NEWLINE >> > VAR , VAR = [ VAR if VAR is None else VAR . split ( STRING ) [ NUMBER ] for VAR in itertools . chain ( * VAR ) ] , [ VAR if VAR is None else VAR . split ( STRING ) [ NUMBER ] for VAR in itertools . chain ( * VAR ) ] NEWLINE >> > VAR NEWLINE [ STRING , STRING , None , STRING , STRING , STRING , STRING ] NEWLINE >> > VAR NEWLINE [ STRING , STRING , None , STRING , STRING , STRING , STRING ]", "VAR = [ ] NEWLINE VAR = subprocess . Popen ( [ STRING , STRING , password , STRING , STRING , STRING , source12 , destination ] , stdout = subprocess . PIPE ) NEWLINE while VAR . poll ( ) is None : NEWLINE VAR = VAR . stdout . readline ( ) NEWLINE print VAR NEWLINE VAR . append ( VAR ) NEWLINE print sort ( VAR )", "VAR = NUMBER NEWLINE print sum ( VAR in VAR for VAR in A . itervalues ( ) )", "open ( myfile , STRING )", "url ( STRING , views . BlogUpdateView . publish , name = STRING ) ,", "lib32c - dev : Not Specified NEWLINE libc6 - x32 : NUMBER NEWLINE libc6 - i386 : NUMBER NEWLINE libncurses5 - dev : NUMBER + NUMBER - NUMBER ubuntu1 NEWLINE libc6 - dev : Not Specified NEWLINE libc - dev : Not Specified NEWLINE libncursesw5 - dev : NUMBER + NUMBER - NUMBER ubuntu1 NEWLINE libc6 - dev - x32 : Not Specified", "import numpy as np NEWLINE from collections import Counter NEWLINE VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE VAR = np . zeros ( ( NUMBER , NUMBER ) ) NEWLINE for ( VAR , VAR ) , VAR in Counter ( zip ( VAR , VAR [ NUMBER : ] ) ) . iteritems ( ) : NEWLINE VAR [ VAR - NUMBER , VAR - NUMBER ] = VAR NEWLINE print VAR NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "Setup NEWLINE from StringIO import StringIO NEWLINE import pandas as pd NEWLINE VAR = STRING NEWLINE VAR = pd . read_csv ( StringIO ( VAR ) , delim_whitespace = True , parse_dates = [ NUMBER ] )", "VAR = open ( STRING , STRING ) NEWLINE VAR . writelines ( var1 ) NEWLINE VAR . close ( )", ">> > from bs4 import BeautifulSoup NEWLINE >> > from itertools import takewhile NEWLINE >> > VAR = BeautifulSoup ( STRING ) NEWLINE >> > VAR = VAR . find ( STRING , class_ = STRING ) NEWLINE >> > for VAR in VAR . find_all ( STRING ) : NEWLINE . . . print VAR . get_text ( ) NEWLINE . . . VAR = takewhile ( lambda VAR : VAR . name == STRING , . . . VAR . find_next_siblings ( text = False ) ) NEWLINE . . . print STRING , len ( list ( VAR ) ) NEWLINE . . . NEWLINE Game1 . How to get all VAR below and assign to class STRING ? NEWLINE Listings found : NUMBER NEWLINE Game2 . How to get all VAR below and assign to class \" game ? NEWLINE Listings found : NUMBER NEWLINE Game3 . How to get all VAR below and assign to class \" game ? NEWLINE Listings found : NUMBER", "VAR = self . treeview . get_model ( )", "VAR = ( abs ( df [ STRING ] ) > abs ( df [ STRING ] ) ) * df [ STRING ] / df [ STRING ] NEWLINE VAR = ( abs ( df [ STRING ] ) <= abs ( df [ STRING ] ) ) * df [ STRING ] / df [ STRING ] NEWLINE df [ STRING ] = VAR + VAR", "print test . groupby ( [ STRING , STRING , STRING ] ) . sum ( ) . reset_index ( level = NUMBER ) NEWLINE SampleMeta Value NEWLINE GroupID Sample NEWLINE NUMBER S1 S1_meta NUMBER NEWLINE NUMBER S2 S2_meta NUMBER", "VAR = re . findall ( STRING , data , re . DOTALL | re . MULTILINE )", "VAR = { STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] , STRING : [ NUMBER , [ ] ] }", "VAR = datetime . now ( pytz . timezone ( STRING ) ) NEWLINE VAR = make_naive ( VAR , pytz . timezone ( STRING ) ) NEWLINE VAR > campaingObject . publish_end", "print STRING % ( max_title_width , column )", ">> > VAR = [ ( STRING + VAR + STRING + VAR ) for VAR in masterDF . columns ] NEWLINE >> > VAR = STRING . join ( VAR ) NEWLINE >> > VAR NEWLINE STRING", "VAR = threading . local ( )", "for VAR in reversed ( Tuple ) : NEWLINE if STRING in VAR : NEWLINE Dict [ STRING ] = VAR [ STRING ] NEWLINE break", "VAR , VAR = np . triu_indices ( NUMBER ) NEWLINE p [ : , VAR , VAR ] = NUMBER NEWLINE q [ : , VAR , VAR ] = NUMBER NEWLINE p [ : , : , : , : , : , VAR , VAR ] = NUMBER NEWLINE q [ : , : , : , : , : , VAR , VAR ] = NUMBER NEWLINE print ( ( p - q ) ** NUMBER ) . sum ( ) NEWLINE print ( ( p ** NUMBER ) . sum ( ) , ( q ** NUMBER ) . sum ( ) )", "import numpy as np NEWLINE import pandas as pd NEWLINE import scipy . sparse as sparse NEWLINE VAR = pd . DataFrame ( np . arange ( NUMBER , NUMBER ) . reshape ( NUMBER , NUMBER ) ) NEWLINE VAR = sparse . coo_matrix ( ( [ NUMBER , NUMBER , NUMBER ] , ( [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ) ) , shape = ( NUMBER , NUMBER ) ) NEWLINE VAR [ STRING ] = VAR . toarray ( ) . tolist ( ) NEWLINE print ( VAR )", "dCE / dZ2 ( NUMBER ) = dCE / dZ3 * dZ3 / dL2 ( NUMBER ) * dL2 ( NUMBER ) / dZ2 ( NUMBER ) NEWLINE = ( L3 - Y ) * theta2 ( NUMBER ) * L2 ( NUMBER ) * ( NUMBER - L2 ( NUMBER ) ) NEWLINE dCE / dZ2 ( NUMBER ) = dCE / dZ3 * dZ3 / dL2 ( NUMBER ) * dL2 ( NUMBER ) / dZ2 ( NUMBER ) NEWLINE = ( L3 - Y ) * theta2 ( NUMBER ) * L2 ( NUMBER ) * ( NUMBER - L2 ( NUMBER ) ) NEWLINE dCE / dZ2 ( NUMBER ) = dCE / dZ3 * dZ3 / dL2 ( NUMBER ) * dL2 ( NUMBER ) / dZ2 ( NUMBER ) NEWLINE = ( L3 - Y ) * theta2 ( NUMBER ) * L2 ( NUMBER ) * ( NUMBER - L2 ( NUMBER ) )", "VAR = { } NEWLINE VAR . setdefault ( key , set ( ) ) . add ( value )", "In [ NUMBER ] : d2 [ STRING ] = d2 [ STRING ] . str . replace ( STRING , STRING ) . astype ( float ) NEWLINE In [ NUMBER ] : d2 NEWLINE Out [ NUMBER ] : NEWLINE symbol date price NEWLINE NUMBER spx NUMBER / NUMBER / NUMBER NUMBER NEWLINE NUMBER spx NUMBER / NUMBER / NUMBER NUMBER NEWLINE NUMBER spx NUMBER / NUMBER / NUMBER NUMBER", "N ( NUMBER ) = N ( NUMBER ) + N ( NUMBER ) * exp ( - NUMBER ) NEWLINE N ( NUMBER ) = N ( NUMBER ) + ( N ( NUMBER ) + N ( NUMBER ) * exp ( - NUMBER ) ) * exp ( - NUMBER ) NEWLINE N ( NUMBER ) = N ( NUMBER ) + N ( NUMBER ) * exp ( - NUMBER ) + N ( NUMBER ) * exp ( - NUMBER ) NEWLINE N ( NUMBER ) = . . . and so on", ">> > VAR = type ( STRING , ( ) , { STRING : lambda VAR , VAR : VAR } ) ( ) NEWLINE >> > VAR [ NUMBER : NUMBER ] NEWLINE slice ( NUMBER , NUMBER , None ) NEWLINE >> > VAR [ NUMBER : NUMBER : NUMBER ] NEWLINE slice ( NUMBER , NUMBER , NUMBER ) NEWLINE >> >", "if NUMBER < ( modifiedTimeEnd - modifiedTimeStart ) <= maxWriteFrequency", "VAR = np . array ( [ [ [ NUMBER , NUMBER , NUMBER , - NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ - NUMBER , NUMBER , NUMBER , NUMBER ] ] , [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , - NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , - NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] ] ) NEWLINE VAR = detect_local_minima ( VAR ) NEWLINE print ( VAR ) NEWLINE", "if GO_TO_MAX_SPEED and NOT_AT_MAX_SPEED : NEWLINE ACCELERATE", "VAR = VAR . index ( STRING ) + NUMBER NEWLINE VAR = VAR [ : VAR ] + STRING + VAR [ VAR : ]", ">> > from nltk . tree import Tree NEWLINE >> > VAR = STRING NEWLINE >> > VAR = Tree . fromstring ( VAR ) NEWLINE >> > VAR NEWLINE Tree ( STRING , [ Tree ( STRING , [ Tree ( STRING , [ STRING ] ) , Tree ( STRING , [ Tree ( STRING , [ STRING ] ) ] ) , Tree ( STRING , [ Tree ( STRING , [ STRING ] ) ] ) ] ) ] ) NEWLINE >> > for VAR in VAR . subtrees ( ) : NEWLINE . . . print VAR NEWLINE . . . NEWLINE ( S ( VP ( VB get ) ( NP ( PRP me ) ) ( ADVP ( RB now ) ) ) ) NEWLINE ( VP ( VB get ) ( NP ( PRP me ) ) ( ADVP ( RB now ) ) ) NEWLINE ( VB get ) NEWLINE ( NP ( PRP me ) ) NEWLINE ( PRP me ) NEWLINE ( ADVP ( RB now ) ) NEWLINE ( RB now )", "% timeit jumpvec3 ( pmat , NUMBER ) NEWLINE % timeit jumpvec2 ( pmat , NUMBER ) NEWLINE % timeit jumpvec ( pmat , NUMBER )", "VAR = VAR [ STRING ] . value_counts ( ) NEWLINE VAR = [ VAR not in set ( VAR [ VAR == NUMBER ] . index ) for VAR in VAR [ STRING ] ] NEWLINE VAR = VAR [ VAR ]", "print ( [ VAR for VAR in vars ( ) [ STRING ] . __subclasses__ ( ) ] ) NEWLINE", "Thread STRING ok STRING hi ' } NEWLINE Thread STRING ok STRING HMM ' }", "In [ NUMBER ] : VAR [ [ STRING , STRING ] ] = VAR [ [ STRING , STRING ] ] . shift ( - NUMBER ) NEWLINE In [ NUMBER ] : VAR [ [ STRING , STRING , STRING ] ] = VAR [ [ STRING , STRING , STRING ] ] . fillna ( ) NEWLINE In [ NUMBER ] : VAR = VAR . dropna ( ) NEWLINE In [ NUMBER ] : VAR NEWLINE Out [ NUMBER ] : NEWLINE SampleID OtherInfo Measurements Error Notes NEWLINE NUMBER sample1 stuff NUMBER NUMBER more stuff NEWLINE NUMBER sample1 stuff NUMBER NUMBER more stuff NEWLINE NUMBER sample1 stuff NUMBER NUMBER more stuff NEWLINE NUMBER sample2 newstuff NUMBER NUMBER lots of stuff NEWLINE NUMBER sample2 newstuff NUMBER NUMBER lots of stuff", "class BSplineDrawer ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . ctx = VAR NEWLINE def draw ( VAR , VAR ) : NEWLINE VAR = zip ( VAR . points [ : - NUMBER ] , VAR . points [ NUMBER : ] ) NEWLINE VAR = [ VAR . interpolate ( VAR , NUMBER / NUMBER ) for VAR , VAR in VAR ) NEWLINE VAR = [ VAR . interpolate ( VAR , NUMBER / NUMBER ) for VAR , VAR in VAR ) NEWLINE VAR = [ None ] * NUMBER NEWLINE for VAR in xrange ( len ( VAR . points ) - NUMBER ) : NEWLINE VAR = VAR [ VAR ] . interpolate ( VAR [ VAR + NUMBER ] ) NEWLINE VAR [ NUMBER : NUMBER ] = VAR [ VAR + NUMBER ] NEWLINE VAR [ NUMBER : NUMBER ] = VAR [ VAR + NUMBER ] NEWLINE VAR [ NUMBER : NUMBER ] = VAR [ VAR + NUMBER ] . interpolate ( VAR [ VAR + NUMBER ] ) NEWLINE VAR . VAR . move_to ( * VAR ) NEWLINE VAR . VAR . curve_to ( * VAR ) NEWLINE VAR . VAR . stroke ( )", "import feedparser NEWLINE VAR = feedparser . parse ( STRING ) NEWLINE for VAR in VAR . entries : NEWLINE print str ( VAR . link )", "( STRING , [ NUMBER , STRING , STRING , STRING ] ) NEWLINE ( STRING , [ NUMBER , STRING , STRING , NUMBER ] ) NEWLINE ( STRING , [ NUMBER , STRING , STRING , NUMBER ] ) NEWLINE ( STRING , [ NUMBER , STRING , STRING , NUMBER ] )", "( ( ? : ( ? ! \\ band \\ b ) [ ^ STRING [ ^ STRING \\ \\ ] * ) * STRING ] ) * ) * ) ( ? : and | $ )", "[ STRING ]", "VAR = set ( range ( NUMBER , NUMBER ) ) NEWLINE VAR = [ ]", ">> > VAR = [ lambda VAR : VAR + NUMBER , lambda VAR : VAR * NUMBER ] NEWLINE >> > reduce ( lambda VAR , VAR : VAR ( VAR ) , VAR , NUMBER ) NEWLINE NUMBER", ">> > VAR = itertools . chain . from_iterable ( sixbit ) NEWLINE >> > list ( itertools . izip ( * [ VAR ] * NUMBER ) ) NEWLINE [ ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) , ( STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ]", ">> > VAR = { STRING : STRING , STRING : STRING } NEWLINE >> > STRING . join ( STRING . format ( VAR , VAR ) for VAR , VAR in VAR . items ( ) ) NEWLINE STRING", "import pandas as pd NEWLINE import datetime NEWLINE VAR = lambda VAR : pd . datetime . strptime ( VAR , STRING ) NEWLINE VAR = pd . read_csv ( STRING , index_col = STRING , parse_dates = [ NUMBER ] , date_parser = VAR ) NEWLINE VAR = VAR . reset_index ( ) . groupby ( [ STRING , STRING ] ) [ STRING ] . apply ( pd . Series . expanding ) NEWLINE VAR = VAR . reset_index ( ) . groupby ( [ STRING , STRING , STRING ] ) [ STRING ] . count ( ) . index NEWLINE VAR = pd . concat ( [ VAR . iloc [ VAR ] . mean ( ) . shift ( NUMBER ) for VAR in range ( len ( VAR ) ) ] ) NEWLINE VAR . index = VAR NEWLINE VAR . to_csv ( STRING )", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE from matplotlib . widgets import RectangleSelector NEWLINE def main ( ) : NEWLINE VAR , VAR = np . random . random ( ( NUMBER , NUMBER ) ) NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR . scatter ( VAR , VAR , color = STRING ) NEWLINE VAR = Highlighter ( VAR , VAR , VAR ) NEWLINE plt . show ( ) NEWLINE VAR = VAR . VAR NEWLINE print VAR [ ~ VAR ] , VAR [ ~ VAR ] NEWLINE class Highlighter ( object ) : NEWLINE def __init__ ( VAR , VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . canvas = VAR . figure . canvas NEWLINE VAR . VAR , VAR . VAR = VAR , VAR NEWLINE VAR . VAR = np . zeros ( VAR . shape , dtype = bool ) NEWLINE VAR . _highlight = VAR . scatter ( [ ] , [ ] , s = NUMBER , color = STRING , zorder = NUMBER ) NEWLINE VAR . selector = RectangleSelector ( VAR , VAR , useblit = True ) NEWLINE def __call__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR |= VAR . inside ( VAR , VAR ) NEWLINE VAR = np . column_stack ( [ VAR . VAR [ VAR . VAR ] , VAR . VAR [ VAR . VAR ] ] ) NEWLINE VAR . _highlight . set_offsets ( VAR ) NEWLINE VAR . canvas . draw ( ) NEWLINE def inside ( VAR , VAR , VAR ) : NEWLINE STRING NEWLINE VAR , VAR = sorted ( [ VAR . xdata , VAR . xdata ] ) NEWLINE VAR , VAR = sorted ( [ VAR . ydata , VAR . ydata ] ) NEWLINE VAR = ( ( VAR . VAR > VAR ) & ( VAR . VAR < VAR ) & ( VAR . VAR > VAR ) & ( VAR . VAR < VAR ) ) NEWLINE return VAR NEWLINE main ( )", "STRING % ( num )", "< script type = STRING > NEWLINE ( STRING ) . load ( STRING ) ; NEWLINE < / script >", "def read_by_tokens ( VAR ) : NEWLINE for VAR in VAR : NEWLINE for VAR in VAR . split ( ) : NEWLINE yield VAR", "; ; Indentation : Automatic indentation with indentation cycling is NEWLINE ; ; provided , it allows you to navigate different available levels of NEWLINE ; ; indentation by hitting < tab > several times . Also when inserting a NEWLINE ; ; colon the ` python - indent - electric - colon ' command is invoked and NEWLINE ; ; causes the current line to be dedented automatically if needed .", ">> > str ( STRING ) NEWLINE STRING", "VAR = ( ( ( df . type == NUMBER ) & ( ( df . subtype == NUMBER ) | ( df . subtype == NUMBER ) | ( df . subtype == NUMBER ) | ( df . subtype == NUMBER ) ) ) | ( ( df . type == NUMBER ) & ( ( df . subtype == NUMBER ) | ( df . subtype == NUMBER ) | ( df . subtype == NUMBER ) | ( df . subtype == NUMBER ) ) ) ) NEWLINE VAR . sum ( )", "VAR = range ( NUMBER ) NEWLINE VAR = NUMBER NEWLINE dict ( ( VAR * VAR ** NUMBER + VAR * VAR + VAR , ( VAR , VAR , VAR ) ) for VAR in VAR for VAR in VAR for VAR in VAR )", "class Team ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE def get_teams ( VAR ) : NEWLINE VAR = Team . objects . all ( ) NEWLINE for VAR in VAR : NEWLINE VAR . team_win_percent = calculate_team_win ( VAR ) NEWLINE VAR . team_lose_percent = calculate_team_loss ( VAR ) NEWLINE . . . .", "{ NUMBER : STRING } NEWLINE { NUMBER : Velmi luouk k } NEWLINE Velmi luouk k", "import numpy as np NEWLINE VAR = np . random . rand ( NUMBER ) NEWLINE VAR = np . random . rand ( NUMBER ) NEWLINE VAR = np . where ( ( abs ( VAR - VAR ) / VAR ) > NUMBER , NUMBER , NUMBER )", "VAR = { STRING : STRING , STRING : STRING } NEWLINE VAR = ( { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ) NEWLINE for VAR in VAR : NEWLINE if STRING in VAR : NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE break", "import unittest NEWLINE class VigTestCase ( unittest . TestCase ) : NEWLINE def test_vigenere ( VAR ) : NEWLINE VAR . assertEqual ( vigenere ( STRING , STRING ) , STRING ) NEWLINE def test_vigsquare ( VAR ) : NEWLINE VAR . assertEqual ( vigsquare ( printable = False ) , STRING ) NEWLINE def test_vig2 ( VAR ) : NEWLINE for VAR in string . ascii_uppercase : NEWLINE for VAR in string . ascii_uppercase : NEWLINE VAR . assertEqual ( vig_2 ( VAR , VAR ) , vigenere ( VAR , VAR ) ) NEWLINE unittest . main ( ) NEWLINE . . . NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE Ran NUMBER tests in NUMBER s NEWLINE OK", "import re NEWLINE class RegExConcordanceIndex ( object ) : NEWLINE STRING NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . _text = VAR NEWLINE def print_concordance ( VAR , VAR , VAR = NUMBER , VAR = NUMBER , VAR = STRING ) : NEWLINE STRING NEWLINE VAR = [ ] NEWLINE VAR = re . finditer ( VAR , VAR . _text , flags = re . M ) NEWLINE if VAR : NEWLINE for VAR in VAR : NEWLINE VAR , VAR = VAR . VAR ( ) , VAR . VAR ( ) NEWLINE VAR = VAR - VAR NEWLINE VAR = ( VAR - VAR ) // NUMBER NEWLINE if VAR - VAR > NUMBER : NEWLINE VAR = VAR . _text [ VAR - VAR : VAR ] NEWLINE VAR = VAR . split ( STRING ) [ - NUMBER ] NEWLINE else : NEWLINE VAR = VAR . _text [ NUMBER : VAR + NUMBER ] . split ( STRING ) [ - NUMBER ] NEWLINE VAR = VAR . _text [ VAR : VAR + VAR ] . split ( STRING ) [ NUMBER ] NEWLINE VAR . append ( VAR + VAR + VAR . _text [ VAR : VAR ] + VAR + VAR ) NEWLINE if VAR and len ( VAR ) >= VAR : NEWLINE break NEWLINE print ( STRING % ( len ( VAR ) ) ) NEWLINE print STRING . join ( VAR ) NEWLINE else : NEWLINE print STRING", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE print STRING . format ( * VAR )", "STRING . join ( [ STRING , STRING , STRING ] ) NEWLINE", "VAR = [ ] NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR . append ( get_next_number ( ) ) NEWLINE print ( VAR )", "import scipy . stats as stats NEWLINE VAR , VAR , VAR = NUMBER , NUMBER , NUMBER NEWLINE VAR = stats . gamma ( VAR , VAR , VAR ) NEWLINE VAR = stats . gamma ( VAR , VAR = VAR , VAR = VAR ) NEWLINE print STRING NEWLINE print STRING . format ( VAR . args ) NEWLINE print STRING . format ( VAR . kwds ) NEWLINE print NEWLINE print STRING NEWLINE print STRING . format ( VAR . args ) NEWLINE print STRING . format ( VAR . kwds )", "B ' ( t ) = - NUMBER * P1 * ( NUMBER - t ) + NUMBER * P2 * ( NUMBER - NUMBER * t ) + NUMBER * P3 * t NEWLINE = NUMBER * ( P1 - NUMBER * P2 + P3 ) * t + NUMBER * ( - P1 + P2 )", "xmacroplay : NEWLINE Reads lines from the standard input . It can understand the following lines : NEWLINE Delay [ sec ] - delays the program with [ sec ] secundums NEWLINE ButtonPress [ n ] - sends a ButtonPress event with button [ n ] NEWLINE this emulates the pressing of the mouse button [ n ] NEWLINE ButtonRelease [ n ] - sends a ButtonRelease event with button [ n ] NEWLINE this emulates the releasing of the mouse button [ n ] NEWLINE . . . snip lots more . . .", "{ % for VAR , VAR , VAR in result % } NEWLINE { { VAR } } NEWLINE { { VAR } } NEWLINE { % endfor % }", "import subprocess NEWLINE def view_file ( VAR ) : NEWLINE subprocess . Popen ( VAR , shell = True ) . wait ( )", "import signal NEWLINE import sys NEWLINE VAR = NUMBER NEWLINE def handler ( VAR , VAR ) : NEWLINE global VAR NEWLINE print STRING , VAR NEWLINE VAR += NUMBER NEWLINE if VAR >= NUMBER : NEWLINE sys . exit ( NUMBER ) NEWLINE signal . signal ( signal . SIGINT , handler ) NEWLINE VAR = NUMBER NEWLINE while True : NEWLINE VAR += NUMBER", ">> > import re NEWLINE >> > def split_string ( VAR , VAR ) : NEWLINE . . . return re . split ( STRING . format ( re . escape ( VAR ) ) , VAR ) NEWLINE . . . NEWLINE >> > split_string ( STRING , STRING ) NEWLINE [ STRING , STRING , STRING ]", "class TaskServer ( tornado . web . Application ) : NEWLINE def __init__ ( VAR , VAR = [ ] , VAR = None ) : NEWLINE VAR = STRING NEWLINE VAR = [ ( STRING + VAR , JobsHandler ) , ( STRING , JobsHandler ) , ( STRING + VAR , NewJobsHandler ) , ( STRING + VAR , EditJobsHandler ) ] NEWLINE for VAR in VAR : NEWLINE VAR . append ( VAR ) NEWLINE tornado . web . Application . __init__ ( VAR , VAR , VAR = VAR )", "python { envbindir } / coverage run - p testing / run_tests . py NEWLINE python { envbindir } / coverage run - p testing / run_tests . py testing . settings_no_debug", "import csv NEWLINE from collections import OrderedDict NEWLINE VAR = open ( STRING , mode = STRING ) NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE VAR = OrderedDict ( ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR [ NUMBER ] ] = VAR [ NUMBER : ] NEWLINE print ( VAR )", "for VAR in mbox : NEWLINE VAR = { STRING : VAR [ STRING ] , STRING : VAR [ STRING ] , STRING : VAR [ STRING ] , STRING : VAR [ STRING ] , STRING : getbody ( VAR ) } NEWLINE VAR = getattachements ( VAR ) NEWLINE if len ( VAR ) > NUMBER : NEWLINE VAR = map ( lambda VAR : { STRING : VAR [ NUMBER ] , STRING : VAR [ NUMBER ] } , VAR ) NEWLINE VAR [ STRING ] = VAR NEWLINE collection . insert_one ( VAR )", "def function ( ** kwargs ) : NEWLINE VAR = dict ( [ VAR for VAR in kwargs . iteritems ( ) if VAR [ NUMBER ] != None ] ) NEWLINE if not VAR : NEWLINE raise Exception ( STRING ) NEWLINE return VAR", "import requests NEWLINE for VAR in xrange ( NUMBER , NUMBER ) : NEWLINE VAR = requests . get ( STRING . format ( VAR ) ) NEWLINE if not VAR . ok : NEWLINE continue NEWLINE VAR = BeautifulSoup ( requests . text ) NEWLINE for VAR in VAR . findAll ( STRING , { STRING : STRING } ) : NEWLINE print re . sub ( STRING , STRING , STRING . join ( VAR . findAll ( text = True ) ) . encode ( STRING ) ) NEWLINE print STRING NEWLINE VAR = VAR + NUMBER", "Size of match : NUMBER NEWLINE Match : { NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER , NUMBER : NUMBER }", "A1 A2 NEWLINE B1 B2 NEWLINE A3 A4", ">> > np . searchsorted ( a , b , side = STRING ) - NUMBER NEWLINE array ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE >> > a [ np . searchsorted ( a , b , side = STRING ) - NUMBER ] NEWLINE array ( [ NUMBER , NUMBER , NUMBER ] )", "def str ( VAR , VAR ) : NEWLINE print VAR NEWLINE VAR , VAR = None , VAR . __iter . next ( ) NEWLINE while isinstance ( VAR , int ) : NEWLINE print VAR NEWLINE VAR , VAR = VAR , VAR . __iter . next ( )", "import httplib NEWLINE from StringIO import StringIO NEWLINE VAR = STRING NEWLINE VAR = StringIO ( VAR ) NEWLINE VAR = httplib . HTTPMessage ( VAR ) NEWLINE assert VAR [ STRING ] == STRING", "VAR = mock_open ( ) NEWLINE with patch ( STRING , VAR , create = True ) :", "class Final ( type ) : NEWLINE def __new__ ( VAR , VAR , VAR , VAR ) : NEWLINE for VAR in VAR : NEWLINE if isinstance ( VAR , Final ) : NEWLINE raise TypeError ( STRING . format ( VAR . __name__ ) ) NEWLINE return type . __new__ ( VAR , VAR , VAR , dict ( VAR ) ) NEWLINE class Foo : NEWLINE VAR = Final NEWLINE class Bar ( Foo ) : NEWLINE pass", ">> > VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > [ STRING . format ( * VAR ) for VAR in zip ( * [ iter ( VAR ) ] * NUMBER ) ] NEWLINE [ STRING , STRING ]", "qrsh - l exclusive = NUMBER < myjob >", ">> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > VAR = [ ord ( VAR ) ^ ord ( VAR ) for VAR , VAR in zip ( VAR , VAR ) ] NEWLINE >> > VAR NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "for VAR , VAR in d . items ( ) : NEWLINE if VAR == searchValue : NEWLINE print ( VAR )", "VAR &= NUMBER ** NUMBER - NUMBER", "In [ NUMBER ] : g . wa . sum ( ) NEWLINE Out [ NUMBER ] : NEWLINE Date NEWLINE NUMBER / NUMBER / NUMBER NUMBER NEWLINE NUMBER / NUMBER / NUMBER NUMBER NEWLINE Name : wa , dtype : float64", "import threading NEWLINE def do_every ( VAR , VAR , VAR = NUMBER ) : NEWLINE if VAR != NUMBER : NEWLINE threading . Timer ( VAR , do_every , [ VAR , VAR , NUMBER if VAR == NUMBER else VAR - NUMBER ] ) . start ( ) NEWLINE VAR ( ) NEWLINE def print_hw ( ) : NEWLINE print STRING NEWLINE def print_so ( ) : NEWLINE print STRING NEWLINE do_every ( NUMBER , print_so , NUMBER ) NEWLINE do_every ( NUMBER , print_hw )", "VAR = do_projections ( actdf ) NEWLINE VAR . aname", "VAR = [ VAR . replace ( STRING , STRING ) for VAR in self . test_lockCheck ( ) ]", "import pandas as pd NEWLINE VAR = pd . Series ( range ( NUMBER , NUMBER ) ) NEWLINE VAR = pd . rolling_mean ( VAR , window = NUMBER ) . shift ( - NUMBER ) NEWLINE print ( VAR )", "IGHV1 - NUMBER : CARDSDYDWYFDLW - CAREGYNWNDEGRFDYW NEWLINE IGHV1 - NUMBER - IGHJ2 : CARDSDYDWYFDLW NEWLINE IGHV1 - NUMBER - IGHJ4 : CARDIAVPGHGDYW - CARRIGYSSGSEDYW - CAREGYNWNDEGRFDYW NEWLINE IGHV1 - NUMBER - IGHJ3 : CARGQTYYDILTGPSDAFDIW NEWLINE IGHV3 - NUMBER - IGHJ : CATSGGSP NEWLINE IGHV3 - NUMBER - IGHJ4 : CARDGDGYNDYW NEWLINE IGHV3 - NUMBER - IGHJ3 : CAKWGPDAFDIW - CAKSGGWYLSDAFDIW - CAKSSGWYLSDAFDIW NEWLINE STRING and STRING differ by < NUMBER characters NEWLINE IGHV3 - NUMBER - IGHJ4 : CAKDWELYYFDYW - CAKDRGYTGYGVYFDYW - CAKDRGYTGFGVYFDYW NEWLINE STRING and STRING differ by < NUMBER characters NEWLINE IGHV3 - NUMBER - IGHJ6 : CAKEGCSSGCPYYYYGMDVW NEWLINE IGHV3 - NUMBER - IGHJ3 : CANVPIYSSSYDAFDIW NEWLINE IGHV4 - NUMBER : CARSTGDWFDPW NEWLINE IGHV4 - NUMBER - IGHJ4 : CARTGFGELGFDYW - CARHDILTGYSYYFDYW - CARHLGYNNSWYPFDYW - CARYLGYNSNWYPFDYW NEWLINE IGHV4 - NUMBER - IGHJ5 : CARSTGDWFDPW NEWLINE IGHV6 - NUMBER - IGHJ4 : CASGGAVPGYYFDYW", ">> > VAR = { NUMBER , NUMBER , NUMBER } NEWLINE >> > list ( powerset ( VAR ) ) NEWLINE [ ( ) , ( NUMBER , ) , ( NUMBER , ) , ( NUMBER , ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] NEWLINE >> > list ( product ( VAR , VAR ) ) NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ]", "palette1 . description = STRING", "import Image NEWLINE VAR = STRING NEWLINE VAR = { STRING : ( NUMBER , NUMBER , NUMBER ) , STRING : ( NUMBER , NUMBER , NUMBER ) } NEWLINE VAR = [ VAR [ VAR ] for VAR in VAR ] NEWLINE VAR = Image . new ( STRING , ( NUMBER , len ( VAR ) // NUMBER ) , STRING ) NEWLINE VAR . putdata ( VAR ) NEWLINE VAR . show ( )", "VAR = { VAR : t [ VAR ] [ t [ VAR ] != NUMBER ] for VAR in df . columns }", "import subprocess , re NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = VAR . search ( subprocess . check_output ( [ STRING , STRING ] ) ) NEWLINE if VAR : NEWLINE VAR = VAR . group ( NUMBER )", "set ( [ frozenset ( VAR ) for VAR in S . edges ( ) ] )", ">> > pd . DataFrame ( { VAR : [ VAR [ VAR ] [ NUMBER ] if VAR in VAR else None for VAR in params ] for VAR in [ STRING , STRING , STRING , STRING ] } ) NEWLINE param1 param2 param3 param4 NEWLINE NUMBER apple tomato carrot None NEWLINE NUMBER banana None potato berry NEWLINE NUMBER None apple tomato carrot", "VAR = yearSeconds / ( NUMBER * NUMBER * NUMBER )", "def build_icmpv6_chunk ( VAR , VAR ) : NEWLINE VAR = bytearray . fromhex ( VAR ) NEWLINE VAR = struct . pack ( STRING , NUMBER ) NEWLINE VAR = bytearray . fromhex ( VAR ) NEWLINE return VAR + VAR + VAR", "VAR = [ { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } , { STRING : STRING , STRING : STRING } ] NEWLINE import itertools NEWLINE VAR = itertools . groupby ( VAR , lambda VAR : VAR [ STRING ] . split ( STRING ) [ NUMBER : NUMBER ] ) NEWLINE for VAR , VAR in VAR : NEWLINE print ( list ( VAR ) )", "$ sudo supervisorctl reload", "VAR = NUMBER NEWLINE VAR = raw_input ( STRING ) NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE VAR = ord ( VAR ) + VAR NEWLINE VAR = ( ( VAR - NUMBER ) % NUMBER ) + NUMBER NEWLINE VAR += chr ( VAR ) NEWLINE print VAR", "def update ( VAR ) : NEWLINE VAR . rect . move_ip ( NUMBER , NUMBER )", "import re NEWLINE def callback ( VAR ) : NEWLINE return VAR . group ( NUMBER ) . replace ( STRING , STRING ) NEWLINE VAR = STRING NEWLINE VAR = re . compile ( STRING ) . sub ( callback , VAR ) NEWLINE print VAR", "def _is_valid_token ( VAR ) : NEWLINE @ wraps ( VAR ) NEWLINE def decorated ( VAR , * args , ** kwargs ) : NEWLINE if VAR != TOKEN : NEWLINE abort ( NUMBER ) NEWLINE return VAR ( VAR , * args , ** kwargs ) : NEWLINE return decorated NEWLINE @ app . route ( . . . ) NEWLINE @ _is_valid_token NEWLINE def create_new_game ( VAR , . . . ) : NEWLINE . . .", "< GET http : // www . w3schools . com / html / action_page . php application / x - www - form - urlencoded NEWLINE < TextControl ( firstname = Mickey ) > NEWLINE < TextControl ( lastname = Mouse ) > NEWLINE < SubmitControl ( < None >= Submit ) ( readonly ) >> NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE < GET http : // www . w3schools . com / html / action_page . php application / x - www - form - urlencoded NEWLINE < TextControl ( firstname = Mickey ) > NEWLINE < TextControl ( lastname = Mouse ) > NEWLINE < SubmitControl ( < None >= Submit ) ( readonly ) >> NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE < GET http : // www . w3schools . com / html / html_forms . asp application / x - www - form - urlencoded NEWLINE < TextControl ( err_email = ) > NEWLINE < TextControl ( err_url = ) ( disabled ) > NEWLINE < TextareaControl ( err_desc = ) > NEWLINE < IgnoreControl ( < None >= < None > ) >> NEWLINE [ ( STRING , STRING ) , ( STRING , STRING ) ]", "calculate1 started NEWLINE calculate2 started NEWLINE calculate2 found the result ! NEWLINE Got result : NUMBER", "def close_geometry ( VAR , VAR ) : NEWLINE if VAR . empty or VAR [ NUMBER ] . empty : NEWLINE return VAR NEWLINE if ( VAR [ - NUMBER ] [ - NUMBER ] == VAR [ NUMBER ] [ NUMBER ] ) : NEWLINE return VAR NEWLINE VAR = None NEWLINE for VAR in VAR : NEWLINE if VAR is None : NEWLINE VAR = VAR . clone ( ) NEWLINE else : NEWLINE VAR . extend ( VAR . coords ) NEWLINE VAR = Polygon ( VAR ) NEWLINE return VAR", ">> > class GeneratorSort ( ) : NEWLINE . . . def __init__ ( VAR , * args ) : NEWLINE . . . VAR . values = [ ( VAR . next ( ) , VAR ) for VAR , VAR in enumerate ( args ) ] NEWLINE . . . VAR . generators = args NEWLINE . . . def generate ( VAR ) : NEWLINE . . . while any ( VAR . values ) : NEWLINE . . . VAR , VAR = min ( VAR for VAR in VAR . values if VAR ) NEWLINE . . . try : NEWLINE . . . VAR . values [ VAR ] = ( VAR . generators [ VAR ] . next ( ) , VAR ) NEWLINE . . . except StopIteration : NEWLINE . . . VAR . values [ VAR ] = None NEWLINE . . . yield VAR NEWLINE . . . NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = GeneratorSort ( iter ( VAR ) , iter ( VAR ) , iter ( VAR ) ) NEWLINE >> > list ( VAR . generate ( ) ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", ">> > VAR = datetime . datetime . now ( ) NEWLINE >> > VAR . time ( ) < d . time ( ) NEWLINE True", "% timeit find_min_idx ( x ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE % timeit divmod ( x . argmin ( ) , x . shape [ NUMBER ] ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "logging . disable ( logging . CRITICAL )", "@ conditional ( cache_region ( STRING ) ) NEWLINE def get ( VAR , VAR ) : NEWLINE return VAR + NUMBER", "import csv , os NEWLINE with open ( STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR = csv . VAR ( VAR ) NEWLINE for VAR in VAR : NEWLINE if VAR [ NUMBER ] == STRING : NEWLINE . . . NEWLINE . . . NEWLINE os . remove ( STRING ) NEWLINE os . rename ( STRING , STRING )", "positional and keyword NEWLINE frozen parameters : shape = ( NUMBER , ) , loc = NUMBER , scale = NUMBER NEWLINE positional only NEWLINE frozen parameters : shape = ( NUMBER , ) , loc = NUMBER , scale = NUMBER", "< button type = STRING class = STRING active STRING name = STRING value = STRING > { { button } } < / button >", "import pandas as pd NEWLINE VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ STRING , STRING , STRING ] , STRING : [ NUMBER , NUMBER , NUMBER ] } ) NEWLINE VAR = VAR . _get_numeric_data ( ) NEWLINE print ( VAR )", "VAR = list ( Comprehension ( e ) [ NUMBER ] [ NUMBER ] )", "In [ NUMBER ] : format_float ( NUMBER , NUMBER ) NEWLINE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - NEWLINE ValueError Traceback ( most recent call last ) NEWLINE < ipython - input - NUMBER - NUMBER a51e5 > in < module > ( ) NEWLINE - - - - > NUMBER format_float ( NUMBER , NUMBER ) NEWLINE < ipython - input - NUMBER - d4485ac4e1c9 > in format_float ( value , ndigits ) NEWLINE NUMBER def format_float ( value , ndigits = NUMBER ) : NEWLINE - - - - > NUMBER j = min ( i - NUMBER for i in range ( ndigits + NUMBER ) if value >= NUMBER ** ( ndigits - i ) ) NEWLINE NUMBER return STRING . format ( value , num_digits = max ( NUMBER , j ) ) NEWLINE ValueError : min ( ) arg is an empty sequence", "{ STRING : ( STRING , STRING , STRING ) , STRING : ( STRING , STRING , STRING ) , STRING : ( STRING , STRING , STRING ) }", "In [ NUMBER ] : df . unstack ( [ STRING ] ) NEWLINE Out [ NUMBER ] : NEWLINE val NEWLINE id NUMBER NUMBER NUMBER NEWLINE year NEWLINE NUMBER True False True NEWLINE NUMBER True True True", "[ mssql ] NEWLINE VAR = mssql_server_ip_or_domain_name NEWLINE VAR = NUMBER NEWLINE tds version = NUMBER", "category NEWLINE cat1 [ NUMBER , NUMBER ] NEWLINE cat2 [ NUMBER , NUMBER ] NEWLINE dtype : object", "import itertools NEWLINE import collections NEWLINE def borda ( VAR ) : NEWLINE VAR = len ( [ VAR for VAR in VAR if VAR . isalpha ( ) ] ) - NUMBER NEWLINE VAR = itertools . count ( VAR , step = - NUMBER ) NEWLINE VAR = { } NEWLINE for VAR in [ VAR . split ( STRING ) for VAR in VAR . split ( STRING ) ] : NEWLINE VAR = sum ( next ( VAR ) for VAR in VAR ) / float ( len ( VAR ) ) NEWLINE for VAR in VAR : NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR NEWLINE def tally ( VAR ) : NEWLINE VAR = collections . defaultdict ( int ) NEWLINE for VAR in VAR : NEWLINE for VAR , VAR in borda ( VAR ) . iteritems ( ) : NEWLINE VAR [ VAR ] += VAR NEWLINE VAR = dict ( VAR ) NEWLINE return VAR NEWLINE VAR = [ STRING , STRING , STRING , ] NEWLINE print ( tally ( VAR ) )", "model . fit ( [ X1 , X2 , X3 ] )", ">> > from ast import literal_eval NEWLINE >> > s = STRING NEWLINE >> > [ x if isinstance ( x , tuple ) else ( x , ) for x in literal_eval ( s . replace ( STRING , STRING ) . replace ( STRING , STRING ) ) ] NEWLINE [ ( NUMBER , ) , ( NUMBER , ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , ) ]", ">> > class Person ( Structure ) : VAR = [ ( STRING , c_ubyte * NUMBER ) , ( STRING , c_ubyte ) ] NEWLINE . . . NEWLINE >> > VAR = Person ( ( c_ubyte * NUMBER ) ( * bytearray ( STRING ) ) , NUMBER ) NEWLINE >> > VAR . age NEWLINE NUMBER NEWLINE >> > cast ( VAR . name , c_char_p ) . value NEWLINE STRING", "VAR = dict ( ( tuple ( VAR [ : NUMBER ] ) , VAR ) for VAR , VAR in enumerate ( A ) )", "class AutoContextMixin : NEWLINE def get_context_data ( VAR , ** kwargs ) : NEWLINE VAR = super ( AutoContextMixin , VAR ) . get_context_data ( ** kwargs ) NEWLINE for VAR in dir ( VAR ) : NEWLINE VAR = getattr ( VAR , VAR ) NEWLINE if isinstance ( VAR , str ) and not VAR . startswith ( STRING ) : NEWLINE VAR [ VAR ] = VAR NEWLINE return VAR NEWLINE class FooUpdate ( AutoContextMixin , UpdateView ) : NEWLINE VAR = Foo NEWLINE VAR = STRING", "val data = List ( STRING , STRING , STRING , STRING ) NEWLINE val dataRDD = sc . makeRDD ( data ) NEWLINE val scriptPath = STRING NEWLINE val pipeRDD = dataRDD . pipe ( scriptPath ) NEWLINE pipeRDD . foreach ( println )", "VAR = make_subtract ( a , a ( NUMBER ) )", "VAR = { VAR . get ( STRING ) for VAR in xml_data } NEWLINE for VAR in main_list : NEWLINE if VAR [ NUMBER ] in VAR : NEWLINE print ( VAR [ NUMBER ] )", ">> > import os NEWLINE >> > STRING . split ( os . extsep ) NEWLINE [ STRING , STRING , STRING ]", "b", "class MyTransformedDict ( TransformedDict ) : NEWLINE def __keytransform__ ( VAR , VAR ) : NEWLINE return VAR . lower ( ) NEWLINE VAR = MyTransformedDict ( [ ( STRING , STRING ) ] ) NEWLINE assert VAR . get ( STRING ) is VAR [ STRING ] NEWLINE assert STRING in VAR NEWLINE import pickle NEWLINE assert pickle . loads ( pickle . dumps ( VAR ) ) == VAR NEWLINE", "VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE def point_to_long ( VAR , VAR ) : NEWLINE return ( VAR * NUMBER ) + VAR NEWLINE def show_menu ( VAR ) : NEWLINE VAR = point_to_long ( NUMBER , NUMBER ) NEWLINE send_message ( window_handle , WM_LBUTTONDOWN , NUMBER , VAR ) NEWLINE send_message ( window_handle , WM_LBUTTONUP , NUMBER , VAR )", "item_id order_id date good_user NEWLINE buyer_idimport random NEWLINE import math NEWLINE import numpy as np NEWLINE def prob_round ( VAR ) : NEWLINE VAR = np . VAR ( VAR ) NEWLINE VAR = abs ( VAR ) NEWLINE VAR = random . random ( ) < VAR - int ( VAR ) NEWLINE VAR = math . ceil if VAR else math . floor NEWLINE return VAR * VAR ( VAR ) NEWLINE VAR = NUMBER NEWLINE sum ( prob_round ( VAR ) for VAR in range ( NUMBER ) ) / NUMBER NEWLINE = > NUMBER", "@ asyncio . coroutine NEWLINE def do_work ( ) : NEWLINE VAR = TestRepository ( ) NEWLINE yield from VAR . some_init ( ) NEWLINE try : NEWLINE VAR = yield from VAR . get_by_lim_off ( VAR = int ( length ) , VAR = start , VAR = VAR , VAR = VAR , VAR = VAR ) NEWLINE finally : NEWLINE yield from VAR . do_persistence ( ) NEWLINE yield from VAR . fetch_data ( )", "@ import url ( STRING ) ; / * make sure to sync this with the base theme ' s css filename * / NEWLINE . strike { text - decoration : line - through ; }", ">> > STRING > STRING NEWLINE False", ">> > [ STRING + str ( VAR ) . zfill ( NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "from threading import Timer NEWLINE import thread NEWLINE def run_with_timeout ( VAR , VAR , * args , ** kwargs ) : NEWLINE STRING NEWLINE try : NEWLINE VAR = Timer ( VAR , thread . interrupt_main ) NEWLINE VAR . start ( ) NEWLINE return VAR ( * args , ** kwargs ) NEWLINE except KeyboardInterrupt : NEWLINE print STRING % VAR . __name__ NEWLINE finally : NEWLINE VAR . cancel ( )", "VAR = foobar2 . clip_lower ( NUMBER ) NEWLINE VAR = VAR [ STRING ] + VAR [ STRING ] - VAR [ STRING ] - VAR [ STRING ]", "def wrapping_function ( VAR ) : NEWLINE return add_x_to_input ( some_value_for_x , VAR ) NEWLINE map ( wrapping_function , myList )", "ax1 . set_yticks ( np . linspace ( ax1 . get_ybound ( ) [ NUMBER ] , ax1 . get_ybound ( ) [ NUMBER ] , NUMBER ) ) NEWLINE ax2 . set_yticks ( np . linspace ( ax2 . get_ybound ( ) [ NUMBER ] , ax2 . get_ybound ( ) [ NUMBER ] , NUMBER ) )", "print STRING . format ( count , conv )", "[ uwsgi ] NEWLINE VAR = : < port_no > NEWLINE VAR = < project directory > NEWLINE VAR = / var / www NEWLINE VAR = DJANGO_SETTINGS_MODULE = < project_name > . settings NEWLINE VAR = django . core . handlers . wsgi : WSGIHandler ( )", "def detag ( VAR , VAR = STRING , VAR = STRING ) : NEWLINE VAR = regex . escape ( VAR ) NEWLINE VAR = regex . escape ( VAR ) NEWLINE VAR = regex . compile ( VAR + STRING + VAR + VAR + STRING + VAR ) NEWLINE VAR = VAR . sub ( STRING , VAR ) NEWLINE return VAR", "from rpy2 . robjects . vectors import FloatVector , IntVector NEWLINE VAR = FloatVector ( ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) NEWLINE VAR = IntVector ( ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) NEWLINE VAR . slots [ STRING ] = VAR", "class MyModel ( db . Model ) : NEWLINE @ classmethod NEWLINE def kind ( VAR ) : NEWLINE return STRING % super ( MyModel , VAR ) . kind ( )", "from nltk . stem import WordNetLemmatizer NEWLINE VAR = STRING NEWLINE VAR = WordNetLemmatizer ( ) NEWLINE print STRING . join ( [ VAR . lemmatize ( VAR ) for VAR in VAR . split ( ) ] )", "from bs4 import BeautifulSoup NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = VAR . read ( ) NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE for VAR in VAR . find_all ( STRING , { STRING : STRING } ) : NEWLINE for VAR in VAR . findAll ( STRING ) : NEWLINE VAR = BeautifulSoup ( STRING . join ( STRING . format ( VAR . strip ( ) ) for VAR in VAR . text . splitlines ( ) if VAR ) , STRING ) NEWLINE VAR . replace_with ( VAR ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR . write ( VAR . renderContents ( ) )", "def my_print ( * args ) : NEWLINE print ( * args )", "$ python2 NUMBER biggraph . py NUMBER NUMBER NEWLINE biggraph generate NUMBER nodes NUMBER : NUMBER : NUMBER NEWLINE biggraph generate NUMBER edges NUMBER : NUMBER : NUMBER NEWLINE biggraph add edges NUMBER : NUMBER : NUMBER NEWLINE biggraph Dijkstra NUMBER : NUMBER : NUMBER NEWLINE biggraph shortest_path done NUMBER : NUMBER : NUMBER NEWLINE step : NUMBER NUMBER NEWLINE step : NUMBER NUMBER NEWLINE biggraph walk done NUMBER : NUMBER : NUMBER NEWLINE path : [ NUMBER , NUMBER , NUMBER ]", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "In [ NUMBER ] : y . mean ( axis = NUMBER ) . mean ( axis = - NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] )", "print_multiples ( NUMBER )", "[ STRING , STRING ]", "from itertools import product NEWLINE def randString ( VAR ) : NEWLINE VAR = [ ( VAR , VAR . upper ( ) ) if not VAR . isdigit ( ) else ( VAR , ) for VAR in VAR . lower ( ) ] NEWLINE return [ STRING . join ( VAR ) for VAR in product ( * VAR ) ] NEWLINE print randString ( STRING ) NEWLINE print randString ( STRING )", "[ STRING , STRING , STRING , STRING ]", ">> > import numpy as np NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = np . array ( [ VAR , VAR , [ NUMBER ] * len ( VAR ) ] ) . transpose ( ) NEWLINE >> > VAR , VAR , VAR = np . linalg . lstsq ( VAR , VAR ) [ NUMBER ] NEWLINE >> > print ( VAR , VAR , VAR ) NEWLINE NUMBER - NUMBER NUMBER", "VAR = ( total_length / size , size ) NEWLINE VAR = np . memmap ( STRING , dtype = STRING , mode = STRING , order = STRING , VAR = VAR )", "In [ NUMBER ] : def find_all_words ( words , sentence ) : NEWLINE . . . . : all_words = re . findall ( STRING , sentence ) NEWLINE . . . . : words_found = [ ] NEWLINE . . . . : for VAR in words : NEWLINE . . . . : if VAR in all_words : NEWLINE . . . . : words_found . append ( VAR ) NEWLINE . . . . : return words_found NEWLINE In [ NUMBER ] : print find_all_words ( [ STRING , STRING ] , STRING ) NEWLINE [ STRING , STRING ] NEWLINE In [ NUMBER ] : print find_all_words ( [ STRING , STRING ] , STRING ) NEWLINE [ STRING ]", "def f ( VAR = True ) : NEWLINE if VAR : NEWLINE return STRING NEWLINE print STRING", "VAR = STRING NEWLINE VAR = STRING . join ( VAR . split ( ) ) NEWLINE print ( VAR )", "from collections import Counter NEWLINE VAR = { STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } , STRING : { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } } NEWLINE VAR = Counter ( ) NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE VAR . update ( { ( VAR , VAR ) : VAR for VAR , VAR in VAR . iteritems ( ) } ) NEWLINE print VAR . most_common ( NUMBER )", ">> > VAR = [ [ STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING ] ] NEWLINE >> > { VAR [ NUMBER ] : VAR [ NUMBER : ] for VAR in VAR } NEWLINE { STRING : [ STRING , STRING , STRING , STRING ] , STRING : [ STRING , STRING , STRING , STRING ] }", "if line in my_dictionary . keys ( ) : NEWLINE VAR = my_dictionary [ line ]", "True NEWLINE True NEWLINE False NEWLINE True NEWLINE True NEWLINE True NEWLINE False NEWLINE True NEWLINE True NEWLINE True NEWLINE False NEWLINE True NEWLINE True NEWLINE False", ">> > VAR = { } NEWLINE >> > str ( VAR or STRING ) NEWLINE STRING", "VAR = resource ( name = STRING ) NEWLINE VAR = author ( name = STRING ) NEWLINE VAR = author ( name = STRING , type = STRING ) NEWLINE VAR . authors . add ( VAR ) NEWLINE VAR . authors . add ( VAR ) NEWLINE VAR = languages . objects . get ( iso_lang_code = STRING ) NEWLINE VAR . add ( VAR ) NEWLINE VAR . save ( )", "VAR = STRING . join ( word_list )", ">> > VAR = pd . get_dummies ( df . index . month ) . set_index ( df . index ) NEWLINE >> > VAR NEWLINE NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER NUMBER NUMBER NUMBER", "In [ NUMBER ] : A NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ] , dtype = STRING ) NEWLINE In [ NUMBER ] : B NEWLINE Out [ NUMBER ] : NEWLINE array ( [ STRING , STRING ] , dtype = STRING ) NEWLINE In [ NUMBER ] : A [ np . in1d ( A , B ) . reshape ( A . shape ) . sum ( NUMBER ) == len ( B ) ] NEWLINE Out [ NUMBER ] : NEWLINE array ( [ [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ] , dtype = STRING )", "% timeit ( np . diff ( np . sign ( big ) ) != NUMBER ) . sum ( ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "import requests NEWLINE VAR = STRING NEWLINE VAR = { STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING , STRING : STRING } NEWLINE VAR = requests . post ( VAR , data = VAR ) NEWLINE print VAR . json ( )", "VAR = ArgumentParser ( add_help = False ) NEWLINE VAR . add_argument ( STRING , nargs = STRING , choices = [ STRING , STRING , STRING ] , ) NEWLINE VAR . add_argument ( STRING , action = STRING ) NEWLINE VAR , VAR = VAR . parse_known_args ( [ STRING ] ) NEWLINE if VAR . help : NEWLINE if VAR . VAR is None : NEWLINE print VAR . format_help ( ) NEWLINE sys . exit ( NUMBER ) NEWLINE VAR . append ( STRING ) NEWLINE VAR = STRING if VAR . VAR is None else VAR . VAR NEWLINE VAR = ArgumentParser ( prog = STRING % ( os . path . basename ( sys . argv [ NUMBER ] ) , VAR ) ) NEWLINE if VAR == STRING : NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR . add_argument ( STRING , STRING ) NEWLINE VAR = VAR . parse_args ( VAR ) NEWLINE function1 ( VAR . a , VAR . b , VAR . c ) NEWLINE elif VAR == STRING : NEWLINE . . . NEWLINE elif VAR == STRING : NEWLINE . . .", "pd . read_csv ( file_path , nrows = NUMBER ) . columns", "STRING NEWLINE >> > list ( map ( str . strip , re . split ( STRING , x ) ) ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE >> > list ( map ( str . strip , re . split ( STRING , x ) ) ) NEWLINE [ STRING , STRING , STRING ]", ">> > VAR = Table ( STRING , metadata , . . . Column ( STRING , Integer , primary_key = True ) , . . . Column ( STRING , String ) , . . . Column ( STRING , Integer ) . . . ) NEWLINE >> > metadata . create_all ( engine )", "VAR = { VAR : df2 . ix [ VAR ] for VAR , VAR in enumerate ( df2 . groupby ( STRING ) . groups ) }", "VAR = csvdata . copy ( )", "def week_difference ( VAR , VAR ) : NEWLINE assert VAR <= VAR NEWLINE VAR , VAR , VAR = VAR . isocalendar ( ) NEWLINE VAR , VAR , VAR = VAR . isocalendar ( ) NEWLINE return ( ( VAR - VAR ) * NUMBER ) - VAR + VAR", "def handleRequest ( ) : NEWLINE VAR = Buffer . onUserRequest ( ) NEWLINE if not VAR : NEWLINE return STRING NEWLINE return response ( VAR [ NUMBER ] [ NUMBER ] , VAR [ NUMBER ] [ NUMBER ] )", "VAR = [ ]", ">> > len ( STRING ) NEWLINE NUMBER NEWLINE >> > import sys NEWLINE >> > sys . getsizeof ( STRING ) NEWLINE NUMBER", "VAR = open ( STRING , STRING ) NEWLINE VAR . seek ( last_position ) NEWLINE VAR . read ( )", "for VAR in db : NEWLINE print STRING , VAR [ NUMBER ] [ NUMBER ] NEWLINE print STRING . join ( VAR . strip ( ) for VAR in VAR [ NUMBER ] [ NUMBER : ] ) NEWLINE print", "nosetests package_name - v", "import numpy as np NEWLINE VAR = np . diff ( data ) NEWLINE VAR [ VAR < NUMBER ] = NUMBER NEWLINE VAR [ VAR > NUMBER ] = NUMBER", "import json NEWLINE VAR = json . load ( open ( STRING , STRING ) ) NEWLINE print ( VAR )", "NUMBER - > NUMBER - > NUMBER - > NUMBER NEWLINE NUMBER - > NUMBER - > NUMBER - > NUMBER", "from bs4 import BeautifulSoup NEWLINE from bs4 . dammit import EntitySubstitution NEWLINE def custom_formatter ( VAR ) : NEWLINE STRING NEWLINE return EntitySubstitution . substitute_html ( VAR ) . replace ( STRING , STRING ) . replace ( STRING , STRING ) NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR , STRING ) NEWLINE print VAR . encode ( formatter = custom_formatter )", "VAR = Configurator ( ) NEWLINE VAR . add_route ( STRING , STRING , traverse = STRING )", "defaultdict ( < class STRING > , { STRING : [ NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER ] } )", "inst1 . i = NUMBER", "re . findall ( STRING , inputtext )", "VAR = STRING", "if cv2 . waitKey ( NUMBER ) == ord ( STRING ) : NEWLINE print STRING", "In [ NUMBER ] : NEWLINE import io NEWLINE import pandas as pd NEWLINE VAR = STRING NEWLINE pd . read_csv ( io . StringIO ( VAR ) , nrows = NUMBER ) . columns NEWLINE Out [ NUMBER ] : NEWLINE Index ( [ STRING , STRING , STRING , STRING ] , dtype = STRING )", "class MagicWrapper ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . _wrapped = VAR NEWLINE def __getattr__ ( VAR , VAR ) : NEWLINE return getattr ( VAR . _wrapped , VAR ) NEWLINE def __setattr__ ( VAR , VAR , VAR ) : NEWLINE if VAR == STRING : NEWLINE super ( MagicWrapper , VAR ) . __setattr__ ( STRING , VAR ) NEWLINE else : NEWLINE setattr ( VAR . _wrapped , STRING + VAR , getattr ( VAR . _wrapped , VAR ) ) NEWLINE setattr ( VAR . _wrapped , VAR , VAR ) NEWLINE class MyObject ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE VAR . attr_one = None NEWLINE VAR . attr_two = NUMBER NEWLINE VAR = MyObject ( ) NEWLINE VAR = MagicWrapper ( VAR ) NEWLINE VAR . attr_one = STRING NEWLINE VAR . attr_two = NUMBER NEWLINE print VAR . old_attr_one NEWLINE print VAR . attr_one NEWLINE print VAR . old_attr_two NEWLINE print VAR . attr_two", "Upkey : NUMBER NEWLINE DownKey : NUMBER NEWLINE LeftKey : NUMBER NEWLINE RightKey : NUMBER NEWLINE Space : NUMBER NEWLINE Delete : NUMBER NEWLINE . . . . . .", "< script src = STRING > < / script > NEWLINE < script src = STRING > < / script > NEWLINE < script > NEWLINE $ ( document ) . ready ( function ( ) { . . . } ) ; NEWLINE < / script >", "class IEnhancedDocumentViewerSchema ( IGlobalDocumentViewerSettings ) : NEWLINE STRING NEWLINE VAR = schema . TextLine ( title = STRING , description = STRING STRING , default = STRING )", "import json NEWLINE import pandas as pd NEWLINE VAR = [ { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } , { STRING : NUMBER , STRING : STRING } ] NEWLINE VAR = pd . read_json ( json . dumps ( VAR ) , orient = STRING ) NEWLINE VAR NEWLINE amount date_closed NEWLINE NUMBER NUMBER NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER NEWLINE NUMBER NUMBER NUMBER - NUMBER NUMBER - NUMBER NUMBER : NUMBER : NUMBER", ">> > import itertools NEWLINE >> > VAR = STRING NEWLINE >> > VAR = { STRING : STRING , STRING : STRING }", "df . groupby ( STRING ) . head ( NUMBER ) NEWLINE df . groupby ( STRING ) . last ( )", "product ( * zip ( L , fL ) )", ">> > NEWLINE >> > import numpy as NP NEWLINE >> > VAR = NP . random . randint ( NUMBER , NUMBER , NUMBER ) . reshape ( NUMBER , NUMBER ) NEWLINE >> > NEWLINE >> > VAR = [ STRING . format ( VAR ) for VAR in range ( D1 . shape [ NUMBER ] ) ] NEWLINE >> > VAR = STRING , VAR NEWLINE >> > VAR = [ STRING . format ( VAR ) for VAR in range ( D1 . shape [ NUMBER ] ) ] NEWLINE >> > VAR = STRING , VAR", "VAR = re . compile ( STRING ) NEWLINE VAR = VAR . sub ( STRING , VAR )", ">> > print c NEWLINE Counter ( { STRING : NUMBER , STRING : NUMBER , STRING : NUMBER , STRING : NUMBER } )", "VAR = [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "from string import ascii_lowercase NEWLINE import itertools NEWLINE def iter_all_strings ( ) : NEWLINE VAR = NUMBER NEWLINE while True : NEWLINE for VAR in itertools . product ( ascii_lowercase , repeat = VAR ) : NEWLINE yield STRING . join ( VAR ) NEWLINE VAR += NUMBER NEWLINE for VAR in iter_all_strings ( ) : NEWLINE print VAR NEWLINE if VAR == STRING : NEWLINE break", "class SizedInput ( object ) : NEWLINE def __init__ ( VAR , VAR = STRING , VAR = str ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE VAR . _rval = None NEWLINE def _proc ( VAR , VAR , VAR ) : NEWLINE if len ( VAR ) < VAR : NEWLINE VAR = STRING NEWLINE raise Exception ( VAR % ( VAR . VAR , VAR , len ( VAR ) ) ) NEWLINE return ( VAR . VAR ( VAR ) for VAR in VAR [ : VAR ] ) , VAR [ VAR : ] NEWLINE def parse ( VAR , VAR ) : NEWLINE VAR = int ( VAR [ NUMBER ] ) NEWLINE VAR . _rval , VAR = VAR . _proc ( VAR , VAR [ NUMBER : ] ) NEWLINE return list ( VAR . _rval ) , VAR NEWLINE def GetValue ( ) : NEWLINE return VAR . _rval NEWLINE def __call__ ( VAR , VAR ) : NEWLINE return VAR . parse ( VAR ) NEWLINE class MatrixInput ( SizedInput ) : NEWLINE def _proc ( VAR , VAR , VAR ) : NEWLINE VAR , VAR = SizedInput . _proc ( VAR , VAR ** NUMBER , VAR ) NEWLINE VAR = zip ( * [ iter ( VAR ) ] * VAR ) NEWLINE return VAR , VAR NEWLINE def validateSchema ( schema , VAR ) : NEWLINE VAR = VAR NEWLINE VAR = { } NEWLINE for VAR in schema : NEWLINE VAR [ VAR . VAR ] , VAR = VAR ( VAR ) NEWLINE if VAR : NEWLINE print STRING NEWLINE return VAR", "< div > { { blogpost . text | truncate } } < / div >", "from paste . httpserver import serve NEWLINE from pyramid . response import Response NEWLINE from pyramid . view import view_config NEWLINE @ view_config ( ) NEWLINE def hello ( VAR ) : NEWLINE return Response ( STRING ) NEWLINE if __name__ == STRING : NEWLINE from pyramid . VAR import Configurator NEWLINE VAR = Configurator ( ) NEWLINE VAR . scan ( ) NEWLINE VAR = VAR . make_wsgi_app ( ) NEWLINE VAR = LoggerMiddleware ( VAR ) NEWLINE serve ( VAR , host = STRING )", "def trp ( VAR , VAR ) : NEWLINE return VAR [ : VAR ] + [ NUMBER ] * ( VAR - len ( VAR ) ) NEWLINE trp ( [ ] , NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE trp ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE trp ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE trp ( [ NUMBER , NUMBER , NUMBER ] , NUMBER ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ]", "NUMBER", "import datetime as DT NEWLINE import numpy as np NEWLINE import pandas as pd NEWLINE VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER , NUMBER , NUMBER ] } , index = pd . DatetimeIndex ( [ STRING , STRING , STRING , STRING ] ) ) NEWLINE VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] } , index = pd . DatetimeIndex ( [ STRING , STRING ] ) ) NEWLINE VAR = pd . DataFrame ( { STRING : [ NUMBER , NUMBER ] , STRING : [ NUMBER , NUMBER ] } , index = pd . DatetimeIndex ( [ STRING , STRING ] ) )", ">> > VAR = NUMBER NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > [ VAR for VAR in VAR if VAR % VAR == NUMBER ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER ]", "VAR = ~ np . isnan ( x ) NEWLINE VAR [ VAR ] &= x [ VAR ] < - NUMBER NEWLINE x [ VAR ] = np . nan", "def split_upper_lower ( VAR ) : NEWLINE VAR = STRING . join ( [ VAR for VAR in VAR if VAR . isupper ( ) ] ) NEWLINE VAR = STRING . join ( [ VAR for VAR in VAR if VAR . islower ( ) ] ) NEWLINE return VAR , VAR", "VAR = NUMBER NEWLINE print STRING . format ( VAR ) . zfill ( NUMBER )", "from sklearn . svm import LinearSVC NEWLINE from sklearn . calibration import CalibratedClassifierCV NEWLINE from sklearn . multiclass import OneVsRestClassifier NEWLINE from sklearn . datasets import make_multilabel_classification NEWLINE VAR , VAR = make_multilabel_classification ( n_classes = NUMBER , n_labels = NUMBER , allow_unlabeled = True , return_indicator = True , random_state = NUMBER ) NEWLINE VAR = CalibratedClassifierCV ( LinearSVC ( ) , cv = NUMBER ) NEWLINE VAR = OneVsRestClassifier ( VAR ) NEWLINE VAR . fit ( VAR , VAR ) NEWLINE VAR = VAR . predict_proba ( VAR )", "VAR = datetime . now ( ) - start", "VAR = NUMBER NEWLINE for . . . in . . . NEWLINE do NEWLINE echo STRING NEWLINE echo STRING NEWLINE . / pythonScript . py - - argument1 STRING - - VAR STRING NEWLINE ( ( VAR += NUMBER ) ) NEWLINE done", "VAR = self . get_argument ( STRING , None ) NEWLINE VAR = { } NEWLINE if VAR : NEWLINE VAR = tornado . escape . json_decode ( VAR ) NEWLINE VAR = VAR . get ( STRING ) NEWLINE VAR = VAR . get ( STRING )", "[ ( STRING , NUMBER ) , ( STRING , NUMBER ) , ( STRING , NUMBER ) ]", "import numpy as np NEWLINE from scipy import signal NEWLINE VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE VAR = np . asarray ( VAR , float ) NEWLINE VAR = np . array ( [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] ) NEWLINE VAR = signal . convolve2d ( VAR , VAR , boundary = STRING , mode = STRING ) / VAR . sum ( ) NEWLINE VAR = VAR . copy ( ) NEWLINE VAR = VAR == NUMBER NEWLINE VAR [ VAR ] = VAR [ VAR ]", "VAR , VAR , VAR = the_string . split ( STRING ) NEWLINE VAR , VAR = VAR . split ( STRING ) NEWLINE VAR = VAR . split ( STRING )", ">> > def remove_duplication ( VAR ) : NEWLINE . . . VAR = [ ] NEWLINE . . . for VAR in VAR : NEWLINE . . . VAR = map ( str . strip , VAR . split ( STRING ) ) NEWLINE . . . VAR . append ( STRING . join ( sorted ( set ( VAR ) , key = lambda VAR : VAR . index ( VAR ) ) ) ) NEWLINE . . . return VAR NEWLINE . . . NEWLINE >> > remove_duplication ( a_list ) NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "VAR = numpy . empty ( ( len ( a ) , NUMBER ) , dtype = a . dtype ) NEWLINE VAR [ : , NUMBER ] , VAR [ : , NUMBER ] , VAR [ : , NUMBER ] = a , b , c NEWLINE VAR = VAR . ravel ( )", "FName LName id UsedFName UsedLName Usedid NEWLINE NUMBER Tanvir Hossain NUMBER Tanvir Hossain NUMBER NEWLINE NUMBER Nadia Alam NUMBER Tanvir Hossain NUMBER NEWLINE NUMBER Pia Naime NUMBER Tanvir Hossain NUMBER NEWLINE NUMBER Koethe Talukdar NUMBER Koethe Talukdar NUMBER NEWLINE NUMBER Manual Hausman NUMBER Koethe Talukdar NUMBER NEWLINE NUMBER Constantine Pape NaN Max Weber NUMBER NEWLINE NUMBER Andreas Kai NUMBER Max Weber NUMBER NEWLINE NUMBER Max Weber NUMBER Manual Hausman NUMBER NEWLINE NUMBER Weber Mac NUMBER Manual Hausman NUMBER NEWLINE NUMBER Plank Ingo NUMBER Manual Hausman NUMBER NEWLINE NUMBER Tanvir Hossain NUMBER Pia Naime NUMBER NEWLINE NUMBER Weber Mac NUMBER Pia Naime NUMBER NEWLINE NUMBER Manual Hausman NUMBER Tanvir Hossain NUMBER NEWLINE NUMBER Max Weber NUMBER Tanvir Hossain NUMBER NEWLINE NUMBER Nadia Alam NUMBER Manual Hausman NUMBER NEWLINE NUMBER Weber Mac NUMBER Manual Hausman NUMBER NEWLINE NUMBER Pia Naime NUMBER Koethe Talukdar NUMBER NEWLINE NUMBER Pia Naime NUMBER Koethe Talukdar NUMBER NEWLINE NUMBER Constantine Pape NaN Koethe Talukdar NUMBER NEWLINE NUMBER Koethe Talukdar NUMBER Koethe Talukdar NUMBER NEWLINE NUMBER Koethe Talukdar NUMBER Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER NEWLINE NUMBER NaN NaN NaN Manual Hausman NUMBER", "VAR = zip ( A , B ) NEWLINE VAR = sorted ( VAR , key = lambda VAR : VAR [ NUMBER ] ) NEWLINE VAR , VAR = zip ( * VAR )", "In [ NUMBER ] : tim , c = User . objects . get_or_create ( username = STRING ) NEWLINE In [ NUMBER ] : chris , c = User . objects . get_or_create ( username = STRING ) NEWLINE In [ NUMBER ] : tim . userprofile . follows . add ( chris . userprofile ) NEWLINE In [ NUMBER ] : tim . userprofile . follows . all ( ) NEWLINE Out [ NUMBER ] : [ < UserProfile : chris > ] NEWLINE In [ NUMBER ] : chris . userprofile . followed_by . all ( ) NEWLINE Out [ NUMBER ] : [ < UserProfile : tim > ]", "VAR = { } NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR [ STRING . format ( VAR ) ] = [ NUMBER , NUMBER , NUMBER ] NEWLINE print VAR NEWLINE print VAR [ STRING ] NEWLINE", "$ python import_submodule . py", "import sys NEWLINE import inspect NEWLINE import os NEWLINE class PluginBase ( object ) : pass NEWLINE def search ( VAR ) : NEWLINE for VAR , VAR , VAR in os . walk ( STRING ) : NEWLINE VAR = [ VAR for VAR in VAR if VAR . endswith ( STRING ) and not VAR . startswith ( STRING ) ] NEWLINE VAR = [ ] NEWLINE if VAR : NEWLINE for VAR in VAR : NEWLINE VAR = os . path . splitext ( VAR ) [ NUMBER ] NEWLINE try : NEWLINE VAR = __import__ ( VAR ) NEWLINE except ( ImportError , NotImplementedError ) : NEWLINE continue NEWLINE for VAR in dir ( VAR ) : NEWLINE VAR = getattr ( VAR , VAR ) NEWLINE if ( inspect . isclass ( VAR ) and inspect . getmodule ( VAR ) == VAR and issubclass ( VAR , VAR ) ) : NEWLINE VAR . append ( VAR ) NEWLINE print ( VAR ) NEWLINE search ( PluginBase )", "VAR = [ VAR for VAR , VAR in pos_dictionary . iteritems ( ) if VAR . startswith ( STRING ) for VAR in VAR ]", "VAR = numpy . vstack ( ( a , b , c ) ) . T . flatten ( )", "VAR = STRING . join ( spl )", "import numpy as np NEWLINE import pandas as pd NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = NUMBER NEWLINE VAR = pd . date_range ( start = STRING , periods = VAR , name = STRING ) NEWLINE VAR = [ ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR = pd . DataFrame ( data = np . random . random ( VAR ) * ( VAR + NUMBER ) , index = VAR , columns = [ STRING + str ( VAR ) ] ) NEWLINE VAR . df_name = str ( VAR ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = pd . concat ( VAR , axis = NUMBER ) NEWLINE VAR . plot ( )", "In [ NUMBER ] : % timeit find_index ( arr , x ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop NEWLINE In [ NUMBER ] : % timeit find_index2 ( arr , x ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ms per loop", "def foo ( * bars ) : NEWLINE for VAR in bars : NEWLINE print ( VAR ) NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE foo ( * VAR )", "String [ max . NUMBER long string ] NEWLINE - Sends the string as single characters converted to NEWLINE KeyPress and KeyRelease events based on a NEWLINE character table in chartbl . h ( currently only Latin1 is used . . . )", "import numpy as np NEWLINE from scipy import interpolate NEWLINE VAR = np . genfromtxt ( STRING ) NEWLINE VAR = VAR [ : , NUMBER ] NEWLINE VAR = VAR [ : , NUMBER ] NEWLINE VAR = interpolate . interp1d ( VAR , VAR ) NEWLINE VAR = np . arange ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = VAR ( VAR ) NEWLINE VAR = plt . figure ( ) NEWLINE VAR = VAR . add_subplot ( NUMBER ) NEWLINE VAR . set_title ( STRING ) NEWLINE VAR . set_xlabel ( STRING ) NEWLINE VAR . set_ylabel ( STRING ) NEWLINE VAR . plot ( VAR , VAR , c = STRING , label = STRING ) NEWLINE VAR . plot ( VAR , VAR , STRING , label = STRING ) NEWLINE VAR = VAR . legend ( ) NEWLINE plt . show ( )", "from functools import wraps NEWLINE import inspect NEWLINE def initializer ( VAR ) : NEWLINE VAR , VAR , VAR , VAR = inspect . getargspec ( VAR ) NEWLINE @ wraps ( VAR ) NEWLINE def wrapper ( VAR , * args ) : NEWLINE for VAR , VAR in zip ( VAR [ NUMBER : ] , args ) : NEWLINE setattr ( VAR , VAR , VAR ) NEWLINE VAR ( VAR , * args ) NEWLINE return wrapper NEWLINE class process : NEWLINE @ initializer NEWLINE def __init__ ( VAR , VAR , VAR , VAR , VAR , VAR , VAR ) : NEWLINE pass", "VAR = [ list ( reversed ( VAR ) ) for VAR in reversed ( self . topArea ) ]", ">> > VAR = [ None , NUMBER , None , None , NUMBER , None , None , None , NUMBER , None , None , None , None , None , NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = iter ( VAR ) NEWLINE >> > [ next ( VAR ) if VAR is None else VAR for VAR in VAR ] NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "aqua : test $ cat wordlist . txt NEWLINE Testing NEWLINE This NEWLINE Wordlist NEWLINE With NEWLINE Returns NEWLINE Between NEWLINE Lines", "In [ NUMBER ] : ( pd . get_dummies ( useProb ) * pred ) . sum ( axis = NUMBER ) NEWLINE Out [ NUMBER ] : NEWLINE Timestamp NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE NUMBER - NUMBER - NUMBER NUMBER NUMBER : NUMBER : NUMBER NUMBER NEWLINE dtype : float64", "a [ a [ : , NUMBER ] . searchsorted ( b [ : , NUMBER ] ) , NUMBER ] = b [ : , NUMBER ]", "string . decode ( STRING )", "iiii", "easy_install markdown2 NEWLINE easy_install html5lib", "for VAR in subpage . cssselect ( STRING ) : NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE VAR = VAR . xpath ( STRING , VAR = VAR - VAR )", "VAR = np . ascontiguousarray ( A ) . view ( np . dtype ( ( np . void , A . shape [ NUMBER ] * min ( A . strides ) ) ) ) NEWLINE VAR = np . ascontiguousarray ( B ) . view ( np . dtype ( ( np . void , B . shape [ NUMBER ] * min ( B . strides ) ) ) ) NEWLINE VAR = np . in1d ( VAR , VAR ) NEWLINE VAR = np . where ( VAR ) [ NUMBER ] NEWLINE VAR = A [ VAR ] NEWLINE VAR = np . in1d ( VAR , VAR ) NEWLINE VAR = np . where ( VAR ) [ NUMBER ]", "Listening on port NUMBER . . NEWLINE Hi ! NEWLINE Traceback ( most recent call last ) : NEWLINE File STRING , line NUMBER , in _dispatch NEWLINE VAR = self . server . funcs [ method ] ( * params ) NEWLINE File STRING , line NUMBER , in func NEWLINE print x NEWLINE NameError : global name STRING is not defined NEWLINE localhost - - [ NUMBER / Jan / NUMBER NUMBER : NUMBER : NUMBER ] STRING NUMBER", ">> > list ( map ( str . strip , x . split ( STRING ) ) ) NEWLINE [ STRING , STRING , STRING ]", "VAR = datasetObj . varlist [ STRING ] NEWLINE VAR = datasetObj . varlist [ NUMBER ]", "import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE VAR = np . linspace ( NUMBER , NUMBER , NUMBER ) NEWLINE VAR = VAR ** np . e NEWLINE plt . loglog ( VAR , VAR , basex = np . e , basey = np . e ) NEWLINE plt . show ( )", "import re NEWLINE [ re . findall ( STRING , VAR ) for VAR in my_list ]", "sorted ( [ NUMBER , NUMBER , NUMBER ] , key = ( lambda VAR : ( - VAR ) ) )", "[ NUMBER NUMBER NUMBER ] NEWLINE [ NUMBER - NUMBER - NUMBER ]", ">> > VAR = [ [ STRING , STRING , STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING , STRING , STRING ] , . . . [ STRING , STRING , STRING , STRING , STRING ] ] NEWLINE >> > NEWLINE >> > VAR = [ VAR [ NUMBER ] ] NEWLINE >> > for VAR in VAR [ NUMBER : ] : NEWLINE . . . for VAR in VAR . pop ( NUMBER ) . split ( STRING ) : NEWLINE . . . VAR . append ( [ VAR + VAR . strip ( ) if VAR . index ( VAR ) == NUMBER else VAR for VAR in VAR ] ) NEWLINE . . . NEWLINE >> > for VAR in VAR : NEWLINE . . . printfrom django . contrib . postgres . fields import HStoreField NEWLINE class Something ( models . Model ) : NEWLINE VAR = models . CharField ( max_length = NUMBER ) NEWLINE VAR = models . HStoreField ( db_index = True )", "VAR = fields . Float ( ) NEWLINE VAR = fields . Boolean ( compute = STRING , default = True ) NEWLINE @ api . one NEWLINE @ api . depends ( STRING ) NEWLINE def _is_manual ( VAR ) : NEWLINE VAR . VAR = len ( VAR . child_ids ) == NUMBER", "VAR = s1 [ : s1 . rfind ( STRING ) ]", "NUMBER [ set ( [ NUMBER , NUMBER ] ) , set ( [ NUMBER , NUMBER ] ) ] NEWLINE NUMBER [ set ( [ NUMBER , NUMBER , NUMBER ] ) , set ( [ NUMBER , NUMBER , NUMBER , NUMBER ] ) ]", "with open ( STRING ) as VAR : NEWLINE VAR = [ [ int ( VAR ) for VAR in VAR . split ( ) ] for VAR in VAR ] NEWLINE for VAR in VAR : NEWLINE print ( STRING . format ( VAR [ NUMBER ] , sum ( VAR [ NUMBER : ] ) / len ( VAR [ NUMBER : ] ) , min ( VAR [ NUMBER : ] ) , max ( VAR [ NUMBER : ] ) ) )", "getattr ( obj , STRING ) NEWLINE obj . __dict__ [ STRING ] NEWLINE vars ( obj ) [ STRING ]", "diag1 : [ [ NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER ] ] NEWLINE diag2 : [ [ NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , [ NUMBER ] ]", ">> > VAR = make_ticker ( ) NEWLINE >> > VAR ( ) NEWLINE NUMBER NEWLINE >> > VAR ( ) NEWLINE NUMBER NEWLINE >> > VAR ( ) NEWLINE NUMBER", "$ fab super_status - H localhost", "import socket NEWLINE import threading NEWLINE import sys NEWLINE VAR = STRING NEWLINE VAR = NUMBER NEWLINE class client ( threading . Thread ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE super ( client , VAR ) . __init__ ( ) NEWLINE VAR . VAR = VAR NEWLINE VAR . data = STRING NEWLINE def run ( VAR ) : NEWLINE while True : NEWLINE VAR . data = VAR . data + VAR . VAR . recv ( NUMBER ) NEWLINE if VAR . data . endswith ( STRING ) : NEWLINE print VAR . data NEWLINE VAR . data = STRING NEWLINE def send_msg ( VAR , VAR ) : NEWLINE VAR . VAR . send ( VAR ) NEWLINE def close ( VAR ) : NEWLINE VAR . VAR . close ( ) NEWLINE class connectionThread ( threading . Thread ) : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE super ( connectionThread , VAR ) . __init__ ( ) NEWLINE try : NEWLINE VAR . s = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) NEWLINE VAR . s . bind ( ( VAR , VAR ) ) NEWLINE VAR . s . listen ( NUMBER ) NEWLINE except socket . error : NEWLINE print STRING NEWLINE sys . exit ( ) NEWLINE VAR . clients = [ ] NEWLINE def run ( VAR ) : NEWLINE while True : NEWLINE VAR , VAR = VAR . s . accept ( ) NEWLINE VAR = client ( VAR ) NEWLINE VAR . start ( ) NEWLINE VAR . send_msg ( STRING ) NEWLINE VAR . clients . append ( VAR ) NEWLINE print STRING . format ( VAR [ NUMBER ] ) NEWLINE def main ( ) : NEWLINE VAR = connectionThread ( VAR , VAR ) NEWLINE VAR . start ( ) NEWLINE while True : NEWLINE try : NEWLINE VAR = raw_input ( ) NEWLINE for VAR in VAR . clients : NEWLINE VAR . send_msg ( VAR + STRING ) NEWLINE except KeyboardInterrupt : NEWLINE sys . exit ( ) NEWLINE if __name__ == STRING : NEWLINE main ( )", "In [ NUMBER ] : VAR = STRING NEWLINE In [ NUMBER ] : VAR = STRING NEWLINE In [ NUMBER ] : if any ( VAR [ VAR : VAR + len ( VAR ) ] == VAR for VAR in range ( len ( VAR ) - len ( VAR ) + NUMBER ) ) : NEWLINE . . . : print STRING NEWLINE . . . : else : NEWLINE . . . : print STRING NEWLINE . . . : NEWLINE Present", "if VAR >= NUMBER : NEWLINE VAR = VAR - NUMBER", "self . tabWidget . setStyleSheet ( STRING STRING )", "with open ( STRING , STRING ) as VAR : NEWLINE print ( VAR . read ( ) )", "from math import sin , cos , acos , radians , degrees NEWLINE from unittest import assertAlmostEqual NEWLINE def assertAlmostEqualAngles ( VAR , VAR , ** kwargs ) : NEWLINE VAR , VAR = radians ( VAR ) , radians ( VAR ) NEWLINE VAR = ( sin ( VAR ) - sin ( VAR ) ) ** NUMBER + ( cos ( VAR ) - cos ( VAR ) ) ** NUMBER NEWLINE VAR = degrees ( acos ( ( NUMBER - VAR ) / NUMBER ) ) NEWLINE assertAlmostEqual ( VAR , NUMBER , ** kwargs )", ">> > r . raw . read ( NUMBER ) NEWLINE STRING", "file2 . py NEWLINE def action ( VAR ) : NEWLINE print VAR", "import datetime as DT NEWLINE import numpy as np NEWLINE import matplotlib . pyplot as plt NEWLINE np . random . seed ( NUMBER ) NEWLINE VAR = [ DT . date ( NUMBER , NUMBER , NUMBER ) + DT . timedelta ( days = VAR * NUMBER ) for VAR in range ( NUMBER ) ] NEWLINE VAR = np . random . randint ( NUMBER , size = ( NUMBER , NUMBER ) ) . astype ( float ) NEWLINE VAR , VAR = plt . subplots ( ) NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE for VAR in range ( NUMBER ) : NEWLINE VAR . plot ( VAR , VAR [ VAR ] , STRING , markersize = NUMBER , fillstyle = STRING , linewidth = NUMBER , clip_on = True , zorder = NUMBER ) NEWLINE VAR . fill_between ( VAR , NUMBER , VAR [ VAR ] , alpha = NUMBER , VAR = VAR [ VAR ] , edgecolor = STRING , zorder = NUMBER ) NEWLINE VAR . set_xlim ( min ( VAR ) , max ( VAR ) + DT . timedelta ( days = NUMBER ) ) NEWLINE plt . show ( )", "import logging NEWLINE class LoggerWriter : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE def write ( VAR , VAR ) : NEWLINE if VAR != STRING : NEWLINE VAR . VAR . log ( VAR . VAR , VAR ) NEWLINE def main ( ) : NEWLINE logging . basicConfig ( VAR = logging . DEBUG ) NEWLINE VAR = logging . getLogger ( STRING ) NEWLINE VAR = LoggerWriter ( VAR , logging . INFO ) NEWLINE VAR = LoggerWriter ( VAR , logging . DEBUG ) NEWLINE print >> VAR , STRING NEWLINE print >> VAR , STRING NEWLINE if __name__ == STRING : NEWLINE main ( )", "visits . groupby ( visits . index ) . any ( ) . astype ( int )", ">> > import module NEWLINE >> > help ( module )", "List delay : NUMBER ms NEWLINE Map delay : NUMBER ms NEWLINE List delay : NUMBER ms NEWLINE Map delay : NUMBER ms NEWLINE List delay : NUMBER ms NEWLINE Map delay : NUMBER ms NEWLINE List delay : NUMBER ms NEWLINE Map delay : NUMBER ms NEWLINE List delay : NUMBER ms NEWLINE Map delay : NUMBER ms NEWLINE List delay : NUMBER ms NEWLINE Map delay : NUMBER ms", "VAR = NUMBER NEWLINE VAR = reduce ( lambda VAR , VAR : VAR ( VAR ) , function_list , VAR )", "from django . contrib import admin NEWLINE from my_app import models NEWLINE admin . site . register ( models . Router )", "VAR = Environment ( ) NEWLINE SConscript ( STRING , exports = [ STRING ] )", "VAR = [ d1 , d2 , d3 ] NEWLINE VAR = STRING NEWLINE for VAR in VAR : NEWLINE VAR += re . escape ( VAR ) + STRING NEWLINE VAR = VAR [ : - NUMBER ] NEWLINE VAR = re . compile ( STRING + VAR + STRING + VAR + STRING ) NEWLINE for VAR in VAR . finditer ( html_str ) : NEWLINE print VAR . group ( NUMBER )", "from django . db import models NEWLINE from annoying . fields import AutoOneToOneField NEWLINE class UserProfile ( models . Model ) : NEWLINE VAR = AutoOneToOneField ( STRING ) NEWLINE VAR = models . ManyToManyField ( STRING , related_name = STRING ) NEWLINE def __unicode__ ( VAR ) : NEWLINE return VAR . VAR . username", "try : NEWLINE int ( myvar ) NEWLINE except ValueError : NEWLINE . . . Handle the exception . . .", "def flatten ( VAR ) : NEWLINE if not VAR : NEWLINE return [ ] NEWLINE elif not isinstance ( VAR , list ) : NEWLINE return [ VAR ] NEWLINE else : NEWLINE return flatten ( VAR [ NUMBER ] ) + flatten ( VAR [ NUMBER : ] )", "import numpy as np NEWLINE VAR = NUMBER NEWLINE VAR = NUMBER NEWLINE VAR = np . arange ( VAR * VAR ) . reshape ( VAR , VAR ) NEWLINE print ( VAR ) NEWLINE print ( VAR . shape ) NEWLINE", "< ? php NEWLINE // load your userId ( for example , with $ _SESSION , but do what you want here ) NEWLINE $ actualUser = $ _SESSION [ STRING ] ; NEWLINE // checks if the requested id to delete fits your actual current user ' s id NEWLINE if ( isset ( $ _GET [ STRING ] & & $ _GET [ STRING ] == $ actualUser ) { $ user = $ _GET [ STRING ] ; $ file = STRING . $ user . STRING ; unlink ( $ file ) ; }", "STRING . translate ( m )", ">> > from string import maketrans NEWLINE >> > VAR = maketrans ( STRING , STRING ) NEWLINE >> > [ VAR if isinstance ( VAR , tuple ) else ( VAR , ) for VAR in literal_eval ( s . translate ( VAR ) ) ] NEWLINE [ ( NUMBER , ) , ( NUMBER , ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , ) ]", "def yield_un ( VAR ) : NEWLINE VAR = set ( ) NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE if VAR not in VAR : NEWLINE yield ( VAR , VAR ) NEWLINE VAR . add ( VAR )", "VAR = NUMBER NEWLINE while VAR <= NUMBER : NEWLINE VAR = math . factorial ( VAR ) + NUMBER NEWLINE if isSquare ( VAR ) : NEWLINE print VAR NEWLINE VAR = VAR + NUMBER", "from django . dispatch import receiver NEWLINE from django . db . models . signals import post_save NEWLINE from datetime import datetime , timedelta NEWLINE @ receiver ( post_save , VAR = MyModel ) NEWLINE def model_expiration ( VAR , VAR , VAR , ** kwargs ) : NEWLINE if VAR : NEWLINE delete_model . apply_async ( args = ( VAR . pk , ) , eta = datetime . utcnow ( ) + timedelta ( hours = NUMBER ) )", "print df . groupby ( [ STRING , STRING ] ) [ STRING ] . agg ( { STRING : STRING } ) NEWLINE Frequency NEWLINE Type Name NEWLINE Bird Flappy Bird NUMBER NEWLINE Pigeon NUMBER NEWLINE Pokemon Jerry NUMBER NEWLINE Mudkip NUMBER", "< HueLayout > : NEWLINE colorloopwidget : colorloopwidget NEWLINE xlabel : xlabel NEWLINE ylabel : ylabel NEWLINE BoxLayout : NEWLINE size : NUMBER , NUMBER NEWLINE orientation : STRING NEWLINE ColorLoopWidget : NEWLINE xlabel : xlabel NEWLINE ylabel : ylabel NEWLINE id : colorloopwidget NEWLINE size : NUMBER , NUMBER NEWLINE BoxLayout : NEWLINE orientation : STRING NEWLINE Button : NEWLINE text : STRING NEWLINE on_release : root . clear_canvas ( ) NEWLINE Label : NEWLINE id : xlabel NEWLINE text : STRING NEWLINE size_hint_y : NUMBER NEWLINE Label : NEWLINE id : ylabel NEWLINE text : STRING NEWLINE size_hint_y : NUMBER", "import re NEWLINE from trieMatch import PrefixMatch NEWLINE VAR = PrefixMatch ( [ STRING , STRING , STRING , ] ) NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = VAR . readlines ( ) NEWLINE VAR . close ( ) NEWLINE VAR = re . compile ( STRING ) NEWLINE VAR = ( VAR for VAR in VAR if VAR . match ( VAR . match ( VAR ) . group ( NUMBER ) ) )", ">> > p [ STRING ] NEWLINE { STRING : STRING , STRING : STRING , STRING : [ STRING ] , STRING : NUMBER , STRING : NUMBER , STRING : None }", "def do_something ( np_array ) : NEWLINE for VAR in list_of_array : NEWLINE do_something ( VAR )", "In [ NUMBER ] : [ np . bincount ( VAR ) for VAR in a ] NEWLINE Out [ NUMBER ] : [ array ( [ NUMBER , NUMBER , NUMBER ] , dtype = int64 ) , array ( [ NUMBER , NUMBER , NUMBER , NUMBER ] , dtype = int64 ) ]", "VAR = STRING NEWLINE VAR = VAR . split ( STRING ) NEWLINE VAR = [ VAR + NUMBER for VAR , VAR in enumerate ( VAR ) if VAR == STRING ] NEWLINE VAR = [ VAR [ VAR ] for VAR in VAR if VAR < len ( VAR ) ]", "def nest_me ( VAR , VAR ) : NEWLINE STRING NEWLINE return { VAR : VAR } NEWLINE VAR = [ STRING , STRING , STRING , STRING ] NEWLINE VAR = reversed ( VAR ) NEWLINE print reduce ( nest_me , VAR ) NEWLINE", ". . . . NEWLINE else : NEWLINE VAR = eval ( ui_application . tag )", "VAR = re . sub ( STRING , STRING % locUpdate , xml , NUMBER )", "from StringIO import StringIO NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = [ VAR , VAR , VAR ] NEWLINE VAR = [ ] NEWLINE for VAR , VAR in enumerate ( VAR ) : NEWLINE VAR = StringIO ( VAR ) NEWLINE VAR . append ( dict ( ) ) NEWLINE for VAR in VAR : NEWLINE VAR , VAR = ( int ( VAR ) for VAR in VAR . split ( STRING ) ) NEWLINE VAR [ VAR ] [ VAR ] = VAR NEWLINE print VAR NEWLINE VAR = len ( VAR ) NEWLINE VAR = sum ( ( VAR [ VAR ] [ NUMBER ] for VAR in xrange ( VAR ) ) ) / VAR NEWLINE print STRING , VAR , STRING", "STRING % STRING . join ( map ( str , x ) )", "In [ NUMBER ] : % % time NEWLINE . . . : LIMIT = len ( df ) NEWLINE . . . : for VAR in range ( LIMIT ) : NEWLINE . . . : df [ STRING ] = df [ STRING ] . shift ( - NUMBER ) NEWLINE . . . : df [ STRING ] . update ( df [ STRING ] [ ( ( df [ STRING ] < df [ STRING ] ) | . . . : ( df [ STRING ] > df [ STRING ] ) ) & . . . : ( df [ STRING ] . isnull ( ) ) ] ) NEWLINE Wall time : NUMBER ms NEWLINE In [ NUMBER ] : % timeit generate_values ( df [ STRING ] . values , df [ STRING ] . values , df [ STRING ] . values ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "from bs4 import BeautifulSoup NEWLINE VAR = STRING NEWLINE VAR = BeautifulSoup ( VAR ) NEWLINE print ( VAR . td [ STRING ] )", "from sqlalchemy import create_engine NEWLINE VAR = create_engine ( STRING ) NEWLINE VAR = VAR . connect ( ) NEWLINE VAR = VAR . execute ( STRING ) NEWLINE for VAR in VAR : NEWLINE print ( VAR [ STRING ] )", "< form id = STRING method = STRING enctype = STRING action = STRING > NEWLINE { % csrf_token % } NEWLINE < div class = STRING > NEWLINE { % for VAR in form % } NEWLINE < div class = STRING > { { VAR . label } } < br / > { { VAR } } NEWLINE { % if VAR . errors % } NEWLINE { % for VAR in VAR . errors % } NEWLINE < br / > < span style = STRING > { { VAR } } < / span > NEWLINE { % endfor % } NEWLINE { % endif % } NEWLINE < / div > NEWLINE { % endfor % } NEWLINE < / div > NEWLINE < hr / > NEWLINE < h2 > Sons : < / h2 > NEWLINE < table class = STRING > NEWLINE < table > NEWLINE { % for VAR in inlines % } NEWLINE < tr id = STRING > NEWLINE { % for VAR in VAR % } NEWLINE < td > NEWLINE { { VAR } } { % if VAR . errors % } < span style = STRING > { { VAR . errors } } < / span > { % endif % } NEWLINE < / td > NEWLINE { % endfor % } NEWLINE < / tr > NEWLINE { % endfor % } NEWLINE < / table > NEWLINE { { inlines . management_form } } NEWLINE < input type = STRING class = STRING value = STRING > NEWLINE < / form > NEWLINE < script type = STRING > NEWLINE $ ( function ( ) { $ ( STRING ) . formset ( { prefix : STRING } ) ; } ) NEWLINE < / script >", "obj [ STRING ] [ STRING ] = NUMBER NEWLINE obj [ STRING ] [ STRING ] = Valves NEWLINE obj [ STRING ] [ STRING ] = NUMBER NUMBER NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = Employee NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = True NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = Jake Roberts NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = Section NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = True NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = False NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = NUMBER NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = Location NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = True NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = False NEWLINE obj [ STRING ] [ STRING ] [ STRING ] [ NUMBER ] [ STRING ] = Munchen", ">> > VAR = [ NUMBER ] NEWLINE >> > VAR = [ NUMBER , NUMBER , NUMBER ] NEWLINE >> > VAR = [ VAR for VAR in VAR if VAR in VAR ] NEWLINE >> > VAR NEWLINE [ NUMBER ] NEWLINE >> >", "ax . bar ( x , data , color = colors )", "Read a line which is terminated with end - of - line ( eol ) character ( \\ n by default ) or until timeout .", "def would_be ( VAR ) : NEWLINE return any ( [ STRING , STRING , STRING ] == [ VAR [ VAR ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] , VAR [ VAR + NUMBER ] [ NUMBER ] ] for VAR in xrange ( len ( VAR ) - NUMBER ) )", ">> > print s NEWLINE < tr > NEWLINE td > LABEL1 < / td > < td > INPUT1 < / td > NEWLINE < / tr > NEWLINE < tr > NEWLINE < td > LABEL2 < / td > < td > INPUT2 < / td > NEWLINE < / tr > NEWLINE >> > print re . sub ( STRING , STRING , s ) NEWLINE < tr > < td > LABEL1 < / td > < td > INPUT1 < / td > NEWLINE < / tr > NEWLINE < tr > NEWLINE < td > LABEL2 < / td > < td > INPUT2 < / td > NEWLINE < / tr >", "VAR = [ VAR for VAR in itertools . chain ( list1 , list2 , list3 ) ]", "import argparse NEWLINE VAR = argparse . ArgumentParser ( ) NEWLINE VAR . add_argument ( STRING , nargs = NUMBER , action = STRING ) NEWLINE print VAR . parse_args ( )", ". . . NEWLINE Key : @ name , Value : Employee NEWLINE Key : @ isMandotory , Value : True NEWLINE Key : NEWLINE Key : @ name , Value : Section NEWLINE Key : @ isOpen , Value : True NEWLINE Key : @ isMandotory , Value : False NEWLINE Key : NEWLINE . . .", "VAR = bob", "The code NEWLINE import math NEWLINE VAR = open ( STRING ) . read ( ) . split ( ) NEWLINE VAR = dict ( ( VAR , math . log ( ( VAR + NUMBER ) * math . log ( len ( VAR ) ) ) ) for VAR , VAR in enumerate ( VAR ) ) NEWLINE VAR = max ( len ( VAR ) for VAR in VAR ) NEWLINE def infer_spaces ( s ) : NEWLINE STRING NEWLINE def best_match ( VAR ) : NEWLINE VAR = enumerate ( reversed ( VAR [ max ( NUMBER , VAR - VAR ) : VAR ] ) ) NEWLINE return min ( ( VAR + VAR . get ( s [ VAR - VAR - NUMBER : VAR ] , NUMBER ) , VAR + NUMBER ) for VAR , VAR in VAR ) NEWLINE VAR = [ NUMBER ] NEWLINE for VAR in range ( NUMBER , len ( s ) + NUMBER ) : NEWLINE VAR , VAR = best_match ( VAR ) NEWLINE VAR . append ( VAR ) NEWLINE VAR = [ ] NEWLINE VAR = len ( s ) NEWLINE while VAR > NUMBER : NEWLINE VAR , VAR = best_match ( VAR ) NEWLINE assert VAR == VAR [ VAR ] NEWLINE VAR . append ( s [ VAR - VAR : VAR ] ) NEWLINE VAR -= VAR NEWLINE return STRING . join ( reversed ( VAR ) )", "from subprocess import check_call , STDOUT , CalledProcessError , call NEWLINE with open ( STRING , STRING ) as VAR , open ( STRING , STRING ) as VAR : NEWLINE try : NEWLINE check_call ( [ STRING , STRING ] , stdout = VAR , stderr = VAR ) NEWLINE except CalledProcessError as VAR : NEWLINE print ( VAR . message )", "import time , readline , thread NEWLINE import sys , struct , fcntl , termios NEWLINE def blank_current_readline ( ) : NEWLINE ( VAR , VAR ) = struct . unpack ( STRING , fcntl . ioctl ( sys . stdout , termios . TIOCGWINSZ , STRING ) ) NEWLINE VAR = len ( readline . get_line_buffer ( ) ) + NUMBER NEWLINE sys . stdout . write ( STRING ) NEWLINE sys . stdout . write ( STRING * ( VAR / VAR ) ) NEWLINE sys . stdout . write ( STRING ) NEWLINE def noisy_thread ( ) : NEWLINE while True : NEWLINE time . sleep ( NUMBER ) NEWLINE blank_current_readline ( ) NEWLINE print STRING NEWLINE sys . stdout . write ( STRING + readline . get_line_buffer ( ) ) NEWLINE sys . stdout . flush ( ) NEWLINE if __name__ == STRING : NEWLINE thread . start_new_thread ( noisy_thread , ( ) ) NEWLINE while True : NEWLINE VAR = raw_input ( STRING )", "VAR = False NEWLINE VAR = STRING NEWLINE while not VAR : NEWLINE VAR = ser . read ( NUMBER ) NEWLINE VAR += VAR NEWLINE VAR = VAR . split ( chr ( NUMBER ) , NUMBER ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE VAR = chr ( NUMBER ) + VAR [ NUMBER ] NEWLINE if VAR [ NUMBER ] == chr ( NUMBER ) : NEWLINE while len ( VAR ) < NUMBER : NEWLINE VAR = ser . read ( NUMBER - len ( VAR ) ) NEWLINE VAR += VAR NEWLINE VAR = True NEWLINE else : NEWLINE VAR = VAR [ NUMBER : ] NEWLINE else : NEWLINE VAR = STRING NEWLINE", "PagerDutyPolicy . objects . all ( )", "True", "$ python script . py NEWLINE $ NEWLINE $ NEWLINE $ Done !", "A [ np . lexsort ( A . T ) ]", "import numpy as np NEWLINE from scipy . sparse import coo_matrix NEWLINE VAR = ( NUMBER , NUMBER ) NEWLINE VAR = np . int_ ( np . round_ ( VAR [ NUMBER ] * np . random . random ( NUMBER ) ) ) NEWLINE VAR = np . int_ ( np . round_ ( VAR [ NUMBER ] * np . random . random ( NUMBER ) ) ) NEWLINE VAR = np . ones_like ( VAR ) NEWLINE VAR = coo_matrix ( ( VAR , ( VAR , VAR ) ) , VAR = VAR ) NEWLINE VAR = plot_coo_matrix ( VAR ) NEWLINE VAR . figure . show ( )", "try : NEWLINE import xmlrpclib NEWLINE except ImportError : NEWLINE import xmlrpc . client as xmlrpclib NEWLINE VAR = xmlrpclib . ServerProxy ( STRING ) NEWLINE VAR = STRING NEWLINE VAR = VAR . search ( { STRING : VAR } ) NEWLINE VAR = next ( VAR for VAR in VAR if VAR [ STRING ] == VAR ) NEWLINE VAR = VAR . VAR ( VAR , VAR [ STRING ] ) NEWLINE print ( VAR ) NEWLINE print ( VAR [ STRING ] ) NEWLINE print ( VAR [ STRING ] ) NEWLINE print ( VAR [ STRING ] )", "VAR = pygame . USEREVENT + NUMBER", "symbol , ev_ebitda , asset NEWLINE msft , NUMBER , NUMBER NEWLINE cvx , NUMBER , NUMBER NEWLINE baba , NUMBER , NUMBER", ">> > table [ STRING ] NEWLINE STRING", "( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE etc . . .", "project_dir NEWLINE . . . NEWLINE stuff NEWLINE static_media NEWLINE . . . NEWLINE css NEWLINE images", "if current_location >= NUMBER or fail_event . isSet ( ) : NEWLINE break", "{ STRING : NUMBER , STRING : [ { STRING : ObjectId ( STRING ) , STRING : [ STRING , STRING , STRING ] , STRING : True } ] }", ">> > str ( NUMBER ) NEWLINE STRING", "for VAR in list : NEWLINE VAR , VAR = VAR . xpath ( STRING ) NEWLINE print ( VAR , VAR )", "def print_nonrec_breathfirst ( VAR ) : NEWLINE VAR = [ VAR ] NEWLINE while VAR : NEWLINE VAR , VAR = VAR [ NUMBER ] , VAR [ NUMBER : ] NEWLINE print VAR NEWLINE for VAR in VAR . children : NEWLINE VAR . append ( VAR )", "def EntryMatches ( VAR ) : NEWLINE if use_currency and not ( VAR . currency == currency ) : NEWLINE return False NEWLINE if use_category and not ( VAR . category == category ) : NEWLINE return False NEWLINE return True", "VAR = [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE def find_fs ( VAR , VAR , VAR ) : NEWLINE try : NEWLINE VAR , VAR = VAR . index ( VAR ) , VAR . index ( VAR ) NEWLINE return sum ( isinstance ( VAR , float ) for VAR in islice ( VAR , VAR + NUMBER , VAR ) ) NEWLINE except IndexError : NEWLINE return NUMBER NEWLINE print ( find_fs ( VAR , NUMBER , NUMBER ) ) NEWLINE NUMBER", "% timeit [ item for VAR in m for item in VAR ] . count ( NUMBER ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE % timeit len ( [ item for VAR in m for item in VAR if item == NUMBER ] ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ns per loop NEWLINE % timeit sum ( VAR . count ( NUMBER ) for VAR in m ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop NEWLINE % timeit count_zeros ( m ) NEWLINE NUMBER loops , best of NUMBER : NUMBER ns per loop", "from tempfile import mkstemp NEWLINE from shutil import move NEWLINE from os import remove , close NEWLINE def replace_3_line ( VAR ) : NEWLINE VAR = STRING NEWLINE VAR , VAR = mkstemp ( ) NEWLINE VAR = open ( VAR , STRING ) NEWLINE VAR = open ( VAR ) NEWLINE VAR = NUMBER NEWLINE for VAR in VAR : NEWLINE VAR = VAR + NUMBER NEWLINE if VAR == NUMBER : NEWLINE VAR . write ( VAR ) NEWLINE else : NEWLINE VAR . write ( VAR ) NEWLINE VAR . close ( ) NEWLINE close ( VAR ) NEWLINE VAR . close ( ) NEWLINE remove ( VAR ) NEWLINE move ( VAR , VAR ) NEWLINE replace_3_line ( STRING )", "import os NEWLINE VAR = STRING NEWLINE VAR = [ VAR for VAR in os . listdir ( VAR ) if os . VAR . isfile ( os . VAR . join ( VAR , VAR ) ) and STRING in VAR ]", "[ [ my_operation ( VAR , VAR ) for VAR , VAR in zip ( VAR , VAR ) ] for VAR , VAR in zip ( a , b ) ]", "df [ STRING ] = df . groupby ( df . index . year ) . cumcount ( NUMBER ) + NUMBER", "import numpy as np NEWLINE def bla ( VAR , VAR ) : NEWLINE VAR = VAR + VAR NEWLINE return VAR NEWLINE VAR , VAR = np . meshgrid ( [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] , sparse = True ) NEWLINE bla ( VAR , VAR )", ">> > b [ np . array ( [ np . equal ( * VAR ) for VAR in zip ( a [ : , NUMBER ] , b [ : , NUMBER ] ) ] ) ] NEWLINE array ( [ [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER ] ] )", "VAR = [ ( STRING % VAR , STRING % VAR ) for VAR in range ( NUMBER , NUMBER ) ] NEWLINE VAR = STRING NEWLINE VAR = None NEWLINE for VAR in VAR : NEWLINE if VAR [ NUMBER ] == VAR : NEWLINE VAR = VAR NEWLINE print VAR", "def parseTags ( VAR ) : NEWLINE return filter ( None , map ( sanitizeTag , VAR . split ( STRING ) ) ) NEWLINE def sanitizeTag ( VAR ) : NEWLINE VAR = STRING . join ( VAR if VAR . isalnum ( ) else STRING for VAR in VAR ) . split ( ) NEWLINE VAR = len ( VAR ) NEWLINE if VAR == NUMBER : NEWLINE return None NEWLINE elif VAR == NUMBER : NEWLINE return VAR [ NUMBER ] NEWLINE else : NEWLINE return VAR [ NUMBER ] . lower ( ) + STRING . join ( VAR . capitalize ( ) for VAR in VAR [ NUMBER : ] )", ">> > VAR = [ pygame . Rect ( NUMBER , NUMBER , NUMBER , NUMBER ) , pygame . Rect ( NUMBER , NUMBER , NUMBER , NUMBER ) ] NEWLINE >> > next ( ( VAR for VAR in VAR if VAR . collidepoint ( NUMBER , NUMBER ) ) , None ) NEWLINE < rect ( NUMBER , NUMBER , NUMBER , NUMBER ) > NEWLINE >> > next ( ( VAR for VAR in VAR if VAR . collidepoint ( NUMBER , NUMBER ) ) , None ) NEWLINE >> >", "import time NEWLINE VAR = time . time ( ) NEWLINE VAR = sndfile . frames / sndfile . samplerate NEWLINE while NUMBER : NEWLINE VAR = time . time ( ) - VAR NEWLINE VAR = VAR / float ( VAR ) NEWLINE if VAR >= NUMBER : NEWLINE break NEWLINE time . sleep ( NUMBER )", ">> > VAR = Player ( STRING , NUMBER ) NEWLINE >> > VAR . name NEWLINE STRING NEWLINE >> > VAR . score NEWLINE NUMBER", "print df . values . tolist ( ) NEWLINE [ [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] , [ NUMBER ] ] NEWLINE print df . iloc [ : , NUMBER ] . values . tolist ( ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE print df . loc [ : , STRING ] . tolist ( ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] NEWLINE print df [ STRING ] . tolist ( ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", "filter { multiline { VAR = > STRING VAR = > STRING } grok { VAR = > [ STRING , STRING ] } if STRING in [ tags ] { grok { VAR = > [ STRING , STRING ] VAR = > [ STRING ] } } else { mutate { VAR = > { STRING = > STRING } } } date { VAR = > [ STRING , STRING ] VAR = > en } geoip { VAR = > STRING } useragent { VAR = > STRING VAR = > STRING } }", "for VAR in col . find ( { STRING : [ { STRING : STRING , STRING : STRING , STRING : STRING } ] } ) : NEWLINE print ( VAR )", "VAR = NUMBER // NUMBER NEWLINE VAR = NUMBER % NUMBER NEWLINE VAR = NUMBER - ( NUMBER // NUMBER ) * NUMBER NEWLINE", "def fun ( ) : NEWLINE print STRING NEWLINE eval ( STRING ) NEWLINE VAR = STRING NEWLINE eval ( VAR )", "for VAR , VAR in traverse ( doc ) : NEWLINE print ( STRING . format ( VAR , VAR ) )", "ssh - keygen - t rsa", "import json NEWLINE VAR = json . dumps ( python_object )", "import csv NEWLINE from collections import OrderedDict NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = { VAR [ NUMBER ] : VAR [ NUMBER : ] for VAR in VAR } NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = OrderedDict ( ( VAR [ NUMBER ] , VAR [ NUMBER : ] ) for VAR in VAR ) NEWLINE VAR = OrderedDict ( ) NEWLINE for VAR in ( VAR , VAR ) : NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE VAR . setdefault ( VAR , [ ] ) . extend ( VAR ) NEWLINE with open ( STRING , STRING ) as VAR : NEWLINE VAR = csv . writer ( VAR ) NEWLINE for VAR , VAR in VAR . iteritems ( ) : NEWLINE VAR . writerow ( [ VAR ] + VAR )", "from collections import namedtuple NEWLINE VAR = namedtuple ( STRING , [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] )", "VAR = [ ] NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR . append ( [ NUMBER , NUMBER , NUMBER ] ) NEWLINE print VAR NEWLINE print VAR [ NUMBER ] NEWLINE", "ID , Name , Nickname , Income , Car NEWLINE NUMBER , A , test , NUMBER k , Benz NEWLINE NUMBER , B , test1 , NUMBER k , Audi NEWLINE NUMBER , C , test2 , NUMBER k , BMW", "VAR = STRING", "blocks [ : ] = blocks [ ix , : ] NEWLINE blocks [ : ] = blocks [ : , ix ] NEWLINE return blocks", ">> > one [ NUMBER ] + one [ NUMBER ] NEWLINE NUMBER", "VAR = [ mkproc ( VAR ) for VAR in ( foo , bar , baz ) ]", "In [ NUMBER ] : % timeit MultiIndex . from_tuples ( index_3levels . droplevel ( level = STRING ) . unique ( ) ) NEWLINE NUMBER loops , best of NUMBER : NUMBER s per loop", "from math import log10 NEWLINE def rev ( VAR ) : NEWLINE if VAR < NUMBER : NEWLINE return VAR NEWLINE else : NEWLINE VAR = VAR % NUMBER NEWLINE VAR = VAR // NUMBER NEWLINE return VAR * NUMBER ** int ( log10 ( VAR ) + NUMBER ) + rev ( VAR ) NEWLINE print rev ( NUMBER ) , rev ( NUMBER ) , rev ( NUMBER )", "VAR = web . urlopen ( message ) NEWLINE VAR = VAR . read ( )", "VAR = BeautifulSoup ( st ) NEWLINE for VAR in VAR . findAll ( STRING , { STRING : STRING } ) : NEWLINE for VAR in VAR . findAll ( STRING ) : NEWLINE print VAR . get ( STRING )", ">> > lst = [ [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > map ( sum , zip ( * lst ) ) NEWLINE [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ]", ">> > STRING . format ( STRING , STRING ) NEWLINE STRING NEWLINE >> > VAR = [ STRING , STRING ] NEWLINE >> > STRING . format ( * VAR ) NEWLINE STRING", "while thread . is_alive ( ) : NEWLINE thread . join ( NUMBER )", ">> > def f ( VAR , VAR , VAR ) : NEWLINE . . . print ( VAR , VAR , VAR ) NEWLINE . . . NEWLINE >> > f ( * [ NUMBER , NUMBER , NUMBER ] ) NEWLINE NUMBER NUMBER NUMBER", ">> > df [ STRING ] = ( df [ STRING ] >= NUMBER ) & ( df [ STRING ] >= NUMBER ) NEWLINE a b c filter NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER True NEWLINE NUMBER NUMBER NUMBER NUMBER False NEWLINE NUMBER NUMBER NUMBER NUMBER False", "< html > NEWLINE < A > NEWLINE < B > NEWLINE < C > NEWLINE < D > NEWLINE < TYPE > NEWLINE < NUMBER > NUMBER < / NUMBER > NEWLINE < DATA / > NEWLINE < / TYPE > NEWLINE < TYPE > NEWLINE < NUMBER > NUMBER < / NUMBER > NEWLINE < DATA > A = NUMBER , B = NUMBER , C = NUMBER , spamandeggs < / DATA > NEWLINE < / TYPE > NEWLINE < / D > NEWLINE < / C > NEWLINE < / B > NEWLINE < / A > NEWLINE < / html >", "VAR = { STRING : STRING , STRING : STRING , STRING : STRING }", "def NamedTupleWithDocstring ( VAR , * ntargs ) : NEWLINE VAR = namedtuple ( * ntargs ) NEWLINE class NT ( VAR ) : NEWLINE VAR = ( ) NEWLINE VAR = VAR NEWLINE return NT NEWLINE VAR = NamedTupleWithDocstring ( STRING , STRING , [ STRING , STRING , STRING ] ) NEWLINE VAR = VAR ( NUMBER , NUMBER , NUMBER ) NEWLINE print VAR . VAR", "VAR = list ( range ( NUMBER ) ) NEWLINE for VAR in range ( NUMBER , len ( VAR ) , NUMBER ) : NEWLINE VAR [ VAR : VAR + NUMBER ] = VAR [ VAR + NUMBER : VAR - NUMBER : - NUMBER ]", "ADDRESS NEWLINE STREET NEWLINE STREET1 NEWLINE CITY NEWLINE ZIP NEWLINE PHONE NEWLINE COUNTRY", "VAR = list ( diff )", "import csv NEWLINE import os NEWLINE VAR = inputfile + STRING NEWLINE with open ( inputfile , STRING ) as VAR , open ( VAR , STRING ) as VAR : NEWLINE VAR = csv . VAR ( VAR ) NEWLINE VAR = csv . VAR ( VAR , delimiter = STRING ) NEWLINE VAR . writerows ( VAR ) NEWLINE os . remove ( inputfile ) NEWLINE os . rename ( VAR , inputfile )", "from scipy . stats import t NEWLINE def StudentTCI ( VAR , VAR , VAR , VAR = NUMBER ) : NEWLINE return t . interval ( VAR , VAR , VAR , VAR ) NEWLINE print StudentTCI ( NUMBER , NUMBER , NUMBER ) NEWLINE print StudentTCI ( NUMBER , NUMBER , NUMBER , NUMBER )", "def point_is_in_mask ( VAR , VAR ) : NEWLINE return VAR . contains ( VAR )", "import nltk NEWLINE VAR = nltk . CFG . fromstring ( STRING ) NEWLINE VAR = STRING . split ( ) NEWLINE VAR = nltk . ChartParser ( VAR ) NEWLINE for VAR in VAR . parse ( VAR ) : NEWLINE print ( VAR )", "- NUMBER", "class MockLogger ( object ) : NEWLINE def debug ( VAR , * args , ** kwargs ) : pass NEWLINE def info ( VAR , * args , ** kwargs ) : pass NEWLINE def warn ( VAR , * args , ** kwargs ) : pass NEWLINE def error ( VAR , * args , ** kwargs ) : pass NEWLINE def critical ( VAR , * args , ** kwargs ) : pass NEWLINE class Test ( unittest . TestCase ) : NEWLINE def test_func ( VAR ) : NEWLINE VAR = testmodule . logger1 NEWLINE VAR = testmodule . logger2 NEWLINE testmodule . logger1 = MockLogger ( ) NEWLINE testmodule . logger2 = MockLogger ( ) NEWLINE testmodule . logger1 = VAR NEWLINE testmodule . logger2 = VAR", ">> > [ [ tuple ( map ( int , VAR ) ) + ( NUMBER , ) for VAR in VAR ] for VAR in l ] NEWLINE [ [ ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) , ( NUMBER , NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER , NUMBER ) ] , [ ( NUMBER , NUMBER , NUMBER ) ] ]", "print ( STRING * NUMBER + STRING ) * NUMBER", ">> > isprintable ( STRING ) NEWLINE True NEWLINE >> > isprintable ( STRING ) NEWLINE False", "NUMBER : NUMBER : NUMBER NEWLINE NUMBER : NUMBER : NUMBER", "grep - rlf messages . txt dir", "df . groupby ( [ STRING , STRING , STRING ] ) . sum ( ) . reset_index ( ) NEWLINE id type grp_idx col_1 col_2 flag NEWLINE NUMBER NUMBER A NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER A NUMBER NUMBER NUMBER NUMBER NEWLINE NUMBER NUMBER X NUMBER NUMBER NUMBER NUMBER", "VAR = DictModelAdaptor ( DictModel ) NEWLINE VAR [ STRING ] = STRING", ">> > VAR = datetime . timedelta ( hours = NUMBER ) NEWLINE >> > pd . DateOffset ( seconds = VAR . total_seconds ( ) ) NEWLINE < DateOffset : kwds = { STRING : NUMBER } > NEWLINE >> > to_offset ( pd . DateOffset ( seconds = VAR . total_seconds ( ) ) ) NEWLINE < DateOffset : kwds = { STRING : NUMBER } >", "import time NEWLINE import sys NEWLINE print STRING , NEWLINE sys . stdout . flush ( ) NEWLINE time . sleep ( NUMBER ) NEWLINE print STRING + STRING + STRING , NEWLINE sys . stdout . flush ( )", "VAR = VAR . filter ( gender = gender )", "map ( STRING , plot = T )", "UPDATE companies NEWLINE SET ico = REPLACE ( ico , STRING , STRING ) NEWLINE WHERE ico LIKE STRING ;", "VAR = ElmentTree ( file = STRING ) NEWLINE VAR = x12 . findall ( STRING ) NEWLINE VAR = [ VAR for VAR in VAR if VAR . get ( STRING ) == STRING and VAR . get ( STRING ) == STRING ]", "from sklearn . feature_extraction . text import CountVectorizer NEWLINE VAR = CountVectorizer ( ngram_range = ( NUMBER , NUMBER ) , analyzer = STRING ) NEWLINE VAR = VAR . fit_transform ( df [ STRING ] ) NEWLINE VAR = sum ( VAR ) . toarray ( ) [ NUMBER ] NEWLINE pd . DataFrame ( VAR , index = VAR . get_feature_names ( ) , columns = [ STRING ] )", ">> > NEWLINE >> > VAR = NP . empty ( shape = ( NUMBER , NUMBER ) , dtype = float ) NEWLINE >> > NEWLINE >> > VAR = lambda VAR : NP . random . randint ( NUMBER , NUMBER , VAR )", "def sumColumns1 ( VAR ) : NEWLINE import csv NEWLINE with open ( VAR ) as VAR : NEWLINE VAR = csv . reader ( VAR ) NEWLINE VAR = next ( VAR ) NEWLINE VAR = [ NUMBER for VAR in VAR ] NEWLINE for VAR in VAR : NEWLINE for VAR in range ( len ( VAR ) ) : NEWLINE VAR [ VAR ] += int ( NUMBER if VAR [ VAR ] == STRING else VAR [ VAR ] ) NEWLINE return dict ( zip ( VAR , VAR ) )", "def withHandler ( VAR ) : NEWLINE for VAR in VAR : NEWLINE yield VAR , get_handler ( VAR )", "copy ( a ) NUMBER NEWLINE list ( a ) NUMBER NEWLINE a [ : ] NUMBER NEWLINE a [ NUMBER : len ( a ) ] NUMBER", "@ ECHO OFF NEWLINE REM ** * MODIFY THE NEXT LINE TO SPECIFY THE LOCATION OF YOUR SCRIPTS ** * NEWLINE SET SCRIPT_DIR = C : \\ Path \\ To \\ Scripts NEWLINE REM ** * MODIFY THE NEXT LINE TO SPECIFY THE LOCATION OF YOUR PYTHON . EXE ** * NEWLINE SET PYTHON_BIN = C : \\ Python27 \\ python . exe NEWLINE PUSHD % SCRIPT_DIR % NEWLINE % PYTHON_BIN % % * NEWLINE POPD", "pygame . version . vernum", "VAR = [ { STRING : STRING } , { STRING : STRING } , { STRING : STRING } , { STRING : STRING } ] NEWLINE unique ( VAR , [ STRING ] ) NEWLINE print VAR", "cur . mogrify ( STRING , ( ( NUMBER , NUMBER , NUMBER ) , ) )", "import string , win32ui , win32con NEWLINE from Tkinter import * NEWLINE def decaption ( VAR ) : NEWLINE VAR = VAR . widget NEWLINE VAR = win32ui . CreateWindowFromHandle ( string . atoi ( VAR . wm_frame ( ) , NUMBER ) ) NEWLINE VAR . ModifyStyle ( win32con . WS_CAPTION , NUMBER , win32con . SWP_FRAMECHANGED ) NEWLINE VAR . bind ( STRING , None ) NEWLINE VAR = Tk ( ) NEWLINE VAR . bind ( STRING , decaption ) NEWLINE VAR . mainloop ( )", "$ cat numberGood . txt NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE NUMBER NEWLINE $ python3 NEWLINE >> > with open ( STRING ) as f : NEWLINE . . . print ( sum ( float ( VAR ) for VAR in f ) ) NEWLINE . . . NEWLINE NUMBER", "array ( [ [ NUMBER , NUMBER ] , [ NUMBER , NUMBER ] ] )", "for VAR in str2bits ( STRING ) : NEWLINE print VAR , NEWLINE print STRING . join ( [ VAR for VAR in bits2str ( str2bits ( STRING ) ) ] ) NEWLINE", "import subprocess NEWLINE subprocess . call ( [ STRING , STRING , STRING ] )", "class Cheese ( ) : NEWLINE def __init__ ( VAR , * args , ** kwargs ) : NEWLINE VAR . num_holes = kwargs . get ( STRING , random_holes ( ) )", "VAR = { VAR : VAR . dropna ( axis = NUMBER ) for VAR , VAR in df1 . groupby ( df1 . apply ( lambda VAR : VAR . notnull ( ) . sum ( ) - NUMBER , axis = NUMBER ) ) } NEWLINE print VAR [ NUMBER ] NEWLINE id channel p1 p2 NEWLINE NUMBER NUMBER paid b2 b1 NEWLINE print VAR [ NUMBER ] NEWLINE id channel p1 p2 p3 NEWLINE NUMBER NUMBER direct as25 dw46 NUMBER q", ">> > a NEWLINE [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > sum ( a , [ ] )", ">> > X . shape NEWLINE ( NUMBER , NUMBER ) NEWLINE >> > lsa . components_ . shape NEWLINE ( NUMBER , NUMBER ) NEWLINE >> > km . cluster_centers_ . shape NEWLINE ( NUMBER , NUMBER ) NEWLINE >> > VAR = np . dot ( km . cluster_centers_ , lsa . components_ ) NEWLINE >> > VAR . shape NEWLINE ( NUMBER , NUMBER )", "write_file ( STRING , out_text )", "from pprint import pprint NEWLINE VAR = { } NEWLINE for VAR in range ( NUMBER , NUMBER ) : NEWLINE VAR = format ( VAR , STRING ) NEWLINE VAR = chr ( VAR ) NEWLINE VAR [ VAR ] = VAR NEWLINE VAR [ VAR ] = VAR NEWLINE pprint ( VAR )", "df . groupby ( [ STRING , STRING ] ) . apply ( lambda VAR : VAR [ ( VAR . Week . diff ( NUMBER ) . fillna ( NUMBER ) != NUMBER ) . astype ( STRING ) . cumsum ( ) == NUMBER ] ) . reset_index ( drop = True )", "def some_html ( ) : NEWLINE return render ( STRING )", "import os NEWLINE import crypt NEWLINE VAR = STRING NEWLINE VAR = crypt . crypt ( Password , STRING ) NEWLINE os . system ( STRING + VAR + STRING )", ">> > VAR = STRING NEWLINE >> > VAR = STRING NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING ] NEWLINE >> > re . findall ( STRING , VAR ) NEWLINE [ STRING ]", "VAR = set ( [ a . node ] )", "import sys NEWLINE print sys . stdin . read ( )", ">> > r1 . test ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) NEWLINE False", ">> > print ( repr ( STRING ) ) NEWLINE STRING NEWLINE >> > print ( repr ( STRING ) ) NEWLINE STRING NEWLINE >> > print ( repr ( STRING ) ) NEWLINE STRING", "Knight NUMBER NUMBER NUMBER NUMBER NEWLINE Mage NUMBER NUMBER NUMBER NUMBER NEWLINE Mage NUMBER NUMBER NUMBER NUMBER NEWLINE Mage NUMBER NUMBER NUMBER NUMBER NEWLINE Mage NUMBER NUMBER NUMBER NUMBER", "def findTerm ( VAR , VAR ) : NEWLINE VAR = VAR . tree NEWLINE for VAR in VAR : NEWLINE VAR = VAR . lower ( ) NEWLINE if re . match ( STRING , VAR ) : NEWLINE if VAR in VAR [ NUMBER ] : NEWLINE VAR = VAR [ NUMBER ] [ VAR ] NEWLINE else : NEWLINE return False NEWLINE return VAR [ NUMBER ] != None", "VAR = CASPER + STRING + saStr + STRING + SCRIPT", "In [ NUMBER ] : datetime . now ( ) - df [ STRING ] NEWLINE Out [ NUMBER ] : NEWLINE NUMBER NUMBER days , NUMBER : NUMBER NUMBER : NUMBER NEWLINE NUMBER NUMBER days , NUMBER : NUMBER NUMBER : NUMBER NEWLINE NUMBER NUMBER days , NUMBER : NUMBER : NUMBER", "VAR = { } NEWLINE VAR = [ STRING , STRING , STRING ] NEWLINE for VAR in xyzdict . keys ( ) : NEWLINE VAR = VAR [ NUMBER ] NEWLINE VAR = [ VAR [ NUMBER ] , VAR [ NUMBER ] ] NEWLINE VAR = list ( set ( VAR ) - set ( VAR ) ) NEWLINE if len ( VAR ) > NUMBER : NEWLINE VAR = [ ] NEWLINE for VAR in VAR : NEWLINE VAR = STRING . join ( ( VAR , VAR ) ) NEWLINE VAR = STRING . join ( ( VAR , VAR ) ) NEWLINE VAR = xyzdict [ VAR ] * xyzdict [ VAR ] NEWLINE VAR . append ( VAR ) NEWLINE VAR = xyzdict [ VAR ] + sum ( VAR ) NEWLINE VAR [ VAR ] = VAR NEWLINE else : NEWLINE VAR = STRING . join ( ( VAR , VAR [ NUMBER ] ) ) NEWLINE VAR = STRING . join ( ( VAR [ NUMBER ] , VAR ) ) NEWLINE VAR = xyzdict [ VAR ] * xyzdict [ VAR ] NEWLINE VAR = xyzdict [ VAR ] + VAR NEWLINE VAR [ VAR ] = VAR", "class MyClass ( object ) : NEWLINE VAR = None NEWLINE @ property : NEWLINE def myattrib ( self ) : NEWLINE return self . VAR NEWLINE @ myattrib . setter NEWLINE def myattrib ( self , val ) : NEWLINE self . VAR = val NEWLINE print ( STRING )", ">> > VAR = STRING NEWLINE >> > STRING . join ( VAR for VAR in VAR . split ( ) if not any ( VAR . isdigit ( ) for VAR in VAR ) ) NEWLINE STRING", "sorted ( yourdict , key = lambda VAR : int ( VAR . split ( ) [ NUMBER ] ) )", "def is_full ( VAR ) : NEWLINE return not any ( VAR == STRING for VAR in d for VAR in VAR )", "VAR = random . choice ( lst )", "class Rule ( object ) : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE def test ( VAR , VAR , VAR , VAR , VAR , VAR , VAR , VAR ) : NEWLINE return eval ( VAR . VAR ) NEWLINE VAR = Rule ( STRING ) NEWLINE VAR = Rule ( STRING ) NEWLINE VAR = Rule ( STRING . format ( listname = someList ) )", "VAR = [ ] NEWLINE for VAR in names : NEWLINE if len ( VAR ) <= NUMBER : NEWLINE VAR . append ( VAR )", "from pprint import pprint NEWLINE from parcon import ( Forward , SignificantLiteral , Word , alphanum_chars , Exact , ZeroOrMore , CharNotIn , concat , OneOrMore ) NEWLINE VAR = Forward ( ) NEWLINE VAR = SignificantLiteral ( STRING ) NEWLINE VAR = Word ( alphanum_chars + STRING ) NEWLINE VAR = VAR | Exact ( VAR + ZeroOrMore ( CharNotIn ( STRING ) ) + VAR ) [ concat ] NEWLINE VAR = VAR + STRING + VAR NEWLINE VAR = VAR NEWLINE VAR = VAR | VAR | VAR NEWLINE VAR = VAR NEWLINE VAR = ZeroOrMore ( VAR ) NEWLINE VAR << STRING + VAR + VAR + STRING NEWLINE VAR = OneOrMore ( VAR ) NEWLINE with open ( STRING ) as VAR : NEWLINE pprint ( VAR . parse_string ( VAR . read ( ) ) )", "In [ NUMBER ] : for VAR in ( NUMBER , NUMBER , NUMBER ) : NEWLINE . . . . . : for VAR in ( NUMBER , NUMBER , NUMBER ) : NEWLINE . . . . . : x , b = gen_data ( VAR , VAR ) NEWLINE . . . . . : print STRING % VAR , STRING % VAR , NEWLINE . . . . . : % timeit function_to_time ( np . prod , x , b ) NEWLINE . . . . . : print", "def check ( VAR , VAR , VAR ) : NEWLINE VAR = STRING . join ( ( VAR , VAR ) ) NEWLINE return VAR [ VAR ]", "for VAR in ( { VAR . get ( STRING ) for VAR in xml_data } & { VAR [ NUMBER ] for VAR in main_list } ) : NEWLINE print ( VAR )", "from collections import defaultdict , OrderedDict NEWLINE VAR = defaultdict ( OrderedDict ) NEWLINE VAR = [ ( STRING , STRING ) , ( STRING , STRING ) , ( STRING , STRING ) ] NEWLINE for ( VAR , VAR ) in VAR : NEWLINE VAR [ VAR ] [ VAR ] = True NEWLINE >> > list ( VAR [ STRING ] . keys ( ) ) NEWLINE [ STRING , STRING ]", "user_profiles . filter ( gender = gender )", "function update_values ( ) { $ SCRIPT_ROOT = { { request . script_root | tojson | safe } } ; $ . getJSON ( $ SCRIPT_ROOT + STRING , function ( data ) { $ ( STRING ) . text ( data . cpu + STRING ) $ ( STRING ) . text ( data . ram + STRING ) $ ( STRING ) . text ( data . disk + STRING ) } ) ; }", "VAR = csv . DictWriter ( ouf , [ STRING ] + months [ NUMBER : NUMBER ] )", "df [ STRING ] = NUMBER NEWLINE VAR = df [ STRING ] >= NUMBER NEWLINE df . loc [ VAR , STRING ] = NUMBER", "In [ NUMBER ] : [ dct [ VAR ] for VAR in index ] NEWLINE Out [ NUMBER ] : [ NUMBER , NUMBER , NUMBER , NUMBER ]", "import csv NEWLINE VAR = { } NEWLINE VAR = open ( STRING , STRING ) NEWLINE VAR = csv . VAR ( VAR ) NEWLINE for VAR in VAR : NEWLINE VAR = VAR [ NUMBER ] + VAR [ NUMBER ] NEWLINE if VAR in VAR . keys ( ) : NEWLINE VAR [ VAR ] += NUMBER NEWLINE else : NEWLINE VAR [ VAR ] = NUMBER NEWLINE print VAR", "for VAR in driver . find_elements_by_css_selector ( STRING ) : NEWLINE VAR = VAR . find_element_by_css_selector ( STRING ) NEWLINE print VAR . text . strip ( )", "VAR = self . selectedIndexes ( )", "from scrapy . spider import BaseSpider NEWLINE from scrapy . http import Request NEWLINE from scrapy . selector import XmlXPathSelector NEWLINE class MySpider ( BaseSpider ) : NEWLINE VAR = STRING NEWLINE def parse ( VAR , VAR ) : NEWLINE VAR = XmlXPathSelector ( VAR ) NEWLINE VAR = VAR . select ( STRING ) . extract ( ) NEWLINE return [ Request ( VAR , callback = VAR . parse_link ) for VAR in VAR ]", "return pair [ not pair . index ( core ) ]", "import MyLibrary NEWLINE VAR = MyLibrary . Foo ( ) NEWLINE VAR . pushBack ( NUMBER ) ; NEWLINE VAR . pushBack ( NUMBER ) ; NEWLINE VAR . pushBack ( NUMBER ) ; NEWLINE print ( VAR . getInt ( NUMBER ) ) NEWLINE print ( VAR . getInt ( NUMBER ) ) NEWLINE print ( VAR . getInt ( NUMBER ) ) NEWLINE VAR = VAR . getBar ( ) NEWLINE print ( VAR . getValue ( ) ) NEWLINE VAR . setValue ( NUMBER ) NEWLINE print ( VAR . getBar ( ) . getValue ( ) ) NEWLINE print ( MyLibrary . compute ( ) )", "class Test1 ( object ) : NEWLINE def __init__ ( VAR ) : NEWLINE pass NEWLINE def VAR ( VAR ) : NEWLINE print ( STRING ) NEWLINE VAR = Test2 ( VAR ) NEWLINE def z ( VAR ) : NEWLINE print ( STRING ) NEWLINE class Test2 : NEWLINE def __init__ ( VAR , VAR ) : NEWLINE VAR . b ( VAR ) NEWLINE def b ( VAR , VAR ) : NEWLINE print ( STRING ) NEWLINE VAR . z ( )", "import urllib2 NEWLINE from lxml import html NEWLINE VAR = html . parse ( urllib2 . urlopen ( STRING ) ) NEWLINE VAR = VAR . xpath ( STRING ) NEWLINE VAR = [ VAR . text . strip ( ) for VAR in VAR ] NEWLINE print STRING . format ( * VAR ) NEWLINE VAR = VAR . xpath ( STRING ) [ NUMBER ] NEWLINE print STRING . format ( VAR . text . strip ( ) )", "map ( lambda VAR : reduce ( lambda VAR , VAR : VAR + VAR , map ( lambda VAR : NUMBER , filter ( lambda VAR : VAR == VAR , c ) ) ) , colours )", "import scraperwiki NEWLINE import simplejson NEWLINE import urllib2 NEWLINE import re NEWLINE VAR = STRING NEWLINE VAR = STRING NEWLINE VAR = NUMBER NEWLINE VAR = re . compile ( STRING , re . I ) NEWLINE for VAR in range ( NUMBER , VAR + NUMBER ) : NEWLINE VAR = STRING % ( urllib2 . quote ( VAR ) , VAR , VAR ) NEWLINE try : NEWLINE VAR = simplejson . loads ( scraperwiki . scrape ( VAR ) ) NEWLINE for VAR in VAR [ STRING ] : NEWLINE VAR = { } NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR [ STRING ] = scraperwiki . geo . extract_gb_postcode ( VAR [ STRING ] ) NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE VAR [ STRING ] = VAR [ STRING ] NEWLINE if VAR [ STRING ] and VAR . search ( VAR [ STRING ] ) : NEWLINE print VAR [ STRING ] , VAR [ STRING ] NEWLINE scraperwiki . sqlite . save ( [ STRING ] , VAR ) NEWLINE except : NEWLINE print STRING % VAR NEWLINE break", "VAR = set ( range ( NUMBER , NUMBER ) ) NEWLINE VAR = [ ] NEWLINE def get_next_number ( ) : NEWLINE VAR = list ( VAR - set ( VAR ) ) NEWLINE VAR = randint ( NUMBER , len ( VAR ) - NUMBER ) NEWLINE VAR . append ( VAR [ VAR ] ) NEWLINE if len ( VAR ) > NUMBER : NEWLINE VAR . pop ( NUMBER ) NEWLINE return VAR [ VAR ]", "< select name = STRING > NEWLINE { % for VAR , VAR in mydict . items ( ) % } NEWLINE < option VAR = STRING NEWLINE { % if ( VAR == target ) % } selected = STRING { % endif % } NEWLINE > NEWLINE { { VAR } } NEWLINE < / option > NEWLINE { % endfor % } NEWLINE < / select >", "import numpy as np NEWLINE VAR = np . array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] ) NEWLINE VAR = np . bincount ( VAR ) NEWLINE VAR = np . nonzero ( VAR ) [ NUMBER ]", "VAR = np . array ( [ [ [ NUMBER , np . nan ] , [ np . nan , np . nan ] ] , [ [ np . nan , NUMBER ] , [ np . nan , NUMBER ] ] , [ [ np . nan , np . nan ] , [ np . nan , np . nan ] ] ] ) NEWLINE get_nans_blocks_length ( VAR ) NEWLINE array ( [ NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ] , dtype = int64 )", "import unittest NEWLINE class TestFoo ( unittest . TestCase ) : NEWLINE def setUp ( VAR ) : print ( STRING ) NEWLINE def tearDown ( VAR ) : print ( STRING ) NEWLINE def test_spam ( VAR ) : pass NEWLINE def test_egg ( VAR ) : pass NEWLINE def test_ham ( VAR ) : pass NEWLINE if __name__ == STRING : NEWLINE import sys NEWLINE VAR = unittest . VAR . defaultTestLoader NEWLINE VAR = unittest . TextTestRunner ( verbosity = NUMBER ) NEWLINE VAR = VAR . loadTestsFromModule ( sys . modules [ STRING ] ) NEWLINE for VAR in VAR : NEWLINE for VAR in VAR : NEWLINE if VAR . id ( ) . endswith ( STRING ) : NEWLINE setattr ( VAR , STRING , lambda : VAR . skipTest ( STRING ) ) NEWLINE VAR . run ( VAR )", "VAR = ( VAR for VAR in propadd if VAR [ NUMBER ] == row1 [ NUMBER ] and harversine ( custx , custy , VAR [ NUMBER ] , VAR [ NUMBER ] ) < NUMBER ) NEWLINE VAR = ( VAR for VAR in custadd if VAR [ NUMBER ] == row1 [ NUMBER ] ) NEWLINE VAR = ( VAR for VAR in numlist if re . search ( STRING , row1 [ NUMBER ] ) is not None and VAR [ NUMBER ] == re . search ( STRING , row1 [ NUMBER ] ) . group ( ) ) NEWLINE VAR = { VAR : STRING , VAR : STRING , VAR : STRING ) NEWLINE for VAR in ( VAR , VAR , VAR ) : NEWLINE VAR = list ( VAR ) NEWLINE if len ( VAR ) == NUMBER : NEWLINE row1 [ NUMBER ] = VAR [ NUMBER ] [ NUMBER ] NEWLINE row1 [ NUMBER ] = VAR [ NUMBER ] [ NUMBER ] NEWLINE row1 [ NUMBER ] = VAR [ VAR ] NEWLINE break", "class MenuItemComponentSerializer ( serializers . Serializer ) : NEWLINE VAR = ComponentURLField ( source = STRING ) NEWLINE VAR = Field ( source = STRING ) NEWLINE VAR = Field ( )", "sum ( ord ( VAR ) - NUMBER for VAR in name . lower ( ) if VAR != STRING )", "import pandas as pdpd . DataFrame . from_records ( VAR , columns = VAR ) NEWLINE def f ( VAR ) : NEWLINE VAR = ( VAR . hour - NUMBER ) / NUMBER NEWLINE if VAR > NUMBER : NEWLINE return str ( VAR . page ) + STRING . format ( int ( VAR ) ) NEWLINE else : NEWLINE return VAR . page NEWLINE VAR [ STRING ] = VAR . apply ( f , axis = NUMBER ) NEWLINE print VAR", "export PATH = $ PATH : STRING", ">> > VAR = [ [ NUMBER , NUMBER , NUMBER ] , [ NUMBER , NUMBER , NUMBER ] ] NEWLINE >> > from operator import itemgetter NEWLINE >> > map ( itemgetter ( NUMBER , NUMBER ) , VAR ) NEWLINE [ ( NUMBER , NUMBER ) , ( NUMBER , NUMBER ) ] NEWLINE >> >", "dbus . Struct ( ( dbus . Boolean ( a_boolean ) , dbus . Struct ( ( dbus . ObjectPath ( s1 ) , dbus . String ( s2 ) , dbus . String ( s3 ) ) ) ) , signature = STRING )", "STRING : [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] ,", "class FileUploadFormHandler ( BaseHandler ) : NEWLINE def get ( self ) : NEWLINE . . . NEWLINE self . render_jinja ( STRING , form = form , . . .", "[ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ] NEWLINE [ STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ]", "x . c ( compiled with cl / LD x . c : __declspec ( dllexport ) void read ( int16_t ** input , size_t size ) { int i ; int16_t * p = ( int16_t * ) malloc ( size * sizeof ( int16_t ) ) ; for ( i = NUMBER ; i < size ; i + + ) p [ i ] = i ; * input = p ; } __declspec ( dllexport ) void release ( int16_t * input ) { free ( input ) ; }", "class football : NEWLINE def __init__ ( VAR , VAR , VAR ) : NEWLINE VAR . VAR = VAR NEWLINE VAR . VAR = VAR NEWLINE def __str__ ( VAR ) : NEWLINE return VAR . VAR + STRING + VAR . VAR NEWLINE VAR = { STRING : football ( STRING , STRING ) , STRING : football ( STRING , STRING ) , STRING : football ( STRING , STRING ) , STRING : football ( STRING , STRING ) } NEWLINE def decor ( VAR ) : NEWLINE def wrap ( ) : NEWLINE print ( STRING ) NEWLINE VAR ( ) NEWLINE print ( STRING ) NEWLINE return wrap NEWLINE def print_text ( ) : NEWLINE print ( STRING ) NEWLINE VAR = decor ( print_text ) NEWLINE VAR ( ) NEWLINE VAR = input ( STRING ) . capitalize ( ) NEWLINE print ( VAR [ VAR ] )", "[ zart @ feena ziplib - demo ] $ bin / pip install - - install - option - - install - lib = $ PWD / unpacked waitress NEWLINE Downloading / unpacking waitress NEWLINE Downloading waitress - NUMBER NUMBER . tar . gz ( NUMBER kB ) : NUMBER kB downloaded NEWLINE Running setup . py egg_info for package waitress NEWLINE Requirement already satisfied ( use - - upgrade to upgrade ) : setuptools in . / lib / python2 NUMBER / site - packages / setuptools - NUMBER c11 - py2 NUMBER . egg ( from waitress ) NEWLINE Installing collected packages : waitress NEWLINE Running setup . py install for waitress NEWLINE Installing waitress - serve script to / home / zart / ziplib - demo / bin NEWLINE Successfully installed waitress NEWLINE Cleaning up . . .", "How to get only even numbers from list", "How can I use a list comprehension to extend a list in python?", "stdout from python to stdin java", "Re-Construct a png image from a GDK Pixbuf", "tokenizing and parsing with python", "Python: Data validation using regular expression", "Python: Automatically initialize instance variables?", "replace multiple occurrences of any special character by one in python", "How can I, on some global keystroke, paste some text to current active application in linux with Python or C++", "Get a value from a dictionary without linking to the memory location", "Finding groups of increasing numbers in a list", "How to append the second return value, directly to a list, in Python", "How to change the date/time in Python for all modules?", "Extract a particular number followed by a command line argument variable from a string in python", "Parsing text in BS4", "Convert a 3D array to 2D array based on dictionary", "How to remove a column from a structured numpy array *without copying it*?", "Cmd module '~' completion", "Create a list property in Python", "Pandas, to_csv () to a specific format", "Converting dictionary of dictionary of dictionary to pandas data frame", "Counting observations after grouping by dates in pandas", "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]", "Plone - Override Zope Schema fields", "how to iterate over all files in path?", "Call method in a class which called the current class", "In Django, how could I in a single query get total row count based on distinct field values?", "How to *append* a text to a database file opened with shelve?", "Complete a task during certain time frames within a python script", "Python method for reading keypress?", "How can I use pyparsing to data from VC++ autoexp.dat?", "Mixed content (float || unicode) for database column", "How to do a basic query on yahoo search engine using Python without using any yahoo api?", "customize django runserver output", "Recognising objects in images using HAAR cascade and OpenCV", "Convert dataFrame to list", "finding nearest points in python", "List of (date, day_of_week) tuples", "List Slicing python", "PyImport_ImportModule, possible to load module from memory?", "numpy create 3D array from indexed list", "How can I perform a least-squares fitting over multiple data sets fast?", "numpy random numpers in specified shape of any complexity", "Installing OSQA on windows (local system)", "How should I subtract two dataframes and in Pandas and diplay the required output?", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Spawning a thread in python", "Partitioning a set of values in Python", "Adding 'n' values in list using for-loop and step-loop for that 'n' values in python", "how to groupby pandas dataframe on some condition", "How to add regression functions in python, or create a new regression function from given coefficients?", "Extracting data from file with differing amounts of columns", "How can I get a Tuple from a list in python (3.3)", "Wxpython closing windows", "Python: Keep track of current column in text file", "Best way to convert value in nested list to string", "Interpolating 3d data at a single point in space (Python 2.7)", "Python how to use Counter on objects according to attributes", "How to perform a 'one-liner' assignment on all elements of a list of lists in python", "Python - removing items from lists", "Python Sum of Squares Function", "How do I count the number of identical characters in a string by position using python?", "What is the best way to fetch/render one-to-many relationships?", "Print two report in Odoo8", "Python multiline string - $ for variables", "How to deal with special characters in make command expansion?", "insert into sqlite table with unique column", "Python .csv writer", "Use Python zip to save data in separate columns from a binary file", "How to make POS n-grams more effective?", "How to find cluster sizes in 2D numpy array?", "Selecting the value in a row closest to zero in a pandas DataFrame", "Pandas Compute Unique Values per Column as Series", "Python - read BeautifulSoup snippet by row? (or other ways of scraping the data I want)", "Multiple drag and drop in PyQt4", "clean way to accomplish -- if x in [(0, 1, 2), (2, 0, 1), (1, 2, 0)]:?", "How can I store data to a data dictionary in Python when headings are in mixed up order", "How to encode a python dictionary and decode in jquery? (via a cookie)", "Python, remove specific columns from file", "Support multiple API versions in flask", "How to insert arrays into a database?", "Drawing window border in Python xlib", "Dynamically pass parameters to function", "python: convert to HTML special characters", "how to dynamically read a specific cell value in a table using selenium and python", "How to turn a dictionary \"inside-out\"", "Stop a command line command in script", "Atomic increment of a counter in django", "Python Pandas removing substring using another column", "How to write defaultdict in more pythonic way?", "Adding a simple value to a string", "How to get the number of elements returned from a function in Python", "Comparing two dictionaries in list in python", "String formatting without index in python2.6", "Webpy: how to set http status code to 300", "How can I sort a 2D list?", "python plot distribution across mean", "cosine similarity between two words in a list", "Finding if a number is a perfect square", "Beautiful Soup - Class contains 'a' and not contains 'b'", "How can I find the average of each similar entry in a list of tuples?", "Convert Country Names to Country Code using Python DictReader/DictWriter", "Trying to convert HSV image to Black and white [opencv]", "Match rows between two files and mark the matched strings", "Other ways to replace single character", "How to get a list of datatypes on Django model?", "trying to create a dictionary but do not know how to deal with \\n", "optparse(): Input validation", "Chunking bytes (not strings) in Python 2 and 3", "Best way of removing single newlines but keeping multiple newlines", "finding nth combination (incremental approach) of letters (list)", "Python: Is there a shortcut to finding which substring(from a set of substrings) comes first in a string?", "How to override OSX's version of numpy when I import in Python 2.7?", "Is there a pythonic way to support keyword arguments for a memoize decorator in Python?", "NumPy map calculation depending on the indices", "how to do an embedded python module for remote sandbox execution?", "Match series of (non-nested) balanced parentheses at end of string", "Return the largest value of a given element of tuple keys in a dictionary", "Printing a two dimensional list", "Python: List comprehension list of lists", "Scrape 'dictionary' type object from top of HTML file (bunch of text, not in a class)", "Compress an array in python?", "Getting value of a class in selenium and python", "Weighted random choice from a variable length text file", "Python: sharing a list between threads", "Merge CSVs using Python (or Bash)", "Log-sum-exp trick on a sparse matrix in scipy", "Python Decimals format", "How to give object away to python garbage collection?", "How to run executable from python and pass it arguments asked for?", "How to write variable and array on the same line for a text file?", "Combine multiple heatmaps in matplotlib", "What is the pythonic way to sort a list with multiple attributes, such that the first is sorted reversely but the second is not?", "Python: Extracting Sentences From Line - Regex Needed Based on Criteria", "csv to sparse matrix in python", "Is there an easy way to tell which line number a file pointer is on?", "Python Boto List Storage Devices Attached to Instance", "Python-like list comprehension in Java", "How do you clone a class in Python?", "Waf: How to output a generated file?", "Integrating a vector field (a numpy array) using scipy.integrate", "Using Python Iterparse For Large XML Files", "Lazy Method for Reading Big File in Python?", "Run parts of a ipython notebook in a loop / with different input parameter", "Unique duplicate rows with range", "find an empty value gap in a list and allocate a group of strings", "Django - access foreign key data in an annotated query", "how to search values in a file and replace", "How do I get python to search a csv file for items in a dictionary then print out the entire excel row...Thanks", "Split string into array with many char pro items", "Export Pandas data frame with text column containg utf-8 text and URLs to Excel", "Printing inherited class in Python", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "Access a Numpy Recarray via the C-API", "Find dictionary keys with duplicate values", "Detecting geographic clusters", "Python - dataframe conditional index value selection", "Print two report in Odoo8", "HTML data from Beautiful Soup needs formatting", "Finding matching submatrices inside a matrix", "Deleting consonants from a string in Python", "How to parse XML file from European Central Bank with Python", "How to Get Variable from another .py", "How can I use a pre-made color map for my heat map in matplotlib?", "Print timestamp for logging in Python", "Python: Extending a predefined named tuple", "Concatenate elements of a list", "setDefault for Nested dictionary in python", "Abaqus: script to select elements on a surface", "Finding common elements from two lists of lists", "Python : match string inside double quotes and bracket", "Python PyQt QWebView load site in clicked tab", "Combine methods with identical structure but different parameters", "Gnuplot: use a function to transform a column of a data file and plot the transformed data and the function", "finding index of an item closest to the value in a list that's not entirely sorted", "Python Relating k-means cluster to instance", "Find nested sub-classes in a class in the order they're defined", "Python - Split a list of integers into positive and negative", "Can I use one import and expose keywords from multiple python libraries?", "How to force sympy to extract specific subexpressions?", "How to apply a function on every row on a dataframe?", "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array", "Python pandas idxmax for multiple indexes in a dataframe", "Replacing strings in specific positions into a text and then rewriting all the text", "Python: Nice way to iterate over shell command result", "How to only read lines in a text file after a certain string using python?", "Beautiful Soup - Class contains 'a' and not contains 'b'", "Join unique values into new data frame (python, pandas)", "Python removing duplicates in list and 1==1.0 True", "regex to find a specific pattern in python", "Returning elements from a loop, one at a time", "Secure MySQL login data in a Python client program", "Replace character in line inside a file", "What is the best way to pass a method (with parameters) to another method in python", "Parse a file into a dictionary of arrays", "inequality comparison of numpy array with nan to a scalar", "Retrieve position of elements with setting some criteria in numpy", "Localized random points using numpy and pandas", "How can I create a GUI on top of a Python APP so it can do either GUI or CLI?", "Converting and reshaping a list into a DataFrame in Pandas", "How to add two Sparse Vectors in Spark using Python", "How do I change the built-in button labels on a gtk.Assistant?", "How do I get rid of dotted line on x axis of Pandas/Matplotlib bar plot?", "Detecting geographic clusters", "Selecting Tags With Multiple Part Class in BeautifulSoup", "Changing an input from an integer to a string back to an integer", "Update a Pyspark DF Column based on an Array in another column", "variable length of %s with the % operator in python", "Sorting a List by frequency of occurrence in a list", "Python: multidimensional array masking", "Double helix generating algorithm", "Cron Job File Creation - Created File Permissions", "Web scraping with Python", "Fast linear interpolation in Numpy / Scipy \"along a path\"", "How to XOR literal with a string", "Python App Engine serving files with Google Cloud Storage", "NULL safe inequality comparisons in SQL Alchemy?", "How to recursively call a macro in jinja2?", "Communication between two gnome-terminal sessions", "Visual module in python assign objects", "Applying a function by bins on a vector in Numpy", "which random am i looking for to achieve this:", "how to make post request in python", "Insert tree kind of data taken from a database into a python dictionary", "SCons to generate variable number of targets", "Python: Find in list", "Python Regex on comma, space", "Solving 5 Linear Equations in Python", "How to Get Variable from another .py", "How can I pack images? -Pygame -PyInstaller", "Counting how many unique identifiers there are by merging two columns of data?", "Converting coordinate tuple information to numpy arrays", "How can I perform a least-squares fitting over multiple data sets fast?", "How to generate list combinations in Python", "Remove elements of one list from another, while keeping duplicates", "Python transition matrix", "How does python prevent a class from being subclassed?", "How to get console output printed using kivy", "Iterator that supports pushback", "Getting strings in between two keywords from a file in python", "Faster alternative to for loop in for loop", "Python's safest method to store and retrieve passwords from a database", "variable length of %s with the % operator in python", "How to consistently ignore one byte from a string", "Find all combinations of letters, selecting each letter from a different key in a dictionary", "python - increase array size and initialize new elements to zero", "Add numpy array as column to Pandas data frame", "Generating passwords in Python 3.1.1", "Django User Model one-to-one with other model and Forms", "Django Model Design - Many-To-Many Fields", "Changing the columns in DataFrame with respect to values in other columns", "Django Model Design - Many-To-Many Fields", "numpy: slicing and vectorized looping with 1d and 2d arrays", "How to find the local minima of a smooth multidimensional array in NumPy efficiently?", "Writing NetCDF time variable from start of year", "Pandas: Change dataframe values based on dictionary and remove rows with no match", "Creating an OrderedDict from a csv file", "Rolling mean with customized window with Pandas", "Flask-WTF: how pass structered object to form", "Storing a string and a set in a dictionary", "how to sort a list of string by every element's numeric value", "Using pandas to plot data", "Import object from module of same name using __import__", "Convert excel or csv file to pandas multilevel dataframe", "Use of SQL - IN in python", "Drawing a clamped uniform cubic B-spline using Cairo", "Special End-line characters/string from lines read from text file, using Python", "combining lists inside values in pyspark", "Secure MySQL login data in a Python client program", "Truncating multi-indexed dataframe", "Periodically execute function in thread in real time, every N seconds", "Intersection between multiple files", "Create a summary Pandas DataFrame using concat/append via a for loop", "Batch Scripting: Running python script on all directories in a folder", "MySQL select all components of a product", "google app engine - ndb query to only get a few columns in python", "Open txt file, skip first lines and then monitor a given column of data", "to get max number after concatenation in list", "Python - list of dicts into function that only accepts *dicts", "Extract elements of a 2d array with indices from another 2d array", "How can I determine when a user is in the process of entering something as an input in Python?", "Regex Parse Email Python", "More efficient solution? Dictionary as sparse vector", "Detrend Flux Time Series with Non-Linear Trend", "Create numpy array based on magnitude of difference between arrays", "Django Admin Panel. Display and Edit Parent Fields in Child's Object (ModelAdmin.inlines reverse)", "Remove focus from Entry widget", "For Kasiski Test,How to implement 26x26 table in Python", "How do I get the modified date/time of a file in Python?", "Writing to a specific column of a text file in python", "Compare unequal lists", "XOR neural network backprop", "Pandas - group by consecutive ranges", "Remove single quotes from python list item", "How do you @rpc _returns polymorphic types in spyne?", "Sqlalchemy \"double layer\" query", "Checkbox to determine if an action is completed or not", "Decimal formatting based on number of digits in integer and decimal parts", "Splitting Strings in Python with Separator variable", "Conditional import in a module", "Search for brackets in a case insensitive using regular expressions", "Changing number representation in IDLE", "numpy tile without memory allocation", "how to get the class type in lua / translation from python", "How do I find the maximum amount of possible correct matches in these arrays?", "Iterating over a list while incrementing another variable at the same time", "Extract domain from body of email", "Need to parse a tool log file in python and then save the results in excel or csv", "Better logging system for entire package", "Python-Flask: Pass data to machine learning python script and get results back", "How can I keep the indentation between lines?", "Concat every 4 strings from a list?", "Filling gaps for cumulative sum with Pandas", "Fill scipy / numpy matrix based on indices and values", "Plotting Histogram: How can I do it from scratch using data stored in a database?", "Python: separate list of values into x number of sections, and give each value in x a variable", "python regular expressions in find and replace", "Execute code when extending a class in Python", "Simulating a key press event in Python 2.7", "Get statistics from subgroups in pandas", "How to plot real-time graph, with both axis dependent on time?", "Python | How to create dynamic and expandable dictionaries", "syntactic whitespaces with pyparsing's operatorPrecedence", "Mimic curl in python", "Filtering for row-wise patterns in columns with a sequence of 0 and 1", "Computing the Difference between two graphs 'edge wise' in networkx", "Computing 16-bit checksum of ICMPv6 header", "how to goup items in a list of dictionaries by matching values \u200b\u200bin python", "How to automatically rerun a python program after it finishes? Supervisord?", "How to plot a 3D density map in python with matplotlib", "Returning the value of an index in a python list based on other values", "Packaging a python application ( with enthought, matplotlib, wxpython) into executable", "how to show each element of array separately", "how to decrement and increment loop range 'i' variable in the execution of loop in python", "Python BeautifulSoup Mix Matching items in Table", "Using a string as a variable name", "Obtaining dictionary value in Python", "Matrix triple product with theano", "In Python how do I parse the 11th and 12th bit of 3 bytes?", "Pandas: How to extract rows of a dataframe matching Filter1 OR filter2", "Override python logging for test efficiency", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "How to generalize a multiplication table for (n * m)", "how to know the type of sql query result before it is executed in sqlalchemy", "How to get parameter arguments from a frozen spicy.stats distribution?", "Multiple Database Config in Django 1.2", "how to exclude the non numerical integers from a data frame in Python", "How to get a vector from a list in list in python?", "Python regular expression: get result without the search string used", "pandas count true values in multi-index frame", "Connect to MSSQL Server 2008 on linux", "Calculate point based on distance and direction", "Calculate a point along a line segment one unit from a end of the seg", "Borda Count using python?", "Ordering a nested dictionary by the frequency of the nested value", "Breaking up substrings in Python based on characters", "Drop Duplicate in market data", "python union of 2 nested lists with index", "Parse XML file into Python object", "What's the most efficient way to accumulate dataframes in pyspark?", "Get header row in pandas dataframe", "Adding a constant to a closure expression", "Load JPEG from URL to skimage without temporary file", "Using fping to get ping times in Python", "Extract data / parse from HTML in PHP / Python", "How to dynamically create classes inside a module-level initialize() method in Python", "Pyramid authorization for stored items", "vectorize numpy unique for subarrays", "Filling gaps for cumulative sum with Pandas", "deleting element from python dictionary", "Making a tree shape.", "having category headings for list dictionaries in python/django", "Customize sphinxdoc theme", "Usng the value of a string as a variable name", "How do you create a list of values in Python within a certain range?", "Put the result of simple tag into a variable", "Pandas: Adding conditionally", "Map function and input function parameters", "How do I add space between two variables after a print in Python", "Creating a new corpus with NLTK", "Django app deployment on nGINX", "Detagging with regex does not catch nested tags", "How to make a calculator with strings and numbers as mixed input using parser python ply", "Python and appending items to text and excel file", "How to return both string and value within HttpResponse?", "Pandas: Change dataframe values based on dictionary and remove rows with no match", "Sorting numpy matrix for a given column", "how to grab alternating child tags in python beautifulsoup", "How do I delete an object in a django relation (While keeping all related objects)?", "Python, logging print statements while having them print to stdout", "python dictionary values sorting", "create sublists within sublists in python", "scale two matrices with scipy or sklearn", "Loops to minimize function of arrays in python", "Is it possible to map a discontiuous data on disk to an array with python?", "Fast way to find index of array in array of arrays", "Calculate point based on distance and direction", "Can I override a C++ virtual function within Python with Cython?", "Creating a slice object in python", "Python: Removing random whitespace from a string of numbers", "More efficient way to make unicode escape codes", "Python - split list of lists by value", "Convert empty dictionary to empty string", "container where values expire in python", "Read each word and rest of line in Python?", "Radical Use of Admin's Interface", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "Solve Lotka-Volterra model using SciPy", "Accessing an object created in another module using python", "How to create a new list or new line after a certain number of iterations", "Running blocks of code inside vim", "How to search & replace in Python?", "How to assign scipy.sparse matrix to NumPy array via indexing?", "Loop through multiple different sized python dictionaries", "Dynamic Table Creation and ORM mapping in SqlAlchemy", "summing nested dictionary entries", "python count business weeks", "Python get get average of neighbours in matrix with na value", "exit from ipython", "Populating a table in PyQt with file attributes", "Python: Extracting specific data with html parser", "Defining the name of a ManyToOne relationship in Django", "Modifying a recursive function that counts no. of paths, to get sequence of all paths", "Customizing time of the datetime object in python", "Python - removing items from lists", "Python : match string inside double quotes and bracket", "Clean way to manage parse-dictionaries that contain function names", "Python loop through string in nested for loops", "Initialize list with same bool value", "How to count how many data points fall in a bin", "Fast way to find index of array in array of arrays", "How do I install pip in python 2.7?", "Changing color TabbedPannelHeader in Kivy", "NLTK: Find contexts of size 2k for a word", "Fastest way to remove subsets of lists from a list in Python", "Create a Series from a Pandas DataFrame by choosing an element from different columns on each row", "Plone - Override Zope Schema fields", "How to parse Apple's IAP receipt mal-formatted JSON?", "Python removing duplicates in list and 1==1.0 True", "How to check if key is primary psycopg2", "How to connect QLineEdit focusOutEvent", "How to make a continuous alphabetic list python (from a-z then from aa, ab, ac etc)", "Programming contest like input validator", "How to not render a entire string with jinja2", "Remove unwanted commas from CSV using Python", "How can I check if a string has the same characters? Python", "Django dynamic model fields", "python how to create list of interchangeable values?", "Dictionary As Table In Django Template", "Organize Numerically Descending then Alphabetically Ascending by Different Elements in a List Python", "Django Celery get task count", "How can I change the value of a node in a python dictionary by following a list of keys?", "Numpy interconversion between multidimensional and linear indexing", "Passing argument to python which is half \"<direct string>\" and half value of a variable", "How to make a test function using pytest", "Finding start and stops of consecutive values block in Python/Numpy/Pandas", "SQLAlchemy ON DUPLICATE KEY UPDATE", "How to reference/iterate multiple lists in Python", "chunk of data into fixed lengths chunks and then add a space and again add them all as a string", "How do I get the number of posts on each day with annotation in Django?", "Compile Python 2.5.5 on OS X 10.6", "How to set a date restriction for returned events in Google Calendar and put them in order - Python", "Remove and insert lines in a text file", "How to count occurrences of specific element for arrays in a list?", "Evaluate multiple variables in one 'if' statement?", "Using DataFrame to get matrix of identifiers", "Simple OOP: Python, saving object names via __init__ v2", "Numpy interconversion between multidimensional and linear indexing", "Effective regex for multiple strings with characters and numbers", "Python: Automatically initialize instance variables?", "alternate for multiple constructors", "NLTK: Find contexts of size 2k for a word", "Calculate number of jumps in Dijkstra's algorithm?", "Sorting a list of list of tuples based on the sum of first field in the tuple in Python", "How to convert a python string", "Deleting consonants from a string in Python", "Python Decorator 3.0 and arguments to the decorator", "Remove duplicates in python list but remember the index", "Making an object's attributes iterable", "Matplotlib: force aspect ratio in series of plots", "How to see traceback on xmlrpc server, not client?", "Python keyword arguments unpack and return dictionary", "Smart filter with python", "Use regex backreferences to create array", "Sorting a list with a dictionary at items", "How to make unique combinations of the following list of tuples", "How to get a list of Xth elements from a list of tuples?", "Django dynamic model fields", "Gurobi, How to change a continuous variable to a binary variable", "Copy 2D array to a 3D one - Python / NumPy", "How to randomly pick numbers from ranked groups in python, to create a list of specific length", "Iterator for each item in a 2D Python list and its immediate m by n neighbourhood", "Simple loop for all elements of an etree object?", "How to decode() with a subset of 'ascii'?", "Python convert single column of data into multiple columns", "Best way to make a counter based on time", "Accessing xrange internal structure", "Tkinter nested mainloop", "how can I have commas instead of space in a given set of number", "Wait on Arduino auto-reset using pySerial", "How to make QtGui window process events whenever it is brought forward on the screen?", "Jenkins and Python", "capturing the usernames after List: tag", "Line breaks with lists", "how to pick random items from a list while avoiding picking the same item in a row", "python click usage of standalone_mode", "Dynamic module loading in python", "Uploading files using Django Admin", "Python list to txt", "Developing Python modules - adding them to the Path", "python - remove empty lines from end and beginning of string", "How can display the lines from linux log file in browser", "Python reverse integer using recursion", "Implementing 2D slicing in Python", "Monitor ZIP File Extraction Python", "Print out a large list from file into multiple sublists with overlapping sequences in python", "Django UpdateView without pk in the url", "django-mptt get_descendants for a list of nodes", "Iterate through a list of numpy arrays", "Return random value from list tuple", "Python find which order element is in in a list", "Try/Except Every Method in Class?", "Find k smallest pairs in two lists", "Replace xml tag contents using python", "Reading files in parallel in python", "Using MongoEngine Document class methods for custom validation and pre-save hooks", "call function through variable or without parentheses in python", "Compare list w/ sublist", "map array of numbers to rank efficiently in Python", "Python: Loop through all nested key-value pairs created by xmltodict", "any python min like function which gives a list as result", "Reading serial data in realtime in Python", "repeat arange with numpy", "detecting POS tag pattern along with specified words", "Remove unnecessary whitespace from Jinja rendered template", "how do I concatenate 3 lists using a list comprehension?", "grouping an unknown number of arguments with argparse", "boost python overload operator ()", "Pandas: add dataframes to dataframe - match on index and column value", "How to execute and save result of an OS command to a file", "Generate random numbers without using the last n values in Python", "dictionary of dictionaries(nested dicts)", "Running program/function in background in Python", "python matplotlib plot sparse matrix pattern", "Python/ Pandas CSV Parsing", "How to make a Python function sleep some time while the rest of the game continues?", "Django how to update more than a row field at once", "\"Canonical\" offset from UTC using pytz?", "Most efficient way to loop through multiple csv files and calculate NYSE tick", "Adding docstrings to namedtuples?", "two dimensional array for encryption in python", "Switching Printer Trays", "Broken XML file parsing and using XPATH", "How to add a another value to a key in python", "Alternatives to cartesian in Spark?", "Comparing two pandas dataframes for differences", "Print tree without recursion", "How to avoid defining a variable to hold a function result which might be needed only once", "Iterating through large lists with potential conditions in Python", "Sum of all numbers inside a string", "Vectorize this function in Numpy Python", "How to incrementally sample without replacement?", "Counting elements matching a pattern in a tuple of tuples", "Python CSVkit compare CSV files", "Parsing bits from a 128 byte block of hex in Python", "How to get the 'cardinal' day of the year in Pandas?", "python list manipulation nesting vertically, making it look like a matrix", "Numpy Compare unequal rows and make both array of same dimension", "Rotate photo via python", "Accessing an object created in another module using python", "How to find cluster sizes in 2D numpy array?", "Selecting text nodes with text not equal to a value", "Assistance on automated image/text Document", "Django User Model one-to-one with other model and Forms", "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?", "Terminating subprocess in python", "Numerical value of a name", "Python: sort lists in dictonary of lists, where one list is a key to sorting", "How to restart a python script after it finishes", "How to filter results of a groupby in pandas", "How do I test if a string exists in a Genshi stream?", "Python Joining csv files where key is first column value", "python datapanda: getting values from rows into list", "Python multiprocessing and shared numpy array", "Convert a hashcode to its binary representation", "How do I take an integer from a list intending to use it?", "Get the count of the each date entry from onr of the raw from CSV file", "How do I make pip available from command line mac?", "How to convert an urlopen into a string in python", "Addition of multiple arrays in python", "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?", "Catch Keyboard Interrupt in program that is waiting on an Event", "Counting how many unique identifiers there are by merging two columns of data?", "parse blocks of text from text file using Python", "Update a Pyspark DF Column based on an Array in another column", "Change specific repeating element in .xml using Python", "How to import classes defined in __init__.py", "How to print JSON with keys in numeric order (i.e. as if the string keys were integers)", "Selecting siblings from html with Python lxml(html) library", "Python3 Make a list that increments for a certain amount, decrements for a certain amount", "Pair combinations of elements in dictionary without repetition", "Creating a dictionary and adding a set as its value", "How to save big (not huge) dictonaries in Python?", "student t confidence interval in python", "Finding median in Spark Streaming", "how to mask the specific array data based on the shapefile", "Get system metrics using PowerShell", "How to calculate cohen's d in Python?", "Uploading Django projects set up within virtual environment on Github", "Iterate over Python list, preserving structure of embedded lists", "How to replace all words in a series with a few specified words in Pandas,Python?", "Check printable for Unicode", "matching a multiline make-line variable assignment with a python regexp", "Search multiple strings in multiple files", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "display only one logging line", "python pandas Slicing datetime dates by number of rows", "Check if all elements of one array is in another array", "Django wildcard query", "How to find ngram frequency of a column in a pandas dataframe?", "Re-Construct a png image from a GDK Pixbuf", "read snippet of file with regular expressions from text file in python", "Combine variable and for each loop python", "Calculate weighted average using a pandas/dataframe", "How to add a string to a specific line", "How can you find where python imported a particular module from?", "Using TCL extensions to set native window style in Tkinter", "How can I treat a section of a file as though it's a file itself?", "vectorize numpy unique for subarrays", "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list", "Computer Shut Off Python 3.4", "What is a clean, pythonic way to have multiple constructors in Python?", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "Matching y axis points together", "sklearn decomposition top terms", "How can i extract metdata from django models", "Filtering in Django by a set of String", "Python - compare columns in a text file, loop and pop lists", "How to use scipy.integrate.ode.set_f_params() to make time dependant parameter changes?", "Datastore Design Inquiry", "How to find a index of an item in a string?", "How do I convert data from a list of lists to a readable table (or group of columns)?", "Getting the row index for a 2D numPy array when multiple column values are known", "Beautiful Soup [Python] and the extracting of text in a table", "Switching positions of two strings within a list", "Conditionally and interatively calculate column based on value of three columns", "Python regex to remove all words which contains number", "Named dictionary in python", "How do I change the built-in button labels on a gtk.Assistant?", "Parsing structured text file in python", "Django Templates: Is there a way to query a specific object based on its property (instead of iterating over all)?", "making regex capture group optional in url for a tornado app", "Flask : How to update and render a variable periodically?", "Pandas, Filling between dates with average change between previous rows", "Get ALL results of a word mapping with a dictionary", "How to remove a column from a structured numpy array *without copying it*?", "Python list manipulation: Add an item to a string element to make it a 2 item list", "List names of all available MS SQL databases on server using python", "Selenium Steam community market listings python", "Django wildcard query", "Interleaving two numpy index arrays, one item from each array", "Pivot Pandas Dataframe with a Mix of Numeric and Text Fields", "merging two lists, removing empty strings", "Splitting a string @ once using different seps", "Return All Matching Lines in a Logfile", "Generic way to get primary key from declaratively defined instance in SQLAlchemy", "How can I get certain text from a website with Python?", "Save app data in Weather App", "ScraperWiki/Python: filtering out records when property is false", "How do I obtain the reference of a getter/setter method created through @property in Python?", "Reorder Columns by String Variable", "Resizing a 3D image (and resampling)", "Joining Subsequent List Elements - Python", "Saving an Element in an Array Permanently", "Find occurrence using multiple attributes in ElementTree/Python", "Slicing pandas groupby groups into equal lengths", "expose C++ function to python", "Using Twitter Bootstrap radio buttons with Flask", "SCons to generate variable number of targets", "Pandas: transforming the DataFrameGroupBy object to desired format", "Mimic curl in python", "List of (date, day_of_week) tuples", "calling class with user input", "Working with multiple columns from a data file", "How many times is a particular row present?", "Query current directory in Python (the one the script is running from)", "How to center labels in histogram plot", "How can I use a list comprehension to extend a list in python?", "stdout from python to stdin java", "find unique first top and bottom lines of fastq file from fasta file", "Can you make a function that would create several instances of a class for you in Python?", "Python: Data validation using regular expression", "Python CSVkit compare CSV files", "Finding groups of increasing numbers in a list", "Calculate weighted average using a pandas/dataframe", "Extract a particular number followed by a command line argument variable from a string in python", "Python socket send EOF", "Convert a 3D array to 2D array based on dictionary", "Update dictionary in xml from csv file in python", "Pandas, to_csv () to a specific format", "index by comparision of two numpy arrays in python", "Accept newline character in python", "Filling gaps for cumulative sum with Pandas", "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]", "Naming each item in a list which is a value of a dictionary", "List database tables with SQLAlchemy", "Inherit/Extend Django Module or cram into same Module?", "Complete a task during certain time frames within a python script", "Batch Scripting: Running python script on all directories in a folder", "Implementing class descriptors by subclassing the `type` class", "Simulating electron motion - differential equation with adaptive step size in python", "Mixed content (float || unicode) for database column", "Stiff ODE-solver", "Restart a script after 6 minutes", "Applying a function by bins on a vector in Numpy", "SCons to generate variable number of targets", "Support multiple API versions in flask", "combining python watchdog with multiprocessing or threading", "Pandas count number of elements in each column less than x", "PyImport_ImportModule, possible to load module from memory?", "Proper way to destroy a file chooser dialog in pygtk for python", "List of distinct XML element names using BeautifulSoup", "numpy create 3D array from indexed list", "Parsing members of a variable length python string", "How can I perform a least-squares fitting over multiple data sets fast?", "How should I subtract two dataframes and in Pandas and diplay the required output?", "Finding superstrings in a set of strings in python", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Adding 'n' values in list using for-loop and step-loop for that 'n' values in python", "python regular expressions in find and replace", "Parsing text in BS4", "Extracting data from file with differing amounts of columns", "Convert a 3D array to 2D array based on dictionary", "Best way to convert value in nested list to string", "Writing variables with .write() Python 3", "Python how to use Counter on objects according to attributes", "Getting file path from command line arguments in python", "Add django model manager code-completion to Komodo", "Reorder a dictionary to fit a data frame", "Mulitprocess Pools with different functions", "Radical Use of Admin's Interface", "How to deal with special characters in make command expansion?", "insert into sqlite table with unique column", "Python .csv writer", "sum two lists element-by-element in python recursively", "How to make POS n-grams more effective?", "Embedding IronPython in a WinForms app and interrupting execution", "SCons to generate variable number of targets", "What is the proper way to perform a contextual search against NoSQL key-value pairs?", "Django dynamic model fields", "Match series of (non-nested) balanced parentheses at end of string", "Solve equation with a set of points", "clean way to accomplish -- if x in [(0, 1, 2), (2, 0, 1), (1, 2, 0)]:?", "Merging repeated items in a list into a python dictionary", "How to encode a python dictionary and decode in jquery? (via a cookie)", "Adding docstrings to namedtuples?", "Python unittesting: Test whether two angles are almost equal", "Dynamically pass parameters to function", "Passing more than two arguments in reduce function", "python: convert to HTML special characters", "how to dynamically read a specific cell value in a table using selenium and python", "Extracting text from HTML file using Python (Music Artist / Title)", "Stop a command line command in script", "RegEx in Python matching multiple substrings using one group", "Summarize a list of dictionaries based on common key values", "Python Pandas removing substring using another column", "Use BeautifulSoup to extract text before the first child tag", "Merge some part of the list together using python", "How to convert a string that already looks like a list into a list?", "Python: Extracting Sentences From Line - Regex Needed Based on Criteria", "Beautiful Soup [Python] and the extracting of text in a table", "How to read complex numbers from file with numpy?", "Creating random binary files", "cosine similarity between two words in a list", "Using Eval in Python to create class variables", "What is the fastest way to parse large XML docs in Python?", "Pyramid authorization for stored items", "Convert Country Names to Country Code using Python DictReader/DictWriter", "calculate distance between two chains in PDB file", "Python Pandas DataFrame how to Pivot", "Match rows between two files and mark the matched strings", "How to align and compare two elements (sequence) in a list using python", "trying to create a dictionary but do not know how to deal with \\n", "How to use an array to keep track of different numbers?", "Chunking bytes (not strings) in Python 2 and 3", "Printing a list into grid", "Sorting a list based on associated scores", "Detecting geographic clusters", "QTableView item selection based on a QStandardItem data attribute", "Python: Is there a shortcut to finding which substring(from a set of substrings) comes first in a string?", "What would be a good regexp for identifying the \"original message\" prefix in gmail?", "How can I wait until an element gains or loses a class?", "How to use swig with compiled dll and header file only", "NumPy map calculation depending on the indices", "Read python function from a text file and assign it to variable", "Return the largest value of a given element of tuple keys in a dictionary", "Scrape 'dictionary' type object from top of HTML file (bunch of text, not in a class)", "More elegant/Pythonic way of printing elements of tuple?", "Getting value of a class in selenium and python", "Python. How to make a class so that I can create a set of related objects(like\"Rock, Paper, Scissors\") with it?", "How to flexibly change PYTHONPATH", "Skip/pass over view function so the next can execute in Flask", "Python Decimals format", "How to extract a file within a folder within a zip in python?", "OR style permissions for DjangoRestFramework", "Parse list to other list", "Python argparser. List of dict in INI", "remove dictionary from list in pandas colum", "Combine multiple heatmaps in matplotlib", "PYMongo : Parsing|Serializing query output of a collection", "Python argparser. List of dict in INI", "Is there an easy way to tell which line number a file pointer is on?", "Sort Python list by dict key,value", "How to search & replace in Python?", "Waf: How to output a generated file?", "Convert Python dict to object?", "Integrating a vector field (a numpy array) using scipy.integrate", "Iterator that supports pushback", "Most efficient way to index words in a document?", "Finding combinations that meet a threshold relation", "On using a string as an integer counter (aka index) in a for loop", "python beginner - how to read contents of several files into unique lists?", "How to find combinations of a list in a Dictionary?", "Pass a counter to every python logging method", "Python Django: join view on the admin interface", "Split string into array with many char pro items", "How can I group objects by their date in Django?", "Django unique random as a default value", "python breaking numbers in to 10s 5s 1s and .1s", "How to add in a dictionary the values that have similar keys?", "pandas multiindex assignment from another dataframe", "Flex: detecting user idle?", "Finding matching submatrices inside a matrix", "Using groupby to operate only on rows that have the same value for one of the columns pandas python", "Assign values to the groups of a groupby in pandas", "How can I use a pre-made color map for my heat map in matplotlib?", "how to use python list comprehensions replace the function invoke inside of \"for\" stmt?", "Convert multichar %xx escapes to unicode", "Spark DataFrame TimestampType - how to get Year, Month, Day values from field?", "Fast linear interpolation in Numpy / Scipy \"along a path\"", "formatting files with sed/ python/ etc", "Concatenate elements of a list", "setDefault for Nested dictionary in python", "Abaqus: script to select elements on a surface", "NULL safe inequality comparisons in SQL Alchemy?", "Finding common elements from two lists of lists", "Difference between two time intervals in series", "Pre-tick specific checkbox in z3c.form list", "Date removed from x axis on overlaid plots matplotlib", "Combine methods with identical structure but different parameters", "finding index of an item closest to the value in a list that's not entirely sorted", "Recognising objects in images using HAAR cascade and OpenCV", "Find nested sub-classes in a class in the order they're defined", "Numpy drawing from urn", "Import .py files with punctuation before extension", "tuple of datetime objects in Python", "How do I get the number of posts on each day with annotation in Django?", "pythonic solution for finding the other element in a list of length two", "Python incrementing a Dictionary value entry held within a list", "Join unique values into new data frame (python, pandas)", "Creating a table out of data in python", "Convert pandas datetime objects", "Create a summary Pandas DataFrame using concat/append via a for loop", "pyspark - multiple input files into one RDD and one output file", "Generating passwords in Python 3.1.1", "What is the best way to pass a method (with parameters) to another method in python", "Retrieve position of elements with setting some criteria in numpy", "how to forward fill non-null values in a pandas dataframe based on a set condition", "Is there an efficient way to fill date gaps in python?", "Converting and reshaping a list into a DataFrame in Pandas", "How to add two Sparse Vectors in Spark using Python", "How do you check when a file is done being copied in Python?", "How do I get rid of dotted line on x axis of Pandas/Matplotlib bar plot?", "Fast and pythonic way to find out if a string is a palindrome", "Changing an input from an integer to a string back to an integer", "Asynchronous data through Bloomberg's new data API (COM v3) with Python?", "Auto Incrementing natural keys with django / postgres", "Is it possible to post audio files with the python requests library", "Sorting list of dictionaries with primary key from list of keywords and alphabetical order as secondary key", "Is there an easy way to parse an HTML document and remove everything except a particular table?", "Calling C++ class functions from Ruby/Python", "Regular expression to find a word after multiple spaces", "How do you map a fully qualified class name to its class object in Python?", "Web scraping with Python", "single line if statement - Python", "Django, topic model with subtopics", "Python App Engine serving files with Google Cloud Storage", "NULL safe inequality comparisons in SQL Alchemy?", "Socket code from python to Objective C", "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation", "How to match integers in NLTK CFG?", "Interactive shell program wrapper in python", "How to get the location of a Zope installation from inside an instance?", "Is there a better way to convert from decimal to binary in python?", "How to convert datetime string without timezone to another datetime with timezone in python?", "convert xlsx files to xls inside folders and subfolders in Excel VBA or Python", "Python minidom - Parse XML file and write to CSV", "Python - Twisted, Proxy and modifying content", "Writing to multiple files with Scrapy", "How to create a object of variables, and return it, in Python?", "Comparing two lists items in python", "Python function that takes an input and spits out a month and how many days it has", "Using Py_BuildValue() to create a list of tuples in C", "How can I perform a least-squares fitting over multiple data sets fast?", "How to generate list combinations in Python", "Complete a task during certain time frames within a python script", "updating metadata for feature classes programatically using arcpy", "Python Version Specific Code", "Padding or truncating a Python list", "Convert a date string into YYYYMMDD", "Returning elements from a loop, one at a time", "Faster alternative to for loop in for loop", "Python's safest method to store and retrieve passwords from a database", "variable length of %s with the % operator in python", "regex - how to recognise a pattern until a second one is found", "Remove focus from Entry widget", "Python regex: How to match an empty string?", "XOR neural network backprop", "Pandas - group by consecutive ranges", "Compare rows then take rows out if neccessary", "Django Model Design - Many-To-Many Fields", "Changing the columns in DataFrame with respect to values in other columns", "numpy: slicing and vectorized looping with 1d and 2d arrays", "Remove duplicate, remove certain letters from line if found", "Flask-WTF: how pass structered object to form", "Embedding IronPython in a WinForms app and interrupting execution", "How to use scipy to optimize the position of n points?", "Executing different queries using mysql-python", "Using pandas to plot data", "Import object from module of same name using __import__", "Drawing a clamped uniform cubic B-spline using Cairo", "How can I execute shell command with a | pipe in it", "Averaging out sections of a multiple row array in Python", "How to avoid rebuilding existing wheels when using pip?", "how to groupby pandas dataframe on some condition", "Intersection between multiple files", "Storing a string and a set in a dictionary", "Python: How can I print out an object as a regular dictionary without reference?", "Store all stdout to file while still displaying it on screen", "How do I plot a histogram using Python so that x-values are frequencies of a spectra?", "Set a DTD using minidom in python", "Regular expression to find a word after multiple spaces", "How can I find all subclasses of a given class in Python?", "String slicing with delimiter changing in length", "How to Parse an orderedDict?", "Detrend Flux Time Series with Non-Linear Trend", "Extracting data from file with differing amounts of columns", "Django Admin Panel. Display and Edit Parent Fields in Child's Object (ModelAdmin.inlines reverse)", "Python program: foreign language word-frequency dictionary", "I need to generate x random numbers in an interval from 1 to x but each number have to occur only once", "For Kasiski Test,How to implement 26x26 table in Python", "Convert a 3D array to 2D array based on dictionary", "How do I create a Django form that displays a checkbox label to the right of the checkbox?", "How do I get the modified date/time of a file in Python?", "How to randomly pick numbers from ranked groups in python, to create a list of specific length", "Compare unequal lists", "XOR neural network backprop", "Pandas - group by consecutive ranges", "What is a Pythonic way to count dictionary values in list of dictionaries", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "Sqlalchemy \"double layer\" query", "Using regex to find a string starting with /team/ and ending with /Euro_2012", "pandas pivot_table percentile / quantile", "Decimal formatting based on number of digits in integer and decimal parts", "Efficiently detect sign-changes in python", "Splitting Strings in Python with Separator variable", "Connect to MSSQL Server 2008 on linux", "Conditional import in a module", "Python: Binning one coordinate and averaging another based on these bins", "How to use argparse during runtime to conditionally get further input?", "Python 3.x.x one variable spread across multiple .py files", "Iterating over a list while incrementing another variable at the same time", "django one session per user", "Extract domain from body of email", "How to print JSON with keys in numeric order (i.e. as if the string keys were integers)", "Better logging system for entire package", "Make a variable from what's in a text file", "Python-Flask: Pass data to machine learning python script and get results back", "How can I keep the indentation between lines?", "Extract data / parse from HTML in PHP / Python", "Filling gaps for cumulative sum with Pandas", "Python Using (%s) in a string that slo contains a (%)?", "Plotting Histogram: How can I do it from scratch using data stored in a database?", "Split string elements of a list with multiple separators/conditions. Any good Python library?", "Simulating a key press event in Python 2.7", "change multiple lines in file python using regex", "How to plot real-time graph, with both axis dependent on time?", "How to create a timer on python", "Boost.Python: Ownership of pointer variables", "Turning binary string into an image with PIL", "How to XOR literal with a string", "Recursive List containing Lists", "BeautifulSoup my for loop is printing all the data from the td tag. I would like to exclude the last section of the td tag", "How to loop through object return by SQLALchemy and process each row and display it to HTML", "Computing 16-bit checksum of ICMPv6 header", "How to find the index value of a variable in SPSS Python", "Passing binary data from Python to C API extension", "how to show each element of array separately", "how to decrement and increment loop range 'i' variable in the execution of loop in python", "setup relationship one-to-one in Flask + SQLAlchemy", "Python BeautifulSoup Mix Matching items in Table", "Matrix triple product with theano", "Using pandas to plot data", "What is the idiomatic way of invoking a list of functions in Python?", "Use BeautifulSoup to extract text before the first child tag", "how to know the type of sql query result before it is executed in sqlalchemy", "python tkinter calender, placing the numbers", "Multiple Database Config in Django 1.2", "removing first four and last four characters of strings in list, OR removing specific character patterns", "Loops to minimize function of arrays in python", "pandas count true values in multi-index frame", "Connect to MSSQL Server 2008 on linux", "Evaluate integral from sympy as lambda function", "Calculate a point along a line segment one unit from a end of the seg", "How to only read lines in a text file after a certain string using python?", "Ordering a nested dictionary by the frequency of the nested value", "Breaking up substrings in Python based on characters", "Drop Duplicate in market data", "Escape string to be valid python expression", "container where values expire in python", "Pandas Datframe1 search for match in range of Dataframe2", "How to do a rolling aggregation of data week wise in python?", "Log-sum-exp trick on a sparse matrix in scipy", "How to check which part of app is consuming CPU?", "Pyramid authorization for stored items", "Append to arrays in loop", "Python & Numpy - create dynamic, arbitrary subsets of ndarray", "Using Py_BuildValue() to create a list of tuples in C", "Making a tree shape.", "Scrapy xpath get text of an element that starts with <", "Customize sphinxdoc theme", "Python get get average of neighbours in matrix with na value", "Put the result of simple tag into a variable", "Different databases with the same models on Django", "setting a condition for a mixed list", "Updating a table from another table with multiple columns in sqlalchemy", "How do I plot a histogram using Python so that x-values are frequencies of a spectra?", "Django app deployment on nGINX", "How to make a calculator with strings and numbers as mixed input using parser python ply", "How to handle multiple user type in Django", "Python and appending items to text and excel file", "Converting C style for loop to python", "How can I determine when a user is in the process of entering something as an input in Python?", "How do I make pip available from command line mac?", "Django Multiple Caches - How to choose which cache the session goes in?", "Python: separate list of values into x number of sections, and give each value in x a variable", "Covert a list to string", "Python, logging print statements while having them print to stdout", "python dictionary values sorting", "create sublists within sublists in python", "How to define a chi2 value function for arbitrary function?", "Loops to minimize function of arrays in python", "Get length of subset pandas DataFrame", "Fast way to find index of array in array of arrays", "How to avoid getting imaginary/complex number python", "Make one list from two list applying constraint", "Can I override a C++ virtual function within Python with Cython?", "How to convert string timezones in form (Country/city) into datetime.tzinfo", "python - replace string entry with a dictionary entry", "More efficient way to make unicode escape codes", "How to call python script from CasperJS", "Python - split list of lists by value", "Convert empty dictionary to empty string", "Inheriting context variables inside custom template tags", "Save text cursor position in the currently focused application/control, then restore it and paste text", "Solve Lotka-Volterra model using SciPy", "First non-null value per row from a list of Pandas columns", "Python: compare an array element-wise with a float", "How to create a new list or new line after a certain number of iterations", "Running blocks of code inside vim", "Using variable as keyword passed to **kwargs in Python", "Loop through multiple different sized python dictionaries", "Python: Create Dictionary From List with [0] = Key and [1:]= Values", "Regex for location matching - Python", "Django: how to change label using formset extra?", "summing nested dictionary entries", "Replacing two elements of a list in place with a function [python 3]", "tuple of datetime objects in Python", "Get header row in pandas dataframe", "exit from ipython", "Extract text from webpage using either Python or Applescript", "matching between two columns and taking value from another in pandas", "Python: Extracting specific data with html parser", "Modifying a recursive function that counts no. of paths, to get sequence of all paths", "Sorting a list based on associated scores", "how to remove all non english characters and words using NLTK >", "How to pass additional parameters (besides of arguments) to a function in Python", "What is the best way to compute the trace of a matrix product in numpy?", "Using multiple (similar) generator expressions", "evaluating values of a dictionary", "Scipy rotate and zoom an image without changing its dimensions", "alternate for multiple constructors", "Combine dict with same keys into one dict with list", "How to force sympy to extract specific subexpressions?", "Plone - Override Zope Schema fields", "Create list of tuples (in a more elegant way)", "Most efficient way to delete needless newlines in Python", "Deleting consonants from a string in Python", "Making an object's attributes iterable", "Convert a 3D array to 2D array based on dictionary", "How to check if key is primary psycopg2", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "How to make a continuous alphabetic list python (from a-z then from aa, ab, ac etc)", "Programming contest like input validator", "read snippet of file with regular expressions from text file in python", "Finding specific links with Beautiful Soup", "Python-Flask: Pass data to machine learning python script and get results back", "Network capturing with Selenium/PhantomJS", "Django dynamic model fields", "Python regular expression: get result without the search string used", "Extract a value out of n", "Python: Read Content of Hidden HTML Table", "Django Celery get task count", "How to decode() with a subset of 'ascii'?", "How can I change the value of a node in a python dictionary by following a list of keys?", "Sun Grid Engine, force one job per node", "Passing argument to python which is half \"<direct string>\" and half value of a variable", "Elegant Python function to convert CamelCase to snake_case?", "Retrieving the actual 3D coordinates of a point on a triangle that has been flattened to 2 dimensions", "Sending non-string argument in a POST request to a Tornado server", "String formatting on SQL insert using dict", "how to print a dict which has japanese word using python ", "Creating a table out of data in python", "Proper way to organize testcases that involve a data file for each testcase?", "matching between two columns and taking value from another in pandas", "Convert a 3D array to 2D array based on dictionary", "Timeout function in Python", "Using DataFrame to get matrix of identifiers", "Making id case-insensitive but case-preserving in endpoints-proto-datastore", "Simple OOP: Python, saving object names via __init__ v2", "Real Hierarchical Builds with SCons?", "(Python) Breaking an output text file into tokens", "any() function in Python with a callback", "how to interpolate points in a specific interval on a plot formed by loading a txt file in to scipy program?", "Represent a class as a dict or list", "Pandas number of business days between a DatetimeIndex and a Timestamp", "Calculate number of jumps in Dijkstra's algorithm?", "Searching and counting dictionary key value pairs", "How to convert a python string", "Deleting consonants from a string in Python", "How to isolate group nodes in maya with python", "Remove duplicates in python list but remember the index", "Python Matplotlib: plotting feet and inches", "How to iterate through a module's functions", "Python. How to efficiently remove custom object from array", "Transform comma separated string into a list but ignore comma in quotes", "how to remove all non english characters and words using NLTK >", "Python - Comparing two lists of sets", "Django, m2m with same model", "flask/jinja: creating a leaderboard out of an unordered dict object", "BeautifulSoup scraping information from multiple divs using loops into JSON", "Changing background of a Button to a different shape and Styles like shadow effect etc in kivy python", "Regex? Match part of or whole word", "How to get a list of Xth elements from a list of tuples?", "Django: how to change label using formset extra?", "Gurobi, How to change a continuous variable to a binary variable", "Copy 2D array to a 3D one - Python / NumPy", "map array of numbers to rank efficiently in Python", "Simple loop for all elements of an etree object?", "How can I perform a least-squares fitting over multiple data sets fast?", "How to exit a supervisor process with fabric file?", "Tkinter nested mainloop", "A list as a key for PySpark's reduceByKey", "Print from txt file", "sqlalchemy - elegant way to deal with several optional filters?", "Nested options with argparse", "Finding the heaviest path in a binary tree efficiently - python", "python click usage of standalone_mode", "Split a string by three delimiters, and adding them to different lists", "Dynamic module loading in python", "how to extend ambiguous dna sequence", "Is there an efficient way to fill date gaps in python?", "How do I check if a network is contained in another network in Python?", "Read a dense matrix from a file directly into a sparse numpy array?", "pandas: detect the first/last record number from a time stamp of weekday only", "List of distinct XML element names using BeautifulSoup", "Python json-rpc help, how to extract data", "Ignoring unrecognized options when parsing argv?", "Python - filling a list of tuples with zeros in places of missing indexes", "Is it possible to download apk from google play programmatically to PC?", "How can display the lines from linux log file in browser", "Generate numbers with 3 digits", "Summarizing inside a Django template", "Deleting consonants from a string in Python", "Extract text from webpage using either Python or Applescript", "how to get cookie in template webpy", "Python Create Combinations from Multiple Data Frames", "Implementing fancy indexing in a class", "Python regular expression to remove space and capitalize letters where the space was?", "django-mptt get_descendants for a list of nodes", "Iterate through a list of numpy arrays", "Return random value from list tuple", "Try/Except Every Method in Class?", "Largest weakly connected component in networkX", "Replace xml tag contents using python", "Using MongoEngine Document class methods for custom validation and pre-save hooks", "Python: Find in list", "call function through variable or without parentheses in python", "How do i randomly select more than one item from a list in linux scripting?", "Numerical value of a name", "Python: Loop through all nested key-value pairs created by xmltodict", "Import a exported dict into python", "How can I use pyparsing to data from VC++ autoexp.dat?", "repeat arange with numpy", "Webpy: how to set http status code to 300", "Remove unnecessary whitespace from Jinja rendered template", "How to iterate through a module's functions", "how do I concatenate 3 lists using a list comprehension?", "Remembering Scroll value of a QTreeWidget in PyQt", "How do I take an integer from a list intending to use it?", "finding the max of a column in an array", "How to find first byte of a serial stream with python?", "How do I sort a complex dictionary by a key, which resides deep the dictionary?", "Loading multiple images from a text file", "Iterating over related objects in Django: loop over query set or use one-liner select_related (or prefetch_related)", "Running program/function in background in Python", "Python/ Pandas CSV Parsing", "Pythons 'with'-statement: correctly nest/derive classes with __enter__/__exit__", "Django how to update more than a row field at once", "Pivotting via Python and Pandas", "Most efficient way to loop through multiple csv files and calculate NYSE tick", "Extracting parts of text between specific delimiters from a large text file with custom delimiters and writing it to another file using Python", "Switching Printer Trays", "capturing the usernames after List: tag", "Pandas -- how to iterate through a list of dates which filter a DataFrame", "sound way to feed commands to twisted ssh after reactor.run()", "How to match integers in NLTK CFG?", "Python: Decode base64 multiple strings in a file", "Python prettytable Sort by Multiple Columns", "Python pandas to get specified rows from a CSV file", "Execute coroutine from `call_soon` callback function", "Counting elements matching a pattern in a tuple of tuples", "Replace given line in files in Python", "How to find the list in a list of lists whose sum of elements is the greatest?", "How to get the 'cardinal' day of the year in Pandas?", "Where is the configuration information of installed packages?", "Get item with value from tuple in python", "How to find cluster sizes in 2D numpy array?", "Extract text from webpage using either Python or Applescript", "list extend() to index, inserting list elements not only to the end", "Query endpoint user by email", "Assistance on automated image/text Document", "Django User Model one-to-one with other model and Forms", "Calling C++ class functions from Ruby/Python", "Extract from a match to next match if patten found in between", "Python Pandas: Eliminate a row from a dataframe if a value in a any preceding row in a groupby meets a certain criteria", "Speeding up linear interpolation of many pixel locations in NumPy", "How to restart a python script after it finishes", "How do I test if a string exists in a Genshi stream?", "numpy: most efficient frequency counts for unique values in an array", "python datapanda: getting values from rows into list", "Joining fields values", "Python multiprocessing and shared numpy array", "Truncate the length of a Python dictionary", "Write average weather data from a year given by user to a text file", "Query current directory in Python (the one the script is running from)", "Creating a 2d Grid in Python", "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?", "python, how to run commands on remote hosts and show output in GUI in real time?", "Specifying types and patterns using argparse choices", "remove newline and whitespace parse XML with python Xpath", "Filtering for multiple strings on f.read", "python matplotlib dash-dot-dot - how to?", "Timeout function in Python", "How do I get Python2.x `map` functionality in Python3.x?", "Data structure for UDP Server parsing JSON objects in python", "Python3 Make a list that increments for a certain amount, decrements for a certain amount", "Pair combinations of elements in dictionary without repetition", "Creating a Distance Matrix?", "Merge some part of the list together using python", "Get the indicies of a dataframe to use on a list", "Insertions algorithm in sequence python", "Matplotlib artists to stay the same size when zoomed in?", "Finding median in Spark Streaming", "lxml etree find closest element before", "Get system metrics using PowerShell", "How to use scipy to optimize the position of n points?", "Uploading Django projects set up within virtual environment on Github", "How to store callback methods?", "pandas dataframe: return column that is a compression of other columns", "matching a multiline make-line variable assignment with a python regexp", "Match C++ Strings and String Literals using regex in Python", "Django Templates: Is there a way to query a specific object based on its property (instead of iterating over all)?", "pandas multiindex assignment from another dataframe", "Search multiple strings in multiple files", "Slicing based on dates Pandas Dataframe", "How to get the type of change in P4Python", "How to index a user input list in Python 2.x?", "Pandas -- how to iterate through a list of dates which filter a DataFrame", "Using Random Module to Administer DNA Mutations", "Growing matrices columnwise in NumPy", "Plone - Override Zope Schema fields", "Generic way to get primary key from declaratively defined instance in SQLAlchemy", "PLY YACC pythonic syntax for accumulating list of comma-separated values", "Calculate weighted average using a pandas/dataframe", "How do I run python file without path?", "setting unique abbreviation for every column in python", "how to sort a list of tuples with list[i][1] as key from biggest to smallest", "Subsetting 2D array based on condition in numpy python", "How can I treat a section of a file as though it's a file itself?", "Opposite of set.intersection in python?", "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list", "Average of key values in a list of dictionaries", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "Create list of tuples (in a more elegant way)", "Matching y axis points together", "Python extract info from a local html file", "Converting coordinate tuple information to numpy arrays", "How can i extract metdata from django models", "Most efficient way to delete needless newlines in Python", "Python - compare columns in a text file, loop and pop lists", "How to use scipy.integrate.ode.set_f_params() to make time dependant parameter changes?", "Is there a way to sandbox test execution with pytest, especially filesystem access?", "How to find a index of an item in a string?", "stdout from python to stdin java", "How to find defined sequence in the list?", "Getting the row index for a 2D numPy array when multiple column values are known", "How to create a Dictionary in Python with 2 string keys to access an integer?", "Conditionally and interatively calculate column based on value of three columns", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Named dictionary in python", "Python Check a 2d list for empty strings?", "Python: Determine whether each step in path across n arrays falls below threshold value", "Python list and time", "How to find connected components in a matrix using Julia", "Speeding up linear interpolation of many pixel locations in NumPy", "Generate random numbers without using the last n values in Python", "Getting crawled information in dictionary format", "making regex capture group optional in url for a tornado app", "Flask : How to update and render a variable periodically?", "iterate the range in for loop to satisfy the condition", "Convert a 3D array to 2D array based on dictionary", "Search and sort through dictionary in Python", "parsing single text items from xml with Python", "Gtk 3 python entry color", "Sympy library solve to an unknown variable", "Abort a running task in Celery within django", "Interleaving two numpy index arrays, one item from each array", "Pivot Pandas Dataframe with a Mix of Numeric and Text Fields", "python - numpy: read csv into numpy with proper value type", "Inserting a folder containing specific routes to a bottle application in Python", "Return All Matching Lines in a Logfile", "Save app data in Weather App", "ScraperWiki/Python: filtering out records when property is false", "Generate random numbers without using the last n values in Python", "Reorder Columns by String Variable", "Resizing a 3D image (and resampling)", "How to insert arrays into a database?", "Joining Subsequent List Elements - Python", "XML <arg> value Replacement in Python", "Check Type: How to check if something is a RDD or a dataframe?", "Is it possible to use 'else' in a python list comprehension?", "Python minidom - Parse XML file and write to CSV", "Using Twitter Bootstrap radio buttons with Flask", "Jenkins and Python", "Pandas: transforming the DataFrameGroupBy object to desired format", "python: access multiple values in the value portion of a key:value pair", "Scipy: Centroid of convex hull", "Working with multiple columns from a data file", "Transposing dataframe and sorting", "How many times is a particular row present?", "Returning the value of an index in a python list based on other values", "How can I use a list comprehension to extend a list in python?", "stdout from python to stdin java", "How to do operations with two vectors of different format in python", "Can you make a function that would create several instances of a class for you in Python?", "Comparing List and get indices in python", "greedy regex split python every nth line", "Get seconds since midnight in python", "Sampling keys due to their values", "Sampling keys due to their values", "Extract Numbers and Size Information (KB, MB, etc) from a String in Python", "Change object's variable from different file", "Finding groups of increasing numbers in a list", "Pyyaml - Using different styles for keys and integers and strings", "Adding a simple value to a string", "Convert a 3D array to 2D array based on dictionary", "Finding a parent key from a dict given an intermediate key using python", "Add django model manager code-completion to Komodo", "Pandas, to_csv () to a specific format", "Sort Python Dictionary by first four characters in Key", "How do I split items in a list (with delimiter) within a list?", "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]", "Modifying a cooldown decorator to work for methods instead of functions", "Naming each item in a list which is a value of a dictionary", "How to unpack a list?", "Able to use any case in input to generate the same dict values in output", "PyQt change element in .ui file", "Auto increament the invoice number in django backend for new invoice", "Match series of (non-nested) balanced parentheses at end of string", "Multiple drag and drop in PyQt4", "Stiff ODE-solver", "Restart a script after 6 minutes", "Matplotlib in Pyside with Qt designer (PySide)", "Applying a function by bins on a vector in Numpy", "talking between python tcp server and a c++ client", "Using fancy indexing to get one value from each column of a numpy matrix", "Transform string in a list with elements separated on Python", "Django - how to write users and profiles handling in best way?", "Attaching a PDF to an email in Appengine (Python)", "List of distinct XML element names using BeautifulSoup", "Parsing members of a variable length python string", "GNOME configuration database type-inference", "How can I perform a least-squares fitting over multiple data sets fast?", "How to find number of matches in the array or dictionary?", "What's an easy and fast way to put returned XML data into a dict?", "How should I subtract two dataframes and in Pandas and diplay the required output?", "How to generalize a multiplication table for (n * m)", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Splitting a list of sequences into two lists efficiently", "Comparing two dictionaries in list in python", "python regular expressions in find and replace", "two dimensional array for encryption in python", "Removing an element from a list and a corresponding value", "Average on overlapping windows in Python", "How to set an attribute to a vector in rpy2", "Django Python Shell", "Is it possible to assign two different returned values from a python function to two separate variables?", "Writing variables with .write() Python 3", "Update dictionary in xml from csv file in python", "Acquiring the Minimum array out of Multiple Arrays by order in Python", "Sun Grid Engine, force one job per node", "how to Perform search operation in Django?", "Reorder a dictionary to fit a data frame", "How to sort python dictionary based on similar values and keys?", "How can I cluster a list of lists in Python based on string indices? Need insight", "Mulitprocess Pools with different functions", "How to get a vector from a list in list in python?", "Python: replace multiple values of a Matrix", "django filter to calculate hours within range", "insert into sqlite table with unique column", "Python - regex to match url with mongo object id", "An equivalent to string.ascii_letters for unicode strings in python 2.x?", "How to make POS n-grams more effective?", "pandas: Rolling correlation with fixed patch for pattern-matching", "Retrieve position of elements with setting some criteria in numpy", "What is the proper way to perform a contextual search against NoSQL key-value pairs?", "Delete newline / return carriage in file output", "How to create a random multidimensional array from existing variables", "Solve equation with a set of points", "Merging repeated items in a list into a python dictionary", "Selection of rows by condition", "Python - open pdf file to specific page/section", "Take dot product of first and middle entry, second and middle+1 entries until middle-1 and last entry python/numpy", "How to return every 5 items from a list in python?", "Writing to a file in a for loop", "Python: Keep track of current column in text file", "Possibility of writing dictionary items in columns", "Stop a command line command in script", "3x1 Matrix Multiplication with lists[UPDATED]", "RegEx in Python matching multiple substrings using one group", "Get the big-endian byte sequence of integer in Python", "Summarize a list of dictionaries based on common key values", "How to create a dictionary with columns given as keys and values", "Python Pandas removing substring using another column", "Element-wise constraints in scipy.optimize.minimize", "Execute coroutine from `call_soon` callback function", "String formatting without index in python2.6", "How can I compare dates using Python?", "Creating random binary files", "How can I sort a 2D list?", "Get permutation with specified degree by index number", "How to select QTableView index or row from inside of Model", "Convert Country Names to Country Code using Python DictReader/DictWriter", "How to access members of an rdf list with rdflib (or plain sparql)", "How can I set a code for users when they enter a valud URL or not with PYTHON/Flask?", "What is the pythonic way to sort a list with multiple attributes, such that the first is sorted reversely but the second is not?", "How to align and compare two elements (sequence) in a list using python", "removing \"()\" using python", "Python: how to turn string into a list?", "Printing a list into grid", "A PYTHONSTARTUP file for a specific directory", "QTableView item selection based on a QStandardItem data attribute", "splitting string in Python (2.7)", "Converting separate functions into class-based", "Find difference between two multi dimensional lists", "How to use swig with compiled dll and header file only", "NumPy map calculation depending on the indices", "Return the largest value of a given element of tuple keys in a dictionary", "regex - how to recognise a pattern until a second one is found", "Other ways to replace single character", "More elegant/Pythonic way of printing elements of tuple?", "Python: Apply function to values in nested dictionary", "Python. How to make a class so that I can create a set of related objects(like\"Rock, Paper, Scissors\") with it?", "Double helix generating algorithm", "From list of dictionaries to np array of arrays and vice-versa", "Insert into a large table in psycopg using a dictionary", "Getting World Coordinates with mouse in pygame", "Python Decimals format", "How to loop through subfolders showing jpg in Tkinter?", "How do you clone a class in Python?", "to delete records from a file in python", "Python - Access contents of list after applying Counter from collections module", "Parse list to other list", "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array", "remove dictionary from list in pandas colum", "Combine multiple heatmaps in matplotlib", "PYMongo : Parsing|Serializing query output of a collection", "Convert dataFrame to list", "Python Variable in an HTML email in Python", "Sort Python list by dict key,value", "Python-like list comprehension in Java", "Python incrementing a Dictionary value entry held within a list", "Render lists of posts grouped by date", "Separating file extensions using python os.path module", "Most efficient way to index words in a document?", "Finding combinations that meet a threshold relation", "How do you read in a text (.txt) file as a .py file in Python 2.7?", "Pass a counter to every python logging method", "XOR neural network backprop", "How do I get python to search a csv file for items in a dictionary then print out the entire excel row...Thanks", "Selenium (Python): How to insert value on a hidden input?", "Efficiently detect sign-changes in python", "Django unique random as a default value", "Run parts of a ipython notebook in a loop / with different input parameter", "python breaking numbers in to 10s 5s 1s and .1s", "How to add in a dictionary the values that have similar keys?", "Python: Find in list", "Call a C++ project main() in Python in Visual Studio?", "MySQL select all components of a product", "Finding combinations that meet a threshold relation", "jinja2 print to console or logging", "How to convert an xml string to a dictionary in Python?", "Python-Getting contents between current and next occurrence of pattern in a string", "Assign values to the groups of a groupby in pandas", "Convert multichar %xx escapes to unicode", "Spark DataFrame TimestampType - how to get Year, Month, Day values from field?", "Order a list of dictionaries in python", "Fast linear interpolation in Numpy / Scipy \"along a path\"", "Selenium scraping with multiple urls", "How to call python script from CasperJS", "How to convert datetime string without timezone to another datetime with timezone in python?", "setDefault for Nested dictionary in python", "background process in python with -e option on terminal", "NULL safe inequality comparisons in SQL Alchemy?", "Finding common elements from two lists of lists", "Scipy sparse matrices element wise multiplication", "How to Define Google Endpoints API File Download Message Endpoint", "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?", "Find nested sub-classes in a class in the order they're defined", "Sorting data from a csv alphabetically, highest to lowest and average", "How to force sympy to extract specific subexpressions?", "Search for a variable in a file and get its value with python", "Compare 2 excel files using Python", "Writing to multiple files with Scrapy", "pythonic solution for finding the other element in a list of length two", "python string to date ISO 8601", "Represent a class as a dict or list", "render cms page within another page", "regex to find a specific pattern in python", "Python how to get sum of numbers in a list that has strings in it as well", "Replace character in line inside a file", "Python: How to remove a list containing Nones from a list of lists?", "Fast way to find index of array in array of arrays", "Python Sorting Regular Expression", "Create list using regex inputs", "Is there an efficient way to fill date gaps in python?", "fabric cleanup operation with atexit", "How to add two Sparse Vectors in Spark using Python", "How do I change the built-in button labels on a gtk.Assistant?", "python - sorting a list of lists by a key that's substring of each element", "Changing an input from an integer to a string back to an integer", "variable length of %s with the % operator in python", "Update a Pyspark DF Column based on an Array in another column", "Elegant way of reducing list by averaging?", "How to Search data from a list of Key-Value pair that it is in list or not", "Sorting a List by frequency of occurrence in a list", "Sorting list of dictionaries with primary key from list of keywords and alphabetical order as secondary key", "How to convert pandas single column data frame to series or numpy vector", "Creating multiple csv files from data within a csv file", "How to invert a permutation array in numpy", "How to add a string to a specific line", "Key Value For Loop Template - Django Inquiry", "Custom dictionary lookup in Python", "Compare rows then take rows out if neccessary", "Exponential Decay on Python Pandas DataFrame", "Django Form with extra information", "Binning data based on one column in 2D array and estimate mean in each bin using cython", "Socket code from python to Objective C", "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation", "(python) How to create static text in curses", "Interactive shell program wrapper in python", "Permutation of values on numpy array/matrix", "referencing list object by data python", "Update dictionary in xml from csv file in python", "Find dictionary keys with duplicate values", "Using beautifulsoup to parse tag with some text", "How to create a object of variables, and return it, in Python?", "How to add parameters to flask-restful in python?", "Map function and input function parameters", "Set a DTD using minidom in python", "Add django model manager code-completion to Komodo", "Django model form with selected rows", "In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?", "Store all stdout to file while still displaying it on screen", "MySQL select all components of a product", "SqlAlchemy Dynamic Where", "Print two report in Odoo8", "Modify all rows in table", "Bitwise operations to produce power of two in Python", "Returning user to referrer in flask in smartest pythonic way", "python - Nested list in dict to csv files", "Convert a date string into YYYYMMDD", "python beginner - how to read contents of several files into unique lists?", "Using groupby to operate only on rows that have the same value for one of the columns pandas python", "How to generate an html directory list using Python", "Retreiving data from a nested deep.copy dictionary made by list comprehension in Python", "Pandas: Delete rows of a DataFrame if total count of a particular column occurs only 1 time", "python - increase array size and initialize new elements to zero", "XOR neural network backprop", "Pandas - group by consecutive ranges", "dict of internal keys", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "Changing the columns in DataFrame with respect to values in other columns", "saving the number into the variable in every run of cycle python", "python pandas filter dataframe by another series, multiple columns", "Using Pandas to fill NaN entries based on values in a different column, using a dictionary as a guide", "Manipulating rows of csv file in python", "is there a way to change the return value of a function without changing the function's body?", "writing csv output python", "Iterating over a list while incrementing another variable at the same time", "Pandas: Change dataframe values based on dictionary and remove rows with no match", "Using pandas to plot data", "How to create a double dictionary in Python?", "Drawing a clamped uniform cubic B-spline using Cairo", "in python, how to manipulate namespace of an instance", "How do I get an ECDSA public key from just a Bitcoin signature? ... SEC1 4.1.6 key recovery for curves over (mod p)-fields", "Django reverse url to onetoonefield on success", "How to avoid rebuilding existing wheels when using pip?", "Convert a 3D array to 2D array based on dictionary", "Getting file path from command line arguments in python", "Combining lists and performing a check", "Make a number more probable to result from random", "Split string elements of a list with multiple separators/conditions. Any good Python library?", "Passing multple files with asterisk to python shell in Windows", "How do I print a sorted Dictionary in Python 3.4.3", "Run multiple subprocesses in foreach loop? One at the time?", "How to let js make a request from python and preserve the loaded site in place when answered by python", "Python - list of dicts into function that only accepts *dicts", "How to add/remove said a curve to/from a plot in Python with Matplotlib", "Regex Parse Email Python", "How to Parse an orderedDict?", "Pygame draw anti-aliased thick line", "How to make a calculator with strings and numbers as mixed input using parser python ply", "For Kasiski Test,How to implement 26x26 table in Python", "inserting a new entry into adjacency list", "Python: Read Content of Hidden HTML Table", "Compare unequal lists", "XOR neural network backprop", "What is a Pythonic way to count dictionary values in list of dictionaries", "Neat way of popping key, value PAIR from dictionary?", "Extracting a feature by feature name in scikit dict vectorizer", "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?", "Splitting Strings in Python with Separator variable", "Python: Binning one coordinate and averaging another based on these bins", "How to use argparse during runtime to conditionally get further input?", "Python 3.x.x one variable spread across multiple .py files", "finding the max of a column in an array", "Extracting parts of text between specific delimiters from a large text file with custom delimiters and writing it to another file using Python", "Pythons 'with'-statement: correctly nest/derive classes with __enter__/__exit__", "How do I print a sorted Dictionary in Python 3.4.3", "Python-Flask: Pass data to machine learning python script and get results back", "How to update entire column with values in list using Sqlite3", "Filling gaps for cumulative sum with Pandas", "Python Using (%s) in a string that slo contains a (%)?", "Plotting Histogram: How can I do it from scratch using data stored in a database?", "Use argparse to call different functions", "Insertions algorithm in sequence python", "django serialize foreign key objects", "How to create a timer on python", "Boost.Python: Ownership of pointer variables", "Turning binary string into an image with PIL", "How to get QTreeWidgetItem if its ItemWidget is known", "Recursive List containing Lists", "Conditionally and interatively calculate column based on value of three columns", "Combine two lists which have the same item in dict", "BeautifulSoup my for loop is printing all the data from the td tag. I would like to exclude the last section of the td tag", "How to determine type of nested data structures in Python?", "Python: put all function arguments into **kwargs automatically", "Iterate over a \u2018window\u2019 of adjacent elements in Python", "Running infinite loops using threads in python", "Passing binary data from Python to C API extension", "Run same test on multiple datasets", "how to show each element of array separately", "setup relationship one-to-one in Flask + SQLAlchemy", "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?", "Sort generated numbers using another python generator", "how to do an embedded python module for remote sandbox execution?", "Regex Python findall. Making things nonredundant", "Python - Replacing value of a row in a CSV file", "Finding superstrings in a set of strings in python", "Import .py files with punctuation before extension", "Multiple Database Config in Django 1.2", "Loops to minimize function of arrays in python", "Using multiple programs simultaneously in Python", "pandas count true values in multi-index frame", "How to iterate through a list of lists in python?", "Check if all elements in nested iterables evaluate to False", "Python pandas idxmax for multiple indexes in a dataframe", "how to change a node value in python", "Ordering a nested dictionary by the frequency of the nested value", "2D Color coded scatter plot with user defined color range and static colormap", "Drop Duplicate in market data", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "In python, return value only when the function is used in an assignment", "How to check which part of app is consuming CPU?", "Call a C++ project main() in Python in Visual Studio?", "Union of many Counters", "Append to arrays in loop", "pydoc.render_doc() adds characters - how to avoid that?", "deleting element from python dictionary", "render cms page within another page", "Two corresponding y-axis", "Scrapy xpath get text of an element that starts with <", "How to make array of array of dictionaries in python", "Customize sphinxdoc theme", "Relating/adding data to a django object list", "Extract text from webpage using either Python or Applescript", "Grouping in Python", "Map function and input function parameters", "retrive minimum maximum values of a ctype", "Updating a table from another table with multiple columns in sqlalchemy", "How do I generate a sequence of integer numbers in a uniform distribution?", "Returning elements from a loop, one at a time", "Compare two files in python and save line differences in a new file", "Converting C style for loop to python", "Pandas: Change dataframe values based on dictionary and remove rows with no match", "Pygame - Getting a rectangle for a dynamically drawn object", "XOR neural network backprop", "Finding the heaviest path in a binary tree efficiently - python", "Flask : How to update and render a variable periodically?", "alternate for multiple constructors", "I need to generate x random numbers in an interval from 1 to x but each number have to occur only once", "How to define a chi2 value function for arbitrary function?", "Boxplotting Masked Arrays", "Get length of subset pandas DataFrame", "Opening a text file and then storing the contents into a nested dictionary in python 2.7", "How to avoid getting imaginary/complex number python", "How to iterate through a list of lists in python?", "Can I override a C++ virtual function within Python with Cython?", "Convert a 3D array to 2D array based on dictionary", "More efficient way to make unicode escape codes", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "Generate random string from regex character set", "Save text cursor position in the currently focused application/control, then restore it and paste text", "Python inheritance - going from base class to derived one", "First non-null value per row from a list of Pandas columns", "Python code for counting number of zero crossings in an array", "Python Regex: Optional White Space Around Matching Group", "How to thread multiple subprocess instances in Python 2.7?", "Using variable as keyword passed to **kwargs in Python", "Parse Specific Text File to CSV Format with Headers", "Python: Create Dictionary From List with [0] = Key and [1:]= Values", "Numpy interconversion between multidimensional and linear indexing", "how to get unique values set from a repeating values list", "summing nested dictionary entries", "NLTK convert tokenized sentence to synset format", "how to access nargs of optparse-add_action?", "How to process input in parallel with python, but without processes?", "Joinable PriorityQueue in python's asyncio", "exit from ipython", "Python thread-safe access without blocking or uncontrolled queue growth?", "How to use an array to keep track of different numbers?", "matching between two columns and taking value from another in pandas", "Python word length function example needed", "packaging with numpy and test suite", "Storing a directed, weighted, complete graph in the GAE datastore", "How to save big (not huge) dictonaries in Python?", "how to remove all non english characters and words using NLTK >", "Generate permutations of a list of lists with variable lengths", "How to pass additional parameters (besides of arguments) to a function in Python", "How to string format OptionParser() help message?", "Spearman rank correlation in Python with ties", "Datastore Design Inquiry", "Combine dict with same keys into one dict with list", "splitting one csv into multiple files in python", "Finding index values in a pandas data frame where columns are the same", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "Matplotlib half black and half white circle", "Convert date to second from a reference - Python", "Deleting consonants from a string in Python", "Parse Specific Text File to CSV Format with Headers", "Importing Denormalized data into django models via modelforms", "combine list of dictionaries with same key", "Execute coroutine from `call_soon` callback function", "How to log in to a website with urllib?", "Deleting specific text files", "Sum corresponding elements of multiple python dictionaries", "Retrieving the actual 3D coordinates of a point on a triangle that has been flattened to 2 dimensions", "Remove unwanted commas from CSV using Python", "how to get unique values set from a repeating values list", "What is the fastest way to parse large XML docs in Python?", "Dictionary As Table In Django Template", "How to use malloc and free with python ctypes?", "Dynamic field calculations in Django", "Returning a list in each iteration using list comprehension", "How can I change the value of a node in a python dictionary by following a list of keys?", "Multiclass linear SVM in python that return probability", "How can I perform a least-squares fitting over multiple data sets fast?", "Elegant Python function to convert CamelCase to snake_case?", "Summing similar elements within a tuple-of-tuples", "How to get the caller class name inside a function of another class in python?", "Getting the number of digits (Python)", "Suppressing the output in libsvm (python)", "Retrieve position of elements with setting some criteria in numpy", "how to format numbers with commas in python", "Split field to array when accessed", "New Python Gmail API - Only Retrieve Messages from Yesterday", "Print two report in Odoo8", "Using DataFrame to get matrix of identifiers", "Making id case-insensitive but case-preserving in endpoints-proto-datastore", "Comparing two lists items in python", "Using mimetools.Message in urllib2.urlopen", "Name of Current App in Google App Engine (Python)", "Python: Suppress exponential format (i.e. 9e-10) in float to string conversion?", "Pandas number of business days between a DatetimeIndex and a Timestamp", "Protection against downloading too big files", "Searching and counting dictionary key value pairs", "parse blocks of text from text file using Python", "how to sort a list of string by every element's numeric value", "manipulate column fields for clean representation", "How to isolate group nodes in maya with python", "Remove duplicates in python list but remember the index", "\"Canonical\" offset from UTC using pytz?", "py2exe: excluding parts of a package that wants to import all its parts", "Transform comma separated string into a list but ignore comma in quotes", "Parse Specific Text File to CSV Format with Headers", "Django, m2m with same model", "reading Unicode string as json object in python", "BeautifulSoup scraping information from multiple divs using loops into JSON", "Largest weakly connected component in networkX", "Regex? Match part of or whole word", "Django ImageField upload_to path", "How to parse the header files of the pcap file?", "Updating a value in a dictionary inside a dictionary", "Gurobi, How to change a continuous variable to a binary variable", "Copy 2D array to a 3D one - Python / NumPy", "Numerical value of a name", "Simple loop for all elements of an etree object?", "Comparing Python dictionaries and nested dictionaries", "Best way to make a counter based on time", "Dictionary items to variables", "how do I concatenate 3 lists using a list comprehension?", "How to find the local minima of a smooth multidimensional array in NumPy efficiently?", "How to speed-up python nested loop?", "How to make QtGui window process events whenever it is brought forward on the screen?", "sqlalchemy - elegant way to deal with several optional filters?", "how to pick random items from a list while avoiding picking the same item in a row", "Matplotlib - Move X-Axis label downwards, but not X-Axis Ticks", "Split a string by three delimiters, and adding them to different lists", "Convert property to django model field", "Fasted Python way to bulk csv convert outside of using pandas", "Analyze and edit links in html code with BeautifulSoup", "Making a python iterator go backwards?", "Able to use any case in input to generate the same dict values in output", "Read a dense matrix from a file directly into a sparse numpy array?", "Python json-rpc help, how to extract data", "capturing the usernames after List: tag", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "Using pywin32 DosDateTimeToTime to unpack DOS packed time", "Generate numbers with 3 digits", "Summarizing inside a Django template", "Is there a standard way to store XY data in python?", "Automatic conversion to boost shared_ptr in boost python", "progress bar properties python2.72 pywinauto", "how to get cookie in template webpy", "Plot arrays same extension Matlotlib", "Python extract info from a local html file", "Python regular expression to remove space and capitalize letters where the space was?", "Faster way to read Excel files to pandas dataframe", "Iterate through a list of numpy arrays", "separate list elements based on semicolon", "have multiple users as one model field in many to one format django models", "Try/Except Every Method in Class?", "Given an iterable, how to apply a function in every possible combination?", "How to count how many data points fall in a bin", "Call app template in a different app's template", "How do i randomly select more than one item from a list in linux scripting?", "python, zip:Discard extra elements", "What is the most pythonic way to pop a random element from a list?", "how to represent a number value as a string in python?", "Creating an iterable of dictionaries from an iterable of tuples", "Import a exported dict into python", "Check list of tuples where first element of tuple is specified by defined string", "How to pass javascript variable to macros in jinja2 template", "Truncate the length of a Python dictionary", "Generate two random strings with dash in between", "Get list of column names for columns that contain negative values", "Pandas: add dataframes to dataframe - match on index and column value", "How to scrape the video src url from video tag which is injected via javascript?", "How to find first byte of a serial stream with python?", "Loading multiple images from a text file", "dictionary of dictionaries(nested dicts)", "Running program/function in background in Python", "Advance a file object more than one line as a way of skipping blank lines and lines containing strings", "voronoi and lloyd relaxation using python/scipy", "Pivotting via Python and Pandas", "How do I add a method to a class from a third-party Python module without editing the original module", "Matplotlib Half color axis", "Most efficient way to loop through multiple csv files and calculate NYSE tick", "Merge some part of the list together using python", "two dimensional array for encryption in python", "how to join multiple sorted files in Python alphabetically?", "Trying to do left outer joins to two related tables", "How to match integers in NLTK CFG?", "Python - Replacing value of a row in a CSV file", "How to avoid defining a variable to hold a function result which might be needed only once", "Python prettytable Sort by Multiple Columns", "Sum of all numbers inside a string", "Execute coroutine from `call_soon` callback function", "Creating a table out of data in python", "Counting elements matching a pattern in a tuple of tuples", "How to get the location of a Zope installation from inside an instance?", "Parsing bits from a 128 byte block of hex in Python", "python list manipulation nesting vertically, making it look like a matrix", "Write nested lists column wise to CSV", "Python: Iterating through a set so we don't compare the same objects multiple times?", "list extend() to index, inserting list elements not only to the end", "Query endpoint user by email", "Assistance on automated image/text Document", "Django User Model one-to-one with other model and Forms", "splitting one csv into multiple files in python", "Can I group / aggregate elements in a list (or dict) comprehension?", "Extract from a match to next match if patten found in between", "Generate random string from regex character set", "any python min like function which gives a list as result", "YAML list -> Python generator?", "MySQL select all components of a product", "Python Django: join view on the admin interface", "Fill scipy / numpy matrix based on indices and values", "Trying to duplicate a list and modify one version of it in Python 2", "Get the count of the each date entry from onr of the raw from CSV file", "Pythonic way of looping over variable that is either an element or a list", "Python program: foreign language word-frequency dictionary", "Creating a 2d Grid in Python", "Reading text file and returning most popular name for that year", "Matplotlib half black and half white circle", "Turning binary string into an image with PIL", "parse blocks of text from text file using Python", "Django permissions mixin on CBV, how to apply on 'publish blog' method", "remove newline and whitespace parse XML with python Xpath", "Filtering for multiple strings on f.read", "python matplotlib dash-dot-dot - how to?", "Data structure for UDP Server parsing JSON objects in python", "Creating a Distance Matrix?", "How to find defined sequence in the list?", "Get the indicies of a dataframe to use on a list", "Insertions algorithm in sequence python", "Matplotlib artists to stay the same size when zoomed in?", "How to address a dictionary in a list of ordered dicts by unique key value?", "Django URL matching any 140 characters", "Get system metrics using PowerShell", "How to store callback methods?", "Iterate over Python list, preserving structure of embedded lists", "Match C++ Strings and String Literals using regex in Python", "pandas multiindex assignment from another dataframe", "Search multiple strings in multiple files", "use scikit-learn to classify into multiple categories", "Slicing based on dates Pandas Dataframe", "How to get the type of change in P4Python", "Comparing List of Arguments to it self?", "How to index a user input list in Python 2.x?", "Using selenium at hosted app?", "Using Random Module to Administer DNA Mutations", "How to increment a variable on a for loop in jinja template?", "Return All Matching Lines in a Logfile", "Encoding in Python - non-English characters into a URL", "Efficient ways to duplicate array/list in Python", "Custom sort python", "Reading netCDF and creating \"virtual / pseudo\" csv files", "Replacing two elements of a list in place with a function [python 3]", "How do I store multiple copies of the same field in Django?", "select a specific range from a numpy 2d array to plot values", "Comparing Python dictionaries and nested dictionaries", "Opposite of set.intersection in python?", "How can I create a list with the first column?", "Average of key values in a list of dictionaries", "Getting specific field from chosen Row in Pyspark DataFrame", "Append to several lists inside list", "How to detect Mac OS version using Python?", "Python extract info from a local html file", "Converting coordinate tuple information to numpy arrays", "How can i extract metdata from django models", "RQ - Empty & Delete Queues", "Generate two random strings with dash in between", "Store input based on computer and change stored input on command", "make python wait for stored procedure to finish executing", "Is there a way to sandbox test execution with pytest, especially filesystem access?", "modify range in every loop of the range", "Getting Every File in a Directory, Python", "How to create a Dictionary in Python with 2 string keys to access an integer?", "How to consistently ignore one byte from a string", "How to know the filetype through python", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Pygame- Sprite set position with mouseclick", "Python Check a 2d list for empty strings?", "How to scrape the video src url from video tag which is injected via javascript?", "How to increment a variable on a for loop in jinja template?", "Create a dovecot SHA1 digest using bash or python or some other linux command-line tool", "Getting crawled information in dictionary format", "Convert a 3D array to 2D array based on dictionary", "Flask : How to update and render a variable periodically?", "iterate the range in for loop to satisfy the condition", "Convert a 3D array to 2D array based on dictionary", "How to apply group by on data frame with neglecting NaN values in Pandas?", "huge text file (6Gb) search and replace", "parsing single text items from xml with Python", "Sympy library solve to an unknown variable", "Interleaving two numpy index arrays, one item from each array", "Pivot Pandas Dataframe with a Mix of Numeric and Text Fields", "How can I pack images? -Pygame -PyInstaller", "Accessing an additional profile from templates", "Python: Pass a generic dictionary as a command line arguments", "Return All Matching Lines in a Logfile", "How to iterate over a pandas dataframe and compare certain columns based on a third column?", "Python Matplotlib: Splitting one Large Graph into several Sub-Graphs (Subplot)", "Call the same method in all objects in Python?", "Reorder Columns by String Variable", "How to transform a pair of values into a sorted unique array?", "Remove following duplicates in a tuple", "Creating a table out of data in python", "Is it possible to use 'else' in a python list comprehension?", "Python - re - need help for regular expression", "Dictionary As Table In Django Template", "Pandas: transforming the DataFrameGroupBy object to desired format", "Using fancy indexing to get one value from each column of a numpy matrix", "How do you read in a text (.txt) file as a .py file in Python 2.7?", "How to use malloc and free with python ctypes?", "Transposing dataframe and sorting", "How do you @rpc _returns polymorphic types in spyne?", "How many times is a particular row present?", "How can I use a list comprehension to extend a list in python?", "Go through every possible combination of an array python", "Check Type: How to check if something is a RDD or a dataframe?", "How to do operations with two vectors of different format in python", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "greedy regex split python every nth line", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Get seconds since midnight in python", "How to reset an unordered index to an ordered one in python?", "Extract Numbers and Size Information (KB, MB, etc) from a String in Python", "Change object's variable from different file", "Changing prompt working directory via Python script", "Finding groups of increasing numbers in a list", "Python: Converting Unicode code point filenames to strings", "R's relevel() and factor variables in linear regression in pandas", "Pyyaml - Using different styles for keys and integers and strings", "Regular Expression (Python) to extract strings of text from inside of < and > - e.g. <stringone><string-two> etc", "Adding a simple value to a string", "Speeding up linear interpolation of many pixel locations in NumPy", "Convert a 3D array to 2D array based on dictionary", "Finding a parent key from a dict given an intermediate key using python", "Multiclass linear SVM in python that return probability", "Disable pagination in Django tastypie?", "Initialize list with same bool value", "Pandas Datframe1 search for match in range of Dataframe2", "Modifying a cooldown decorator to work for methods instead of functions", "Numpy: Efficient Way To Extract Subarray", "to delete records from a file in python", "How to manually create a select field from a ModelForm in Django?", "How to unpack a list?", "PyQt change element in .ui file", "Handling months in python datetimes", "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?", "Summing similar elements within a tuple-of-tuples", "Multiple drag and drop in PyQt4", "python- combining list and making them a dictionary", "Finding start and stops of consecutive values block in Python/Numpy/Pandas", "Matplotlib in Pyside with Qt designer (PySide)", "Applying a function by bins on a vector in Numpy", "Sort list with multiple criteria in python", "Removing certain letters from a string", "How to insert arrays into a database?", "Getting the number of digits (Python)", "Test subclass behaviour?", "Django - how to write users and profiles handling in best way?", "Attaching a PDF to an email in Appengine (Python)", "SQLite Python printing in rows?", "SQLAlchemy ON DUPLICATE KEY UPDATE", "numpy create 3D array from indexed list", "Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?", "Averaging out sections of a multiple row array in Python", "How to find number of matches in the array or dictionary?", "Python - diff-like order comparision of 2 lists with unequal sizes,", "Splitting a list of sequences into two lists efficiently", "Adding 'n' values in list using for-loop and step-loop for that 'n' values in python", "appending a single string to each element of a list in python", "Joining Subsequent List Elements - Python", "How can I properly join these strings together (by column then row)?", "How to select QTableView index or row from inside of Model", "Python: output for recursively printing out files and folders", "Inversing a twodimensional array in python", "Acquiring the Minimum array out of Multiple Arrays by order in Python", "Modifying a subset of rows in a pandas dataframe", "Making use of piped data in python", "how to Perform search operation in Django?", "Getting stats about each row and putting them into a new column. Pandas", "How to associate some value in model with ForeignKey?", "What is the best way to fetch/render one-to-many relationships?", "How can I cluster a list of lists in Python based on string indices? Need insight", "Python Django: join view on the admin interface", "Python multiline string - $ for variables", "Python: replace multiple values of a Matrix", "django filter to calculate hours within range", "Is there a reasonable way to add to dictionary values without importing libraries?", "grouping dictionary with list values", "Send HEX values to SPI on a Raspberry PI B+", "Regex to extract all URLs from a page", "Remove and insert lines in a text file", "What is the proper way to perform a contextual search against NoSQL key-value pairs?", "Nested List of Lists to Single List of tuples", "How to create a random multidimensional array from existing variables", "clean way to accomplish -- if x in [(0, 1, 2), (2, 0, 1), (1, 2, 0)]:?", "How can I quickly compare a list and a set?", "Smart filter with python", "How to sort (list/tuple) of lists/tuples?", "Add [] around numbers in strings", "How to return every 5 items from a list in python?", "Find all combinations of letters, selecting each letter from a different key in a dictionary", "Indexing pandas dataframe to return first data point from each day", "Extracting text from HTML file using Python (Music Artist / Title)", "Possibility of writing dictionary items in columns", "RegEx in Python matching multiple substrings using one group", "Get the big-endian byte sequence of integer in Python", "Django templates check whether key is existing", "How to parse the header files of the pcap file?", "Python Pandas removing substring using another column", "How to do a rolling aggregation of data week wise in python?", "How to find number of users, number of users with a profile object, and monthly logins in Django", "Implementing class descriptors by subclassing the `type` class", "Python full-screen graphics", "Python3 Rename files in a directory importing the new names from a txt file", "How to pick the largest number in a matrix of lists in python?", "String formatting without index in python2.6", "How to determine tools chosen by waf?", "How can I compare dates using Python?", "Setting timeout on selenium webdriver.PhantomJS", "Using Eval in Python to create class variables", "How to select QTableView index or row from inside of Model", "Replacing strings in specific positions into a text and then rewriting all the text", "python periodic looping idiom?", "Remove outer list from list of list in python", "How can I set a code for users when they enter a valud URL or not with PYTHON/Flask?", "How do you read in a text (.txt) file as a .py file in Python 2.7?", "Python Django how to rotate image and remove black color?", "Printing inherited class in Python", "Python: how to turn string into a list?", "Python find closest match out of list", "QTableView item selection based on a QStandardItem data attribute", "splitting string in Python (2.7)", "running through a loop and find a condition that match", "Python: How to \"perfectly\" override a dict", "Python Quickest way to round every float in nested list of tuples", "How can I group objects by their date in Django?", "Send data from c program to python program using pipe?", "Switch between assignments to different variables in python? With ternary operator?", "Filtering in Django by a set of String", "Ordering a list according to hierarchy", "3x1 Matrix Multiplication with lists[UPDATED]", "How to link PyQt4 script button to activate another script?", "Python. How to make a class so that I can create a set of related objects(like\"Rock, Paper, Scissors\") with it?", "How to convert dictionary into string", "iterating over list of string and combining string values Python", "From list of dictionaries to np array of arrays and vice-versa", "Insert into a large table in psycopg using a dictionary", "Python Decimals format", "Changing the columns in DataFrame with respect to values in other columns", "ScraperWiki/Python: filtering out records when property is false", "Multidimensional array in Python", "Special End-line characters/string from lines read from text file, using Python", "Initiating TCP Client after running reactor.run()", "to delete records from a file in python", "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array", "Python drag and drop, get filenames", "Combine multiple heatmaps in matplotlib", "How to make array of array of dictionaries in python", "Setting path in Python", "How to set a Python object's field/member by name", "Python-like list comprehension in Java", "Convert Python dict to object?", "Python incrementing a Dictionary value entry held within a list", "Pycharm: set environment variable for run manage.py Task", "Most efficient way to index words in a document?", "Custom dictionary lookup in Python", "Compare values from two different dictionaries in Python?", "updating metadata for feature classes programatically using arcpy", "Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?", "How to xor in python using hex", "Reiterating over lists and dictionaries", "Power set and Cartesian Product of a set python", "Text file to csv with glob. Need to change delimiter depending on section of file being read", "Remove double and single square brackets from text file generated from python", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "Extracting Data From Python Classes", "Python: Find in list", "Regex: Match brackets both greedy and non greedy", "Read a number in a word from a file in python", "How to figure out if a word in spelled in alphabetical order in Python", "jinja2 print to console or logging", "How to convert an xml string to a dictionary in Python?", "Dumping multiple variables to disk in Json. One variable per line", "Beautiful soup, html table parsing", "Convert multichar %xx escapes to unicode", "Sun Grid Engine, force one job per node", "Order a list of dictionaries in python", "Fast linear interpolation in Numpy / Scipy \"along a path\"", "background process in python with -e option on terminal", "NULL safe inequality comparisons in SQL Alchemy?", "Finding common elements from two lists of lists", "How to Define Google Endpoints API File Download Message Endpoint", "Python & Numpy - create dynamic, arbitrary subsets of ndarray", "python remove element from list while traversing it", "Iterate over model instance field names and values in template", "Sorting data from a csv alphabetically, highest to lowest and average", "Find dictionary keys with duplicate values", "Aligning two combined plots - Matplotlib", "How to modify the metavar for a positional argument in pythons argparse?", "Tools for creating text as bitmaps (anti-aliased text, custom spacing, transparent background)", "Reordering same characters such that the characters are at least distance d from each other", "Output touch position from custom kivy widget to labels", "Find and replace a string in Python", "python - numpy: read csv into numpy with proper value type", "How to print progress from this code as the subprocess is running?", "Convert a python list into function", "regex to find a specific pattern in python", "Python how to get sum of numbers in a list that has strings in it as well", "Default window colour Tkinter and hex colour codes", "How to make unique combinations of the following list of tuples", "Create list using regex inputs", "Best way to work out if a path is in an include or exclude list in python", "Replace single quotes with double quotes in python, for use with insert into database", "fabric cleanup operation with atexit", "Sum grouped Pandas dataframe by single column", "python - sorting a list of lists by a key that's substring of each element", "Faster alternative to for loop in for loop", "Parallelize DictVectorizer Creation", "I want to choose the Transport Layer Security protocol in urllib2", "chunk of data into fixed lengths chunks and then add a space and again add them all as a string", "Update a Pyspark DF Column based on an Array in another column", "Operators to measure difference in Python", "How to Search data from a list of Key-Value pair that it is in list or not", "Time - get yesterdays date", "Sorting a List by frequency of occurrence in a list", "How to plot histogram of multiple lists?", "Creating multiple csv files from data within a csv file", "making binned boxplot in matplotlib with numpy and scipy in Python", "Checking if function was not called for x amount of time", "Django Form with extra information", "Pandas: Get value of mutliple sorting/grouping query", "Python 3 concurrent.futures and per-thread initialization", "Need help detecting a change in a variable outside of a while loop", "Binning data based on one column in 2D array and estimate mean in each bin using cython", "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation", "Grammar rule extraction from parsed result", "(python) How to create static text in curses", "Binary search of a number within a list in Python", "Permutation of values on numpy array/matrix", "Comparing List and get indices in python", "reading Unicode string as json object in python", "How can I determine when a user is in the process of entering something as an input in Python?", "finding the greatest Fibonacci number within limited time in python", "How to display proper output when using re.findall() in python?", "Merge two arrays into a matrix in python and sort", "How do I get an ECDSA public key from just a Bitcoin signature? ... SEC1 4.1.6 key recovery for curves over (mod p)-fields", "Translating regex match groups", "Python function that takes an input and spits out a month and how many days it has", "A way to get the path to the user installed packages on Linux and OS X operating systems? (Usable for Python versions between 2.5 - 2.7)", "Django model form with selected rows", "How to split a string by a string except when the string is in quotes in python?", "Weighted random choice from a variable length text file", "How to generate list combinations in Python", "MySQL select all components of a product", "change multiple lines in file python using regex", "SqlAlchemy Dynamic Where", "Pygame How to use walking animations", "Modify all rows in table", "Randomize a generator", "Numpy: averaging many datapoints at each time step", "In python convert day of year to month and fortnight", "Bitwise operations to produce power of two in Python", "Returning user to referrer in flask in smartest pythonic way", "how to convert UTF-8 code to symbol characters in python", "python - Nested list in dict to csv files", "Managing Processes from Python multiprocessing module", "Convert a date string into YYYYMMDD", "Draw different sized circles on a map", "How to sort through keys in a dictionary, adding the values and returning a list of keys if combined values equal a certain number", "Flask route rule as function args", "Get permutation with specified degree by index number", "Iterator for each item in a 2D Python list and its immediate m by n neighbourhood", "Finding time intervals per day from a list of timestamps in Python", "Pandas: Delete rows of a DataFrame if total count of a particular column occurs only 1 time", "How to make a field computed only if some condition is fulfilled in Odoo 8?", "python - increase array size and initialize new elements to zero", "Subtracting an integer value from a text file and displaying the result in Python2.7", "Pandas - group by consecutive ranges", "Neat way of popping key, value PAIR from dictionary?", "How can a Python module single file be installed using pip and PyPI?", "A list as a key for PySpark's reduceByKey", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "saving the number into the variable in every run of cycle python", "python pandas filter dataframe by another series, multiple columns", "Using Pandas to fill NaN entries based on values in a different column, using a dictionary as a guide", "Python Pandas Use if-else to populate new column", "Manipulating rows of csv file in python", "How do I display dates when plotting in matplotlib.pyplot?", "How to Search data from a list of Key-Value pair that it is in list or not", "How to add date and time information to time series data using python numpy or pandas", "Obtaining dictionary value in Python", "writing csv output python", "Using np.searchsorted to find the most recent timestamp", "in python, how to manipulate namespace of an instance", "Split file and turn it into dictionary in python", "Efficiently displaying a stacked bar graph", "How to access a button's parent in Tkinter without writing class?", "Combining lists and performing a check", "How to resize subfigures when using ImageGrid from Matplotlib", "How to represent dbus type b(oss) in python?", "Run multiple subprocesses in foreach loop? One at the time?", "student t confidence interval in python", "Extracting Text from Parsed HTML with Python", "Numpy: Efficient Way To Extract Subarray", "How do I install pip in python 2.7?", "Python: use regular expression to remove the white space from all lines", "Accessing xrange internal structure", "How to create sub list with fixed length from given number of inputs or list in Python?", "Numpy averaging with multi-dimensional weights along an axis", "Regex Parse Email Python", "Pygame draw anti-aliased thick line", "How to manually create a select field from a ModelForm in Django?", "recursively (or non-recursively) iterating through python array and get the elements", "For Kasiski Test,How to implement 26x26 table in Python", "inserting a new entry into adjacency list", "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?", "Compare unequal lists", "XOR neural network backprop", "What is a Pythonic way to count dictionary values in list of dictionaries", "Take dot product of first and middle entry, second and middle+1 entries until middle-1 and last entry python/numpy", "Extracting a feature by feature name in scikit dict vectorizer", "python read files and stop when a condition satisfies", "finding nth combination (incremental approach) of letters (list)", "boost python overload operator ()", "Connect to MSSQL Server 2008 on linux", "Getting Variable from Applescript and using in Python", "Parenthesized repetitions in Python regular expressions", "Python: Binning one coordinate and averaging another based on these bins", "How to use argparse during runtime to conditionally get further input?", "Scikit Learn HMM training with set of observation sequences", "Exclude weekends in python django query set", "How to flexibly change PYTHONPATH", "django one session per user", "How can I create a GUI on top of a Python APP so it can do either GUI or CLI?", "How to rename variables in a loop in Python", "In python, return value only when the function is used in an assignment", "How to update entire column with values in list using Sqlite3", "How to remove all \"document.write(' ');\" with beautifulsoup", "how to get the class type in lua / translation from python", "Plotting Histogram: How can I do it from scratch using data stored in a database?", "Python - \"properly\" organise (spread out) x and y data", "Exclude weekends in python django query set", "django serialize foreign key objects", "Saving an Element in an Array Permanently", "Boost.Python: Ownership of pointer variables", "More efficient solution? Dictionary as sparse vector", "Python array from CSV file", "How to view stdout of script run within automator", "Combine two lists which have the same item in dict", "call __str__ inside a class? python 3.X", "How to determine type of nested data structures in Python?", "combination of two DF, pandas", "Iterate over a \u2018window\u2019 of adjacent elements in Python", "Line breaks with lists", "Run same test on multiple datasets", "Sqlalchemy: bulk correlated update to link tables", "Writing to separate columns instead of comma seperated for csv files in scrapy", "how to pick random items from a list while avoiding picking the same item in a row", "Comparing List and get indices in python", "Matrix triple product with theano", "How to input data from a web page to Python script most efficiently", "Regex Python findall. Making things nonredundant", "Setting timeout on selenium webdriver.PhantomJS", "How to generalize a multiplication table for (n * m)", "Finding superstrings in a set of strings in python", "Multiple Database Config in Django 1.2", "How do you safely and efficiently get the row id after an insert with mysql using MySQLdb in python?", "Loops to minimize function of arrays in python", "Using multiple programs simultaneously in Python", "pandas count true values in multi-index frame", "Python C API - How to construct object from PyObject", "Check if all elements in nested iterables evaluate to False", "Can I override a C++ virtual function within Python with Cython?", "Interpolation in SciPy: Finding X that produces Y", "Python: How can I print out an object as a regular dictionary without reference?", "Send HEX values to SPI on a Raspberry PI B+", "Ordering a nested dictionary by the frequency of the nested value", "How to convert a list of datetime.datetime objects to date in Python?", "Drop Duplicate in market data", "Generate random string from regex character set", "Pandas OR statement ending in series contains", "Date formate conversion in Python", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "How does one parse a file to a 2d array whilst maintaining data types in Python?", "How to filter through pandas pivot table.", "Union of many Counters", "Parse Specific Text File to CSV Format with Headers", "Insert nested value in mongodb using python", "Writing to multiple files with Scrapy", "Splitting a dataframe based on column values", "Two corresponding y-axis", "Scrapy xpath get text of an element that starts with <", "Retrieving Data from MySQL in batches via Python", "Array from interpolated plot in python", "Sort a list based on a given distribution", "Grouping in Python", "retrive minimum maximum values of a ctype", "Sorting a list of list of tuples based on the sum of first field in the tuple in Python", "How do I generate a sequence of integer numbers in a uniform distribution?", "Remove single quotes from python list item", "Matplotlib: force aspect ratio in series of plots", "Compare two files in python and save line differences in a new file", "Python: Effective reading from a file using csv module", "How can I determine when a user is in the process of entering something as an input in Python?", "PyGTK/GIO: monitor directory for changes recursively", "Scraping website that uses javascript", "Merge two arrays into a matrix in python and sort", "Django/jQuery: handling template inheritence and JS files loading", "building full path filename in python,", "PYTHON: How do I create a list of every possible letter mapping using a dictionary that stores every possible letter mapping combination?", "How to convert a dict to string?", "Checkbox to determine if an action is completed or not", "Boxplotting Masked Arrays", "How to handle multiple user type in Django", "Django Multiple Caches - How to choose which cache the session goes in?", "Python lists with irregular format", "Finding a vector that is approximately equally distant from all vectors in a set", "Make one list from two list applying constraint", "Can I override a C++ virtual function within Python with Cython?", "python - replace string entry with a dictionary entry", "removing first four and last four characters of strings in list, OR removing specific character patterns", "How do I use BeautifulSoup to move tag contents from one soup to a template soup", "Generate random string from regex character set", "Python inheritance - going from base class to derived one", "Python: compare an array element-wise with a float", "Right way to write Unit-Tests in module?", "python - remove empty lines from end and beginning of string", "Positional Comparisons in Python", "Using variable as keyword passed to **kwargs in Python", "Parse Specific Text File to CSV Format with Headers", "Joining fields values", "Django: how to change label using formset extra?", "summing nested dictionary entries", "How do I compute all possibilities for an array of numbers/bits (in python, or any language for that matter)", "how to access nargs of optparse-add_action?", "How to process input in parallel with python, but without processes?", "Joinable PriorityQueue in python's asyncio", "exit from ipython", "Remove duplicated string(s) in strings in a list", "python - how to get the numebr of active threads started by specific class?", "Dealing with Windows line-endings in Python", "Converting date using to_datetime", "sqlite SQL query for unprocessed rows", "Erasing list of phrases from list of texts in python", "Sorting a list based on associated scores", "Generate permutations of a list of lists with variable lengths", "Turn a List of Str into a List of Int (Python)", "What is the best way to compute the trace of a matrix product in numpy?", "How to string format OptionParser() help message?", "Spearman rank correlation in Python with ties", "How to convert a dict to string?", "How do I get Python2.x `map` functionality in Python3.x?", "Python extract info from a local html file", "Average multiple vectors of points of different lengths in python", "python tkinter calender, placing the numbers", "Plone - Override Zope Schema fields", "Django: Lookup by length of text field", "Convert date to second from a reference - Python", "Deleting consonants from a string in Python", "Python: How to call a class in the same file", "combine list of dictionaries with same key", "\"Canonical\" offset from UTC using pytz?", "How to log in to a website with urllib?", "python regex comma separated group", "Python: converting a nested list into a simple list with coord positions", "Write to file descriptor 3 of a Python subprocess.Popen object", "python for loop using lambda syntax", "Python - Iterate through, and extract, elements of a dictionary type list", "Printing row and columns in reverse", "Applying python decorators to methods in a class", "Python: Find in list", "modify range in every loop of the range", "How to make a field computed only if some condition is fulfilled in Odoo 8?", "Dictionary As Table In Django Template", "How to use malloc and free with python ctypes?", "Dynamic field calculations in Django", "Need to read from a file and add the elements and get avg in python 3.4", "Returning a list in each iteration using list comprehension", "find an empty value gap in a list and allocate a group of strings", "Elegant Python function to convert CamelCase to snake_case?", "Python-Getting contents between current and next occurrence of pattern in a string", "Asynchronous data through Bloomberg's new data API (COM v3) with Python?", "Python script to loop through all files in directory, delete any that are less than 200 kB in size", "Inspecting data descriptor attributes in python", "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list", "how to format numbers with commas in python", "Split field to array when accessed", "New Python Gmail API - Only Retrieve Messages from Yesterday", "building reusable package in django", "Step through items in dictionary in python", "Automatically numbering and referencing Sphinx tables", "Real Hierarchical Builds with SCons?", "Loading a dataset from file, to use with sklearn", "Regex match following substring in string python", "Comparing two lists items in python", "Compare 2 excel files using Python", "How to merge item in list", "Calculate number of jumps in Dijkstra's algorithm?", "How to convert a python string", "How to isolate group nodes in maya with python", "Remove duplicates in python list but remember the index", "Automatic conversion to boost shared_ptr in boost python", "Remove a level from a pandas MultiIndex", "How to convert an xml string to a dictionary in Python?", "Python - lexical analysis and tokenization", "Python: How to remove whitespace from number in a string", "Extarct particulr part of json string using python regex", "Django, m2m with same model", "reading Unicode string as json object in python", "have multiple users as one model field in many to one format django models", "Django ImageField upload_to path", "Updating a value in a dictionary inside a dictionary", "finding the greatest Fibonacci number within limited time in python", "Python TEA implementation", "How to create linux users via my own GUI application in Python?", "Simple loop for all elements of an etree object?", "Multiple Forms and Formsets in CreateView", "multi colored plots in matplotlib plt based on certain properties of data", "How do I get the number of posts on each day with annotation in Django?", "Beautiful Soup - how to fix broken tags", "Dictionary items to variables", "Select last chars of string until whitespace in Python", "How can I find the right gaussian curve given some data?", "Sorting panda DataFrames based on criteria", "Return All Matching Lines in a Logfile", "How to make QtGui window process events whenever it is brought forward on the screen?", "Extend Python list \"inline\"", "How to use scipy.integrate.ode.set_f_params() to make time dependant parameter changes?", "Nested options with argparse", "How to remove an array containing certain strings from another array in Python", "Matplotlib - Move X-Axis label downwards, but not X-Axis Ticks", "Fasted Python way to bulk csv convert outside of using pandas", "How can a Python module single file be installed using pip and PyPI?", "To sum column with condition", "Read a dense matrix from a file directly into a sparse numpy array?", "Matplotlib Half color axis", "How to get python dictionaries into a pandas time series dataframe where key is date object", "How to get a list of datatypes on Django model?", "Traversing a \"list\" tree and get the type(item) list with same structure in python?", "How to treat a hex as string?", "Generate numbers with 3 digits", "Need to parse a tool log file in python and then save the results in excel or csv", "Broken XML file parsing and using XPATH", "Implementing 2D slicing in Python", "Is there a standard way to store XY data in python?", "Obtaining Client IP address from a WSGI app using Eventlet", "Python - regex to match url with mongo object id", "progress bar properties python2.72 pywinauto", "python: how can I get a new value in round robin style every time i invoke the script", "Python regular expression to remove space and capitalize letters where the space was?", "Faster way to read Excel files to pandas dataframe", "Get non-contiguous columns from a list of lists", "separate list elements based on semicolon", "How to place a matplotlib plot into an html container using mpld3 and flask", "have multiple users as one model field in many to one format django models", "Creating an iterable of dictionaries from an iterable of tuples", "Comparing items in large list - finding items differing in 1 letter by length - Python", "How to generate combination of fix length strings using a set of characters?", "how to represent a number value as a string in python?", "Special End-line characters/string from lines read from text file, using Python", "Is it possible to delete an entire Webpage when the user navigates away?", "Best way to Convert pairs of base 10 integers to ascii characters in python", "Python: Iterating through a set so we don't compare the same objects multiple times?", "PyTables read random subset", "Pandas dataframe - transform column values into individual columns", "Check list of tuples where first element of tuple is specified by defined string", "Filtering a model in Django based on a condition upon the latest child record", "Setting path in Python", "How could I delete certain columns then write wanted columns into csv python", "Effective regex for multiple strings with characters and numbers", "Remembering Scroll value of a QTreeWidget in PyQt", "python multiprocessing dynamically created processes and pipes", "Pandas: add dataframes to dataframe - match on index and column value", "Python sorting array according to date", "Best way to reset keys which expires in few minutes in python", "Support multiple API versions in flask", "Loading multiple images from a text file", "dictionary of dictionaries(nested dicts)", "Remove outer list from list of list in python", "Advance a file object more than one line as a way of skipping blank lines and lines containing strings", "String slicing with delimiter changing in length", "How to check if elements of a list are in a string", "Using lxml to extract data where all elements are not known in advance", "Most efficient way to loop through multiple csv files and calculate NYSE tick", "Send data from c program to python program using pipe?", "How to read complex numbers from file with numpy?", "python csv to dictionary columnwise", "how to join multiple sorted files in Python alphabetically?", "Alternatives to cartesian in Spark?", "How to match integers in NLTK CFG?", "python- combining list and making them a dictionary", "How to avoid defining a variable to hold a function result which might be needed only once", "Sum of all numbers inside a string", "Modifying HTML using python html package", "updating metadata for feature classes programatically using arcpy", "How to get the location of a Zope installation from inside an instance?", "Python how to strip white-spaces from xml text nodes", "How to find the list in a list of lists whose sum of elements is the greatest?", "pandas multiindex assignment from another dataframe", "Rotate photo via python", "which random am i looking for to achieve this:", "Write nested lists column wise to CSV", "Align LaTeX math text in matplotlib text box", "vectorized implementation for pseudo pivot table in python", "Query endpoint user by email", "Django User Model one-to-one with other model and Forms", "Growing matrices columnwise in NumPy", "Download a file and push into MySQL without timing out in Python", "Delete files with python through OS shell", "How to create LinkExtractor rule which based on href in Scrapy", "Replacing two elements of a list in place with a function [python 3]", "YAML list -> Python generator?", "How to send cookie with scrapy CrawlSpider requests?", "Fill scipy / numpy matrix based on indices and values", "Trying to duplicate a list and modify one version of it in Python 2", "How can I create a list with the first column?", "Pythonic way of looping over variable that is either an element or a list", "Python program: foreign language word-frequency dictionary", "How to merge item in list", "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?", "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?", "Comparing List and get indices in python", "python mock patch top level packages", "Django permissions mixin on CBV, how to apply on 'publish blog' method", "remove newline and whitespace parse XML with python Xpath", "Filtering for multiple strings on f.read", "How to parse XML file from European Central Bank with Python", "Dictionary from variables that may not be initialized", "Data structure for UDP Server parsing JSON objects in python", "Returning the value of an index in a python list based on other values", "python tkinter calender, placing the numbers", "Python Pandas Use if-else to populate new column", "Escape string to be valid python expression", "IronPython import two enums with the same name", "Pipe delimiter file, but no pipe inside data", "How to sort an itertools grouper array in python", "How to address a dictionary in a list of ordered dicts by unique key value?", "Get system metrics using PowerShell", "Sort Python Dictionary by first four characters in Key", "Convert this python dictionary into JSON format?", "pandas multiindex assignment from another dataframe", "Save matches on array", "use scikit-learn to classify into multiple categories", "Extracting text from webpage, processing with Perl/Python, then rebuilding the page with links added", "Slicing based on dates Pandas Dataframe", "How to recursively sum and store all child values in a tree", "How to pivot/cross-tab data in Python 3?", "How to index a user input list in Python 2.x?", "Using selenium at hosted app?", "How do I write a logging middleware for pyramid/pylons 2?", "How to set the alpha value for each element of a numpy array", "Python Matplotlib: plotting feet and inches", "Return All Matching Lines in a Logfile", "get function names from a list python", "List database tables with SQLAlchemy", "Python reverse integer using recursion", "Print floating point values without leading zero", "How to transform a pair of values into a sorted unique array?", "XOR neural network backprop", "How do I store multiple copies of the same field in Django?", "How can I send an MMS via a GSM/GPRS modem connected to a linux computer?", "Go through every possible combination of an array python", "Parsing an equation with custom functions in python", "SQLAlchemy/Elixir - querying to check entity's membership in a many-to-many relationship list", "Getting specific field from chosen Row in Pyspark DataFrame", "Append to several lists inside list", "How to speed-up python nested loop?", "Creating a subplot instead of separate plots", "passing arrays with ctypes", "How do I assign a variable to an object name?", "RQ - Empty & Delete Queues", "Python - compare columns in a text file, loop and pop lists", "How can you bundle all your python code into a single zip file?", "Is there a way to sandbox test execution with pytest, especially filesystem access?", "How to get only even numbers from list", "python - parsing and sorting dates", "How to scrape table with different xpath on the same level with Scrapy?", "How to generalize a multiplication table for (n * m)", "How to know the filetype through python", "Sort Python Dictionary by first four characters in Key", "how to dynamically read a specific cell value in a table using selenium and python", "two dimensional array for encryption in python", "Consolidate duplicate rows of an array", "Get specific data from a .json file and save them to a 2D matrix/dictionary in python", "Sorting dictionary keys by values in a list?", "Python: Converting Unicode code point filenames to strings", "Sorting an array by a number string (Python 3.4.2)", "How to remove/omit smaller contour lines using matplotlib", "What is the best practice to add tuples to a set?", "Iterate through each value of list in order, starting at random value", "huge text file (6Gb) search and replace", "parsing single text items from xml with Python", "Insert data from one sorted array into another sorted array", "Python code for counting number of zero crossings in an array", "how to set the buttons size inside a spinner in kivy?", "Interleaving two numpy index arrays, one item from each array", "How can I scrape data from a text table using Python?", "Accessing an additional profile from templates", "Python: Pass a generic dictionary as a command line arguments", "How to iterate over a pandas dataframe and compare certain columns based on a third column?", "Python Matplotlib: Splitting one Large Graph into several Sub-Graphs (Subplot)", "Save app data in Weather App", "Alternatives to cartesian in Spark?", "how to find the line number where specific text exists?", "how to update global variable in python", "How to determine if a decimal fraction can be represented exactly as Python float?", "Python and the modulus operator with very large numbers", "Summing similar elements within a tuple-of-tuples", "How to separate a single list into multiple list in python", "Python - re - need help for regular expression", "Sending non-string argument in a POST request to a Tornado server", "Jenkins and Python", "Prepend line to beginning of a file", "Conditionally replace several columns with default values in Pandas", "Scipy: Centroid of convex hull", "Selenium scraping with multiple urls", "Python handling newline and tab characters when writing to file", "Print two report in Odoo8", "How to replace Python function while supporting all passed in parameters", "How can I execute shell command with a | pipe in it", "How to search & replace in Python?", "Parsing bits from a 128 byte block of hex in Python", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Change object's variable from different file", "Using beautifulsoup to parse tag with some text", "How to reset an unordered index to an ordered one in python?", "What does a class need to implement in order to be used as an argument tuple?", "Change object's variable from different file", "Changing prompt working directory via Python script", "Can I cleanse a numpy array without a loop?", "How can I find all subclasses of a given class in Python?", "Inspecting data descriptor attributes in python", "R's relevel() and factor variables in linear regression in pandas", "Pyyaml - Using different styles for keys and integers and strings", "How to generalize a multiplication table for (n * m)", "What is the standard way to add N seconds to datetime.time in Python?", "check if variable is dataframe", "How to send image generated by PIL to browser?", "Reading input from raw_input() without having the prompt overwritten by other threads in Python", "Python and the modulus operator with very large numbers", "serving i18n js using babel, django, & jinja2", "matching between two columns and taking value from another in pandas", "Python OptParse combine multiple options", "Python BeautifulSoup get text from HTML", "Pandas Datframe1 search for match in range of Dataframe2", "calling linux shell in python with writing output in a text file", "Python, using BeautifulSoup parsing values from a table", "Difference of elements to find same adjacent", "What's the convinient way to evaluate multiple string equality in Python?", "create dictionary from list same values", "Use Python zip to save data in separate columns from a binary file", "Handling months in python datetimes", "Save app data in Weather App", "python list manipulation nesting vertically, making it look like a matrix", "Django - access foreign key data in an annotated query", "related to List (want to insert into database)", "Python identify in which interval the numbers are", "regex - how to recognise a pattern until a second one is found", "Applying a function by bins on a vector in Numpy", "Ensuring that my program is not doing a concurrent file write", "How does one parse a file to a 2d array whilst maintaining data types in Python?", "Exponential Decay on Python Pandas DataFrame", "Django - how to write users and profiles handling in best way?", "SQLite Python printing in rows?", "List of distinct XML element names using BeautifulSoup", "Iterate through XML child of a child tags in Python", "Create a summary Pandas DataFrame using concat/append via a for loop", "Python regular expression to remove space and capitalize letters where the space was?", "Python Find n words before and after a certain words", "How to find and select a table in html code with xpath", "how to write two elements into one row in Python", "Django get list of models in application", "Try/Except Every Method in Class?", "appending a single string to each element of a list in python", "What's the most efficient way to accumulate dataframes in pyspark?", "Python: Decode base64 multiple strings in a file", "How to select QTableView index or row from inside of Model", "Replacing strings in specific positions into a text and then rewriting all the text", "Writing variables with .write() Python 3", "How can I find the average of each similar entry in a list of tuples?", "Getting file path from command line arguments in python", "PyPI API - How to get stable package version", "matching between two columns and taking value from another in pandas", "Reorder a dictionary to fit a data frame", "Remove punctuation from Unicode formatted strings", "What is the best way to fetch/render one-to-many relationships?", "How to check if an element is in a nested list?", "How to dynamically create classes inside a module-level initialize() method in Python", "Selecting text nodes with text not equal to a value", "django filter to calculate hours within range", "finding nth combination (incremental approach) of letters (list)", "grouping dictionary with list values", "Grouping and Computing Frequency ,Pandas", "Regex to extract all URLs from a page", "How to override OSX's version of numpy when I import in Python 2.7?", "Add fields and correct indentation for json file (using python or ruby)", "Nested List of Lists to Single List of tuples", "Sort dictionary alphabetically when the key is a string (name)", "Disable pagination in Django tastypie?", "How do I sort objects inside of objects in JSON? (using Python 2.7)", "How can I quickly compare a list and a set?", "How to create a object of variables, and return it, in Python?", "How to find number of users, number of users with a profile object, and monthly logins in Django", "How to sort (list/tuple) of lists/tuples?", "Add [] around numbers in strings", "accumulating an orderedDict", "Remove rows from data: overlapping time intervals?", "How can I perform a least-squares fitting over multiple data sets fast?", "Stop a command line command in script", "Compare values in 2 columns and output the result in a third column in pandas", "Grouping data in a list of of dicts", "How to change a DateTimeIndex in a pandas dataframe to all the same year?", "Multidimensional array in Python", "How to parse the header files of the pcap file?", "Python: Keep track of current column in text file", "Splitting a list in python", "Custom Hadoop Configuration for Spark from Python (PySpark)?", "Python3 Rename files in a directory importing the new names from a txt file", "How to pick the largest number in a matrix of lists in python?", "inequality comparison of numpy array with nan to a scalar", "Multiple drag and drop in PyQt4", "GMail API - Get last message of a thread", "JSON to Pandas: is there a more elegant solution?", "Using Eval in Python to create class variables", "How can I find the average of each similar entry in a list of tuples?", "How to count how many positions away an element is in a list?", "Python: Getting all the items out of a `threading.local`", "Collect values of pandas dataframe column A if column B is NaN (Python)", "How to align and compare two elements (sequence) in a list using python", "Python - Twisted, Proxy and modifying content", "Numpy loadtxt load every other column", "updating metadata for feature classes programatically using arcpy", "Finding specific links with Beautiful Soup", "find unique first top and bottom lines of fastq file from fasta file", "QTableView item selection based on a QStandardItem data attribute", "Combine multidimensional array by group python", "Converting separate functions into class-based", "Find dictionary keys with duplicate values", "XPATH: If there is element with certain value assume \"phone\" then get it's sibling value", "Creating a palindrome list with reverse()", "grouping values for grammar generation in python", "how to properly loop through two files comparing strings in both files against each other", "Python iterate list of dicts and create a new one", "How to build a nested list from a flat one in Python?", "Nested Regular Expression in Python for", "How to link PyQt4 script button to activate another script?", "Django URL matching any 140 characters", "Creating multiple copies of list elements", "Split file and turn it into dictionary in python", "Skip/pass over view function so the next can execute in Flask", "Beautiful Soup [Python] and the extracting of text in a table", "Installing OSQA on windows (local system)", "to delete records from a file in python", "Python Relating k-means cluster to instance", "JSON to Pandas: is there a more elegant solution?", "Python argparser. List of dict in INI", "Can I use one import and expose keywords from multiple python libraries?", "Call the same method in all objects in Python?", "How to input a line word by word in Python?", "How to request a File in Google Drive", "Auto validate a function parameter using a method", "Sort Python list by dict key,value", "Remove a level from a pandas MultiIndex", "Given an iterable, how to apply a function in every possible combination?", "how to get the class type in lua / translation from python", "Secure MySQL login data in a Python client program", "Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?", "Apply a weighted average function to a dataframe without grouping it, as if it was a single group", "Analyze and edit links in html code with BeautifulSoup", "Reiterating over lists and dictionaries", "Get the count of the each date entry from onr of the raw from CSV file", "Remove double and single square brackets from text file generated from python", "Python function that takes an input and spits out a month and how many days it has", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "Extracting Data From Python Classes", "Python: Find in list", "Regex: Match brackets both greedy and non greedy", "Mock only a subset of all calls to a method", "Read a number in a word from a file in python", "How to generate an html directory list using Python", "Python: Scrape Data from Web after Inputing Info", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "Dumping multiple variables to disk in Json. One variable per line", "TensorFlow Resize image tensor to dynamic shape", "Python binary conversion to hex", "Beautiful soup, html table parsing", "Parsing through a file", "Python getting a string (key + value) from Python Dictionary", "background process in python with -e option on terminal", "NULL safe inequality comparisons in SQL Alchemy?", "Scrapy:newbie attempts to pass the null value", "How to print framed strings", "Python | How to create dynamic and expandable dictionaries", "How to find the index value of a variable in SPSS Python", "How to draw stacked histogram in pandas", "which random am i looking for to achieve this:", "Iterate over model instance field names and values in template", "Sorting data from a csv alphabetically, highest to lowest and average", "making new column in pandas dataframes based on filter", "Python: How to remove whitespace from number in a string", "How to request a File in Google Drive", "Deleting consonants from a string in Python", "How to modify the metavar for a positional argument in pythons argparse?", "Extract html cell data XPath", "Reordering same characters such that the characters are at least distance d from each other", "Protection against downloading too big files", "How to print progress from this code as the subprocess is running?", "Convert a python list into function", "Passing multple files with asterisk to python shell in Windows", "change multiple lines in file python using regex", "Fill scipy / numpy matrix based on indices and values", "Pandas check for future condition by group", "Python \u2014 Randomly fill 2D array with set number of 1's", "A list as a key for PySpark's reduceByKey", "Replace single quotes with double quotes in python, for use with insert into database", "Use a class method as an integrand to GSL QAGS", "How to pass variable arguments from bash script to python script", "How to avoid '\\n' and '\\t' escaping sequence when string is assigned to a variable", "Set global constant cross all the view", "How to split a byte string into separate bytes in python", "Time - get yesterdays date", "Python Class Based Decorator with parameters that can decorate a method or a function", "How to convert pandas single column data frame to series or numpy vector", "Creating multiple csv files from data within a csv file", "How do I calculate the numeric value of a string with unicode components in python?", "Compare values in 2 columns and output the result in a third column in pandas", "append csv files on column basis", "Python iterate list of dicts and create a new one", "generate lists from 3 dimensional array", "How to find the average of previous sales at each time in python", "Need help detecting a change in a variable outside of a while loop", "Python replace year mentions like '85 with 1985", "Socket code from python to Objective C", "Loop over time and over list elements with python -- one-dimensional lake temperature model simulation", "Grammar rule extraction from parsed result", "Binary search of a number within a list in Python", "Updating a TKinter GUI from a multiprocessing calculation", "Pandas dataframe : Multiple Time/Date columns to single Date index", "Update dictionary in xml from csv file in python", "in python, how do I check to see if keys in a dictionary all have the same value x?", "Drawing a clamped uniform cubic B-spline using Cairo", "How to display proper output when using re.findall() in python?", "Using Numba to improve finite-differences laplacian", "Pick values only below a certain threshold", "Translating regex match groups", "Python (Maya) pass flags as variables", "A way to get the path to the user installed packages on Linux and OS X operating systems? (Usable for Python versions between 2.5 - 2.7)", "More pythonic way to find a complementary DNA strand", "Finding time intervals per day from a list of timestamps in Python", "PyQt4 Local Directory view with option to select folders", "Starting/stopping a background Python process wtihout nohup + ps aux grep + kill", "accessing files in a folder using python", "Specific font_face based on syntax in Sublime Text 2", "Pygame How to use walking animations", "Python: How to remove whitespace from number in a string", "How to print from itertools count object?", "Python: Read whitespace separated strings from file similar to readline", "How to make a calculator with strings and numbers as mixed input using parser python ply", "How to insert arrays into a database?", "How to exit a supervisor process with fabric file?", "how to convert UTF-8 code to symbol characters in python", "Managing Processes from Python multiprocessing module", "Returning all keys that have the same corresponding value in a dictionary with python", "How to generate an html directory list using Python", "How to sort through keys in a dictionary, adding the values and returning a list of keys if combined values equal a certain number", "create dictionary from list same values", "Flask route rule as function args", "How to extend model on serializer level with django-rest-framework", "Merge every Every 6 dictionary into single dictionary of List", "strip ' from all members in a list", "Efficiently Removing Very-Near-Duplicates From Python List", "python - increase array size and initialize new elements to zero", "Iterator for all lexicographically ordered variable strings up to length n", "Pandas - group by consecutive ranges", "How to store a name and score into a list?", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "Loop through dictionary with django", "Using Pandas to fill NaN entries based on values in a different column, using a dictionary as a guide", "how to search values in a file and replace", "How do I display dates when plotting in matplotlib.pyplot?", "Python: Binning one coordinate and averaging another based on these bins", "how to change a node value in python", "numpy tile without memory allocation", "What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?", "Selenium Python select the link from 3rd column from a table", "How to replace all words in a series with a few specified words in Pandas,Python?", "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array", "Printing row and columns in reverse", "Make a pandas series by running a function on all adjacent values", "Django reverse url to onetoonefield on success", "Truncating multi-indexed dataframe", "How to format inputted data and output it", "How do I zip the contents of a folder using python (version 2.5)?", "making new column in pandas dataframes based on filter", "Print from txt file", "Execute code when extending a class in Python", "Pandas: Dealing with Boolean in Pivot Table", "Extarct particulr part of json string using python regex", "Store all stdout to file while still displaying it on screen", "Extracting Text from Parsed HTML with Python", "Python: use regular expression to remove the white space from all lines", "Merge some part of the list together using python", "Navigate trough lxml categories", "How to create sub list with fixed length from given number of inputs or list in Python?", "Python: multidimensional array masking", "how to goup items in a list of dictionaries by matching values \u200b\u200bin python", "Pygame draw anti-aliased thick line", "Returning the value of an index in a python list based on other values", "Lazy class property decorator", "How to find the all text files from the path and combine all the lines in that text files to one text file", "For Kasiski Test,How to implement 26x26 table in Python", "How to thread multiple subprocess instances in Python 2.7?", "Getting the key and value of br.forms() in Mechanize", "Redirect stdout to logger in Python", "Sort generated numbers using another python generator", "XOR neural network backprop", "Proxy Check in python", "Jenkins and Python", "Python reshape list to ndim array", "Combine variable and for each loop python", "Extracting a feature by feature name in scikit dict vectorizer", "Short for 'for i in range(1,len(a)):' in python", "How to get parameter arguments from a frozen spicy.stats distribution?", "Django templates check whether key is existing", "Restart a script after 6 minutes", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "Connect to MSSQL Server 2008 on linux", "creating a wxpython scrolled window (frame) by an event", "Fast and pythonic way to find out if a string is a palindrome", "display only one logging line", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "Get last \"column\" after .str.split() operation on column in pandas DataFrame", "Authentication to use for user notifications using Crossbar/Autobahn?", "django one session per user", "Tipfy & Jinja: Creating a logout URL for every page", "How to find and select a table in html code with xpath", "talking between python tcp server and a c++ client", "Can you do regex with concordance?", "Compare two lists in python and print the output", "Create a list with all possible permutations from a know list of objects, but make the final list x in size", "Reshape for array multiplication/division in python", "(Python) Formatting strings for struct.unpack?", "Python - \"properly\" organise (spread out) x and y data", "better way to find pattern in string?", "How does one parse a file to a 2d array whilst maintaining data types in Python?", "Customize sphinxdoc theme", "Python binary conversion to hex", "Transform string in a list with elements separated on Python", "Pandas: Adding conditionally", "How to view stdout of script run within automator", "call __str__ inside a class? python 3.X", "How do I add space between two variables after a print in Python", "combination of two DF, pandas", "Computing 16-bit checksum of ICMPv6 header", "Find the number of ways a sequence can be rearranged", "Pyramid authorization for stored items", "Conditionally replace several columns with default values in Pandas", "How to return both string and value within HttpResponse?", "Sqlalchemy: bulk correlated update to link tables", "Changing constraint naming conventions in Flask-SQLAlchemy", "setup relationship one-to-one in Flask + SQLAlchemy", "Efficiently finding the shortest path in large graphs", "How to plot a 3D density map in python with matplotlib", "python help django navigation", "Require one out of two keyword arguments", "Python script to replace #define values in C file", "How to generalize a multiplication table for (n * m)", "Python: Extracting Sentences From Line - Regex Needed Based on Criteria", "List of distinct XML element names using BeautifulSoup", "Loops to minimize function of arrays in python", "How do I make a function to accept an argument that is another function?", "Calculate point based on distance and direction", "Can I override a C++ virtual function within Python with Cython?", "Python pandas idxmax for multiple indexes in a dataframe", "Python: Removing random whitespace from a string of numbers", "Python line read size in bytes", "How to convert a list of datetime.datetime objects to date in Python?", "Allocate items according to an approximate ratio in Python", "How to count how many posts each link has on a reddit-like app?", "How to recursively call a macro in jinja2?", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "Django: how to change label using formset extra?", "How to filter through pandas pivot table.", "Auto increament the invoice number in django backend for new invoice", "Python - filling a list of tuples with zeros in places of missing indexes", "List Highest Correlation Pairs from a Large Correlation Matrix in Pandas?", "How do I reference classes using IronPython?", "Parse Specific Text File to CSV Format with Headers", "Insert nested value in mongodb using python", "Dynamic Table Creation and ORM mapping in SqlAlchemy", "Splitting a dataframe based on column values", "Open txt file, skip first lines and then monitor a given column of data", "Recursively reduce list of tuples", "Reading netCDF and creating \"virtual / pseudo\" csv files", "Sort a list based on a given distribution", "Python Quickest way to round every float in nested list of tuples", "How to read folder structure and assign it to datastructure?", "Localized random points using numpy and pandas", "Python: Effective reading from a file using csv module", "How to directly set RGB/RGBA colors in mayavi", "List files in ONLY the current directory", "PyGTK/GIO: monitor directory for changes recursively", "lxml findall div and span tags", "Using other keys for the waitKey() function of opencv", "Sort individual components of a list in python", "Creating a boost::python::object from a std::function", "Fastest way to remove subsets of lists from a list in Python", "Django/jQuery: handling template inheritence and JS files loading", "building full path filename in python,", "PYTHON: How do I create a list of every possible letter mapping using a dictionary that stores every possible letter mapping combination?", "Search with employee_id in openerp?", "Consolidate duplicate rows of an array", "Finding All Defined Functions in Python Environment", "How to handle multiple user type in Django", "Load all third party scripts using requests or mechanize in Python", "For loop syntax in Python without using range() or xrange()", "Python & Beautifulsoup web scraping - select a paragraph with a specific child tag", "Efficient way of creating a permutated 2D array with a range of integers", "What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?", "Python - Comparing two lists of sets", "How to define multi-company-aware models in OpenERP", "Create a list of keys given a value in a dictionary", "Specifying types and patterns using argparse choices", "How do I define custom function to be called from IPython's prompts?", "Python: Alphanumeric Serial Number with some rules", "Detecting geographic clusters", "Python code for counting number of zero crossings in an array", "Comparing two dictionaries in list in python", "authentication in python script to run as root", "Positional Comparisons in Python", "Using variable as keyword passed to **kwargs in Python", "Numpy interconversion between multidimensional and linear indexing", "Django: how to change label using formset extra?", "wait() on a group of Popen objects", "Sum of calculation in a variable", "define different function for different versions of python", "Joinable PriorityQueue in python's asyncio", "How to thread multiple subprocess instances in Python 2.7?", "matching between two columns and taking value from another in pandas", "Python: checking for the existence of a variable in globals() makes it invisible in the local context", "Where is the configuration information of installed packages?", "Byte formatting in python 3", "Erasing list of phrases from list of texts in python", "Storing a directed, weighted, complete graph in the GAE datastore", "Use of SQL - IN in python", "Evaluate multiple variables in one 'if' statement?", "Python create instance from list of classes", "Generate permutations of a list of lists with variable lengths", "Turn a List of Str into a List of Int (Python)", "How to count number of repeated keys in several dictionaries?", "scale two matrices with scipy or sklearn", "Django Python Shell", "Retaining category order when charting/plotting ordered categorical Series", "Splitting a list in python", "Average multiple vectors of points of different lengths in python", "Log-sum-exp trick on a sparse matrix in scipy", "Insert values in lists following a pattern", "Extract elements of a 2d array with indices from another 2d array", "Monitor ZIP File Extraction Python", "Finding index values in a pandas data frame where columns are the same", "Insert data from one sorted array into another sorted array", "Django: Lookup by length of text field", "Convert date to second from a reference - Python", "Python Decorator 3.0 and arguments to the decorator", "Mask a 3d array with a 2d mask in numpy", "Pandas Dataframe: split column into multiple columns, right-align inconsistent cell entries", "How to do a groupby of a list of lists", "How to draw stacked histogram in pandas", "Creating a subplot instead of separate plots", "Python: converting a nested list into a simple list with coord positions", "Remove namedtuple from list based on value", "python for loop using lambda syntax", "Use regex backreferences to create array", "how to make post request in python", "have multiple users as one model field in many to one format django models", "How can I find all subclasses of a given class in Python?", "Applying python decorators to methods in a class", "How to make a field computed only if some condition is fulfilled in Odoo 8?", "Dictionary As Table In Django Template", "How to use malloc and free with python ctypes?", "Python list comparison to create trees", "Need to read from a file and add the elements and get avg in python 3.4", "Django reverse url to onetoonefield on success", "Getting stats about each row and putting them into a new column. Pandas", "Python Pandas DataFrame how to Pivot", "Parenthesized repetitions in Python regular expressions", "Elegant Python function to convert CamelCase to snake_case?", "Find selected features by RandomizedLogisticRegression", "two's complement of numbers in python", "Python - removing items from lists", "GIMP Python-fu nested group layers", "Python script to loop through all files in directory, delete any that are less than 200 kB in size", "Store input based on computer and change stored input on command", "building reusable package in django", "Python3 Rename files in a directory importing the new names from a txt file", "Automatically numbering and referencing Sphinx tables", "Parse valid JSON object or array from a string", "Making id case-insensitive but case-preserving in endpoints-proto-datastore", "Real Hierarchical Builds with SCons?", "(Python) Breaking an output text file into tokens", "Regex match following substring in string python", "Comparing two lists items in python", "Using mimetools.Message in urllib2.urlopen", "Pandas: How to extract rows of a dataframe matching Filter1 OR filter2", "Different databases with the same models on Django", "How to implement man-like help page in python(python shell already has it)", "How to see if section of python code completes within a given time", "Deleting consonants from a string in Python", "How to isolate group nodes in maya with python", "How to Use both Scala and Python in a same Spark project?", "Remove a level from a pandas MultiIndex", "Python - Comparing two lists of sets", "Execute code when extending a class in Python", "Appium - Clean app state at the first test and last test, but not between tests", "Python function for rotating 2d objects", "Using regex to find a string starting with /team/ and ending with /Euro_2012", "Python TEA implementation", "Python: Getting all the items out of a `threading.local`", "How to add/remove said a curve to/from a plot in Python with Matplotlib", "Multiple Forms and Formsets in CreateView", "How to import cython function to cython script", "How to scrape table with different xpath on the same level with Scrapy?", "Pandas: transforming the DataFrameGroupBy object to desired format", "Convert a pandas dataframe in a transactional data format to a list - Python", "detecting POS tag pattern along with specified words", "Print from txt file", "Having large lists in main scripts, is there anyway to get it out of the main-script and into another module?", "call function through variable or without parentheses in python", "grouping an unknown number of arguments with argparse", "How can I find the right gaussian curve given some data?", "How to speed-up python nested loop?", "How to start at a specific step in a script?", "IronPython import two enums with the same name", "Remove following duplicates in a tuple", "Python: Append a list to an existing list assigned to a key in a dictionary?", "Python C API - How to construct object from PyObject", "numpy array slicing to avoid for loop", "How can a Python module single file be installed using pip and PyPI?", "How to strip a specific word from a string?", "To sum column with condition", "Read a dense matrix from a file directly into a sparse numpy array?", "Python Relating k-means cluster to instance", "Getting Every File in a Directory, Python", "two dimensional array for encryption in python", "Delete \"usr/lib/python2.7\" byMistake, how to fix it?", "find unique first top and bottom lines of fastq file from fasta file", "mongo - find items who at least match an array of values", "How to treat a hex as string?", "Print tree without recursion", "Ignoring unrecognized options when parsing argv?", "Exposing python daemon as a service", "Obtaining Client IP address from a WSGI app using Eventlet", "Python CSVkit compare CSV files", "python: how can I get a new value in round robin style every time i invoke the script", "Python regular expression to remove space and capitalize letters where the space was?", "Remove elements of one list from another, while keeping duplicates", "How to place a matplotlib plot into an html container using mpld3 and flask", "Search for a variable in a file and get its value with python", "Terminating subprocess in python", "Regular expressions matching across multiple line in Sublime Text", "Best way to Convert pairs of base 10 integers to ascii characters in python", "PyTables read random subset", "Filtering a model in Django based on a condition upon the latest child record", "Removing custom widget from QVBoxLayout", "How to connect QLineEdit focusOutEvent", "Insert tree kind of data taken from a database into a python dictionary", "How could I delete certain columns then write wanted columns into csv python", "Remembering Scroll value of a QTreeWidget in PyQt", "How do I take an integer from a list intending to use it?", "Abort a running task in Celery within django", "Updating a dict which is stored in an array", "Python sorting array according to date", "Log-sum-exp trick on a sparse matrix in scipy", "Best way to reset keys which expires in few minutes in python", "Python: Find a Sentence between some website-tags using regex", "Loading multiple images from a text file", "Is there a mercurial command which can generate a clone without largefiles?", "Comparing List and get indices in python", "How to get a list of the elements in TreeView? PyGtk", "Run multiple threads until one exits in python", "How to load_files and process a .txt file with scikit-learn?", "Dictionary from variables that may not be initialized", "How to check if elements of a list are in a string", "How to plot histogram of multiple lists?", "Pair combinations of elements in dictionary without repetition", "Iterating over related objects in Django: loop over query set or use one-liner select_related (or prefetch_related)", "Most efficient way to loop through multiple csv files and calculate NYSE tick", "Partial symbolic derivative in Python", "two dimensional array for encryption in python", "Creating a dictionary and adding a set as its value", "Pipe delimiter file, but no pipe inside data", "counting zigzag sequences", "making new column in pandas dataframes based on filter", "Python: Alter elements of a list", "Switching positions of two strings within a list", "Sum of all numbers inside a string", "Execute coroutine from `call_soon` callback function", "What is the standard way to add N seconds to datetime.time in Python?", "How to get the location of a Zope installation from inside an instance?", "Python how to strip white-spaces from xml text nodes", "Accept a single string instead of normal parameters", "Find difference between two multi dimensional lists", "What is the best practice to add tuples to a set?", "Cmd module '~' completion", "How to apply group by on data frame with neglecting NaN values in Pandas?", "Execute regex located in an external file in python", "Remove unwanted commas from CSV using Python", "python construct a dictionary {0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,999: [9, 9, 9]}", "How should I subtract two dataframes and in Pandas and diplay the required output?", "How to find a index of an item in a string?", "Django User Model one-to-one with other model and Forms", "Growing matrices columnwise in NumPy", "Combine variable and for each loop python", "Download a file and push into MySQL without timing out in Python", "SQLAlchemy (sql) conditionnal query", "Delete files with python through OS shell", "Take dot product of first and middle entry, second and middle+1 entries until middle-1 and last entry python/numpy", "How to create LinkExtractor rule which based on href in Scrapy", "Reading/Writing out a dictionary to csv file in python", "Vectorized construction of DatetimeIndex in Pandas", "Python code for counting number of zero crossings in an array", "How to send cookie with scrapy CrawlSpider requests?", "Pythonic way of comparing all adjacent elements in a list", "Fill scipy / numpy matrix based on indices and values", "Proxy Check in python", "Custom sort python", "Using a string as a variable name", "How to merge item in list", "How do I collapse categorical data into a single record in R or Python?", "Merge CSVs using Python (or Bash)", "Filtering histogram edges and counts", "How to create a double dictionary in Python?", "remove newline and whitespace parse XML with python Xpath", "Compare two lists in python and print the output", "How do you @rpc _returns polymorphic types in spyne?", "Creating a correlation plot with matplotlib", "Creating a Distance Matrix?", "How to apply parameters/for loop", "numpy get values in array of arrays of arrays for array of indices", "Get the indicies of a dataframe to use on a list", "regex condition that returns only if a \" [word]\" does not trail at the end", "How to sort an itertools grouper array in python", "Sort Python Dictionary by first four characters in Key", "using key presses instead of buttons in django forms", "OR style permissions for DjangoRestFramework", "python csv to dictionary columnwise", "Is there a way to create a subplot that contains plots created inside functions?", "Sorting an array by a number string (Python 3.4.2)", "Save matches on array", "Extracting text from webpage, processing with Perl/Python, then rebuilding the page with links added", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "How to recursively sum and store all child values in a tree", "How do I use BeautifulSoup to move tag contents from one soup to a template soup", "Using selenium at hosted app?", "How to convert dictionary into string", "Scrapy - Follow RSS links", "Grouping data in a list of of dicts", "How to set the alpha value for each element of a numpy array", "removing first four and last four characters of strings in list, OR removing specific character patterns", "Converting string to datetime object in Python (GAE)?", "mongo - find items who at least match an array of values", "get function names from a list python", "Get last \"column\" after .str.split() operation on column in pandas DataFrame", "Trying to do left outer joins to two related tables", "eliminate malformed records from a large .csv file", "Get last \"column\" after .str.split() operation on column in pandas DataFrame", "Multidimensional array in Python", "How can I send an MMS via a GSM/GPRS modem connected to a linux computer?", "Parsing an equation with custom functions in python", "Transform QuadgramCollationFinder into PentagramCollationFinder", "Getting specific field from chosen Row in Pyspark DataFrame", "Get ALL results of a word mapping with a dictionary", "Creating a subplot instead of separate plots", "passing arrays with ctypes", "RQ - Empty & Delete Queues", "How can you bundle all your python code into a single zip file?", "make python wait for stored procedure to finish executing", "Is there a way to sandbox test execution with pytest, especially filesystem access?", "How to get only even numbers from list", "How many factors in an integer", "How to replace Python function while supporting all passed in parameters", "python - how to get the numebr of active threads started by specific class?", "List Comprehensions - How to have strings and integers in one list?", "Pandas dataframe - transform column values into individual columns", "How to import classes defined in __init__.py", "Element-wise constraints in scipy.optimize.minimize", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Opening a text file and then storing the contents into a nested dictionary in python 2.7", "Python socket send EOF", "How do you check when a file is done being copied in Python?", "sum two lists element-by-element in python recursively", "Finding groups of increasing numbers in a list", "How to count occurrences of specific element for arrays in a list?", "Scipy rotate and zoom an image without changing its dimensions", "Python: How to time script from beginning to end?", "How to remove a column from a structured numpy array *without copying it*?", "Using a global flag for python RegExp compile", "Create a list property in Python", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "how to set the buttons size inside a spinner in kivy?", "index by comparision of two numpy arrays in python", "Choose a file starting with a given string", "Accessing an additional profile from templates", "Two windows: First Login after that main program", "How do I add a method to a class from a third-party Python module without editing the original module", "How to find the list in a list of lists whose sum of elements is the greatest?", "Beautiful Soup [Python] and the extracting of text in a table", "Generate random numbers without using the last n values in Python", "Creating a pygtk text field that only accepts number", "how to find the line number where specific text exists?", "renaming pcraster mapstack", "How to determine if a decimal fraction can be represented exactly as Python float?", "Remove following duplicates in a tuple", "iterating over list of string and combining string values Python", "How to extend model on serializer level with django-rest-framework", "How to separate a single list into multiple list in python", "How to separate a single list into multiple list in python", "Extract text from webpage using either Python or Applescript", "SCons to generate variable number of targets", "Prepend line to beginning of a file", "What's the most efficient way to accumulate dataframes in pyspark?", "Scipy: Centroid of convex hull", "Pandas count number of elements in each column less than x", "List of distinct XML element names using BeautifulSoup", "Python handling newline and tab characters when writing to file", "On using a string as an integer counter (aka index) in a for loop", "Check Type: How to check if something is a RDD or a dataframe?", "Getting a pdf from scipy.stats in a generic way", "Identifying price swings/trends in pandas dataframe with stock quotes", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Numpy mean AND variance from single function?", "Evaluate multiple variables in one 'if' statement?", "Partitioning a set of values in Python", "removing excess spaces from a string (and counting them)", "What does a class need to implement in order to be used as an argument tuple?", "How to add regression functions in python, or create a new regression function from given coefficients?", "Changing prompt working directory via Python script", "How can I get a Tuple from a list in python (3.3)", "What is a clean, pythonic way to have multiple constructors in Python?", "R's relevel() and factor variables in linear regression in pandas", "What is the idiomatic way of invoking a list of functions in Python?", "check if variable is dataframe", "How to send image generated by PIL to browser?", "How to perform a 'one-liner' assignment on all elements of a list of lists in python", "Python - removing items from lists", "Modify a python script with bash and execute it with the changes", "Obtaining the combination of elements in a dictionary", "How to count number of repeated keys in several dictionaries?", "Python BeautifulSoup get text from HTML", "Efficiently displaying a stacked bar graph", "How to deal with special characters in make command expansion?", "Python, using BeautifulSoup parsing values from a table", "What's the convinient way to evaluate multiple string equality in Python?", "Python .csv writer", "Use Python zip to save data in separate columns from a binary file", "Match multiple lines in a file using regular expression python", "Python - lexical analysis and tokenization", "PyQt change element in .ui file", "How to post an image in Python just like byte array in Java?", "Python - read BeautifulSoup snippet by row? (or other ways of scraping the data I want)", "Obtaining the combination of elements in a dictionary", "Numpy: get the column and row index of the minimum value of a 2D array", "Stop a command line command in script", "talking between python tcp server and a c++ client", "Ensuring that my program is not doing a concurrent file write", "Finding All Defined Functions in Python Environment", "Test subclass behaviour?", "accumulating an orderedDict", "SQLite Python printing in rows?", "how to dynamically read a specific cell value in a table using selenium and python", "Convert pandas datetime objects", "combining python watchdog with multiprocessing or threading", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "making binned boxplot in matplotlib with numpy and scipy in Python", "Timeout function in Python", "Create a summary Pandas DataFrame using concat/append via a for loop", "Python Find n words before and after a certain words", "Creating a boost::python::object from a std::function", "How to obtain values of request variables using Python and Flask", "how to forward fill non-null values in a pandas dataframe based on a set condition", "How to define multi-company-aware models in OpenERP", "Making use of piped data in python", "Django get list of models in application", "removing \"()\" using python", "Parsing multilevel text list", "Python: Decode base64 multiple strings in a file", "How to select QTableView index or row from inside of Model", "Python: output for recursively printing out files and folders", "Copying the contents of a variable to the clipboard", "How can I find the average of each similar entry in a list of tuples?", "How to combine SQLAlchemy's @hybrid_property decorator with Werkzeug's cached_property decorator?", "How to find and select a table in html code with xpath", "python create empty object of arbitrary type?", "PyPI API - How to get stable package version", "Execute a string as a command", "updating metadata for feature classes programatically using arcpy", "Remove punctuation from Unicode formatted strings", "What is the best way to fetch/render one-to-many relationships?", "How to check if an element is in a nested list?", "Get ALL results of a word mapping with a dictionary", "Python Tkinter GUI Frame: How to call a class method from inside a function of another class?", "replacing appointed characters in a string in txt file", "python + auto ssh proccess to get date info", "Grouping and Computing Frequency ,Pandas", "What would be a good regexp for identifying the \"original message\" prefix in gmail?", "How to override OSX's version of numpy when I import in Python 2.7?", "How to remove an array containing certain strings from another array in Python", "List to nested dictionary in python", "Align LaTeX math text in matplotlib text box", "Sorting a list of list of tuples based on the sum of first field in the tuple in Python", "How do I sort objects inside of objects in JSON? (using Python 2.7)", "How can I quickly compare a list and a set?", "Convert this python dictionary into JSON format?", "Converting list of dictionaries to unique list of dictionaries", "Combine multidimensional array by group python", "Generate nested dictionary with list and dict comprehensions", "Remove rows from data: overlapping time intervals?", "Find empty or NaN entry in Pandas Dataframe", "Large point-matrix array multiplication in numpy", "Pair combinations of elements in dictionary without repetition", "How to change a DateTimeIndex in a pandas dataframe to all the same year?", "Multidimensional array in Python", "How to parse the header files of the pcap file?", "parse blocks of text from text file using Python", "Python argparser. List of dict in INI", "Custom Hadoop Configuration for Spark from Python (PySpark)?", "Python3 Rename files in a directory importing the new names from a txt file", "How to make a test function using pytest", "Default window colour Tkinter and hex colour codes", "How to input a line word by word in Python?", "GMail API - Get last message of a thread", "How to search & replace in Python?", "Waf: How to output a generated file?", "Proper way to destroy a file chooser dialog in pygtk for python", "What is the idiomatic way of invoking a list of functions in Python?", "Given an iterable, how to apply a function in every possible combination?", "How to count how many positions away an element is in a list?", "How to get python dictionaries into a pandas time series dataframe where key is date object", "Pythonic solution for conditional arguments passing", "Scrapy - Follow RSS links", "Python - Twisted, Proxy and modifying content", "Group counted words in python", "Numpy loadtxt load every other column", "Split string into array with many char pro items", "Creating a palindrome list with reverse()", "Key Value For Loop Template - Django Inquiry", "Converting separate functions into class-based", "GIMP Python-fu nested group layers", "Get Nodes from xml by specifying limit", "XPATH: If there is element with certain value assume \"phone\" then get it's sibling value", "Django app deployment on nGINX", "Print two report in Odoo8", "Adding information from one file to another, after a specific action", "grouping values for grammar generation in python", "Finding matching submatrices inside a matrix", "TensorFlow Resize image tensor to dynamic shape", "how to do an embedded python module for remote sandbox execution?", "python multiple 'for' statement in one row", "Switch between assignments to different variables in python? With ternary operator?", "Mongoengine filter query on list embedded field based on last index", "Put all files with same name in a folder", "Nested Regular Expression in Python for", "Averaging out sections of a multiple row array in Python", "Arranging keys and values from a dictionary in a csv file - Python", "Execute code when extending a class in Python", "Python 3 concurrent.futures and per-thread initialization", "Executing Ipython Script from System Shell", "Python regular expression to remove space and capitalize letters where the space was?", "Customizing time of the datetime object in python", "Python PyQt QWebView load site in clicked tab", "Is there a better way to convert from decimal to binary in python?", "Initiating TCP Client after running reactor.run()", "python, how to run commands on remote hosts and show output in GUI in real time?", "Python: Opening a file within a print() function", "More numpy way of iterating through the 'orthogonal' diagonals of a 2D array", "Remove word extension in python", "Can I use one import and expose keywords from multiple python libraries?", "How to make array of array of dictionaries in python", "evaluating values of a dictionary", "Python Django how to rotate image and remove black color?", "Base-2 (Binary) Representation Using Python", "Python reshape list to ndim array", "Sort Python list by dict key,value", "Append in each line of a .txt file a specific string using Python", "Beautiful Soup - Class contains 'a' and not contains 'b'", "Python - Print a value without intterupting a loop/function", "Python time measure function", "Converting json to html table in python", "Secure MySQL login data in a Python client program", "Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?", "Python identify in which interval the numbers are", "How to calculate the value of the sum of squares defined as 1^2 + 2^2 + 3^2 + ... +n2 until a user specified sum has been reached", "A list as a key for PySpark's reduceByKey", "Localized random points using numpy and pandas", "Comparing two pandas dataframes for differences", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "How to pass variable arguments from bash script to python script", "Detecting geographic clusters", "regex/python to find and replace specific number within string", "How to avoid '\\n' and '\\t' escaping sequence when string is assigned to a variable", "How to perform re substitutions on <p> tags within a specific class?", "Data structure for UDP Server parsing JSON objects in python", "Python: Scrape Data from Web after Inputing Info", "how do i turn for loop iterator into a neat pythonic one line for loop", "Python - Plot function over a range PYPLOT", "Is there an easy way to parse an HTML document and remove everything except a particular table?", "PANDAS: merging calculated data in groupby dataframe into main dataframe", "single line if statement - Python", "Parsing through a file", "Collect values of pandas dataframe column A if column B is NaN (Python)", "Iterator for each item in a 2D Python list and its immediate m by n neighbourhood", "Scrapy:newbie attempts to pass the null value", "How to print framed strings", "List all RGBA values of an image with PIL", "Is there a better way to convert from decimal to binary in python?", "Update dictionary in xml from csv file in python", "Sorting data from a csv alphabetically, highest to lowest and average", "Recreating builtin s.find('substring') function", "Insert tree kind of data taken from a database into a python dictionary", "Invoking top-level function by name in Python", "Log-sum-exp trick on a sparse matrix in scipy", "How to log in to a website with urllib?", "Extract html cell data XPath", "Pandas, Filling between dates with average change between previous rows", "Convert column elements to column name in pandas", "lxml etree find closest element before", "Creating a table out of data in python", "Insertions algorithm in sequence python", "Syntax - saving a dictionary as a csv file", "parse list of tuple in python and eliminate doubles", "Calling/Passing dictionary objects in python", "Pandas check for future condition by group", "making binned boxplot in matplotlib with numpy and scipy in Python", "authentication in python script to run as root", "python BeautifulSoup how get values between tags?", "Pandas Dataframe row by row fill new column", "How to align and compare two elements (sequence) in a list using python", "Sum grouped Pandas dataframe by single column", "How to find shortest path for raw data", "Faster alternative to for loop in for loop", "How to make a time object TZ aware without changing the value?", "Python selenium and fuzzy matching", "How to get console output printed using kivy", "Set global constant cross all the view", "How to split a byte string into separate bytes in python", "Deleting consonants from a string in Python", "Python Class Based Decorator with parameters that can decorate a method or a function", "numpy multidimensional indexing and diagonal symmetries", "How to convert pandas single column data frame to series or numpy vector", "XOR neural network backprop", "How do I calculate the numeric value of a string with unicode components in python?", "Plot multiple y-axis AND colorbar in matplotlib", "How can I set a true/false variable with if?", "making binned boxplot in matplotlib with numpy and scipy in Python", "Build slice objetcs from subscript notation", "append csv files on column basis", "call function through variable or without parentheses in python", "generate lists from 3 dimensional array", "flask/jinja: creating a leaderboard out of an unordered dict object", "Python replace year mentions like '85 with 1985", "Remove duplicate, remove certain letters from line if found", "Converting list of dictionaries to unique list of dictionaries", "Grammar rule extraction from parsed result", "Can I override a C++ virtual function within Python with Cython?", "getting pixels value in a checkerboard pattern in python", "Updating a TKinter GUI from a multiprocessing calculation", "Pandas dataframe : Multiple Time/Date columns to single Date index", "How to search a string with the url patterns in django?", "how to sort a list of string by every element's numeric value", "Comparing items in large list - finding items differing in 1 letter by length - Python", "Open file, read it, process, and write back - shortest method in Python", "insert into sqlite table with unique column", "Selecting rows with similar index names in Pandas", "Obtain x'th largest item in a dictionary", "Is it possible to pass the evaluated result of one template tag as a parameter to another tag?", "Special End-line characters/string from lines read from text file, using Python", "Extract links for certain section only from blogspot using BeautifulSoup", "Pick values only below a certain threshold", "How to split a string by a string except when the string is in quotes in python?", "Truncating multi-indexed dataframe", "regular expression matching everything except a given regular expression", "More pythonic way to find a complementary DNA strand", "How do I zip the contents of a folder using python (version 2.5)?", "Finding time intervals per day from a list of timestamps in Python", "Search for a key in a nested Python dictionary", "In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?", "Remove following duplicates in a tuple", "accessing files in a folder using python", "Choosing a box of data points from a plot", "Specific font_face based on syntax in Sublime Text 2", "How to print different results to a screen and to a file in python?", "MongoDB data Posting", "How to print from itertools count object?", "Python: Read whitespace separated strings from file similar to readline", "How do you get a directory listing sorted by creation date in python?", "Cycling through possible indentations in python.el in Emacs", "how to convert UTF-8 code to symbol characters in python", "In IPython how do I create aliases for %magics?", "Returning all keys that have the same corresponding value in a dictionary with python", "How to incrementally sample without replacement?", "Writing to separate columns instead of comma seperated for csv files in scrapy", "Get permutation with specified degree by index number", "Delete newline / return carriage in file output", "Merge every Every 6 dictionary into single dictionary of List", "Efficiently Removing Very-Near-Duplicates From Python List", "Base-2 (Binary) Representation Using Python", "csv to sparse matrix in python", "Iterator for all lexicographically ordered variable strings up to length n", "Get permutation with specified degree by index number", "Remove single quotes from python list item", "How to store a name and score into a list?", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "How to add a another value to a key in python", "Sort Python list by dict key,value", "Loop through dictionary with django", "In Python how do I parse the 11th and 12th bit of 3 bytes?", "Rendering requested type in Tornado", "How calculate the global coverage?", "Python: Binning one coordinate and averaging another based on these bins", "numpy tile without memory allocation", "What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?", "Loop URL to scrape using beautiful soup python", "Selenium Python select the link from 3rd column from a table", "is there a way to change the return value of a function without changing the function's body?", "Find nested sub-classes in a class in the order they're defined", "How can I find all subclasses of a given class in Python?", "Modifying HTML using python html package", "Sort list with multiple criteria in python", "urllib2 multiple Set-Cookie headers in response", "in python, how to manipulate namespace of an instance", "How can I keep the indentation between lines?", "How to generate combination of fix length strings using a set of characters?", "Remove outer list from list of list in python", "reinterpret signed long as unsigned in Python", "Pythonic way to split comma separated numbers into pairs", "Pandas -- how to iterate through a list of dates which filter a DataFrame", "Return rows only if all items of category are True", "Multiple drag and drop in PyQt4", "Python; Search and Replace; Lists; Strings", "Rolling mean with customized window with Pandas", "How to plot real-time graph, with both axis dependent on time?", "Numpy union arrays in order", "Python string extraction from Subprocess", "Extracting URL parameters into Pandas DataFrame", "Python: multidimensional array masking", "Computing 16-bit checksum of ICMPv6 header", "Replacing two elements of a list in place with a function [python 3]", "vectorized implementation for pseudo pivot table in python", "Pygame draw anti-aliased thick line", "Name of Current App in Google App Engine (Python)", "recursively (or non-recursively) iterating through python array and get the elements", "How to pivot/cross-tab data in Python 3?", "How to convert a GEOS MultiLineString to Polygon using Python?", "Sort generated numbers using another python generator", "Compare string in format HH:MM to time now in python", "Most efficient way to delete needless newlines in Python", "Pandas: How to extract rows of a dataframe matching Filter1 OR filter2", "Python: Append dictionary in another file", "Finding a parent key from a dict given an intermediate key using python", "Extracting a feature by feature name in scikit dict vectorizer", "Python list to txt", "How to get parameter arguments from a frozen spicy.stats distribution?", "How to convert a string that already looks like a list into a list?", "How to get a vector from a list in list in python?", "Python regular expression: get result without the search string used", "Removing repetitive lists in a list of list", "Connect to MSSQL Server 2008 on linux", "how to show each element of array separately", "Django URL matching any 140 characters", "Iterating through large lists with potential conditions in Python", "making new column in pandas dataframes based on filter", "Breaking up substrings in Python based on characters", "getting pixels value in a checkerboard pattern in python", "Authentication to use for user notifications using Crossbar/Autobahn?", "Parse XML file into Python object", "Killing Thread and releasing memory in Python", "Opening and closing files in a loop", "Compare two lists in python and print the output", "How to update entire column with values in list using Sqlite3", "How do you @rpc _returns polymorphic types in spyne?", "How do I get python to search a csv file for items in a dictionary then print out the entire excel row...Thanks", "Reshape for array multiplication/division in python", "vectorize numpy unique for subarrays", "Display menu bar items of IE using Python", "Python - \"properly\" organise (spread out) x and y data", "Random rounding to integer in Python", "better way to find pattern in string?", "Persist and fetch data in with block", "Groupby in a list for python", "Installing OSQA on windows (local system)", "Selenium (Python): How to insert value on a hidden input?", "Customize sphinxdoc theme", "How to figure out if a word in spelled in alphabetical order in Python", "How do you create a list of values in Python within a certain range?", "Using multiple (similar) generator expressions", "How do I add space between two variables after a print in Python", "Numpy Array Rank All Elements", "Python: put all function arguments into **kwargs automatically", "How to make a Python function sleep some time while the rest of the game continues?", "Find the number of ways a sequence can be rearranged", "How to directly set RGB/RGBA colors in mayavi", "How to return both string and value within HttpResponse?", "Sqlalchemy: bulk correlated update to link tables", "Changing constraint naming conventions in Flask-SQLAlchemy", "print tuple as number of arguments", "Efficiently finding the shortest path in large graphs", "python help django navigation", "Passing list of parameters to SQL in psycopg2", "How to generalize a multiplication table for (n * m)", "How to print formatted python output for javascript?", "String manipulation in Python (All upper and lower case derivatives of a word)", "Loops to minimize function of arrays in python", "How to add date and time information to time series data using python numpy or pandas", "Most efficient way to delete needless newlines in Python", "retrieve the Package.Module.Class name from a (Python) class/type", "django-mptt get_descendants for a list of nodes", "Python pandas idxmax for multiple indexes in a dataframe", "Ordering a nested dictionary by the frequency of the nested value", "Allocate items according to an approximate ratio in Python", "Validity of a string based on some conditions", "How to add in a dictionary the values that have similar keys?", "recursive way to go through a nested list and remove all of a select value", "Date formate conversion in Python", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "How can i search a array from a large array by numpy", "change multiple lines in file python using regex", "Detecting geographic clusters", "Pythonic way of looping over variable that is either an element or a list", "Pyramid authorization for stored items", "Print out a large list from file into multiple sublists with overlapping sequences in python", "How to assign scipy.sparse matrix to NumPy array via indexing?", "Given an iterable, how to apply a function in every possible combination?", "How to print available tags while using Robot Framework", "writing csv output python", "Dynamic Table Creation and ORM mapping in SqlAlchemy", "Django Scheduled Deletion", "How to search a string with the url patterns in django?", "Recursively reduce list of tuples", "Django dynamic model fields", "Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?", "setting unique abbreviation for every column in python", "Sort a list based on a given distribution", "How to create a vector of Matrices in python", "How to read folder structure and assign it to datastructure?", "retrive minimum maximum values of a ctype", "Python: sort lists in dictonary of lists, where one list is a key to sorting", "Python: Effective reading from a file using csv module", "Removing certain letters from a string", "Order a NXM Numpy Array according to cumulative sums of each sub-array", "lxml findall div and span tags", "How to uniquefy a list of dicts based on percentage similarity of a value in the dicts", "Average inter signout time in pandas dataframe", "Using other keys for the waitKey() function of opencv", "Sort individual components of a list in python", "Track changes of atributes in instance. Python", "Django/jQuery: handling template inheritence and JS files loading", "building full path filename in python,", "How to insert a python program into a bash script?", "Search with employee_id in openerp?", "How do I index n sets of 4 columns to plot multiple plots using matplotlib?", "Load all third party scripts using requests or mechanize in Python", "For loop syntax in Python without using range() or xrange()", "Given two lists of strings, find the total number of strings in the second list which contains any string in the first list as substring", "How to match phone number prefixes?", "python for loop using lambda syntax", "Programming contest like input validator", "How do I define custom function to be called from IPython's prompts?", "Execute parsed xml data as command in python", "Using a loop to make a dictionary", "Python Regex: Optional White Space Around Matching Group", "Adding docstrings to namedtuples?", "How to separate upper and lower case letters in a string", "Django: css referencing media in static files (django dev / 1.3 / static files)", "Python - workaround with sets", "Split file and turn it into dictionary in python", "Python : How to create a dynamic list of class values", "wait() on a group of Popen objects", "Pandas: Get value of mutliple sorting/grouping query", "Sum of calculation in a variable", "define different function for different versions of python", "Remove duplicated string(s) in strings in a list", "Python: How to call a class in the same file", "Converting date using to_datetime", "How to import classes defined in __init__.py", "Selecting Tags With Multiple Part Class in BeautifulSoup", "Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?", "How to find and select a table in html code with xpath", "Python JSON serialize a Decimal object", "How to Get Variable from another .py", "Parse valid JSON object or array from a string", "How to count number of repeated keys in several dictionaries?", "numpy: most efficient frequency counts for unique values in an array", "Compare list w/ sublist", "How do I get Python2.x `map` functionality in Python3.x?", "Casting string/buffer data using swig wrapped typedef structs and enums in python", "Splitting a list in python", "Average multiple vectors of points of different lengths in python", "Can I group / aggregate elements in a list (or dict) comprehension?", "Plone - Override Zope Schema fields", "Insert data from one sorted array into another sorted array", "Most efficient way to delete needless newlines in Python", "How to write small DSL parser with operator module in python", "Installing OSQA on windows (local system)", "Pandas Dataframe: split column into multiple columns, right-align inconsistent cell entries", "Python array from CSV file", "Group counted words in python", "How to draw stacked histogram in pandas", "Get Nodes from xml by specifying limit", "Python: Alphanumeric Serial Number with some rules", "Remove namedtuple from list based on value", "pyplot: loglog() with base e", "Atomic increment of a counter in django", "How can I use python pandas to parse CSV into the format I want?", "Python multiline string - $ for variables", "openCV Thresholding negative values", "Comparing items in large list - finding items differing in 1 letter by length - Python", "Django dynamic model fields", "How to make a field computed only if some condition is fulfilled in Odoo 8?", "Dictionary As Table In Django Template", "How to use malloc and free with python ctypes?", "Python list comparison to create trees", "creating namedtuple instances with kwargs", "How to import cython function to cython script", "Getting stats about each row and putting them into a new column. Pandas", "Diagonals at different points of a 2D list in Python", "How to exit a supervisor process with fabric file?", "How to log e-mail details in AppEngine Admin console?", "List files in ONLY the current directory", "How to get the caller class name inside a function of another class in python?", "PySide custom Tab", "Using df.apply() with a Pandas MuliIndex / carrying out operations on hierarchical index rows?", "Python get get average of neighbours in matrix with na value", "Is there a reasonable way to add to dictionary values without importing libraries?", "Numpy union arrays in order", "Average inter signout time in pandas dataframe", "how can I have commas instead of space in a given set of number", "Converting string to datetime object in Python (GAE)?", "running through a loop and find a condition that match", "Uploading files using Django Admin", "Real Hierarchical Builds with SCons?", "Regular Expression (Python) to extract strings of text from inside of < and > - e.g. <stringone><string-two> etc", "How to do a screenshot of a tkinter application?", "regular expression using in glob.glob of python", "Make scatter plot from set of points in tuples", "How to convert a python string", "How to use PyBrain?", "Write average weather data from a year given by user to a text file", "Iterate through XML child of a child tags in Python", "openCV Thresholding negative values", "Remove a level from a pandas MultiIndex", "Django Scheduled Deletion", "Python list and time", "Array from interpolated plot in python", "Extarct particulr part of json string using python regex", "How to scrape the video src url from video tag which is injected via javascript?", "Require one out of two keyword arguments", "Make scatter plot from set of points in tuples", "Python & Beautifulsoup web scraping - select a paragraph with a specific child tag", "Optimizing time series generation", "Compare list w/ sublist", "Multiple Forms and Formsets in CreateView", "any python min like function which gives a list as result", "How to find the all text files from the path and combine all the lines in that text files to one text file", "Convert a pandas dataframe in a transactional data format to a list - Python", "repeat arange with numpy", "detecting POS tag pattern along with specified words", "Beautiful Soup - how to fix broken tags", "Having large lists in main scripts, is there anyway to get it out of the main-script and into another module?", "how do I concatenate 3 lists using a list comprehension?", "How to speed-up python nested loop?", "How to extract literal words from a consecutive string efficiently?", "How to start at a specific step in a script?", "Reading input from raw_input() without having the prompt overwritten by other threads in Python", "How do I sort a complex dictionary by a key, which resides deep the dictionary?", "Test if two lists of lists are equal", "alternate for multiple constructors", "Sort NumPy float array column by column", "Python C API - How to construct object from PyObject", "How can I get a list of package locations from a PIP requirements file?", "numpy array slicing to avoid for loop", "How to strip a specific word from a string?", "Selecting siblings from html with Python lxml(html) library", "customize django runserver output", "Gtk 3 python entry color", "python read files and stop when a condition satisfies", "Outputting Multi-row CSV Files from Multiple Dictionaries", "python- finding total number of items of certain range in a list", "recursively (or non-recursively) iterating through python array and get the elements", "pysvn: How to find out if local dir is under version control?", "Inserting a folder containing specific routes to a bottle application in Python", "sound way to feed commands to twisted ssh after reactor.run()", "Sampling keys due to their values", "Randomize a generator", "Exposing python daemon as a service", "Replace given line in files in Python", "How to insert arrays into a database?", "list comprehension on multiple lists of lists", "Python: obtain multidimensional matrix as results from a function", "How to determine tools chosen by waf?", "How to find out what methods, properties, etc a python module possesses", "minimize memory consumption when dealing with python list assignment", "python: access multiple values in the value portion of a key:value pair", "Django - access foreign key data in an annotated query", "Mimic curl in python", "how to do an embedded python module for remote sandbox execution?", "Pythonic way of comparing all adjacent elements in a list", "Terminating subprocess in python", "python restart the program after running a method", "How to make a Python function sleep some time while the rest of the game continues?", "Python: Loop through all nested key-value pairs created by xmltodict", "Create PDF from a list of images", "Convert utf string ftom python to javascript dictionary", "Removing custom widget from QVBoxLayout", "Python code for counting number of zero crossings in an array", "How could I delete certain columns then write wanted columns into csv python", "Creating a table out of data in python", "How do I take an integer from a list intending to use it?", "python multiprocessing dynamically created processes and pipes", "Parsing html for domain links", "Python: Extract hrefs inside a div", "Python: Find a Sentence between some website-tags using regex", "How can I assign scores to a list of datapoints and then output values > 2 standard deviations from the mean in python?", "Creating a Distance Matrix?", "Comparing List and get indices in python", "Scrapy: Passing item between methods", "Python: Append dictionary in another file", "Selecting a subset of functions from a list of functions in python", "Using lxml to extract data where all elements are not known in advance", "Proper way to organize testcases that involve a data file for each testcase?", "Most efficient way to loop through multiple csv files and calculate NYSE tick", "Creating a dictionary and adding a set as its value", "Pipe delimiter file, but no pipe inside data", "counting zigzag sequences", "How to generalize a multiplication table for (n * m)", "Django URL matching any 140 characters", "How to match integers in NLTK CFG?", "python- combining list and making them a dictionary", "Sum of all numbers inside a string", "pandas dataframe: return column that is a compression of other columns", "What is the standard way to add N seconds to datetime.time in Python?", "Data structure for UDP Server parsing JSON objects in python", "Python: Converting Unicode code point filenames to strings", "Accept a single string instead of normal parameters", "Find difference between two multi dimensional lists", "regular expression using in glob.glob of python", "Pandas: Collapse first n rows in each group by aggregation", "Elegant way to split list on particular values", "How to convert string timezones in form (Country/city) into datetime.tzinfo", "Efficiently Removing Very-Near-Duplicates From Python List", "How to flexibly change PYTHONPATH", "Randomize a generator", "Find k smallest pairs in two lists", "python construct a dictionary {0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,999: [9, 9, 9]}", "Passing argument to python which is half \"<direct string>\" and half value of a variable", "How to find ngram frequency of a column in a pandas dataframe?", "Growing matrices columnwise in NumPy", "python 3: Adding .csv column sums in to dictionaries with header keys", "convert xlsx files to xls inside folders and subfolders in Excel VBA or Python", "Grouping data in a list of of dicts", "How do I run python file without path?", "Python Version Specific Code", "sound way to feed commands to twisted ssh after reactor.run()", "Reading/Writing out a dictionary to csv file in python", "Python \u2014 Randomly fill 2D array with set number of 1's", "different foreground colors for each line in wxPython wxTextCtrl", "Python - sum variables from a text file", "Find and replace a string in Python", "Removing repetitive lists in a list of list", "Pythonic way of looping over variable that is either an element or a list", "Set a kind name independently of the model name (App Engine datastore)", "creating a wxpython scrolled window (frame) by an event", "How to merge item in list", "sklearn decomposition top terms", "parse blocks of text from text file using Python", "Using Numba to improve finite-differences laplacian", "How to arrange the order of data and file using requests to post multipart/form-data?", "What's an easy and fast way to put returned XML data into a dict?", "Is there an efficient way to fill date gaps in python?", "Log-sum-exp trick on a sparse matrix in scipy", "Getting Variable from Applescript and using in Python", "Creating a correlation plot with matplotlib", "How to write small DSL parser with operator module in python", "How to convert text from a file into a list in Python?", "Escape string to be valid python expression", "Python loop through string in nested for loops", "Accessing a Dynamically Generated Nested Dictionary", "regex condition that returns only if a \" [word]\" does not trail at the end", "How to call __setattr__() correctly in Python3 as part of a class?", "Python: Binning one coordinate and averaging another based on these bins", "How to build a nested list from a flat one in Python?", "How to remove lines in a Matplotlib plot", "using key presses instead of buttons in django forms", "Get specific data from a .json file and save them to a 2D matrix/dictionary in python", "executing Python script in PHP and exchanging data between the two", "How to chain django query filters to conditionally filter by certain criteria", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "Convert a 3D array to 2D array based on dictionary", "How do I use BeautifulSoup to move tag contents from one soup to a template soup", "Replace given line in files in Python", "Finding minimum and maximum value for each row, excluding NaN values", "Python3 Rename files in a directory importing the new names from a txt file", "python - how to convert a nested list to a list of all individual sub-lists", "Splitting Strings in Python with Separator variable", "How can you bundle all your python code into a single zip file?", "Extend Python list \"inline\"", "Looking for a concise way to check for point collision in a list of Rects", "Find all combinations of letters, selecting each letter from a different key in a dictionary", "Use map over a list of 50 generated colours to count, using filter, and reduce, or len, the frequency of occurence", "Beautiful Soup [Python] and the extracting of text in a table", "Splitting a list of lists and strings by a string", "Jinja2 to put a whole element in <option>", "eliminate malformed records from a large .csv file", "How to get the 'cardinal' day of the year in Pandas?", "Skip unittest test without decorator syntax", "Assign differing values to list generator results", "Python CSVkit compare CSV files", "python list manipulation nesting vertically, making it look like a matrix", "Running infinite loops using threads in python", "Transform QuadgramCollationFinder into PentagramCollationFinder", "Getting specific field from chosen Row in Pyspark DataFrame", "remove the unicode from the output of JSON using scrapy", "What's the most efficient way to accumulate dataframes in pyspark?", "passing arrays with ctypes", "RQ - Empty & Delete Queues", "Python - lexical analysis and tokenization", "(python) prepend script dir to a path", "make python wait for stored procedure to finish executing", "Set global constant cross all the view", "Storing a directed, weighted, complete graph in the GAE datastore", "How many factors in an integer", "stdout from python to stdin java", "how to iterate over all files in path?", "Universally create Derived class from Base in python", "List Comprehensions - How to have strings and integers in one list?", "How to find shortest path for raw data", "Replacing strings in specific positions into a text and then rewriting all the text", "How to access members of an rdf list with rdflib (or plain sparql)", "class name as variable in python", "Skip unittest test without decorator syntax", "How do you get a directory listing sorted by creation date in python?", "removing excess spaces from a string (and counting them)", "Pythonic way to split comma separated numbers into pairs", "Finding groups of increasing numbers in a list", "How to append the second return value, directly to a list, in Python", "Generate permutations of a list of lists with variable lengths", "How to remove/omit smaller contour lines using matplotlib", "how to get content inside CDATA of XML tag django", "Convert column elements to column name in pandas", "How to remove a column from a structured numpy array *without copying it*?", "Pandas: add dataframes to dataframe - match on index and column value", "Create a list property in Python", "Converting dictionary of dictionary of dictionary to pandas data frame", "Counting observations after grouping by dates in pandas", "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]", "Two windows: First Login after that main program", "Lazy Method for Reading Big File in Python?", "python periodic looping idiom?", "Call method in a class which called the current class", "In Django, how could I in a single query get total row count based on distinct field values?", "Creating a pygtk text field that only accepts number", "Is there a pythonic way to support keyword arguments for a memoize decorator in Python?", "renaming pcraster mapstack", "Python - Split a list of integers into positive and negative", "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?", "How do you @rpc _returns polymorphic types in spyne?", "iterating over list of string and combining string values Python", "Python: Apply function to values in nested dictionary", "Indexing pandas dataframe to return first data point from each day", "How to define multi-company-aware models in OpenERP", "Applying a function by bins on a vector in Numpy", "Convert dataFrame to list", "finding nearest points in python", "How do you read in a text (.txt) file as a .py file in Python 2.7?", "Pandas count number of elements in each column less than x", "List Slicing python", "Delete newline / return carriage in file output", "On using a string as an integer counter (aka index) in a for loop", "how to interpolate points in a specific interval on a plot formed by loading a txt file in to scipy program?", "Python: How to remove a list containing Nones from a list of lists?", "numpy random numpers in specified shape of any complexity", "Get list from server and print each element surrounded by span tag", "Identifying price swings/trends in pandas dataframe with stock quotes", "Python: Automatically initialize instance variables?", "Using descriptor class to raise RuntimeError when user tries to change object's value", "Spawning a thread in python", "Partitioning a set of values in Python", "Given an iterable, how to apply a function in every possible combination?", "Changing prompt working directory via Python script", "Parallelize DictVectorizer Creation", "How can I get a Tuple from a list in python (3.3)", "Wxpython closing windows", "R's relevel() and factor variables in linear regression in pandas", "Interpolating 3d data at a single point in space (Python 2.7)", "check if variable is dataframe", "different foreground colors for each line in wxPython wxTextCtrl", "How to perform a 'one-liner' assignment on all elements of a list of lists in python", "Usng the value of a string as a variable name", "Python Sum of Squares Function", "Insert values in lists following a pattern", "Vectorize this function in Numpy Python", "What is the best way to fetch/render one-to-many relationships?", "Finding the exponent of n = 2**x using bitwise operations [logarithm in base 2 of n]", "How to do a groupby of a list of lists", "Get object attribute in class based view", "Even number check without: if", "How do you check when a file is done being copied in Python?", "How to filter results of a groupby in pandas", "pandas: Rolling correlation with fixed patch for pattern-matching", "Match multiple lines in a file using regular expression python", "Convert utf string ftom python to javascript dictionary", "Pandas Compute Unique Values per Column as Series", "How to post an image in Python just like byte array in Java?", "Saving an Element in an Array Permanently", "Python Joining csv files where key is first column value", "Splitting a list of lists and strings by a string", "Multiple drag and drop in PyQt4", "Numpy: get the column and row index of the minimum value of a 2D array", "expose C++ function to python", "How can I store data to a data dictionary in Python when headings are in mixed up order", "Applying a function by bins on a vector in Numpy", "Python, remove specific columns from file", "Ensuring that my program is not doing a concurrent file write", "Python selenium and fuzzy matching", "Generate nested dictionary with list and dict comprehensions", "SQLite Python printing in rows?", "Python array from CSV file", "how to dynamically read a specific cell value in a table using selenium and python", "Deleting consonants from a string in Python", "Create a summary Pandas DataFrame using concat/append via a for loop", "Summarize a list of dictionaries based on common key values", "How to parse the header files of the pcap file?", "Python Decorator 3.0 and arguments to the decorator", "Create a game configuration/options (config.cfg) file in Python", "How to obtain values of request variables using Python and Flask", "Visual module in python assign objects", "How do I make a function to accept an argument that is another function?", "EPSG:900913 to WGS 84 projection", "How to input a line word by word in Python?", "Parsing multilevel text list", "How to treat a hex as string?", "transpose/rotate a block of a matrix in python", "How to select QTableView index or row from inside of Model", "Copying the contents of a variable to the clipboard", "How can I find the average of each similar entry in a list of tuples?", "calculate distance between two chains in PDB file", "python create empty object of arbitrary type?", "Trying to convert HSV image to Black and white [opencv]", "How to search a string with the url patterns in django?", "Sending email with html in Django 1.7", "How do I count the number of identical characters in a string by position using python?", "What is the best way to fetch/render one-to-many relationships?", "optparse(): Input validation", "Chunking bytes (not strings) in Python 2 and 3", "Python Tkinter GUI Frame: How to call a class method from inside a function of another class?", "A PYTHONSTARTUP file for a specific directory", "List database tables with SQLAlchemy", "What would be a good regexp for identifying the \"original message\" prefix in gmail?", "Detecting geographic clusters", "Is there a pythonic way to support keyword arguments for a memoize decorator in Python?", "Add fields and correct indentation for json file (using python or ruby)", "Adding information from one file to another, after a specific action", "Base-2 (Binary) Representation Using Python", "Return the largest value of a given element of tuple keys in a dictionary", "Using lxml to extract data where all elements are not known in advance", "Printing a two dimensional list", "Python: List comprehension list of lists", "Removing word and replacing character in a column of strings", "Initiating TCP Client after running reactor.run()", "Getting value of a class in selenium and python", "Drawing window border in Python xlib", "Python: sharing a list between threads", "how to write two elements into one row in Python", "Applying sqrt function on a column", "How to send audio wav file generated at the server to client browser?", "Python 3 concurrent.futures and per-thread initialization", "Pandas: transforming the DataFrameGroupBy object to desired format", "Is there a mercurial command which can generate a clone without largefiles?", "Test subclass behaviour?", "Multidimensional array in Python", "How to run executable from python and pass it arguments asked for?", "single line if statement - Python", "Python argparser. List of dict in INI", "I dont know how to add Proxy to my Phantomjs script", "Specifying types and patterns using argparse choices", "csv to sparse matrix in python", "Python Boto List Storage Devices Attached to Instance", "How to search & replace in Python?", "Switch between assignments to different variables in python? With ternary operator?", "Waf: How to output a generated file?", "Convert column elements to column name in pandas", "How to Chage selection field automaticaly in odoo", "Using Python Iterparse For Large XML Files", "A simple looping command In Python", "How to make unique combinations of the following list of tuples", "Unique duplicate rows with range", "Pythonic solution for conditional arguments passing", "Add django model manager code-completion to Komodo", "Python - Twisted, Proxy and modifying content", "How can I check if a string has the same characters? Python", "updating metadata for feature classes programatically using arcpy", "Export Pandas data frame with text column containg utf-8 text and URLs to Excel", "Combine multidimensional array by group python", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "List Highest Correlation Pairs from a Large Correlation Matrix in Pandas?", "GIMP Python-fu nested group layers", "Python - dataframe conditional index value selection", "Print two report in Odoo8", "How to sort python dictionary based on similar values and keys?", "HTML data from Beautiful Soup needs formatting", "How to write defaultdict in more pythonic way?", "how to properly loop through two files comparing strings in both files against each other", "how do i turn for loop iterator into a neat pythonic one line for loop", "python multiple 'for' statement in one row", "How can I use a pre-made color map for my heat map in matplotlib?", "Mongoengine filter query on list embedded field based on last index", "Adding docstrings to namedtuples?", "Put all files with same name in a folder", "How to loop through object return by SQLALchemy and process each row and display it to HTML", "get characters from string in python", "In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?", "Arranging keys and values from a dictionary in a csv file - Python", "Parse multi-line string up until first line with certain character", "Counting observations after grouping by dates in pandas", "Creating multiple copies of list elements", "Abaqus: script to select elements on a surface", "any python min like function which gives a list as result", "Python PyQt QWebView load site in clicked tab", "finding index of an item closest to the value in a list that's not entirely sorted", "Python Relating k-means cluster to instance", "Network capturing with Selenium/PhantomJS", "Numpy drawing from urn", "Can I use one import and expose keywords from multiple python libraries?", "Python:how to get keys with same values?", "Finding superstrings in a set of strings in python", "Log-sum-exp trick on a sparse matrix in scipy", "Join list of dict with a dict in python", "setting a condition for a mixed list", "How to retain &quot; and &apos; while parsing xml using bs4 python", "matplotlib wireframe plot / 3d plot howTo", "Creating a table out of data in python", "Python: how to create a list from elements that don't meet a certain condition", "Render part of the template in Flask", "Syntax - saving a dictionary as a csv file", "Converting json to html table in python", "Secure MySQL login data in a Python client program", "Replace character in line inside a file", "How to calculate the value of the sum of squares defined as 1^2 + 2^2 + 3^2 + ... +n2 until a user specified sum has been reached", "How to remove all \"document.write(' ');\" with beautifulsoup", "Localized random points using numpy and pandas", "to get max number after concatenation in list", "Python (Maya) pass flags as variables", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "Python Create Combinations from Multiple Data Frames", "Get a value from a dictionary without linking to the memory location", "regex/python to find and replace specific number within string", "Changing an input from an integer to a string back to an integer", "Python Flatten Dataframe With Multiple Columns all n-length", "Check if all elements of one array is in another array", "Is there an easy way to parse an HTML document and remove everything except a particular table?", "Find selected features by RandomizedLogisticRegression", "PANDAS: merging calculated data in groupby dataframe into main dataframe", "python string to date ISO 8601", "How to *append* a text to a database file opened with shelve?", "Spawning a thread in python", "Deleting consonants from a string in Python", "How to create a new list or new line after a certain number of iterations", "Python-Getting contents between current and next occurrence of pattern in a string", "How to run Django management commands against Google Cloud SQL", "Communication between two gnome-terminal sessions", "List all RGBA values of an image with PIL", "String of list or strings to a tuple", "Is there a better way to convert from decimal to binary in python?", "Search and sort through dictionary in Python", "how to groupby pandas dataframe on some condition", "Splitting Strings in Python with Separator variable", "Recreating builtin s.find('substring') function", "XML <arg> value Replacement in Python", "Invoking top-level function by name in Python", "Python: Fastest way of parsing first column of large table in array", "Complete a task during certain time frames within a python script", "Solving 5 Linear Equations in Python", "How do I split items in a list (with delimiter) within a list?", "What is the standard way to add N seconds to datetime.time in Python?", "How to print progress from this code as the subprocess is running?", "Search for a key in a nested Python dictionary", "Ordering a nested dictionary by the frequency of the nested value", "Django permissions mixin on CBV, how to apply on 'publish blog' method", "parse list of tuple in python and eliminate doubles", "Python transition matrix", "Pandas check for future condition by group", "Writing to a file in a for loop", "python BeautifulSoup how get values between tags?", "How to get a list of the elements in TreeView? PyGtk", "Pandas Dataframe row by row fill new column", "Sum grouped Pandas dataframe by single column", "Getting strings in between two keywords from a file in python", "Faster alternative to for loop in for loop", "How to make a time object TZ aware without changing the value?", "variable length of %s with the % operator in python", "Update a Pyspark DF Column based on an Array in another column", "Set global constant cross all the view", "Iteration Through tuple of dictionaries in Python", "numpy multidimensional indexing and diagonal symmetries", "Add numpy array as column to Pandas data frame", "XOR neural network backprop", "Creating a dictionary and adding a set as its value", "How to make a continuous alphabetic list python (from a-z then from aa, ab, ac etc)", "Get last \"column\" after .str.split() operation on column in pandas DataFrame", "Exponential Decay on Python Pandas DataFrame", "Build slice objetcs from subscript notation", "recursive way to go through a nested list and remove all of a select value", "How to find the local minima of a smooth multidimensional array in NumPy efficiently?", "Need help detecting a change in a variable outside of a while loop", "How to search & replace in Python?", "Grammar rule extraction from parsed result", "strip ' from all members in a list", "How do I find the maximum amount of possible correct matches in these arrays?", "Attach callback to Counter() value", "Efficiently Removing Very-Near-Duplicates From Python List", "How can I find all subclasses of a given class in Python?", "Python: Getting all the items out of a `threading.local`", "Convert excel or csv file to pandas multilevel dataframe", "Drawing a clamped uniform cubic B-spline using Cairo", "Extract links for certain section only from blogspot using BeautifulSoup", "combining lists inside values in pyspark", "How to uniquefy a list of dicts based on percentage similarity of a value in the dicts", "Passing multple files with asterisk to python shell in Windows", "Generate random numbers without using the last n values in Python", "How to apply an array of functions to a value using list comprehension?", "iterating over list of string and combining string values Python", "Periodically execute function in thread in real time, every N seconds", "How to find the average of previous sales at each time in python", "Choosing a box of data points from a plot", "How do I print a sorted Dictionary in Python 3.4.3", "How to let js make a request from python and preserve the loaded site in place when answered by python", "Python: Read whitespace separated strings from file similar to readline", "Cycling through possible indentations in python.el in Emacs", "how to convert UTF-8 code to symbol characters in python", "In IPython how do I create aliases for %magics?", "Relating/adding data to a django object list", "how to print a dict which has japanese word using python ", "Create numpy array based on magnitude of difference between arrays", "Iteration Through tuple of dictionaries in Python", "For Kasiski Test,How to implement 26x26 table in Python", "Can you do regex with concordance?", "Writing to a specific column of a text file in python", "Python word length function example needed", "Generate random numbers without using the last n values in Python", "How to find a point (if any) on quadratic Bezier with a given tangent direction?", "How can I, on some global keystroke, paste some text to current active application in linux with Python or C++", "Loop through dictionary with django", "How to extract a file within a folder within a zip in python?", "Python - Print a value without intterupting a loop/function", "Splitting Strings in Python with Separator variable", "Rendering requested type in Tornado", "How calculate the global coverage?", "Creating an OrderedDict from a csv file", "How to print available tags while using Robot Framework", "Suppressing the output in libsvm (python)", "Loop URL to scrape using beautiful soup python", "getting pixels value in a checkerboard pattern in python", "Iterating over a list while incrementing another variable at the same time", "Using np.searchsorted to find the most recent timestamp", "Making a python iterator go backwards?", "urllib2 multiple Set-Cookie headers in response", "python mock patch top level packages", "How does python prevent a class from being subclassed?", "Concat every 4 strings from a list?", "Sun Grid Engine, force one job per node", "How to xor in python using hex", "Convert a string with whitespaces to a dataframe with desired dimensions in Python", "reinterpret signed long as unsigned in Python", "Calculate weighted average using a pandas/dataframe", "Python BeautifulSoup how to get the index or of the HTML table", "Create a summary Pandas DataFrame using concat/append via a for loop", "Python; Search and Replace; Lists; Strings", "Rolling mean with customized window with Pandas", "remove dictionary from list in pandas colum", "Power set and Cartesian Product of a set python", "How can a class that inherits from list and uses keyword arguments be made to work in both Python 2 and Python 3?", "Turning binary string into an image with PIL", "Filtering for row-wise patterns in columns with a sequence of 0 and 1", "Python string extraction from Subprocess", "Computing the Difference between two graphs 'edge wise' in networkx", "Extracting URL parameters into Pandas DataFrame", "Writing NetCDF time variable from start of year", "Computing 16-bit checksum of ICMPv6 header", "how to goup items in a list of dictionaries by matching values \u200b\u200bin python", "How to automatically rerun a python program after it finishes? Supervisord?", "How to implement man-like help page in python(python shell already has it)", "Pygame- Sprite set position with mouseclick", "Getting the key and value of br.forms() in Mechanize", "Run multiple threads until one exits in python", "How to convert a GEOS MultiLineString to Polygon using Python?", "Sort generated numbers using another python generator", "Compare string in format HH:MM to time now in python", "Numpy: get the column and row index of the minimum value of a 2D array", "Override python logging for test efficiency", "Conditionally disable caching decorator based on instance variable", "Python - Replacing value of a row in a CSV file", "How to get parameter arguments from a frozen spicy.stats distribution?", "Using Twitter Bootstrap radio buttons with Flask", "how to exclude the non numerical integers from a data frame in Python", "How to get a vector from a list in list in python?", "Decimal formatting based on number of digits in integer and decimal parts", "Python Sorting Regular Expression", "pandas count true values in multi-index frame", "Connect to MSSQL Server 2008 on linux", "Python, use \"order by\" inside a \"group concat\" with pandas DataFrame", "How to format inputted data and output it", "Borda Count using python?", "Scikit Learn HMM training with set of observation sequences", "Pythonic way to parse preflib Orders with Ties files", "How to print c_ubyte_Array object in Python", "python union of 2 nested lists with index", "Get object attribute in class based view", "How to Use both Scala and Python in a same Spark project?", "Adding a constant to a closure expression", "Compare two lists in python and print the output", "Separating file extensions using python os.path module", "Comparing two dictionaries in list in python", "Python: How to \"perfectly\" override a dict", "Display menu bar items of IE using Python", "how to groupby pandas dataframe on some condition", "Random rounding to integer in Python", "Persist and fetch data in with block", "Customize sphinxdoc theme", "How to figure out if a word in spelled in alphabetical order in Python", "How do you create a list of values in Python within a certain range?", "How to see if section of python code completes within a given time", "Pandas: Adding conditionally", "Map function and input function parameters", "matplotlib align twinx tick marks", "How do I add space between two variables after a print in Python", "Computer Shut Off Python 3.4", "Django app deployment on nGINX", "Detagging with regex does not catch nested tags", "How to set an attribute to a vector in rpy2", "Set a kind name independently of the model name (App Engine datastore)", "Remove word extension in python", "How to perform re substitutions on <p> tags within a specific class?", "print tuple as number of arguments", "Efficiently finding the shortest path in large graphs", "Python, remove specific columns from file", "How can I vectorize the averaging of 2x2 sub-arrays of numpy array?", "How to generalize a multiplication table for (n * m)", "Finding superstrings in a set of strings in python", "String manipulation in Python (All upper and lower case derivatives of a word)", "How to define a chi2 value function for arbitrary function?", "Loops to minimize function of arrays in python", "Is it possible to map a discontiuous data on disk to an array with python?", "Python regular expression to search for words in a sentence", "In python, return value only when the function is used in an assignment", "Python: Removing random whitespace from a string of numbers", "Ordering a nested dictionary by the frequency of the nested value", "Converting List to Dict", "Allocate items according to an approximate ratio in Python", "Validity of a string based on some conditions", "Convert empty dictionary to empty string", "How do I store multiple copies of the same field in Django?", "Read each word and rest of line in Python?", "Pandas Dataframe - How To Convert Date to Boolean Columns?", "How can i search a array from a large array by numpy", "Python code for counting number of zero crossings in an array", "Scraping website that uses javascript", "Use argparse to call different functions", "take column headers only from ASCII file in python", "Regex for location matching - Python", "Dynamic Table Creation and ORM mapping in SqlAlchemy", "Splitting a dataframe based on column values", "Comparing two pandas dataframes for differences", "python count business weeks", "Python thread-safe access without blocking or uncontrolled queue growth?", "How to create a vector of Matrices in python", "Python line read size in bytes", "Parsing the json file after a specific time interval", "How can I scrape data from a text table using Python?", "packaging with numpy and test suite", "Clean way to manage parse-dictionaries that contain function names", "How do I implement SelectionSort and InsertionSort on a linked list in Python?", "how to properly loop through two files comparing strings in both files against each other", "How to retain &quot; and &apos; while parsing xml using bs4 python", "Pyramid authorization for stored items", "Elegant way to split list on particular values", "Order a NXM Numpy Array according to cumulative sums of each sub-array", "Using regex to find a string starting with /team/ and ending with /Euro_2012", "Python regular expression to remove space and capitalize letters where the space was?", "Using other keys for the waitKey() function of opencv", "take column headers only from ASCII file in python", "Track changes of atributes in instance. Python", "Fastest way to remove subsets of lists from a list in Python", "Django/jQuery: handling template inheritence and JS files loading", "Plone - Override Zope Schema fields", "How to insert a python program into a bash script?", "Get ALL results of a word mapping with a dictionary", "Given an iterable, how to apply a function in every possible combination?", "How do I index n sets of 4 columns to plot multiple plots using matplotlib?", "How to parse Apple's IAP receipt mal-formatted JSON?", "Sum corresponding elements of multiple python dictionaries", "python for loop using lambda syntax", "How can I use python pandas to parse CSV into the format I want?", "Programming contest like input validator", "How to not render a entire string with jinja2", "How do I write a logging middleware for pyramid/pylons 2?", "Padding or truncating a Python list", "Auto validate a function parameter using a method", "Pandas: add dataframes to dataframe - match on index and column value", "Extract a value out of n", "inequality comparison of numpy array with nan to a scalar", "How to separate upper and lower case letters in a string", "Python - workaround with sets", "Multiclass linear SVM in python that return probability", "Python: How to time script from beginning to end?", "Summing similar elements within a tuple-of-tuples", "Sending non-string argument in a POST request to a Tornado server", "How to sort an itertools grouper array in python", "Python get get average of neighbours in matrix with na value", "Splitting a string @ once using different seps", "Remove duplicated string(s) in strings in a list", "Numpy union arrays in order", "matching between two columns and taking value from another in pandas", "How to set a date restriction for returned events in Google Calendar and put them in order - Python", "Following users like twitter in Django, how would you do it?", "How to rename variables in a loop in Python", "How to import classes defined in __init__.py", "Dynamic importing of modules followed by instantiation of objects with a certain baseclass from said modules", "how to write a conditional list comprehension, with \"extend\" functionality", "Numpy union arrays in order", "Replacing strings in specific positions into a text and then rewriting all the text", "Date removed from x axis on overlaid plots matplotlib", "Fast way to find index of array in array of arrays", "Python - list of dicts into function that only accepts *dicts", "how to interpolate points in a specific interval on a plot formed by loading a txt file in to scipy program?", "Python: Automatically initialize instance variables?", "Inversing a twodimensional array in python", "minimize memory consumption when dealing with python list assignment", "Delete newline / return carriage in file output", "Create a Series from a Pandas DataFrame by choosing an element from different columns on each row", "Insert data from one sorted array into another sorted array", "How to convert a python string", "Deleting consonants from a string in Python", "Installing OSQA on windows (local system)", "Method to find substring", "'Remove' command for ND arrays in Python", "How to see traceback on xmlrpc server, not client?", "Regex for location matching - Python", "How to find the index value of a variable in SPSS Python", "pyplot: loglog() with base e", "Use regex backreferences to create array", "Sorting a list with a dictionary at items", "openCV Thresholding negative values", "How to match phone number prefixes?", "Django dynamic model fields", "How to make a field computed only if some condition is fulfilled in Odoo 8?", "Parse multi-line string up until first line with certain character", "Python list comparison to create trees", "Need to read from a file and add the elements and get avg in python 3.4", "Import object from module of same name using __import__", "Diagonals at different points of a 2D list in Python", "Best way to make a counter based on time", "How to exit a supervisor process with fabric file?", "Python Socket Listening", "Sort generated numbers using another python generator", "Make a number more probable to result from random", "PySide custom Tab", "Python: Opening a file within a print() function", "Python unittesting: Test whether two angles are almost equal", "Protection against downloading too big files", "Calling variables from other files in Python", "Pandas OR statement ending in series contains", "matplotlib/python: how to have an area with no values", "Redirect stdout to logger in Python", "Using DataFrame to get matrix of identifiers", "how to extend ambiguous dna sequence", "How to apply an array of functions to a value using list comprehension?", "Uploading files using Django Admin", "Real Hierarchical Builds with SCons?", "Code a loop on a list of delimiters?", "Following users like twitter in Django, how would you do it?", "how to convert value of column defined as character into integer in python", "Lazy class property decorator", "Python : How to create a dynamic list of class values", "Is it possible to delete an entire Webpage when the user navigates away?", "Python Pandas Use if-else to populate new column", "Pythonic way to parse preflib Orders with Ties files", "Remove duplicates in python list but remember the index", "Finding if a number is a perfect square", "Applying python decorators to methods in a class", "Output touch position from custom kivy widget to labels", "Smart filter with python", "Get permutation with specified degree by index number", "Iterate through a list of numpy arrays", "How to count occurrences of specific element for arrays in a list?", "Python find which order element is in in a list", "List to nested dictionary in python", "Execute parsed xml data as command in python", "Replace xml tag contents using python", "Reading files in parallel in python", "Optimizing time series generation", "Extract Text from HTML Python (BeautifulSoup, RE, Other Option?)", "How do I use BeautifulSoup to move tag contents from one soup to a template soup", "Multiple Forms and Formsets in CreateView", "Python: Loop through all nested key-value pairs created by xmltodict", "Python convert single column of data into multiple columns", "multi colored plots in matplotlib plt based on certain properties of data", "Reading serial data in realtime in Python", "detecting POS tag pattern along with specified words", "Beautiful Soup - how to fix broken tags", "how do I concatenate 3 lists using a list comprehension?", "grouping an unknown number of arguments with argparse", "Python: Loop through all nested key-value pairs created by xmltodict", "Python Regex: Optional White Space Around Matching Group", "How to extract literal words from a consecutive string efficiently?", "How to execute and save result of an OS command to a file", "Reading input from raw_input() without having the prompt overwritten by other threads in Python", "How to find first byte of a serial stream with python?", "django object get two fields into a list from a model", "Test if two lists of lists are equal", "Running program/function in background in Python", "Sort NumPy float array column by column", "python matplotlib plot sparse matrix pattern", "How can I get a list of package locations from a PIP requirements file?", "Using a global flag for python RegExp compile", "Outputting Multi-row CSV Files from Multiple Dictionaries", "python- finding total number of items of certain range in a list", "How do I compute all possibilities for an array of numbers/bits (in python, or any language for that matter)", "Django: css referencing media in static files (django dev / 1.3 / static files)", "Python module for playing sound data with progress bar?", "mongo - find items who at least match an array of values", "How to treat a hex as string?", "Get value to 2 attribute from a xpath node for anchor tag", "Print tree without recursion", "Calculate number of jumps in Dijkstra's algorithm?", "two dimensional array for encryption in python", "Counting elements matching a pattern in a tuple of tuples", "Python: Alter elements of a list", "Choose a file starting with a given string", "list comprehension on multiple lists of lists", "Modify a python script with bash and execute it with the changes", "Python: obtain multidimensional matrix as results from a function", "Numpy Compare unequal rows and make both array of same dimension", "Get item with value from tuple in python", "Python regular expression to remove space and capitalize letters where the space was?", "Python module for playing sound data with progress bar?", "Dynamic Table Creation and ORM mapping in SqlAlchemy", "Parse logs containing python tracebacks using logstash", "mongo - find items who at least match an array of values", "Can someone please explain to me the way to calculate the number of bills and coins of change in python?", "Execute a string as a command", "Python: Loop through all nested key-value pairs created by xmltodict", "python + auto ssh proccess to get date info", "Print floating point values without leading zero", "Appium - Clean app state at the first test and last test, but not between tests", "Create a summary Pandas DataFrame using concat/append via a for loop", "two dimensional array for encryption in python", "How could I delete certain columns then write wanted columns into csv python", "Automatically Insert file-modification-time after @date command", "Fill scipy / numpy matrix based on indices and values", "How do I take an integer from a list intending to use it?", "python multiprocessing dynamically created processes and pipes", "Remove a level from a pandas MultiIndex", "python - how to convert a nested list to a list of all individual sub-lists", "How to convert an urlopen into a string in python", "Python: Extract hrefs inside a div", "Addition of multiple arrays in python", "How to map word combinations in python", "Catch Keyboard Interrupt in program that is waiting on an Event", "Can I cleanse a numpy array without a loop?", "finding the greatest Fibonacci number within limited time in python", "Change specific repeating element in .xml using Python", "Best way to work out if a path is in an include or exclude list in python", "Selecting a subset of functions from a list of functions in python", "Python3 Make a list that increments for a certain amount, decrements for a certain amount", "Using lxml to extract data where all elements are not known in advance", "compare list elements", "Pipe delimiter file, but no pipe inside data", "student t confidence interval in python", "how to mask the specific array data based on the shapefile", "How to match integers in NLTK CFG?", "How to calculate cohen's d in Python?", "Override python logging for test efficiency", "Iterate over Python list, preserving structure of embedded lists", "How can I properly join these strings together (by column then row)?", "Check printable for Unicode", "any python min like function which gives a list as result", "Search multiple strings in multiple files", "Pandas: Collapse first n rows in each group by aggregation", "Django: Converting an entire set of a Model's objects into a single dictionary", "Build a Pandas pd.tseries.offsets from timedelta", "display only one logging line", "Get non-contiguous columns from a list of lists", "Detecting geographic clusters", "python construct a dictionary {0: [0, 0, 0], 1: [0, 0, 1], 2: [0, 0, 2], 3: [0, 0, 3], ...,999: [9, 9, 9]}", "Find occurrence using multiple attributes in ElementTree/Python", "How to find ngram frequency of a column in a pandas dataframe?", "Growing matrices columnwise in NumPy", "python 3: Adding .csv column sums in to dictionaries with header keys", "Combine variable and for each loop python", "Efficient ways to duplicate array/list in Python", "How do I run python file without path?", "Python Version Specific Code", "How to uniquefy a list of dicts based on percentage similarity of a value in the dicts", "Passing list of parameters to SQL in psycopg2", "Using TCL extensions to set native window style in Tkinter", "Python - sum variables from a text file", "python list manipulation nesting vertically, making it look like a matrix", "deleting element from python dictionary", "What is a clean, pythonic way to have multiple constructors in Python?", "Slicing and arranging dataframe in pandas", "How to merge item in list", "sklearn decomposition top terms", "parse blocks of text from text file using Python", "Using a loop to make a dictionary", "Python Pandas: Eliminate a row from a dataframe if a value in a any preceding row in a groupby meets a certain criteria", "How to let js make a request from python and preserve the loaded site in place when answered by python", "How to create linux users via my own GUI application in Python?", "Python - how to ignore escape chars in regexp", "How to write small DSL parser with operator module in python", "Escape string to be valid python expression", "How do I convert data from a list of lists to a readable table (or group of columns)?", "Accessing a Dynamically Generated Nested Dictionary", "I dont know how to add Proxy to my Phantomjs script", "Pandas Python: How to create lapse since today column?", "Conditionally and interatively calculate column based on value of three columns", "How to call __setattr__() correctly in Python3 as part of a class?", "Python regex to remove all words which contains number", "Sort Python Dictionary by first four characters in Key", "Python Check a 2d list for empty strings?", "Selecting a random value from a dictionary in python", "Python: how to create a list from elements that don't meet a certain condition", "Parsing structured text file in python", "Conditionally and interatively calculate column based on value of three columns", "How can I create a GUI on top of a Python APP so it can do either GUI or CLI?", "How to chain django query filters to conditionally filter by certain criteria", "Flask : How to update and render a variable periodically?", "writing csv output python", "Spreadsheet Manipulation Tricks w/ Python's Pandas", "Convert a 3D array to 2D array based on dictionary", "List names of all available MS SQL databases on server using python", "Selenium Steam community market listings python", "Multiple drag and drop in PyQt4", "Scrapy - Follow RSS links", "pythonic solution for finding the other element in a list of length two", "Calling C++ class functions from Ruby/Python", "Looking for a concise way to check for point collision in a list of Rects", "How can I get certain text from a website with Python?", "Use map over a list of 50 generated colours to count, using filter, and reduce, or len, the frequency of occurence", "How do I obtain the reference of a getter/setter method created through @property in Python?", "Generate random numbers without using the last n values in Python", "Jinja2 to put a whole element in <option>", "numpy: most efficient frequency counts for unique values in an array", "Finding start and stops of consecutive values block in Python/Numpy/Pandas", "Python - removing items from lists", "Assign differing values to list generator results", "How to extend model on serializer level with django-rest-framework", "Numerical value of a name", "Slicing pandas groupby groups into equal lengths", "How do I make pip available from command line mac?", "(python) prepend script dir to a path", "remove the unicode from the output of JSON using scrapy", "Tipfy & Jinja: Creating a logout URL for every page", "Splitting a list in python", "passing arrays with ctypes", "calling class with user input", "How can you bundle all your python code into a single zip file?"]